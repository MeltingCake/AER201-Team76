

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 22 17:35:18 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           ; Version 1.40
    63                           ; Generated 01/12/2016 GMT
    64                           ; 
    65                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	mediumconst
    98  00FEE6                     __pmediumconst:
    99                           	opt stack 0
   100  00FEE6  00                 	db	0
   101  00FEE7                     _keys:
   102                           	opt stack 0
   103  00FEE7  31                 	db	49
   104  00FEE8  32                 	db	50
   105  00FEE9  33                 	db	51
   106  00FEEA  41                 	db	65
   107  00FEEB  34                 	db	52
   108  00FEEC  35                 	db	53
   109  00FEED  36                 	db	54
   110  00FEEE  42                 	db	66
   111  00FEEF  37                 	db	55
   112  00FEF0  38                 	db	56
   113  00FEF1  39                 	db	57
   114  00FEF2  43                 	db	67
   115  00FEF3  2A                 	db	42
   116  00FEF4  30                 	db	48
   117  00FEF5  23                 	db	35
   118  00FEF6  44                 	db	68
   119  00FEF7  00                 	db	0
   120  00FEF8                     __end_of_keys:
   121                           	opt stack 0
   122  00FEF8                     _dpowers:
   123                           	opt stack 0
   124  00FEF8  0001               	dw	1
   125  00FEFA  000A               	dw	10
   126  00FEFC  0064               	dw	100
   127  00FEFE  03E8               	dw	1000
   128  00FF00  2710               	dw	10000
   129  00FF02                     __end_of_dpowers:
   130                           	opt stack 0
   131  00FF02                     _hexpowers:
   132                           	opt stack 0
   133  00FF02  0001               	dw	1
   134  00FF04  0010               	dw	16
   135  00FF06  0100               	dw	256
   136  00FF08  1000               	dw	4096
   137  00FF0A                     __end_of_hexpowers:
   138                           	opt stack 0
   139  00FF0A                     _statictime:
   140                           	opt stack 0
   141  00FF0A  00                 	db	0
   142  00FF0B  51                 	db	81
   143  00FF0C  14                 	db	20
   144  00FF0D  03                 	db	3
   145  00FF0E  28                 	db	40
   146  00FF0F  02                 	db	2
   147  00FF10  17                 	db	23
   148  00FF11                     __end_of_statictime:
   149                           	opt stack 0
   150  0000                     _ADCON0	set	4034
   151  0000                     _ADCON1	set	4033
   152  0000                     _CMCON	set	4020
   153  0000                     _EEADR	set	4009
   154  0000                     _EEADRH	set	4010
   155  0000                     _EECON1bits	set	4006
   156  0000                     _EECON2	set	4007
   157  0000                     _EEDATA	set	4008
   158  0000                     _INTCONbits	set	4082
   159  0000                     _LATA	set	3977
   160  0000                     _LATAbits	set	3977
   161  0000                     _LATB	set	3978
   162  0000                     _LATBbits	set	3978
   163  0000                     _LATC	set	3979
   164  0000                     _LATCbits	set	3979
   165  0000                     _LATD	set	3980
   166  0000                     _LATDbits	set	3980
   167  0000                     _LATE	set	3981
   168  0000                     _LATEbits	set	3981
   169  0000                     _OSCCON	set	4051
   170  0000                     _PIR2bits	set	4001
   171  0000                     _PORTAbits	set	3968
   172  0000                     _PORTB	set	3969
   173  0000                     _PORTBbits	set	3969
   174  0000                     _PORTCbits	set	3970
   175  0000                     _SSPADD	set	4040
   176  0000                     _SSPBUF	set	4041
   177  0000                     _SSPCON1	set	4038
   178  0000                     _SSPCON2	set	4037
   179  0000                     _SSPSTAT	set	4039
   180  0000                     _TRISA	set	3986
   181  0000                     _TRISB	set	3987
   182  0000                     _TRISC	set	3988
   183  0000                     _TRISD	set	3989
   184  0000                     _TRISE	set	3990
   185  0000                     _ACKDT	set	32301
   186  0000                     _ACKEN	set	32300
   187  0000                     _INT1IE	set	32643
   188  0000                     _INT1IF	set	32640
   189  0000                     _PEN	set	32298
   190  0000                     _RCEN	set	32299
   191  0000                     _RSEN	set	32297
   192  0000                     _SEN	set	32296
   193  0000                     _TRISC3	set	31907
   194  0000                     _TRISC4	set	31908
   195  00FF11                     STR_4:
   196  00FF11  25                 	db	37
   197  00FF12  30                 	db	48	;'0'
   198  00FF13  33                 	db	51	;'3'
   199  00FF14  64                 	db	100	;'d'
   200  00FF15  20                 	db	32
   201  00FF16  20                 	db	32
   202  00FF17  20                 	db	32
   203  00FF18  20                 	db	32
   204  00FF19  20                 	db	32
   205  00FF1A  20                 	db	32
   206  00FF1B  20                 	db	32
   207  00FF1C  20                 	db	32
   208  00FF1D  20                 	db	32
   209  00FF1E  20                 	db	32
   210  00FF1F  20                 	db	32
   211  00FF20  20                 	db	32
   212  00FF21  20                 	db	32
   213  00FF22  20                 	db	32
   214  00FF23  00                 	db	0
   215  00FF24                     STR_7:
   216  00FF24  61                 	db	97	;'a'
   217  00FF25  4E                 	db	78	;'N'
   218  00FF26  25                 	db	37
   219  00FF27  64                 	db	100	;'d'
   220  00FF28  2F                 	db	47
   221  00FF29  61                 	db	97	;'a'
   222  00FF2A  25                 	db	37
   223  00FF2B  64                 	db	100	;'d'
   224  00FF2C  2F                 	db	47
   225  00FF2D  73                 	db	115	;'s'
   226  00FF2E  4E                 	db	78	;'N'
   227  00FF2F  25                 	db	37
   228  00FF30  64                 	db	100	;'d'
   229  00FF31  2F                 	db	47
   230  00FF32  53                 	db	83	;'S'
   231  00FF33  25                 	db	37
   232  00FF34  64                 	db	100	;'d'
   233  00FF35  00                 	db	0
   234  00FF36                     STR_12:
   235  00FF36  45                 	db	69	;'E'
   236  00FF37  78                 	db	120	;'x'
   237  00FF38  65                 	db	101	;'e'
   238  00FF39  63                 	db	99	;'c'
   239  00FF3A  75                 	db	117	;'u'
   240  00FF3B  74                 	db	116	;'t'
   241  00FF3C  69                 	db	105	;'i'
   242  00FF3D  6E                 	db	110	;'n'
   243  00FF3E  67                 	db	103	;'g'
   244  00FF3F  20                 	db	32
   245  00FF40  20                 	db	32
   246  00FF41  20                 	db	32
   247  00FF42  20                 	db	32
   248  00FF43  25                 	db	37
   249  00FF44  30                 	db	48	;'0'
   250  00FF45  33                 	db	51	;'3'
   251  00FF46  64                 	db	100	;'d'
   252  00FF47  00                 	db	0
   253  00FF48                     STR_17:
   254  00FF48  30                 	db	48	;'0'
   255  00FF49  31                 	db	49	;'1'
   256  00FF4A  32                 	db	50	;'2'
   257  00FF4B  33                 	db	51	;'3'
   258  00FF4C  34                 	db	52	;'4'
   259  00FF4D  35                 	db	53	;'5'
   260  00FF4E  36                 	db	54	;'6'
   261  00FF4F  37                 	db	55	;'7'
   262  00FF50  38                 	db	56	;'8'
   263  00FF51  39                 	db	57	;'9'
   264  00FF52  61                 	db	97	;'a'
   265  00FF53  62                 	db	98	;'b'
   266  00FF54  63                 	db	99	;'c'
   267  00FF55  64                 	db	100	;'d'
   268  00FF56  65                 	db	101	;'e'
   269  00FF57  66                 	db	102	;'f'
   270  00FF58  00                 	db	0
   271  00FF59                     STR_10:
   272  00FF59  30                 	db	48	;'0'
   273  00FF5A  3A                 	db	58	;':'
   274  00FF5B  4D                 	db	77	;'M'
   275  00FF5C  65                 	db	101	;'e'
   276  00FF5D  6E                 	db	110	;'n'
   277  00FF5E  75                 	db	117	;'u'
   278  00FF5F  20                 	db	32
   279  00FF60  20                 	db	32
   280  00FF61  20                 	db	32
   281  00FF62  20                 	db	32
   282  00FF63  20                 	db	32
   283  00FF64  20                 	db	32
   284  00FF65  20                 	db	32
   285  00FF66  20                 	db	32
   286  00FF67  20                 	db	32
   287  00FF68  20                 	db	32
   288  00FF69  00                 	db	0
   289  00FF6A                     STR_8:
   290  00FF6A  46                 	db	70	;'F'
   291  00FF6B  69                 	db	105	;'i'
   292  00FF6C  6E                 	db	110	;'n'
   293  00FF6D  69                 	db	105	;'i'
   294  00FF6E  73                 	db	115	;'s'
   295  00FF6F  68                 	db	104	;'h'
   296  00FF70  65                 	db	101	;'e'
   297  00FF71  64                 	db	100	;'d'
   298  00FF72  20                 	db	32
   299  00FF73  20                 	db	32
   300  00FF74  20                 	db	32
   301  00FF75  20                 	db	32
   302  00FF76  20                 	db	32
   303  00FF77  20                 	db	32
   304  00FF78  20                 	db	32
   305  00FF79  20                 	db	32
   306  00FF7A  00                 	db	0
   307  00FF7B                     STR_9:
   308  00FF7B  54                 	db	84	;'T'
   309  00FF7C  65                 	db	101	;'e'
   310  00FF7D  72                 	db	114	;'r'
   311  00FF7E  6D                 	db	109	;'m'
   312  00FF7F  69                 	db	105	;'i'
   313  00FF80  6E                 	db	110	;'n'
   314  00FF81  61                 	db	97	;'a'
   315  00FF82  74                 	db	116	;'t'
   316  00FF83  65                 	db	101	;'e'
   317  00FF84  64                 	db	100	;'d'
   318  00FF85  20                 	db	32
   319  00FF86  20                 	db	32
   320  00FF87  20                 	db	32
   321  00FF88  20                 	db	32
   322  00FF89  20                 	db	32
   323  00FF8A  20                 	db	32
   324  00FF8B  00                 	db	0
   325  00FF8C                     STR_6:
   326  00FF8C  45                 	db	69	;'E'
   327  00FF8D  78                 	db	120	;'x'
   328  00FF8E  65                 	db	101	;'e'
   329  00FF8F  63                 	db	99	;'c'
   330  00FF90  75                 	db	117	;'u'
   331  00FF91  74                 	db	116	;'t'
   332  00FF92  69                 	db	105	;'i'
   333  00FF93  6E                 	db	110	;'n'
   334  00FF94  67                 	db	103	;'g'
   335  00FF95  2E                 	db	46
   336  00FF96  2E                 	db	46
   337  00FF97  2E                 	db	46
   338  00FF98  20                 	db	32
   339  00FF99  20                 	db	32
   340  00FF9A  20                 	db	32
   341  00FF9B  20                 	db	32
   342  00FF9C  00                 	db	0
   343  00FF9D                     STR_5:
   344  00FF9D  31                 	db	49	;'1'
   345  00FF9E  3A                 	db	58	;':'
   346  00FF9F  50                 	db	80	;'P'
   347  00FFA0  72                 	db	114	;'r'
   348  00FFA1  65                 	db	101	;'e'
   349  00FFA2  76                 	db	118	;'v'
   350  00FFA3  20                 	db	32
   351  00FFA4  30                 	db	48	;'0'
   352  00FFA5  3A                 	db	58	;':'
   353  00FFA6  45                 	db	69	;'E'
   354  00FFA7  78                 	db	120	;'x'
   355  00FFA8  69                 	db	105	;'i'
   356  00FFA9  74                 	db	116	;'t'
   357  00FFAA  20                 	db	32
   358  00FFAB  20                 	db	32
   359  00FFAC  20                 	db	32
   360  00FFAD  00                 	db	0
   361  00FFAE                     STR_3:
   362  00FFAE  31                 	db	49	;'1'
   363  00FFAF  3A                 	db	58	;':'
   364  00FFB0  53                 	db	83	;'S'
   365  00FFB1  74                 	db	116	;'t'
   366  00FFB2  61                 	db	97	;'a'
   367  00FFB3  72                 	db	114	;'r'
   368  00FFB4  74                 	db	116	;'t'
   369  00FFB5  20                 	db	32
   370  00FFB6  32                 	db	50	;'2'
   371  00FFB7  3A                 	db	58	;':'
   372  00FFB8  4C                 	db	76	;'L'
   373  00FFB9  6F                 	db	111	;'o'
   374  00FFBA  67                 	db	103	;'g'
   375  00FFBB  73                 	db	115	;'s'
   376  00FFBC  20                 	db	32
   377  00FFBD  20                 	db	32
   378  00FFBE  00                 	db	0
   379  00FFBF                     STR_1:
   380  00FFBF  25                 	db	37
   381  00FFC0  30                 	db	48	;'0'
   382  00FFC1  32                 	db	50	;'2'
   383  00FFC2  78                 	db	120	;'x'
   384  00FFC3  2F                 	db	47
   385  00FFC4  25                 	db	37
   386  00FFC5  30                 	db	48	;'0'
   387  00FFC6  31                 	db	49	;'1'
   388  00FFC7  78                 	db	120	;'x'
   389  00FFC8  2F                 	db	47
   390  00FFC9  25                 	db	37
   391  00FFCA  30                 	db	48	;'0'
   392  00FFCB  32                 	db	50	;'2'
   393  00FFCC  78                 	db	120	;'x'
   394  00FFCD  20                 	db	32
   395  00FFCE  00                 	db	0
   396  00FFCF                     STR_14:
   397  00FFCF  25                 	db	37
   398  00FFD0  30                 	db	48	;'0'
   399  00FFD1  32                 	db	50	;'2'
   400  00FFD2  78                 	db	120	;'x'
   401  00FFD3  25                 	db	37
   402  00FFD4  30                 	db	48	;'0'
   403  00FFD5  32                 	db	50	;'2'
   404  00FFD6  78                 	db	120	;'x'
   405  00FFD7  2F                 	db	47
   406  00FFD8  25                 	db	37
   407  00FFD9  30                 	db	48	;'0'
   408  00FFDA  32                 	db	50	;'2'
   409  00FFDB  78                 	db	120	;'x'
   410  00FFDC  20                 	db	32
   411  00FFDD  00                 	db	0
   412  00FFDE                     STR_2:
   413  00FFDE  25                 	db	37
   414  00FFDF  30                 	db	48	;'0'
   415  00FFE0  32                 	db	50	;'2'
   416  00FFE1  78                 	db	120	;'x'
   417  00FFE2  3A                 	db	58	;':'
   418  00FFE3  25                 	db	37
   419  00FFE4  30                 	db	48	;'0'
   420  00FFE5  32                 	db	50	;'2'
   421  00FFE6  78                 	db	120	;'x'
   422  00FFE7  3A                 	db	58	;':'
   423  00FFE8  25                 	db	37
   424  00FFE9  30                 	db	48	;'0'
   425  00FFEA  32                 	db	50	;'2'
   426  00FFEB  78                 	db	120	;'x'
   427  00FFEC  00                 	db	0
   428  00FFED                     STR_13:
   429  00FFED  67                 	db	103	;'g'
   430  00FFEE  6F                 	db	111	;'o'
   431  00FFEF  69                 	db	105	;'i'
   432  00FFF0  6E                 	db	110	;'n'
   433  00FFF1  67                 	db	103	;'g'
   434  00FFF2  20                 	db	32
   435  00FFF3  64                 	db	100	;'d'
   436  00FFF4  65                 	db	101	;'e'
   437  00FFF5  62                 	db	98	;'b'
   438  00FFF6  75                 	db	117	;'u'
   439  00FFF7  67                 	db	103	;'g'
   440  00FFF8  00                 	db	0
   441  00FFF9                     STR_11:
   442  00FFF9  65                 	db	101	;'e'
   443  00FFFA  72                 	db	114	;'r'
   444  00FFFB  72                 	db	114	;'r'
   445  00FFFC  6F                 	db	111	;'o'
   446  00FFFD  72                 	db	114	;'r'
   447  00FFFE  00                 	db	0
   448  0000                     
   449                           ; #config settings
   450  00FFFF  00                 	db	0	; dummy byte at the end
   451  0000                     
   452                           	psect	cinit
   453  0015C2                     __pcinit:
   454                           	opt stack 0
   455  0015C2                     start_initialization:
   456                           	opt stack 0
   457  0015C2                     __initialization:
   458                           	opt stack 0
   459                           
   460                           ; Clear objects allocated to BANK0 (14 bytes)
   461  0015C2  EE00  F0AE         	lfsr	0,__pbssBANK0
   462  0015C6  0E0E               	movlw	14
   463  0015C8                     clear_0:
   464  0015C8  6AEE               	clrf	postinc0,c
   465  0015CA  06E8               	decf	wreg,f,c
   466  0015CC  E1FD               	bnz	clear_0
   467                           
   468                           ; Clear objects allocated to COMRAM (26 bytes)
   469  0015CE  EE00  F041         	lfsr	0,__pbssCOMRAM
   470  0015D2  0E1A               	movlw	26
   471  0015D4                     clear_1:
   472  0015D4  6AEE               	clrf	postinc0,c
   473  0015D6  06E8               	decf	wreg,f,c
   474  0015D8  E1FD               	bnz	clear_1
   475  0015DA                     end_of_initialization:
   476                           	opt stack 0
   477  0015DA                     __end_of__initialization:
   478                           	opt stack 0
   479  0015DA  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   480  0015DC  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   481  0015DE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   482  0015E0  6EF8               	movwf	tblptru,c
   483  0015E2  0100               	movlb	0
   484  0015E4  EFCD  F007         	goto	_main	;jump to C main() function
   485                           tblptru	equ	0xFF8
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           
   489                           	psect	bssCOMRAM
   490  000041                     __pbssCOMRAM:
   491                           	opt stack 0
   492  000041                     _alNoTab:
   493                           	opt stack 0
   494  000041                     	ds	2
   495  000043                     _alTab:
   496                           	opt stack 0
   497  000043                     	ds	2
   498  000045                     _runResult:
   499                           	opt stack 0
   500  000045                     	ds	2
   501  000047                     _snLabel:
   502                           	opt stack 0
   503  000047                     	ds	2
   504  000049                     _snNoLabel:
   505                           	opt stack 0
   506  000049                     	ds	2
   507  00004B                     _state:
   508                           	opt stack 0
   509  00004B                     	ds	1
   510  00004C                     _time:
   511                           	opt stack 0
   512  00004C                     	ds	14
   513  00005A                     _logdata:
   514                           	opt stack 0
   515  00005A                     	ds	1
   516                           tblptru	equ	0xFF8
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           
   520                           	psect	bssBANK0
   521  0000AE                     __pbssBANK0:
   522                           	opt stack 0
   523  0000AE                     _starttime:
   524                           	opt stack 0
   525  0000AE                     	ds	14
   526                           tblptru	equ	0xFF8
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           	psect	cstackBANK0
   531  000080                     __pcstackBANK0:
   532                           	opt stack 0
   533  000080                     executingState@runCanSn:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x0
   537  000080                     	ds	2
   538  000082                     executingState@runCanAl:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x2
   542  000082                     	ds	2
   543  000084                     executingState@h_ten:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x4
   547  000084                     	ds	2
   548  000086                     executingState@h_one:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x6
   552  000086                     	ds	2
   553  000088                     executingState@m_ten:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x8
   557  000088                     	ds	2
   558  00008A                     executingState@m_one:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0xA
   562  00008A                     	ds	2
   563  00008C                     executingState@s_ten:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0xC
   567  00008C                     	ds	2
   568  00008E                     executingState@s_one:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0xE
   572  00008E                     	ds	2
   573  000090                     _executingState$1732:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x10
   577  000090                     	ds	2
   578  000092                     _executingState$1733:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x12
   582  000092                     	ds	2
   583  000094                     executingState@res:
   584                           	opt stack 0
   585                           
   586                           ; 8 bytes @ 0x14
   587  000094                     	ds	8
   588  00009C                     executingState@start_s:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x1C
   592  00009C                     	ds	2
   593  00009E                     executingState@hasTab:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x1E
   597  00009E                     	ds	2
   598  0000A0                     executingState@timedif:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x20
   602  0000A0                     	ds	2
   603  0000A2                     executingState@hasLabel:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x22
   607  0000A2                     	ds	2
   608  0000A4                     executingState@snLoaded:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x24
   612  0000A4                     	ds	2
   613  0000A6                     executingState@alLoaded:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x26
   617  0000A6                     	ds	2
   618  0000A8                     executingState@snInSensor:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x28
   622  0000A8                     	ds	2
   623  0000AA                     executingState@alInSensor:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x2A
   627  0000AA                     	ds	2
   628  0000AC                     executingState@emptyCount:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x2C
   632  0000AC                     	ds	2
   633                           tblptru	equ	0xFF8
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           
   637                           	psect	cstackCOMRAM
   638  000001                     __pcstackCOMRAM:
   639                           	opt stack 0
   640  000001                     ??_keypressed:
   641  000001                     
   642                           ; 1 bytes @ 0x0
   643  000001                     	ds	14
   644  00000F                     keypressed@keypress:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0xE
   648  00000F                     	ds	1
   649  000010                     ??_isdigit:
   650  000010                     ??_I2C_Master_Wait:
   651  000010                     ?_readSnTop:
   652                           	opt stack 0
   653  000010                     ?_readAlTop:
   654                           	opt stack 0
   655  000010                     ?_readSnBot:
   656                           	opt stack 0
   657  000010                     ?_readAlBot:
   658                           	opt stack 0
   659  000010                     ?_readSnSensor:
   660                           	opt stack 0
   661  000010                     ?_servoRotateArm:
   662                           	opt stack 0
   663  000010                     ?_readKey:
   664                           	opt stack 0
   665  000010                     ?___wmul:
   666                           	opt stack 0
   667  000010                     ?___lwdiv:
   668                           	opt stack 0
   669  000010                     ?___lldiv:
   670                           	opt stack 0
   671  000010                     lcdNibble@temp:
   672                           	opt stack 0
   673  000010                     eeprom_ReadByte@address:
   674                           	opt stack 0
   675  000010                     eeprom_WriteByte@address:
   676                           	opt stack 0
   677  000010                     servoRotate4@angle:
   678                           	opt stack 0
   679  000010                     servoRotate0@servo:
   680                           	opt stack 0
   681  000010                     servoRotate90@servo:
   682                           	opt stack 0
   683  000010                     servoRotate90n@servo:
   684                           	opt stack 0
   685  000010                     ___wmul@multiplier:
   686                           	opt stack 0
   687  000010                     ___lwdiv@dividend:
   688                           	opt stack 0
   689  000010                     ___lldiv@dividend:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0xF
   693  000010                     	ds	1
   694  000011                     I2C_Master_Read@a:
   695                           	opt stack 0
   696  000011                     lcdNibble@data:
   697                           	opt stack 0
   698  000011                     _isdigit$1339:
   699                           	opt stack 0
   700  000011                     I2C_Master_Write@d:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x10
   704  000011                     	ds	1
   705  000012                     ??_servoRotate0:
   706  000012                     ??_servoRotate4:
   707  000012                     ??_servoRotate90n:
   708  000012                     ??_servoRotate90:
   709  000012                     ??_servoRotateArm:
   710  000012                     I2C_Master_Read@temp:
   711                           	opt stack 0
   712  000012                     lcdInst@data:
   713                           	opt stack 0
   714  000012                     putch@data:
   715                           	opt stack 0
   716  000012                     readKey@keypress:
   717                           	opt stack 0
   718  000012                     eeprom_WriteByte@data:
   719                           	opt stack 0
   720  000012                     isdigit@c:
   721                           	opt stack 0
   722  000012                     eeprom_GetLog@back:
   723                           	opt stack 0
   724  000012                     ___wmul@multiplicand:
   725                           	opt stack 0
   726  000012                     ___lwdiv@divisor:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x11
   730  000012                     	ds	1
   731  000013                     ??_initLCD:
   732  000013                     readKey@i:
   733                           	opt stack 0
   734  000013                     eeprom_LogResult@data:
   735                           	opt stack 0
   736  000013                     get_time@time:
   737                           	opt stack 0
   738  000013                     servoRotate4@i:
   739                           	opt stack 0
   740  000013                     servoRotateArm@res:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x12
   744  000013                     	ds	1
   745  000014                     ___lwdiv@counter:
   746                           	opt stack 0
   747  000014                     eeprom_GetLog@res:
   748                           	opt stack 0
   749  000014                     servoRotate0@i:
   750                           	opt stack 0
   751  000014                     servoRotate90@i:
   752                           	opt stack 0
   753  000014                     servoRotate90n@i:
   754                           	opt stack 0
   755  000014                     ___wmul@product:
   756                           	opt stack 0
   757  000014                     ___lldiv@divisor:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x13
   761  000014                     	ds	1
   762  000015                     ??_get_time:
   763  000015                     eeprom_LogResult@address:
   764                           	opt stack 0
   765  000015                     servoRotateArm@i_1035:
   766                           	opt stack 0
   767  000015                     ___lwdiv@quotient:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x14
   771  000015                     	ds	1
   772  000016                     ??_dispenseSnCan:
   773  000016                     ??_dispenseAlCan:
   774  000016                     ??_eeprom_GetLog:
   775  000016                     eeprom_LogResult@i:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x15
   779  000016                     	ds	1
   780  000017                     ?___lwmod:
   781                           	opt stack 0
   782  000017                     get_time@i:
   783                           	opt stack 0
   784  000017                     ___lwmod@dividend:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x16
   788  000017                     	ds	1
   789  000018                     ?_get_timeDif:
   790                           	opt stack 0
   791  000018                     eeprom_GetLog@address:
   792                           	opt stack 0
   793  000018                     get_timeDif@start:
   794                           	opt stack 0
   795  000018                     ___lldiv@quotient:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x17
   799  000018                     	ds	1
   800  000019                     eeprom_GetLog@i:
   801                           	opt stack 0
   802  000019                     ___lwmod@divisor:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x18
   806  000019                     	ds	1
   807  00001A                     ??_get_timeDif:
   808                           
   809                           ; 1 bytes @ 0x19
   810  00001A                     	ds	1
   811  00001B                     ___lwmod@counter:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x1A
   815  00001B                     	ds	1
   816  00001C                     ?_printf:
   817                           	opt stack 0
   818  00001C                     ___lldiv@counter:
   819                           	opt stack 0
   820  00001C                     printf@f:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x1B
   824  00001C                     	ds	1
   825  00001D                     get_timeDif@h_ten:
   826                           	opt stack 0
   827  00001D                     I2C_Master_Init@c:
   828                           	opt stack 0
   829                           
   830                           ; 4 bytes @ 0x1C
   831  00001D                     	ds	2
   832  00001F                     get_timeDif@h_one:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x1E
   836  00001F                     	ds	2
   837  000021                     ??_I2C_Master_Init:
   838  000021                     get_timeDif@m_ten:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x20
   842  000021                     	ds	2
   843  000023                     get_timeDif@m_one:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x22
   847  000023                     	ds	2
   848  000025                     get_timeDif@s_ten:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x24
   852  000025                     	ds	1
   853  000026                     ??_printf:
   854                           
   855                           ; 1 bytes @ 0x25
   856  000026                     	ds	1
   857  000027                     get_timeDif@s_one:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x26
   861  000027                     	ds	2
   862  000029                     get_timeDif@start_s:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x28
   866  000029                     	ds	1
   867  00002A                     printf@idx:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x29
   871  00002A                     	ds	1
   872  00002B                     printf@ap:
   873                           	opt stack 0
   874  00002B                     _get_timeDif$1730:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x2A
   878  00002B                     	ds	2
   879  00002D                     printf@prec:
   880                           	opt stack 0
   881  00002D                     _get_timeDif$1731:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x2C
   885  00002D                     	ds	1
   886  00002E                     printf@val:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x2D
   890  00002E                     	ds	2
   891  000030                     printf@flag:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x2F
   895  000030                     	ds	1
   896  000031                     printf@width:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x30
   900  000031                     	ds	2
   901  000033                     printf@c:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x32
   905  000033                     	ds	1
   906  000034                     ??_executingState:
   907  000034                     ??_finishState:
   908  000034                     ??_fixLCD:
   909  000034                     mainState@keypress:
   910                           	opt stack 0
   911  000034                     logState@log:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x33
   915  000034                     	ds	1
   916  000035                     fixLCD@i:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x34
   920  000035                     	ds	1
   921  000036                     finishState@keypress:
   922                           	opt stack 0
   923  000036                     logState@keypress:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x35
   927  000036                     	ds	1
   928  000037                     fixLCD@time:
   929                           	opt stack 0
   930                           
   931                           ; 7 bytes @ 0x36
   932  000037                     	ds	7
   933  00003E                     fixLCD@j:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x3D
   937  00003E                     	ds	2
   938  000040                     fixLCD@i_584:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x3F
   942  000040                     	ds	1
   943  000041                     tblptru	equ	0xFF8
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           
   947                           ; 1 bytes @ 0x40
   948 ;;
   949 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   950 ;;
   951 ;; *************** function _main *****************
   952 ;; Defined at:
   953 ;;		line 415 in file "main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;		None
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;Total ram usage:        0 bytes
   972 ;; Hardware stack levels required when called:    6
   973 ;; This function calls:
   974 ;;		_I2C_Master_Init
   975 ;;		_debugState
   976 ;;		_eeprom_initialize
   977 ;;		_executingState
   978 ;;		_finishState
   979 ;;		_fixLCD
   980 ;;		_initLCD
   981 ;;		_logState
   982 ;;		_mainState
   983 ;; This function is called by:
   984 ;;		Startup code after reset
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text0
   989  000F9A                     __ptext0:
   990                           	opt stack 0
   991  000F9A                     _main:
   992                           	opt stack 25
   993                           
   994                           ;main.c: 418: fixLCD();
   995                           
   996                           ;incstack = 0
   997  000F9A  EC36  F004         	call	_fixLCD	;wreg free
   998                           
   999                           ;main.c: 420: OSCCON = 0xF0;
  1000  000F9E  0EF0               	movlw	240
  1001  000FA0  6ED3               	movwf	4051,c	;volatile
  1002                           
  1003                           ;main.c: 426: TRISA = 0b00001111;
  1004  000FA2  0E0F               	movlw	15
  1005  000FA4  6E92               	movwf	3986,c	;volatile
  1006                           
  1007                           ;main.c: 427: TRISB = 0b11110010;
  1008  000FA6  0EF2               	movlw	242
  1009  000FA8  6E93               	movwf	3987,c	;volatile
  1010                           
  1011                           ;main.c: 428: TRISC = 0b00011011;
  1012  000FAA  0E1B               	movlw	27
  1013  000FAC  6E94               	movwf	3988,c	;volatile
  1014                           
  1015                           ;main.c: 429: TRISD = 0x00;
  1016  000FAE  0E00               	movlw	0
  1017  000FB0  6E95               	movwf	3989,c	;volatile
  1018                           
  1019                           ;main.c: 430: TRISE = 0x00;
  1020  000FB2  0E00               	movlw	0
  1021  000FB4  6E96               	movwf	3990,c	;volatile
  1022                           
  1023                           ;main.c: 432: LATA = 0x00;
  1024  000FB6  0E00               	movlw	0
  1025  000FB8  6E89               	movwf	3977,c	;volatile
  1026                           
  1027                           ;main.c: 433: LATB = 0x00;
  1028  000FBA  0E00               	movlw	0
  1029  000FBC  6E8A               	movwf	3978,c	;volatile
  1030                           
  1031                           ;main.c: 434: LATC = 0x00;
  1032  000FBE  0E00               	movlw	0
  1033  000FC0  6E8B               	movwf	3979,c	;volatile
  1034                           
  1035                           ;main.c: 435: LATD = 0x00;
  1036  000FC2  0E00               	movlw	0
  1037  000FC4  6E8C               	movwf	3980,c	;volatile
  1038                           
  1039                           ;main.c: 436: LATE = 0x00;
  1040  000FC6  0E00               	movlw	0
  1041  000FC8  6E8D               	movwf	3981,c	;volatile
  1042                           
  1043                           ;main.c: 438: ADCON0 = 0x00;
  1044  000FCA  0E00               	movlw	0
  1045  000FCC  6EC2               	movwf	4034,c	;volatile
  1046                           
  1047                           ;main.c: 439: ADCON1 = 0x0F;
  1048  000FCE  0E0F               	movlw	15
  1049  000FD0  6EC1               	movwf	4033,c	;volatile
  1050                           
  1051                           ;main.c: 440: CMCON = 0x07;
  1052  000FD2  0E07               	movlw	7
  1053  000FD4  6EB4               	movwf	4020,c	;volatile
  1054                           
  1055                           ;main.c: 443: initLCD();
  1056  000FD6  EC1C  F00A         	call	_initLCD	;wreg free
  1057                           
  1058                           ;main.c: 444: eeprom_initialize();
  1059  000FDA  EC3C  F00B         	call	_eeprom_initialize	;wreg free
  1060                           
  1061                           ;main.c: 445: I2C_Master_Init(10000);
  1062  000FDE  0E10               	movlw	16
  1063  000FE0  6E1D               	movwf	I2C_Master_Init@c,c
  1064  000FE2  0E27               	movlw	39
  1065  000FE4  6E1E               	movwf	I2C_Master_Init@c+1,c
  1066  000FE6  0E00               	movlw	0
  1067  000FE8  6E1F               	movwf	I2C_Master_Init@c+2,c
  1068  000FEA  0E00               	movlw	0
  1069  000FEC  6E20               	movwf	I2C_Master_Init@c+3,c
  1070  000FEE  EC06  F009         	call	_I2C_Master_Init	;wreg free
  1071                           
  1072                           ;main.c: 447: INT1IE = 1;
  1073  000FF2  86F0               	bsf	intcon3,3,c	;volatile
  1074                           
  1075                           ;main.c: 448: (INTCONbits.GIE = 0);
  1076  000FF4  9EF2               	bcf	intcon,7,c	;volatile
  1077                           
  1078                           ;main.c: 450: state = MAIN;
  1079  000FF6  0E00               	movlw	0
  1080  000FF8  6E4B               	movwf	_state,c
  1081                           
  1082                           ;main.c: 457: {
  1083                           ;main.c: 458: switch (state)
  1084                           
  1085                           ;main.c: 456: while (1)
  1086  000FFA  D00E               	goto	l4486
  1087  000FFC                     l4474:
  1088                           
  1089                           ;main.c: 461: mainState();
  1090  000FFC  ECD4  F009         	call	_mainState	;wreg free
  1091                           
  1092                           ;main.c: 462: break;
  1093  001000  D00B               	goto	l4486
  1094  001002                     l4476:
  1095                           
  1096                           ;main.c: 464: executingState();
  1097  001002  EC09  F000         	call	_executingState	;wreg free
  1098                           
  1099                           ;main.c: 465: break;
  1100  001006  D008               	goto	l4486
  1101  001008                     l4478:
  1102                           
  1103                           ;main.c: 467: finishState();
  1104  001008  EC7E  F00A         	call	_finishState	;wreg free
  1105                           
  1106                           ;main.c: 468: break;
  1107  00100C  D005               	goto	l4486
  1108  00100E                     l4480:
  1109                           
  1110                           ;main.c: 470: logState();
  1111  00100E  EC87  F009         	call	_logState	;wreg free
  1112                           
  1113                           ;main.c: 471: break;
  1114  001012  D002               	goto	l4486
  1115  001014                     l4482:
  1116                           
  1117                           ;main.c: 473: debugState();
  1118  001014  ECCB  F00A         	call	_debugState	;wreg free
  1119  001018                     l4486:
  1120  001018  504B               	movf	_state,w,c
  1121                           
  1122                           ; Switch size 1, requested type "space"
  1123                           ; Number of cases is 5, Range of values is 0 to 5
  1124                           ; switch strategies available:
  1125                           ; Name         Instructions Cycles
  1126                           ; simple_byte           16     9 (average)
  1127                           ;	Chosen strategy is simple_byte
  1128  00101A  0A00               	xorlw	0	; case 0
  1129  00101C  B4D8               	btfsc	status,2,c
  1130  00101E  D7EE               	goto	l4474
  1131  001020  0A01               	xorlw	1	; case 1
  1132  001022  B4D8               	btfsc	status,2,c
  1133  001024  D7EE               	goto	l4476
  1134  001026  0A03               	xorlw	3	; case 2
  1135  001028  B4D8               	btfsc	status,2,c
  1136  00102A  D7EE               	goto	l4478
  1137  00102C  0A01               	xorlw	1	; case 3
  1138  00102E  B4D8               	btfsc	status,2,c
  1139  001030  D7EE               	goto	l4480
  1140  001032  0A06               	xorlw	6	; case 5
  1141  001034  B4D8               	btfsc	status,2,c
  1142  001036  D7EE               	goto	l4482
  1143  001038  D7EF               	goto	l4486
  1144  00103A                     __end_of_main:
  1145                           	opt stack 0
  1146                           tblptru	equ	0xFF8
  1147                           intcon	equ	0xFF2
  1148                           intcon3	equ	0xFF0
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _mainState *****************
  1154 ;; Defined at:
  1155 ;;		line 121 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;  keypress        2   51[COMRAM] int 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;Total ram usage:        2 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    5
  1176 ;; This function calls:
  1177 ;;		_get_time
  1178 ;;		_readKey
  1179 ;;		_update_lcd
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text1
  1186  0013A8                     __ptext1:
  1187                           	opt stack 0
  1188  0013A8                     _mainState:
  1189                           	opt stack 25
  1190                           
  1191                           ;main.c: 123: LATBbits.LATB0 = 1;
  1192                           
  1193                           ;incstack = 0
  1194  0013A8  808A               	bsf	3978,0,c	;volatile
  1195                           
  1196                           ;main.c: 124: LATCbits.LATC6 = 0;
  1197  0013AA  9C8B               	bcf	3979,6,c	;volatile
  1198  0013AC                     l4098:
  1199                           
  1200                           ;main.c: 126: {
  1201                           ;main.c: 128: get_time(time);
  1202  0013AC  0E4C               	movlw	low _time
  1203  0013AE  6E13               	movwf	get_time@time,c
  1204  0013B0  0E00               	movlw	high _time
  1205  0013B2  6E14               	movwf	get_time@time+1,c
  1206  0013B4  EC1D  F008         	call	_get_time	;wreg free
  1207                           
  1208                           ;main.c: 129: update_lcd();
  1209  0013B8  ECB1  F005         	call	_update_lcd	;wreg free
  1210                           
  1211                           ;main.c: 131: int keypress = readKey();
  1212  0013BC  ECF8  F009         	call	_readKey	;wreg free
  1213  0013C0  C010  F034         	movff	?_readKey,mainState@keypress
  1214  0013C4  C011  F035         	movff	?_readKey+1,mainState@keypress+1
  1215                           
  1216                           ;main.c: 132: if(keypress == 0b0000){
  1217  0013C8  5034               	movf	mainState@keypress,w,c
  1218  0013CA  1035               	iorwf	mainState@keypress+1,w,c
  1219  0013CC  A4D8               	btfss	status,2,c
  1220  0013CE  D003               	goto	l4112
  1221                           
  1222                           ;main.c: 137: state = EXECUTING;
  1223  0013D0  0E01               	movlw	1
  1224  0013D2                     L1:
  1225  0013D2  6E4B               	movwf	_state,c
  1226                           
  1227                           ;main.c: 138: return;
  1228  0013D4  0012               	return	
  1229  0013D6                     l4112:
  1230  0013D6  0434               	decf	mainState@keypress,w,c
  1231  0013D8  1035               	iorwf	mainState@keypress+1,w,c
  1232  0013DA  A4D8               	btfss	status,2,c
  1233  0013DC  D002               	goto	l4120
  1234                           
  1235                           ;main.c: 141: state = LOG;
  1236  0013DE  0E03               	movlw	3
  1237  0013E0  D7F8               	goto	L1
  1238  0013E2                     l4120:
  1239  0013E2  0E03               	movlw	3
  1240  0013E4  1834               	xorwf	mainState@keypress,w,c
  1241  0013E6  1035               	iorwf	mainState@keypress+1,w,c
  1242  0013E8  A4D8               	btfss	status,2,c
  1243  0013EA  D7E0               	goto	l4098
  1244                           
  1245                           ;main.c: 144: state = DEBUG;
  1246  0013EC  0E05               	movlw	5
  1247  0013EE  D7F1               	goto	L1
  1248  0013F0                     __end_of_mainState:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           intcon	equ	0xFF2
  1252                           intcon3	equ	0xFF0
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           status	equ	0xFD8
  1256                           
  1257 ;; *************** function _logState *****************
  1258 ;; Defined at:
  1259 ;;		line 312 in file "main.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  keypress        2   53[COMRAM] int 
  1264 ;;  log             2   51[COMRAM] int 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1278 ;;Total ram usage:        4 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    5
  1281 ;; This function calls:
  1282 ;;		_eeprom_GetLog
  1283 ;;		_readKey
  1284 ;;		_update_lcd
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text2
  1291  00130E                     __ptext2:
  1292                           	opt stack 0
  1293  00130E                     _logState:
  1294                           	opt stack 25
  1295                           
  1296                           ;main.c: 314: update_lcd();
  1297                           
  1298                           ;incstack = 0
  1299  00130E  ECB1  F005         	call	_update_lcd	;wreg free
  1300                           
  1301                           ;main.c: 315: int log = 0;
  1302  001312  0E00               	movlw	0
  1303  001314  6E35               	movwf	logState@log+1,c
  1304  001316  0E00               	movlw	0
  1305  001318  6E34               	movwf	logState@log,c
  1306  00131A                     l4332:
  1307                           
  1308                           ;main.c: 317: int keypress = readKey();
  1309  00131A  ECF8  F009         	call	_readKey	;wreg free
  1310  00131E  C010  F036         	movff	?_readKey,logState@keypress
  1311  001322  C011  F037         	movff	?_readKey+1,logState@keypress+1
  1312                           
  1313                           ;main.c: 318: if(keypress == 0b0001){
  1314  001326  0436               	decf	logState@keypress,w,c
  1315  001328  1037               	iorwf	logState@keypress+1,w,c
  1316  00132A  A4D8               	btfss	status,2,c
  1317  00132C  D00F               	goto	l4346
  1318                           
  1319                           ;main.c: 319: log++;
  1320  00132E  4A34               	infsnz	logState@log,f,c
  1321  001330  2A35               	incf	logState@log+1,f,c
  1322                           
  1323                           ;main.c: 320: eeprom_GetLog(log, &logdata);
  1324  001332  C034  F012         	movff	logState@log,eeprom_GetLog@back
  1325  001336  C035  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1326  00133A  0E5A               	movlw	low _logdata
  1327  00133C  6E14               	movwf	eeprom_GetLog@res,c
  1328  00133E  0E00               	movlw	high _logdata
  1329  001340  6E15               	movwf	eeprom_GetLog@res+1,c
  1330  001342  ECD6  F008         	call	_eeprom_GetLog	;wreg free
  1331                           
  1332                           ;main.c: 321: update_lcd();
  1333  001346  ECB1  F005         	call	_update_lcd	;wreg free
  1334                           
  1335                           ;main.c: 322: return;
  1336  00134A  0012               	return	
  1337  00134C                     l4346:
  1338  00134C  0E0D               	movlw	13
  1339  00134E  1836               	xorwf	logState@keypress,w,c
  1340  001350  1037               	iorwf	logState@keypress+1,w,c
  1341  001352  A4D8               	btfss	status,2,c
  1342  001354  D7E2               	goto	l4332
  1343                           
  1344                           ;main.c: 324: state = MAIN;
  1345  001356  0E00               	movlw	0
  1346  001358  6E4B               	movwf	_state,c
  1347                           
  1348                           ;main.c: 325: return;
  1349  00135A  0012               	return	
  1350  00135C                     __end_of_logState:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           intcon	equ	0xFF2
  1354                           intcon3	equ	0xFF0
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _eeprom_GetLog *****************
  1360 ;; Defined at:
  1361 ;;		line 90 in file "eeprom.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  back            2   17[COMRAM] int 
  1364 ;;  res             2   19[COMRAM] PTR int 
  1365 ;;		 -> logdata(1), 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  i               2   24[COMRAM] int 
  1368 ;;  address         1   23[COMRAM] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      void 
  1371 ;; Registers used:
  1372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;Total ram usage:        9 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    3
  1385 ;; This function calls:
  1386 ;;		_eeprom_ReadByte
  1387 ;;		_newestAddress
  1388 ;; This function is called by:
  1389 ;;		_logState
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text3
  1394  0011AC                     __ptext3:
  1395                           	opt stack 0
  1396  0011AC                     _eeprom_GetLog:
  1397                           	opt stack 26
  1398                           
  1399                           ;eeprom.c: 91: uint8_t address = newestAddress();
  1400                           
  1401                           ;incstack = 0
  1402  0011AC  EC9A  F00B         	call	_newestAddress	;wreg free
  1403  0011B0  6E18               	movwf	eeprom_GetLog@address,c
  1404                           
  1405                           ;eeprom.c: 92: address = address - back*5;
  1406  0011B2  5012               	movf	eeprom_GetLog@back,w,c
  1407  0011B4  0D05               	mullw	5
  1408  0011B6  50F3               	movf	prodl,w,c
  1409  0011B8  0800               	sublw	0
  1410  0011BA  2418               	addwf	eeprom_GetLog@address,w,c
  1411  0011BC  6E18               	movwf	eeprom_GetLog@address,c
  1412                           
  1413                           ;eeprom.c: 93: for(int i = 0; i < 5; i++){
  1414  0011BE  0E00               	movlw	0
  1415  0011C0  6E1A               	movwf	eeprom_GetLog@i+1,c
  1416  0011C2  0E00               	movlw	0
  1417  0011C4  6E19               	movwf	eeprom_GetLog@i,c
  1418  0011C6                     l4086:
  1419  0011C6  BE1A               	btfsc	eeprom_GetLog@i+1,7,c
  1420  0011C8  D006               	goto	l4090
  1421  0011CA  501A               	movf	eeprom_GetLog@i+1,w,c
  1422  0011CC  E11E               	bnz	l352
  1423  0011CE  0E05               	movlw	5
  1424  0011D0  5C19               	subwf	eeprom_GetLog@i,w,c
  1425  0011D2  B0D8               	btfsc	status,0,c
  1426  0011D4  0012               	return	
  1427  0011D6                     l4090:
  1428                           
  1429                           ;eeprom.c: 94: res[i] = eeprom_ReadByte(address + i);
  1430  0011D6  5018               	movf	eeprom_GetLog@address,w,c
  1431  0011D8  2419               	addwf	eeprom_GetLog@i,w,c
  1432  0011DA  6E10               	movwf	eeprom_ReadByte@address,c
  1433  0011DC  0E00               	movlw	0
  1434  0011DE  201A               	addwfc	eeprom_GetLog@i+1,w,c
  1435  0011E0  6E11               	movwf	eeprom_ReadByte@address+1,c
  1436  0011E2  EC86  F00B         	call	_eeprom_ReadByte	;wreg free
  1437  0011E6  6E16               	movwf	??_eeprom_GetLog& (0+255),c
  1438  0011E8  6A17               	clrf	(??_eeprom_GetLog+1)& (0+255),c
  1439  0011EA  90D8               	bcf	status,0,c
  1440  0011EC  3419               	rlcf	eeprom_GetLog@i,w,c
  1441  0011EE  6ED9               	movwf	fsr2l,c
  1442  0011F0  341A               	rlcf	eeprom_GetLog@i+1,w,c
  1443  0011F2  6EDA               	movwf	fsr2h,c
  1444  0011F4  5014               	movf	eeprom_GetLog@res,w,c
  1445  0011F6  26D9               	addwf	fsr2l,f,c
  1446  0011F8  5015               	movf	eeprom_GetLog@res+1,w,c
  1447  0011FA  22DA               	addwfc	fsr2h,f,c
  1448  0011FC  C016  FFDE         	movff	??_eeprom_GetLog,postinc2
  1449  001200  C017  FFDD         	movff	??_eeprom_GetLog+1,postdec2
  1450  001204  4A19               	infsnz	eeprom_GetLog@i,f,c
  1451  001206  2A1A               	incf	eeprom_GetLog@i+1,f,c
  1452  001208  D7DE               	goto	l4086
  1453  00120A                     l352:
  1454  00120A  0012               	return		;funcret
  1455  00120C                     __end_of_eeprom_GetLog:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           prodl	equ	0xFF3
  1459                           intcon	equ	0xFF2
  1460                           intcon3	equ	0xFF0
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           postinc2	equ	0xFDE
  1464                           postdec2	equ	0xFDD
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _fixLCD *****************
  1470 ;; Defined at:
  1471 ;;		line 348 in file "main.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  i               1   63[COMRAM] unsigned char 
  1476 ;;  time            7   54[COMRAM] unsigned char [7]
  1477 ;;  j               2   61[COMRAM] int 
  1478 ;;  i               2   52[COMRAM] int 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;Total ram usage:       13 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    4
  1495 ;; This function calls:
  1496 ;;		_I2C_Master_Init
  1497 ;;		_I2C_Master_Read
  1498 ;;		_I2C_Master_Start
  1499 ;;		_I2C_Master_Stop
  1500 ;;		_I2C_Master_Write
  1501 ;;		_initLCD
  1502 ;;		_lcdInst
  1503 ;;		_printf
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text4
  1510  00086C                     __ptext4:
  1511                           	opt stack 0
  1512  00086C                     _fixLCD:
  1513                           	opt stack 26
  1514                           
  1515                           ;main.c: 350: OSCCON = 0xF0;
  1516                           
  1517                           ;incstack = 0
  1518  00086C  0EF0               	movlw	240
  1519  00086E  6ED3               	movwf	4051,c	;volatile
  1520                           
  1521                           ;main.c: 354: TRISA = 0x00;
  1522  000870  0E00               	movlw	0
  1523  000872  6E92               	movwf	3986,c	;volatile
  1524                           
  1525                           ;main.c: 355: TRISB = 0b11110010;
  1526  000874  0EF2               	movlw	242
  1527  000876  6E93               	movwf	3987,c	;volatile
  1528                           
  1529                           ;main.c: 356: TRISC = 0x00011000;
  1530  000878  0E00               	movlw	0
  1531  00087A  6E94               	movwf	3988,c	;volatile
  1532                           
  1533                           ;main.c: 357: TRISD = 0x00;
  1534  00087C  0E00               	movlw	0
  1535  00087E  6E95               	movwf	3989,c	;volatile
  1536                           
  1537                           ;main.c: 358: TRISE = 0x00;
  1538  000880  0E00               	movlw	0
  1539  000882  6E96               	movwf	3990,c	;volatile
  1540                           
  1541                           ;main.c: 359: LATA = 0x00;
  1542  000884  0E00               	movlw	0
  1543  000886  6E89               	movwf	3977,c	;volatile
  1544                           
  1545                           ;main.c: 360: LATB = 0x00;
  1546  000888  0E00               	movlw	0
  1547  00088A  6E8A               	movwf	3978,c	;volatile
  1548                           
  1549                           ;main.c: 361: LATC = 0x00;
  1550  00088C  0E00               	movlw	0
  1551  00088E  6E8B               	movwf	3979,c	;volatile
  1552                           
  1553                           ;main.c: 362: LATD = 0x00;
  1554  000890  0E00               	movlw	0
  1555  000892  6E8C               	movwf	3980,c	;volatile
  1556                           
  1557                           ;main.c: 363: LATE = 0x00;
  1558  000894  0E00               	movlw	0
  1559  000896  6E8D               	movwf	3981,c	;volatile
  1560                           
  1561                           ;main.c: 364: ADCON0 = 0x00;
  1562  000898  0E00               	movlw	0
  1563  00089A  6EC2               	movwf	4034,c	;volatile
  1564                           
  1565                           ;main.c: 365: ADCON1 = 0x00;
  1566  00089C  0E00               	movlw	0
  1567  00089E  6EC1               	movwf	4033,c	;volatile
  1568                           
  1569                           ;main.c: 367: initLCD();
  1570  0008A0  EC1C  F00A         	call	_initLCD	;wreg free
  1571                           
  1572                           ;main.c: 368: I2C_Master_Init(10000);
  1573  0008A4  0E10               	movlw	16
  1574  0008A6  6E1D               	movwf	I2C_Master_Init@c,c
  1575  0008A8  0E27               	movlw	39
  1576  0008AA  6E1E               	movwf	I2C_Master_Init@c+1,c
  1577  0008AC  0E00               	movlw	0
  1578  0008AE  6E1F               	movwf	I2C_Master_Init@c+2,c
  1579  0008B0  0E00               	movlw	0
  1580  0008B2  6E20               	movwf	I2C_Master_Init@c+3,c
  1581  0008B4  EC06  F009         	call	_I2C_Master_Init	;wreg free
  1582                           
  1583                           ;main.c: 369: (INTCONbits.GIE = 0);
  1584  0008B8  9EF2               	bcf	intcon,7,c	;volatile
  1585                           
  1586                           ;main.c: 370: unsigned char time[7];
  1587                           ;main.c: 372: LATA = 0b01010101;
  1588  0008BA  0E55               	movlw	85
  1589  0008BC  6E89               	movwf	3977,c	;volatile
  1590                           
  1591                           ;main.c: 373: LATB = 0b01010101;
  1592  0008BE  0E55               	movlw	85
  1593  0008C0  6E8A               	movwf	3978,c	;volatile
  1594                           
  1595                           ;main.c: 374: LATC = 0b01010101;
  1596  0008C2  0E55               	movlw	85
  1597  0008C4  6E8B               	movwf	3979,c	;volatile
  1598                           
  1599                           ;main.c: 375: LATDbits.LATD0 = 1;
  1600  0008C6  808C               	bsf	3980,0,c	;volatile
  1601                           
  1602                           ;main.c: 376: LATDbits.LATD1 = 0;
  1603  0008C8  928C               	bcf	3980,1,c	;volatile
  1604                           
  1605                           ;main.c: 377: LATEbits.LATE0 = 1;
  1606  0008CA  808D               	bsf	3981,0,c	;volatile
  1607                           
  1608                           ;main.c: 378: LATEbits.LATE1 = 0;
  1609  0008CC  928D               	bcf	3981,1,c	;volatile
  1610                           
  1611                           ;main.c: 379: int i = 0;
  1612  0008CE  0E00               	movlw	0
  1613  0008D0  6E36               	movwf	fixLCD@i+1,c
  1614  0008D2  0E00               	movlw	0
  1615  0008D4  6E35               	movwf	fixLCD@i,c
  1616                           
  1617                           ;main.c: 380: int j = 0;
  1618  0008D6  0E00               	movlw	0
  1619  0008D8  6E3F               	movwf	fixLCD@j+1,c
  1620  0008DA  0E00               	movlw	0
  1621  0008DC  6E3E               	movwf	fixLCD@j,c
  1622                           
  1623                           ;main.c: 381: while(j < 10){
  1624  0008DE  D095               	goto	l4422
  1625  0008E0                     l4380:
  1626                           
  1627                           ;main.c: 383: I2C_Master_Start();
  1628  0008E0  ECB6  F00B         	call	_I2C_Master_Start	;wreg free
  1629                           
  1630                           ;main.c: 384: I2C_Master_Write(0b11010000);
  1631  0008E4  0E00               	movlw	0
  1632  0008E6  6E12               	movwf	I2C_Master_Write@d+1,c
  1633  0008E8  0ED0               	movlw	208
  1634  0008EA  6E11               	movwf	I2C_Master_Write@d,c
  1635  0008EC  ECAD  F00B         	call	_I2C_Master_Write	;wreg free
  1636                           
  1637                           ;main.c: 385: I2C_Master_Write(0x00);
  1638  0008F0  0E00               	movlw	0
  1639  0008F2  6E12               	movwf	I2C_Master_Write@d+1,c
  1640  0008F4  0E00               	movlw	0
  1641  0008F6  6E11               	movwf	I2C_Master_Write@d,c
  1642  0008F8  ECAD  F00B         	call	_I2C_Master_Write	;wreg free
  1643                           
  1644                           ;main.c: 386: I2C_Master_Stop();
  1645  0008FC  ECB2  F00B         	call	_I2C_Master_Stop	;wreg free
  1646                           
  1647                           ;main.c: 389: I2C_Master_Start();
  1648  000900  ECB6  F00B         	call	_I2C_Master_Start	;wreg free
  1649                           
  1650                           ;main.c: 390: I2C_Master_Write(0b11010001);
  1651  000904  0E00               	movlw	0
  1652  000906  6E12               	movwf	I2C_Master_Write@d+1,c
  1653  000908  0ED1               	movlw	209
  1654  00090A  6E11               	movwf	I2C_Master_Write@d,c
  1655  00090C  ECAD  F00B         	call	_I2C_Master_Write	;wreg free
  1656                           
  1657                           ;main.c: 391: for(unsigned char i=0;i<0x06;i++){
  1658  000910  0E00               	movlw	0
  1659  000912  6E40               	movwf	fixLCD@i_584,c
  1660  000914                     l4384:
  1661  000914  0E05               	movlw	5
  1662  000916  6440               	cpfsgt	fixLCD@i_584,c
  1663  000918  D001               	goto	l4388
  1664  00091A  D00E               	goto	l4394
  1665  00091C                     l4388:
  1666                           
  1667                           ;main.c: 392: time[i] = I2C_Master_Read(1);
  1668  00091C  5040               	movf	fixLCD@i_584,w,c
  1669  00091E  0D01               	mullw	1
  1670  000920  0E37               	movlw	low fixLCD@time
  1671  000922  24F3               	addwf	prodl,w,c
  1672  000924  6ED9               	movwf	fsr2l,c
  1673  000926  0E00               	movlw	high fixLCD@time
  1674  000928  20F4               	addwfc	prodh,w,c
  1675  00092A  6EDA               	movwf	fsr2h,c
  1676  00092C  0E01               	movlw	1
  1677  00092E  ECF4  F00A         	call	_I2C_Master_Read
  1678  000932  6EDF               	movwf	indf2,c
  1679  000934  2A40               	incf	fixLCD@i_584,f,c
  1680  000936  D7EE               	goto	l4384
  1681  000938                     l4394:
  1682                           
  1683                           ;main.c: 393: }
  1684                           ;main.c: 394: time[6] = I2C_Master_Read(0);
  1685  000938  0E00               	movlw	0
  1686  00093A  ECF4  F00A         	call	_I2C_Master_Read
  1687  00093E  6E3D               	movwf	fixLCD@time+6,c
  1688                           
  1689                           ;main.c: 395: I2C_Master_Stop();
  1690  000940  ECB2  F00B         	call	_I2C_Master_Stop	;wreg free
  1691                           
  1692                           ;main.c: 396: lcdInst(0b10000000);;
  1693  000944  0E80               	movlw	128
  1694  000946  ECA7  F00B         	call	_lcdInst
  1695                           
  1696                           ;main.c: 397: printf("%02x%02x/%02x ", time[6],time[5],time[4]);
  1697  00094A  0ECF               	movlw	low STR_14
  1698  00094C  6E1C               	movwf	printf@f,c
  1699  00094E  0EFF               	movlw	high STR_14
  1700  000950  6E1D               	movwf	printf@f+1,c
  1701  000952  C03D  F01E         	movff	fixLCD@time+6,?_printf+2
  1702  000956  6A1F               	clrf	?_printf+3,c
  1703  000958  C03C  F020         	movff	fixLCD@time+5,?_printf+4
  1704  00095C  6A21               	clrf	?_printf+5,c
  1705  00095E  C03B  F022         	movff	fixLCD@time+4,?_printf+6
  1706  000962  6A23               	clrf	?_printf+7,c
  1707  000964  ECB0  F002         	call	_printf	;wreg free
  1708                           
  1709                           ;main.c: 398: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1710  000968  0EDE               	movlw	low STR_2
  1711  00096A  6E1C               	movwf	printf@f,c
  1712  00096C  0EFF               	movlw	high STR_2
  1713  00096E  6E1D               	movwf	printf@f+1,c
  1714  000970  C039  F01E         	movff	fixLCD@time+2,?_printf+2
  1715  000974  6A1F               	clrf	?_printf+3,c
  1716  000976  C038  F020         	movff	fixLCD@time+1,?_printf+4
  1717  00097A  6A21               	clrf	?_printf+5,c
  1718  00097C  C037  F022         	movff	fixLCD@time,?_printf+6
  1719  000980  6A23               	clrf	?_printf+7,c
  1720  000982  ECB0  F002         	call	_printf	;wreg free
  1721                           
  1722                           ;main.c: 399: lcdInst(0b11000000);;
  1723  000986  0EC0               	movlw	192
  1724  000988  ECA7  F00B         	call	_lcdInst
  1725                           
  1726                           ;main.c: 400: printf("              ");
  1727  00098C  0E15               	movlw	low (STR_4+4)
  1728  00098E  6E1C               	movwf	printf@f,c
  1729  000990  0EFF               	movlw	high (STR_4+4)
  1730  000992  6E1D               	movwf	printf@f+1,c
  1731  000994  ECB0  F002         	call	_printf	;wreg free
  1732                           
  1733                           ;main.c: 401: lcdInst(0b10000000);;
  1734  000998  0E80               	movlw	128
  1735  00099A  ECA7  F00B         	call	_lcdInst
  1736                           
  1737                           ;main.c: 402: lcdInst(0b11000000);;
  1738  00099E  0EC0               	movlw	192
  1739  0009A0  ECA7  F00B         	call	_lcdInst
  1740                           
  1741                           ;main.c: 404: LATA = LATA ^ 0xFF;
  1742  0009A4  1E89               	comf	3977,f,c	;volatile
  1743                           
  1744                           ;main.c: 405: LATB = LATB ^ 0xFF;
  1745  0009A6  1E8A               	comf	3978,f,c	;volatile
  1746                           
  1747                           ;main.c: 406: LATC = LATC ^ 0xFF;
  1748  0009A8  1E8B               	comf	3979,f,c	;volatile
  1749                           
  1750                           ;main.c: 407: LATDbits.LATD0 = !LATDbits.LATD0;
  1751  0009AA  B08C               	btfsc	3980,0,c	;volatile
  1752  0009AC  D003               	goto	u3410
  1753  0009AE  6A34               	clrf	??_fixLCD& (0+255),c
  1754  0009B0  2A34               	incf	??_fixLCD& (0+255),f,c
  1755  0009B2  D001               	goto	u3428
  1756  0009B4                     u3410:
  1757  0009B4  6A34               	clrf	??_fixLCD& (0+255),c
  1758  0009B6                     u3428:
  1759  0009B6  508C               	movf	3980,w,c	;volatile
  1760  0009B8  1834               	xorwf	??_fixLCD,w,c
  1761  0009BA  0BFE               	andlw	-2
  1762  0009BC  1834               	xorwf	??_fixLCD,w,c
  1763  0009BE  6E8C               	movwf	3980,c	;volatile
  1764                           
  1765                           ;main.c: 408: LATDbits.LATD1 = !LATDbits.LATD1;
  1766  0009C0  B28C               	btfsc	3980,1,c	;volatile
  1767  0009C2  D003               	goto	u3430
  1768  0009C4  6A34               	clrf	??_fixLCD& (0+255),c
  1769  0009C6  2A34               	incf	??_fixLCD& (0+255),f,c
  1770  0009C8  D001               	goto	u3448
  1771  0009CA                     u3430:
  1772  0009CA  6A34               	clrf	??_fixLCD& (0+255),c
  1773  0009CC                     u3448:
  1774  0009CC  4634               	rlncf	??_fixLCD,f,c
  1775  0009CE  508C               	movf	3980,w,c	;volatile
  1776  0009D0  1834               	xorwf	??_fixLCD,w,c
  1777  0009D2  0BFD               	andlw	-3
  1778  0009D4  1834               	xorwf	??_fixLCD,w,c
  1779  0009D6  6E8C               	movwf	3980,c	;volatile
  1780                           
  1781                           ;main.c: 409: LATEbits.LATE0 = !LATEbits.LATE0;
  1782  0009D8  B08D               	btfsc	3981,0,c	;volatile
  1783  0009DA  D003               	goto	u3450
  1784  0009DC  6A34               	clrf	??_fixLCD& (0+255),c
  1785  0009DE  2A34               	incf	??_fixLCD& (0+255),f,c
  1786  0009E0  D001               	goto	u3468
  1787  0009E2                     u3450:
  1788  0009E2  6A34               	clrf	??_fixLCD& (0+255),c
  1789  0009E4                     u3468:
  1790  0009E4  508D               	movf	3981,w,c	;volatile
  1791  0009E6  1834               	xorwf	??_fixLCD,w,c
  1792  0009E8  0BFE               	andlw	-2
  1793  0009EA  1834               	xorwf	??_fixLCD,w,c
  1794  0009EC  6E8D               	movwf	3981,c	;volatile
  1795                           
  1796                           ;main.c: 410: LATEbits.LATE1 = !LATEbits.LATE1;
  1797  0009EE  B28D               	btfsc	3981,1,c	;volatile
  1798  0009F0  D003               	goto	u3470
  1799  0009F2  6A34               	clrf	??_fixLCD& (0+255),c
  1800  0009F4  2A34               	incf	??_fixLCD& (0+255),f,c
  1801  0009F6  D001               	goto	u3488
  1802  0009F8                     u3470:
  1803  0009F8  6A34               	clrf	??_fixLCD& (0+255),c
  1804  0009FA                     u3488:
  1805  0009FA  4634               	rlncf	??_fixLCD,f,c
  1806  0009FC  508D               	movf	3981,w,c	;volatile
  1807  0009FE  1834               	xorwf	??_fixLCD,w,c
  1808  000A00  0BFD               	andlw	-3
  1809  000A02  1834               	xorwf	??_fixLCD,w,c
  1810  000A04  6E8D               	movwf	3981,c	;volatile
  1811                           
  1812                           ;main.c: 411: j++;
  1813  000A06  4A3E               	infsnz	fixLCD@j,f,c
  1814  000A08  2A3F               	incf	fixLCD@j+1,f,c
  1815  000A0A                     l4422:
  1816  000A0A  BE3F               	btfsc	fixLCD@j+1,7,c
  1817  000A0C  D769               	goto	l4380
  1818  000A0E  503F               	movf	fixLCD@j+1,w,c
  1819  000A10  E105               	bnz	l290
  1820  000A12  0E0A               	movlw	10
  1821  000A14  5C3E               	subwf	fixLCD@j,w,c
  1822  000A16  B0D8               	btfsc	status,0,c
  1823  000A18  0012               	return	
  1824  000A1A  D762               	goto	l4380
  1825  000A1C                     l290:
  1826  000A1C  0012               	return		;funcret
  1827  000A1E                     __end_of_fixLCD:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           prodh	equ	0xFF4
  1831                           prodl	equ	0xFF3
  1832                           intcon	equ	0xFF2
  1833                           intcon3	equ	0xFF0
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           indf2	equ	0xFDF
  1837                           postinc2	equ	0xFDE
  1838                           postdec2	equ	0xFDD
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _initLCD *****************
  1844 ;; Defined at:
  1845 ;;		line 15 in file "lcd.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;		None
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;Total ram usage:        1 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    3
  1866 ;; This function calls:
  1867 ;;		_lcdInst
  1868 ;; This function is called by:
  1869 ;;		_fixLCD
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text5
  1875  001438                     __ptext5:
  1876                           	opt stack 0
  1877  001438                     _initLCD:
  1878                           	opt stack 27
  1879                           
  1880                           ;lcd.c: 16: _delay((unsigned long)((15)*(10000000/4000.0)));
  1881                           
  1882                           ;incstack = 0
  1883  001438  0E31               	movlw	49
  1884  00143A  6E13               	movwf	??_initLCD& (0+255),c
  1885  00143C  0EB2               	movlw	178
  1886  00143E                     u3537:
  1887  00143E  2EE8               	decfsz	wreg,f,c
  1888  001440  D7FE               	bra	u3537
  1889  001442  2E13               	decfsz	??_initLCD& (0+255),f,c
  1890  001444  D7FC               	bra	u3537
  1891  001446  D000               	nop2	
  1892                           
  1893                           ;lcd.c: 17: lcdInst(0b00110011);
  1894  001448  0E33               	movlw	51
  1895  00144A  ECA7  F00B         	call	_lcdInst
  1896                           
  1897                           ;lcd.c: 18: lcdInst(0b00110010);
  1898  00144E  0E32               	movlw	50
  1899  001450  ECA7  F00B         	call	_lcdInst
  1900                           
  1901                           ;lcd.c: 19: lcdInst(0b00101000);
  1902  001454  0E28               	movlw	40
  1903  001456  ECA7  F00B         	call	_lcdInst
  1904                           
  1905                           ;lcd.c: 20: lcdInst(0b00001111);
  1906  00145A  0E0F               	movlw	15
  1907  00145C  ECA7  F00B         	call	_lcdInst
  1908                           
  1909                           ;lcd.c: 21: lcdInst(0b00000110);
  1910  001460  0E06               	movlw	6
  1911  001462  ECA7  F00B         	call	_lcdInst
  1912                           
  1913                           ;lcd.c: 22: lcdInst(0b00000001);
  1914  001466  0E01               	movlw	1
  1915  001468  ECA7  F00B         	call	_lcdInst
  1916                           
  1917                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  1918  00146C  0E31               	movlw	49
  1919  00146E  6E13               	movwf	??_initLCD& (0+255),c
  1920  001470  0EB2               	movlw	178
  1921  001472                     u3547:
  1922  001472  2EE8               	decfsz	wreg,f,c
  1923  001474  D7FE               	bra	u3547
  1924  001476  2E13               	decfsz	??_initLCD& (0+255),f,c
  1925  001478  D7FC               	bra	u3547
  1926  00147A  D000               	nop2	
  1927  00147C  0012               	return		;funcret
  1928  00147E                     __end_of_initLCD:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           intcon	equ	0xFF2
  1934                           intcon3	equ	0xFF0
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           indf2	equ	0xFDF
  1938                           postinc2	equ	0xFDE
  1939                           postdec2	equ	0xFDD
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8
  1943                           
  1944 ;; *************** function _I2C_Master_Init *****************
  1945 ;; Defined at:
  1946 ;;		line 13 in file "I2C.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  c               4   28[COMRAM] const unsigned long 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1960 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;Total ram usage:        8 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    2
  1967 ;; This function calls:
  1968 ;;		___lldiv
  1969 ;; This function is called by:
  1970 ;;		_fixLCD
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text6
  1976  00120C                     __ptext6:
  1977                           	opt stack 0
  1978  00120C                     _I2C_Master_Init:
  1979                           	opt stack 27
  1980                           
  1981                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  1982                           
  1983                           ;incstack = 0
  1984  00120C  0E00               	movlw	0
  1985  00120E  6EC7               	movwf	4039,c	;volatile
  1986                           
  1987                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  1988  001210  0E28               	movlw	40
  1989  001212  6EC6               	movwf	4038,c	;volatile
  1990                           
  1991                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  1992  001214  0E00               	movlw	0
  1993  001216  6EC5               	movwf	4037,c	;volatile
  1994                           
  1995                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  1996  001218  0E80               	movlw	128
  1997  00121A  6E10               	movwf	___lldiv@dividend,c
  1998  00121C  0E96               	movlw	150
  1999  00121E  6E11               	movwf	___lldiv@dividend+1,c
  2000  001220  0E98               	movlw	152
  2001  001222  6E12               	movwf	___lldiv@dividend+2,c
  2002  001224  0E00               	movlw	0
  2003  001226  6E13               	movwf	___lldiv@dividend+3,c
  2004  001228  C01D  F021         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2005  00122C  C01E  F022         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2006  001230  C01F  F023         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2007  001234  C020  F024         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2008  001238  0E02               	movlw	2
  2009  00123A                     u1775:
  2010  00123A  90D8               	bcf	status,0,c
  2011  00123C  3621               	rlcf	??_I2C_Master_Init,f,c
  2012  00123E  3622               	rlcf	??_I2C_Master_Init+1,f,c
  2013  001240  3623               	rlcf	??_I2C_Master_Init+2,f,c
  2014  001242  3624               	rlcf	??_I2C_Master_Init+3,f,c
  2015  001244  2EE8               	decfsz	wreg,f,c
  2016  001246  D7F9               	goto	u1775
  2017  001248  C021  F014         	movff	??_I2C_Master_Init,___lldiv@divisor
  2018  00124C  C022  F015         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2019  001250  C023  F016         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2020  001254  C024  F017         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2021  001258  EC60  F008         	call	___lldiv	;wreg free
  2022  00125C  0410               	decf	?___lldiv,w,c
  2023  00125E  6EC8               	movwf	4040,c	;volatile
  2024                           
  2025                           ;I2C.c: 20: TRISC3 = 1;
  2026  001260  8694               	bsf	3988,3,c	;volatile
  2027                           
  2028                           ;I2C.c: 21: TRISC4 = 1;
  2029  001262  8894               	bsf	3988,4,c	;volatile
  2030  001264  0012               	return		;funcret
  2031  001266                     __end_of_I2C_Master_Init:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           prodh	equ	0xFF4
  2035                           prodl	equ	0xFF3
  2036                           intcon	equ	0xFF2
  2037                           intcon3	equ	0xFF0
  2038                           postinc0	equ	0xFEE
  2039                           wreg	equ	0xFE8
  2040                           indf2	equ	0xFDF
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function ___lldiv *****************
  2048 ;; Defined at:
  2049 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  dividend        4   15[COMRAM] unsigned long 
  2052 ;;  divisor         4   19[COMRAM] unsigned long 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  quotient        4   23[COMRAM] unsigned long 
  2055 ;;  counter         1   27[COMRAM] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  4   15[COMRAM] unsigned long 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:       13 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    1
  2072 ;; This function calls:
  2073 ;;		Nothing
  2074 ;; This function is called by:
  2075 ;;		_I2C_Master_Init
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text7
  2080  0010C0                     __ptext7:
  2081                           	opt stack 0
  2082  0010C0                     ___lldiv:
  2083                           	opt stack 27
  2084                           
  2085                           ;incstack = 0
  2086  0010C0  0E00               	movlw	0
  2087  0010C2  6E18               	movwf	___lldiv@quotient,c
  2088  0010C4  0E00               	movlw	0
  2089  0010C6  6E19               	movwf	___lldiv@quotient+1,c
  2090  0010C8  0E00               	movlw	0
  2091  0010CA  6E1A               	movwf	___lldiv@quotient+2,c
  2092  0010CC  0E00               	movlw	0
  2093  0010CE  6E1B               	movwf	___lldiv@quotient+3,c
  2094  0010D0  5014               	movf	___lldiv@divisor,w,c
  2095  0010D2  1015               	iorwf	___lldiv@divisor+1,w,c
  2096  0010D4  1016               	iorwf	___lldiv@divisor+2,w,c
  2097  0010D6  1017               	iorwf	___lldiv@divisor+3,w,c
  2098  0010D8  B4D8               	btfsc	status,2,c
  2099  0010DA  D02A               	goto	l950
  2100  0010DC  0E01               	movlw	1
  2101  0010DE  6E1C               	movwf	___lldiv@counter,c
  2102  0010E0  D006               	goto	l2726
  2103  0010E2                     l2724:
  2104  0010E2  90D8               	bcf	status,0,c
  2105  0010E4  3614               	rlcf	___lldiv@divisor,f,c
  2106  0010E6  3615               	rlcf	___lldiv@divisor+1,f,c
  2107  0010E8  3616               	rlcf	___lldiv@divisor+2,f,c
  2108  0010EA  3617               	rlcf	___lldiv@divisor+3,f,c
  2109  0010EC  2A1C               	incf	___lldiv@counter,f,c
  2110  0010EE                     l2726:
  2111  0010EE  AE17               	btfss	___lldiv@divisor+3,7,c
  2112  0010F0  D7F8               	goto	l2724
  2113  0010F2                     l2728:
  2114  0010F2  90D8               	bcf	status,0,c
  2115  0010F4  3618               	rlcf	___lldiv@quotient,f,c
  2116  0010F6  3619               	rlcf	___lldiv@quotient+1,f,c
  2117  0010F8  361A               	rlcf	___lldiv@quotient+2,f,c
  2118  0010FA  361B               	rlcf	___lldiv@quotient+3,f,c
  2119  0010FC  5014               	movf	___lldiv@divisor,w,c
  2120  0010FE  5C10               	subwf	___lldiv@dividend,w,c
  2121  001100  5015               	movf	___lldiv@divisor+1,w,c
  2122  001102  5811               	subwfb	___lldiv@dividend+1,w,c
  2123  001104  5016               	movf	___lldiv@divisor+2,w,c
  2124  001106  5812               	subwfb	___lldiv@dividend+2,w,c
  2125  001108  5017               	movf	___lldiv@divisor+3,w,c
  2126  00110A  5813               	subwfb	___lldiv@dividend+3,w,c
  2127  00110C  A0D8               	btfss	status,0,c
  2128  00110E  D009               	goto	l2736
  2129  001110  5014               	movf	___lldiv@divisor,w,c
  2130  001112  5E10               	subwf	___lldiv@dividend,f,c
  2131  001114  5015               	movf	___lldiv@divisor+1,w,c
  2132  001116  5A11               	subwfb	___lldiv@dividend+1,f,c
  2133  001118  5016               	movf	___lldiv@divisor+2,w,c
  2134  00111A  5A12               	subwfb	___lldiv@dividend+2,f,c
  2135  00111C  5017               	movf	___lldiv@divisor+3,w,c
  2136  00111E  5A13               	subwfb	___lldiv@dividend+3,f,c
  2137  001120  8018               	bsf	___lldiv@quotient,0,c
  2138  001122                     l2736:
  2139  001122  90D8               	bcf	status,0,c
  2140  001124  3217               	rrcf	___lldiv@divisor+3,f,c
  2141  001126  3216               	rrcf	___lldiv@divisor+2,f,c
  2142  001128  3215               	rrcf	___lldiv@divisor+1,f,c
  2143  00112A  3214               	rrcf	___lldiv@divisor,f,c
  2144  00112C  2E1C               	decfsz	___lldiv@counter,f,c
  2145  00112E  D7E1               	goto	l2728
  2146  001130                     l950:
  2147  001130  C018  F010         	movff	___lldiv@quotient,?___lldiv
  2148  001134  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  2149  001138  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  2150  00113C  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  2151  001140  0012               	return		;funcret
  2152  001142                     __end_of___lldiv:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           intcon	equ	0xFF2
  2158                           intcon3	equ	0xFF0
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           indf2	equ	0xFDF
  2162                           postinc2	equ	0xFDE
  2163                           postdec2	equ	0xFDD
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function _finishState *****************
  2169 ;; Defined at:
  2170 ;;		line 298 in file "main.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;		None
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  keypress        2   53[COMRAM] int 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      void 
  2177 ;; Registers used:
  2178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;Total ram usage:        4 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    5
  2191 ;; This function calls:
  2192 ;;		_readKey
  2193 ;;		_update_lcd
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text8
  2200  0014FC                     __ptext8:
  2201                           	opt stack 0
  2202  0014FC                     _finishState:
  2203                           	opt stack 25
  2204                           
  2205                           ;main.c: 300: (INTCONbits.GIE = 0);
  2206                           
  2207                           ;incstack = 0
  2208  0014FC  9EF2               	bcf	intcon,7,c	;volatile
  2209                           
  2210                           ;main.c: 301: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2211  0014FE  0E0D               	movlw	13
  2212  001500  6E35               	movwf	(??_finishState+1)& (0+255),c
  2213  001502  0EAF               	movlw	175
  2214  001504  6E34               	movwf	??_finishState& (0+255),c
  2215  001506  0EB6               	movlw	182
  2216  001508                     u3557:
  2217  001508  2EE8               	decfsz	wreg,f,c
  2218  00150A  D7FE               	bra	u3557
  2219  00150C  2E34               	decfsz	??_finishState& (0+255),f,c
  2220  00150E  D7FC               	bra	u3557
  2221  001510  2E35               	decfsz	(??_finishState+1)& (0+255),f,c
  2222  001512  D7FA               	bra	u3557
  2223  001514  D000               	nop2	
  2224                           
  2225                           ;main.c: 302: update_lcd();
  2226  001516  ECB1  F005         	call	_update_lcd	;wreg free
  2227  00151A                     l4320:
  2228                           
  2229                           ;main.c: 304: int keypress = readKey();
  2230  00151A  ECF8  F009         	call	_readKey	;wreg free
  2231  00151E  C010  F036         	movff	?_readKey,finishState@keypress
  2232  001522  C011  F037         	movff	?_readKey+1,finishState@keypress+1
  2233                           
  2234                           ;main.c: 305: if(keypress == 0b1101){
  2235  001526  0E0D               	movlw	13
  2236  001528  1836               	xorwf	finishState@keypress,w,c
  2237  00152A  1037               	iorwf	finishState@keypress+1,w,c
  2238  00152C  A4D8               	btfss	status,2,c
  2239  00152E  D7F5               	goto	l4320
  2240                           
  2241                           ;main.c: 306: state = MAIN;
  2242  001530  0E00               	movlw	0
  2243  001532  6E4B               	movwf	_state,c
  2244                           
  2245                           ;main.c: 307: return;
  2246  001534  0012               	return	
  2247  001536                     __end_of_finishState:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           intcon	equ	0xFF2
  2253                           intcon3	equ	0xFF0
  2254                           postinc0	equ	0xFEE
  2255                           wreg	equ	0xFE8
  2256                           indf2	equ	0xFDF
  2257                           postinc2	equ	0xFDE
  2258                           postdec2	equ	0xFDD
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _readKey *****************
  2264 ;; Defined at:
  2265 ;;		line 90 in file "main.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  keypress        1   17[COMRAM] unsigned char 
  2270 ;;  i               2   18[COMRAM] int 
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  2   15[COMRAM] int 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;Total ram usage:        5 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    1
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_mainState
  2291 ;;		_finishState
  2292 ;;		_logState
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text9
  2297  0013F0                     __ptext9:
  2298                           	opt stack 0
  2299  0013F0                     _readKey:
  2300                           	opt stack 28
  2301                           
  2302                           ;main.c: 92: for (int i = 0; i < 200; i++)
  2303                           
  2304                           ;incstack = 0
  2305  0013F0  0E00               	movlw	0
  2306  0013F2  6E14               	movwf	readKey@i+1,c
  2307  0013F4  0E00               	movlw	0
  2308  0013F6  6E13               	movwf	readKey@i,c
  2309  0013F8  BE14               	btfsc	readKey@i+1,7,c
  2310  0013FA  D006               	goto	l213
  2311  0013FC  5014               	movf	readKey@i+1,w,c
  2312  0013FE  E119               	bnz	l214
  2313  001400  0EC8               	movlw	200
  2314  001402  5C13               	subwf	readKey@i,w,c
  2315  001404  B0D8               	btfsc	status,0,c
  2316  001406  D015               	goto	l214
  2317  001408                     l213:
  2318                           
  2319                           ;main.c: 93: {
  2320                           ;main.c: 94: if (PORTBbits.RB1 != 0)
  2321  001408  A281               	btfss	3969,1,c	;volatile
  2322  00140A  D00C               	goto	l2808
  2323                           
  2324                           ;main.c: 95: {
  2325                           ;main.c: 96: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2326  00140C  3881               	swapf	3969,w,c	;volatile
  2327  00140E  0B0F               	andlw	15
  2328  001410  0B0F               	andlw	15
  2329  001412  6E12               	movwf	readKey@keypress,c
  2330  001414                     l216:
  2331  001414  B281               	btfsc	3969,1,c	;volatile
  2332  001416  D7FE               	goto	l216
  2333                           
  2334                           ;main.c: 99: }
  2335                           ;main.c: 100: __nop();
  2336  001418  F000               	nop	
  2337                           
  2338                           ;main.c: 101: __nop();
  2339  00141A  F000               	nop	
  2340                           
  2341                           ;main.c: 102: return keypress;
  2342  00141C  C012  F010         	movff	readKey@keypress,?_readKey
  2343  001420  6A11               	clrf	?_readKey+1,c
  2344  001422  0012               	return	
  2345  001424                     l2808:
  2346  001424  4A13               	infsnz	readKey@i,f,c
  2347  001426  2A14               	incf	readKey@i+1,f,c
  2348  001428  BE14               	btfsc	readKey@i+1,7,c
  2349  00142A  D7EE               	goto	l213
  2350  00142C  5014               	movf	readKey@i+1,w,c
  2351  00142E  E101               	bnz	u1820
  2352  001430  D7E7               	goto	L2
  2353  001432                     u1820:
  2354  001432                     l214:
  2355                           
  2356                           ;main.c: 103: }
  2357                           ;main.c: 104: }
  2358                           ;main.c: 105: return -1;
  2359  001432  6810               	setf	?_readKey,c
  2360  001434  6811               	setf	?_readKey+1,c
  2361  001436  0012               	return		;funcret
  2362  001438                     __end_of_readKey:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           intcon3	equ	0xFF0
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           indf2	equ	0xFDF
  2372                           postinc2	equ	0xFDE
  2373                           postdec2	equ	0xFDD
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _executingState *****************
  2379 ;; Defined at:
  2380 ;;		line 150 in file "main.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  hasTab          2   30[BANK0 ] int 
  2385 ;;  hasLabel        2   34[BANK0 ] int 
  2386 ;;  res             8   20[BANK0 ] int [4]
  2387 ;;  emptyCount      2   44[BANK0 ] int 
  2388 ;;  alInSensor      2   42[BANK0 ] int 
  2389 ;;  snInSensor      2   40[BANK0 ] int 
  2390 ;;  alLoaded        2   38[BANK0 ] int 
  2391 ;;  snLoaded        2   36[BANK0 ] int 
  2392 ;;  timedif         2   32[BANK0 ] int 
  2393 ;;  start_s         2   28[BANK0 ] int 
  2394 ;;  s_one           2   14[BANK0 ] int 
  2395 ;;  s_ten           2   12[BANK0 ] int 
  2396 ;;  m_one           2   10[BANK0 ] int 
  2397 ;;  m_ten           2    8[BANK0 ] int 
  2398 ;;  h_one           2    6[BANK0 ] int 
  2399 ;;  h_ten           2    4[BANK0 ] int 
  2400 ;;  runCanAl        2    2[BANK0 ] int 
  2401 ;;  runCanSn        2    0[BANK0 ] int 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Locals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Totals:         3      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;Total ram usage:       49 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    5
  2418 ;; This function calls:
  2419 ;;		___wmul
  2420 ;;		_dispenseAlCan
  2421 ;;		_dispenseSnCan
  2422 ;;		_eeprom_LogResult
  2423 ;;		_get_time
  2424 ;;		_get_timeDif
  2425 ;;		_lcdInst
  2426 ;;		_printf
  2427 ;;		_readAlBot
  2428 ;;		_readAlTop
  2429 ;;		_readSnBot
  2430 ;;		_readSnSensor
  2431 ;;		_readSnTop
  2432 ;;		_servoRotate0
  2433 ;;		_servoRotate4
  2434 ;;		_servoRotate90
  2435 ;;		_servoRotate90n
  2436 ;;		_servoRotateArm
  2437 ;;		_update_lcd
  2438 ;; This function is called by:
  2439 ;;		_main
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text10
  2444  000012                     __ptext10:
  2445                           	opt stack 0
  2446  000012                     _executingState:
  2447                           	opt stack 25
  2448                           
  2449                           ;main.c: 156: int runCanSn, runCanAl;
  2450                           ;main.c: 157: runCanSn = 0;
  2451                           
  2452                           ;incstack = 0
  2453  000012  0E00               	movlw	0
  2454  000014  0100               	movlb	0	; () banked
  2455  000016  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2456  000018  0E00               	movlw	0
  2457  00001A  6F80               	movwf	executingState@runCanSn& (0+255),b
  2458                           
  2459                           ;main.c: 158: runCanAl = 0;
  2460  00001C  0E00               	movlw	0
  2461  00001E  0100               	movlb	0	; () banked
  2462  000020  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2463  000022  0E00               	movlw	0
  2464  000024  6F82               	movwf	executingState@runCanAl& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;main.c: 160: get_time(starttime);
  2468  000026  0EAE               	movlw	low _starttime
  2469  000028  6E13               	movwf	get_time@time,c
  2470  00002A  0E00               	movlw	high _starttime
  2471  00002C  6E14               	movwf	get_time@time+1,c
  2472  00002E  EC1D  F008         	call	_get_time	;wreg free
  2473                           
  2474                           ;main.c: 161: int h_ten = (starttime[2] & 0b11110000)>>4;
  2475  000032  EE20  F0B2         	lfsr	2,_starttime+4
  2476  000036  CFDE F034          	movff	postinc2,??_executingState
  2477  00003A  CFDD F035          	movff	postdec2,??_executingState+1
  2478  00003E  0E04               	movlw	4
  2479  000040  6E36               	movwf	(??_executingState+2)& (0+255),c
  2480  000042                     u3125:
  2481  000042  3435               	rlcf	??_executingState+1,w,c
  2482  000044  3235               	rrcf	??_executingState+1,f,c
  2483  000046  3234               	rrcf	??_executingState,f,c
  2484  000048  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2485  00004A  D7FB               	goto	u3125
  2486  00004C  0E0F               	movlw	15
  2487  00004E  1434               	andwf	??_executingState,w,c
  2488  000050  0100               	movlb	0	; () banked
  2489  000052  6F84               	movwf	executingState@h_ten& (0+255),b
  2490  000054  0100               	movlb	0	; () banked
  2491  000056  6B85               	clrf	(executingState@h_ten+1)& (0+255),b
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;main.c: 162: int h_one = (starttime[2] & 0b00001111);
  2495  000058  0E0F               	movlw	15
  2496  00005A  0100               	movlb	0	; () banked
  2497  00005C  15B2               	andwf	(_starttime+4)& (0+255),w,b
  2498  00005E  0100               	movlb	0	; () banked
  2499  000060  6F86               	movwf	executingState@h_one& (0+255),b
  2500  000062  0100               	movlb	0	; () banked
  2501  000064  6B87               	clrf	(executingState@h_one+1)& (0+255),b
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;main.c: 163: int m_ten = (starttime[1] & 0b11110000)>>4;
  2505  000066  EE20  F0B0         	lfsr	2,_starttime+2
  2506  00006A  CFDE F034          	movff	postinc2,??_executingState
  2507  00006E  CFDD F035          	movff	postdec2,??_executingState+1
  2508  000072  0E04               	movlw	4
  2509  000074  6E36               	movwf	(??_executingState+2)& (0+255),c
  2510  000076                     u3135:
  2511  000076  3435               	rlcf	??_executingState+1,w,c
  2512  000078  3235               	rrcf	??_executingState+1,f,c
  2513  00007A  3234               	rrcf	??_executingState,f,c
  2514  00007C  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2515  00007E  D7FB               	goto	u3135
  2516  000080  0E0F               	movlw	15
  2517  000082  1434               	andwf	??_executingState,w,c
  2518  000084  0100               	movlb	0	; () banked
  2519  000086  6F88               	movwf	executingState@m_ten& (0+255),b
  2520  000088  0100               	movlb	0	; () banked
  2521  00008A  6B89               	clrf	(executingState@m_ten+1)& (0+255),b
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;main.c: 164: int m_one = (starttime[1] & 0b00001111);
  2525  00008C  0E0F               	movlw	15
  2526  00008E  0100               	movlb	0	; () banked
  2527  000090  15B0               	andwf	(_starttime+2)& (0+255),w,b
  2528  000092  0100               	movlb	0	; () banked
  2529  000094  6F8A               	movwf	executingState@m_one& (0+255),b
  2530  000096  0100               	movlb	0	; () banked
  2531  000098  6B8B               	clrf	(executingState@m_one+1)& (0+255),b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 165: int s_ten = (starttime[0] & 0b11110000)>>4;
  2535  00009A  C0AE  F034         	movff	_starttime,??_executingState
  2536  00009E  C0AF  F035         	movff	_starttime+1,??_executingState+1
  2537  0000A2  0E04               	movlw	4
  2538  0000A4  6E36               	movwf	(??_executingState+2)& (0+255),c
  2539  0000A6                     u3145:
  2540  0000A6  3435               	rlcf	??_executingState+1,w,c
  2541  0000A8  3235               	rrcf	??_executingState+1,f,c
  2542  0000AA  3234               	rrcf	??_executingState,f,c
  2543  0000AC  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2544  0000AE  D7FB               	goto	u3145
  2545  0000B0  0E0F               	movlw	15
  2546  0000B2  1434               	andwf	??_executingState,w,c
  2547  0000B4  0100               	movlb	0	; () banked
  2548  0000B6  6F8C               	movwf	executingState@s_ten& (0+255),b
  2549  0000B8  0100               	movlb	0	; () banked
  2550  0000BA  6B8D               	clrf	(executingState@s_ten+1)& (0+255),b
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;main.c: 166: int s_one = (starttime[0] & 0b00001111);
  2554  0000BC  0E0F               	movlw	15
  2555  0000BE  0100               	movlb	0	; () banked
  2556  0000C0  15AE               	andwf	_starttime& (0+255),w,b
  2557  0000C2  0100               	movlb	0	; () banked
  2558  0000C4  6F8E               	movwf	executingState@s_one& (0+255),b
  2559  0000C6  0100               	movlb	0	; () banked
  2560  0000C8  6B8F               	clrf	(executingState@s_one+1)& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2564  0000CA  C088  F010         	movff	executingState@m_ten,___wmul@multiplier
  2565  0000CE  C089  F011         	movff	executingState@m_ten+1,___wmul@multiplier+1
  2566  0000D2  0E00               	movlw	0
  2567  0000D4  6E13               	movwf	___wmul@multiplicand+1,c
  2568  0000D6  0E0A               	movlw	10
  2569  0000D8  6E12               	movwf	___wmul@multiplicand,c
  2570  0000DA  EC1A  F00B         	call	___wmul	;wreg free
  2571  0000DE  0100               	movlb	0	; () banked
  2572  0000E0  518A               	movf	executingState@m_one& (0+255),w,b
  2573  0000E2  2410               	addwf	?___wmul,w,c
  2574  0000E4  0100               	movlb	0	; () banked
  2575  0000E6  6F90               	movwf	_executingState$1732& (0+255),b
  2576  0000E8  0100               	movlb	0	; () banked
  2577  0000EA  518B               	movf	(executingState@m_one+1)& (0+255),w,b
  2578  0000EC  2011               	addwfc	?___wmul+1,w,c
  2579  0000EE  0100               	movlb	0	; () banked
  2580  0000F0  6F91               	movwf	(_executingState$1732+1)& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2584  0000F2  C084  F010         	movff	executingState@h_ten,___wmul@multiplier
  2585  0000F6  C085  F011         	movff	executingState@h_ten+1,___wmul@multiplier+1
  2586  0000FA  0E00               	movlw	0
  2587  0000FC  6E13               	movwf	___wmul@multiplicand+1,c
  2588  0000FE  0E0A               	movlw	10
  2589  000100  6E12               	movwf	___wmul@multiplicand,c
  2590  000102  EC1A  F00B         	call	___wmul	;wreg free
  2591  000106  0100               	movlb	0	; () banked
  2592  000108  5186               	movf	executingState@h_one& (0+255),w,b
  2593  00010A  2410               	addwf	?___wmul,w,c
  2594  00010C  0100               	movlb	0	; () banked
  2595  00010E  6F92               	movwf	_executingState$1733& (0+255),b
  2596  000110  0100               	movlb	0	; () banked
  2597  000112  5187               	movf	(executingState@h_one+1)& (0+255),w,b
  2598  000114  2011               	addwfc	?___wmul+1,w,c
  2599  000116  0100               	movlb	0	; () banked
  2600  000118  6F93               	movwf	(_executingState$1733+1)& (0+255),b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2604  00011A  C08C  F010         	movff	executingState@s_ten,___wmul@multiplier
  2605  00011E  C08D  F011         	movff	executingState@s_ten+1,___wmul@multiplier+1
  2606  000122  0E00               	movlw	0
  2607  000124  6E13               	movwf	___wmul@multiplicand+1,c
  2608  000126  0E0A               	movlw	10
  2609  000128  6E12               	movwf	___wmul@multiplicand,c
  2610  00012A  EC1A  F00B         	call	___wmul	;wreg free
  2611  00012E  C010  F034         	movff	?___wmul,??_executingState
  2612  000132  C011  F035         	movff	?___wmul+1,??_executingState+1
  2613  000136  C092  F010         	movff	_executingState$1733,___wmul@multiplier
  2614  00013A  C093  F011         	movff	_executingState$1733+1,___wmul@multiplier+1
  2615  00013E  0E0E               	movlw	14
  2616  000140  6E13               	movwf	___wmul@multiplicand+1,c
  2617  000142  0E10               	movlw	16
  2618  000144  6E12               	movwf	___wmul@multiplicand,c
  2619  000146  EC1A  F00B         	call	___wmul	;wreg free
  2620  00014A  5010               	movf	?___wmul,w,c
  2621  00014C  2634               	addwf	??_executingState,f,c
  2622  00014E  5011               	movf	?___wmul+1,w,c
  2623  000150  2235               	addwfc	??_executingState+1,f,c
  2624  000152  C090  F010         	movff	_executingState$1732,___wmul@multiplier
  2625  000156  C091  F011         	movff	_executingState$1732+1,___wmul@multiplier+1
  2626  00015A  0E00               	movlw	0
  2627  00015C  6E13               	movwf	___wmul@multiplicand+1,c
  2628  00015E  0E3C               	movlw	60
  2629  000160  6E12               	movwf	___wmul@multiplicand,c
  2630  000162  EC1A  F00B         	call	___wmul	;wreg free
  2631  000166  5010               	movf	?___wmul,w,c
  2632  000168  2634               	addwf	??_executingState,f,c
  2633  00016A  5011               	movf	?___wmul+1,w,c
  2634  00016C  2235               	addwfc	??_executingState+1,f,c
  2635  00016E  0100               	movlb	0	; () banked
  2636  000170  518E               	movf	executingState@s_one& (0+255),w,b
  2637  000172  2434               	addwf	??_executingState,w,c
  2638  000174  0100               	movlb	0	; () banked
  2639  000176  6F9C               	movwf	executingState@start_s& (0+255),b
  2640  000178  0100               	movlb	0	; () banked
  2641  00017A  518F               	movf	(executingState@s_one+1)& (0+255),w,b
  2642  00017C  2035               	addwfc	??_executingState+1,w,c
  2643  00017E  0100               	movlb	0	; () banked
  2644  000180  6F9D               	movwf	(executingState@start_s+1)& (0+255),b
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;main.c: 169: LATCbits.LATC6 = 1;
  2648  000182  8C8B               	bsf	3979,6,c	;volatile
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 170: (INTCONbits.GIE = 0);
  2652  000184  9EF2               	bcf	intcon,7,c	;volatile
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 171: update_lcd();
  2656  000186  ECB1  F005         	call	_update_lcd	;wreg free
  2657                           
  2658                           ;main.c: 172: int timedif = get_timeDif(start_s);
  2659  00018A  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  2660  00018E  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  2661  000192  EC0F  F005         	call	_get_timeDif	;wreg free
  2662  000196  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  2663  00019A  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  2664                           
  2665                           ;main.c: 175: int emptyCount;
  2666                           ;main.c: 177: int snLoaded, alLoaded, snInSensor, alInSensor;
  2667                           ;main.c: 178: snLoaded = 1;
  2668  00019E  0E00               	movlw	0
  2669  0001A0  0100               	movlb	0	; () banked
  2670  0001A2  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2671  0001A4  0E01               	movlw	1
  2672  0001A6  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 179: alLoaded = 1;
  2676  0001A8  0E00               	movlw	0
  2677  0001AA  0100               	movlb	0	; () banked
  2678  0001AC  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2679  0001AE  0E01               	movlw	1
  2680  0001B0  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 180: snInSensor = 1;
  2684  0001B2  0E00               	movlw	0
  2685  0001B4  0100               	movlb	0	; () banked
  2686  0001B6  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2687  0001B8  0E01               	movlw	1
  2688  0001BA  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 181: alInSensor = 1;
  2692  0001BC  0E00               	movlw	0
  2693  0001BE  0100               	movlb	0	; () banked
  2694  0001C0  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2695  0001C2  0E01               	movlw	1
  2696  0001C4  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 182: emptyCount = 0;
  2700  0001C6  0E00               	movlw	0
  2701  0001C8  0100               	movlb	0	; () banked
  2702  0001CA  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2703  0001CC  0E00               	movlw	0
  2704  0001CE  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 184: servoRotate0(1);
  2708  0001D0  0E00               	movlw	0
  2709  0001D2  6E11               	movwf	servoRotate0@servo+1,c
  2710  0001D4  0E01               	movlw	1
  2711  0001D6  6E10               	movwf	servoRotate0@servo,c
  2712  0001D8  ECB0  F006         	call	_servoRotate0	;wreg free
  2713                           
  2714                           ;main.c: 185: servoRotate0(2);
  2715  0001DC  0E00               	movlw	0
  2716  0001DE  6E11               	movwf	servoRotate0@servo+1,c
  2717  0001E0  0E02               	movlw	2
  2718  0001E2  6E10               	movwf	servoRotate0@servo,c
  2719  0001E4  ECB0  F006         	call	_servoRotate0	;wreg free
  2720                           
  2721                           ;main.c: 186: servoRotate4(3);
  2722  0001E8  0E00               	movlw	0
  2723  0001EA  6E11               	movwf	servoRotate4@angle+1,c
  2724  0001EC  0E03               	movlw	3
  2725  0001EE  6E10               	movwf	servoRotate4@angle,c
  2726  0001F0  EC60  F00A         	call	_servoRotate4	;wreg free
  2727                           
  2728                           ;main.c: 187: servoRotate0(0);
  2729  0001F4  0E00               	movlw	0
  2730  0001F6  6E11               	movwf	servoRotate0@servo+1,c
  2731  0001F8  0E00               	movlw	0
  2732  0001FA  6E10               	movwf	servoRotate0@servo,c
  2733  0001FC  ECB0  F006         	call	_servoRotate0	;wreg free
  2734                           
  2735                           ;main.c: 188: servoRotate90n(4);
  2736  000200  0E00               	movlw	0
  2737  000202  6E11               	movwf	servoRotate90n@servo+1,c
  2738  000204  0E04               	movlw	4
  2739  000206  6E10               	movwf	servoRotate90n@servo,c
  2740  000208  EC13  F007         	call	_servoRotate90n	;wreg free
  2741                           
  2742                           ;main.c: 191: while(timedif < 180 && PORTBbits.RB0 == 1){
  2743  00020C  D182               	goto	l4306
  2744  00020E                     l4176:
  2745                           
  2746                           ;main.c: 192: update_lcd();
  2747  00020E  ECB1  F005         	call	_update_lcd	;wreg free
  2748                           
  2749                           ;main.c: 193: lcdInst(0b10000000);;
  2750  000212  0E80               	movlw	128
  2751  000214  ECA7  F00B         	call	_lcdInst
  2752                           
  2753                           ;main.c: 194: printf("Executing    %03d", emptyCount);
  2754  000218  0E36               	movlw	low STR_12
  2755  00021A  6E1C               	movwf	printf@f,c
  2756  00021C  0EFF               	movlw	high STR_12
  2757  00021E  6E1D               	movwf	printf@f+1,c
  2758  000220  C0AC  F01E         	movff	executingState@emptyCount,?_printf+2
  2759  000224  C0AD  F01F         	movff	executingState@emptyCount+1,?_printf+3
  2760  000228  ECB0  F002         	call	_printf	;wreg free
  2761                           
  2762                           ;main.c: 197: if(readSnTop() == 0){
  2763  00022C  EC4A  F00B         	call	_readSnTop	;wreg free
  2764  000230  5010               	movf	?_readSnTop,w,c
  2765  000232  1011               	iorwf	?_readSnTop+1,w,c
  2766  000234  A4D8               	btfss	status,2,c
  2767  000236  D005               	goto	l4184
  2768                           
  2769                           ;main.c: 198: snLoaded = 0;
  2770  000238  0E00               	movlw	0
  2771  00023A  0100               	movlb	0	; () banked
  2772  00023C  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2773  00023E  0E00               	movlw	0
  2774  000240  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2775  000242                     l4184:
  2776                           
  2777                           ;main.c: 199: }
  2778                           ;main.c: 200: if(readAlTop() == 0){
  2779  000242  EC6E  F00B         	call	_readAlTop	;wreg free
  2780  000246  5010               	movf	?_readAlTop,w,c
  2781  000248  1011               	iorwf	?_readAlTop+1,w,c
  2782  00024A  A4D8               	btfss	status,2,c
  2783  00024C  D005               	goto	l4188
  2784                           
  2785                           ;main.c: 201: alLoaded = 0;
  2786  00024E  0E00               	movlw	0
  2787  000250  0100               	movlb	0	; () banked
  2788  000252  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2789  000254  0E00               	movlw	0
  2790  000256  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2791  000258                     l4188:
  2792                           
  2793                           ;main.c: 202: }
  2794                           ;main.c: 203: if(readSnBot() == 0){
  2795  000258  EC62  F00B         	call	_readSnBot	;wreg free
  2796  00025C  5010               	movf	?_readSnBot,w,c
  2797  00025E  1011               	iorwf	?_readSnBot+1,w,c
  2798  000260  A4D8               	btfss	status,2,c
  2799  000262  D005               	goto	l4192
  2800                           
  2801                           ;main.c: 204: snInSensor = 0;
  2802  000264  0E00               	movlw	0
  2803  000266  0100               	movlb	0	; () banked
  2804  000268  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2805  00026A  0E00               	movlw	0
  2806  00026C  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2807  00026E                     l4192:
  2808                           
  2809                           ;main.c: 205: }
  2810                           ;main.c: 206: if(readAlBot() == 0){
  2811  00026E  EC7A  F00B         	call	_readAlBot	;wreg free
  2812  000272  5010               	movf	?_readAlBot,w,c
  2813  000274  1011               	iorwf	?_readAlBot+1,w,c
  2814  000276  A4D8               	btfss	status,2,c
  2815  000278  D005               	goto	l4196
  2816                           
  2817                           ;main.c: 207: alInSensor = 0;
  2818  00027A  0E00               	movlw	0
  2819  00027C  0100               	movlb	0	; () banked
  2820  00027E  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2821  000280  0E00               	movlw	0
  2822  000282  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2823  000284                     l4196:
  2824                           
  2825                           ;main.c: 208: }
  2826                           ;main.c: 210: if(snLoaded == 0){
  2827  000284  0100               	movlb	0	; () banked
  2828  000286  51A4               	movf	executingState@snLoaded& (0+255),w,b
  2829  000288  0100               	movlb	0	; () banked
  2830  00028A  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2831  00028C  A4D8               	btfss	status,2,c
  2832  00028E  D023               	goto	l4210
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 211: emptyCount = 0;
  2836  000290  0E00               	movlw	0
  2837  000292  0100               	movlb	0	; () banked
  2838  000294  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2839  000296  0E00               	movlw	0
  2840  000298  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 212: if(snInSensor == 1){
  2844  00029A  0100               	movlb	0	; () banked
  2845  00029C  05A8               	decf	executingState@snInSensor& (0+255),w,b
  2846  00029E  0100               	movlb	0	; () banked
  2847  0002A0  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  2848  0002A2  A4D8               	btfss	status,2,c
  2849  0002A4  D018               	goto	l4210
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 213: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2853  0002A6  0E0D               	movlw	13
  2854  0002A8  6E35               	movwf	(??_executingState+1)& (0+255),c
  2855  0002AA  0EAF               	movlw	175
  2856  0002AC  6E34               	movwf	??_executingState& (0+255),c
  2857  0002AE  0EB6               	movlw	182
  2858  0002B0                     u3567:
  2859  0002B0  2EE8               	decfsz	wreg,f,c
  2860  0002B2  D7FE               	bra	u3567
  2861  0002B4  2E34               	decfsz	??_executingState& (0+255),f,c
  2862  0002B6  D7FC               	bra	u3567
  2863  0002B8  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2864  0002BA  D7FA               	bra	u3567
  2865  0002BC  D000               	nop2	
  2866                           
  2867                           ;main.c: 214: dispenseSnCan();
  2868  0002BE  EC9B  F00A         	call	_dispenseSnCan	;wreg free
  2869                           
  2870                           ;main.c: 215: runCanSn = 1;
  2871  0002C2  0E00               	movlw	0
  2872  0002C4  0100               	movlb	0	; () banked
  2873  0002C6  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2874  0002C8  0E01               	movlw	1
  2875  0002CA  6F80               	movwf	executingState@runCanSn& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;main.c: 216: snLoaded = 1;
  2879  0002CC  0E00               	movlw	0
  2880  0002CE  0100               	movlb	0	; () banked
  2881  0002D0  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2882  0002D2  0E01               	movlw	1
  2883  0002D4  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2884  0002D6                     l4210:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 217: }
  2888                           ;main.c: 218: }
  2889                           ;main.c: 219: if(alLoaded == 0){
  2890  0002D6  0100               	movlb	0	; () banked
  2891  0002D8  51A6               	movf	executingState@alLoaded& (0+255),w,b
  2892  0002DA  0100               	movlb	0	; () banked
  2893  0002DC  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2894  0002DE  A4D8               	btfss	status,2,c
  2895  0002E0  D023               	goto	l4224
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;main.c: 220: emptyCount = 0;
  2899  0002E2  0E00               	movlw	0
  2900  0002E4  0100               	movlb	0	; () banked
  2901  0002E6  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2902  0002E8  0E00               	movlw	0
  2903  0002EA  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;main.c: 221: if(alInSensor == 1){
  2907  0002EC  0100               	movlb	0	; () banked
  2908  0002EE  05AA               	decf	executingState@alInSensor& (0+255),w,b
  2909  0002F0  0100               	movlb	0	; () banked
  2910  0002F2  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  2911  0002F4  A4D8               	btfss	status,2,c
  2912  0002F6  D018               	goto	l4224
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;main.c: 222: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2916  0002F8  0E0D               	movlw	13
  2917  0002FA  6E35               	movwf	(??_executingState+1)& (0+255),c
  2918  0002FC  0EAF               	movlw	175
  2919  0002FE  6E34               	movwf	??_executingState& (0+255),c
  2920  000300  0EB6               	movlw	182
  2921  000302                     u3577:
  2922  000302  2EE8               	decfsz	wreg,f,c
  2923  000304  D7FE               	bra	u3577
  2924  000306  2E34               	decfsz	??_executingState& (0+255),f,c
  2925  000308  D7FC               	bra	u3577
  2926  00030A  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2927  00030C  D7FA               	bra	u3577
  2928  00030E  D000               	nop2	
  2929                           
  2930                           ;main.c: 223: dispenseAlCan();
  2931  000310  ECB3  F00A         	call	_dispenseAlCan	;wreg free
  2932                           
  2933                           ;main.c: 224: runCanAl = 1;
  2934  000314  0E00               	movlw	0
  2935  000316  0100               	movlb	0	; () banked
  2936  000318  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2937  00031A  0E01               	movlw	1
  2938  00031C  6F82               	movwf	executingState@runCanAl& (0+255),b
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;main.c: 225: alLoaded = 1;
  2942  00031E  0E00               	movlw	0
  2943  000320  0100               	movlb	0	; () banked
  2944  000322  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2945  000324  0E01               	movlw	1
  2946  000326  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2947  000328                     l4224:
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;main.c: 226: }
  2951                           ;main.c: 227: }
  2952                           ;main.c: 229: if(snLoaded == 1 && alLoaded ==1){
  2953  000328  0100               	movlb	0	; () banked
  2954  00032A  05A4               	decf	executingState@snLoaded& (0+255),w,b
  2955  00032C  0100               	movlb	0	; () banked
  2956  00032E  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2957  000330  A4D8               	btfss	status,2,c
  2958  000332  D009               	goto	l4230
  2959                           
  2960                           ; BSR set to: 0
  2961  000334  0100               	movlb	0	; () banked
  2962  000336  05A6               	decf	executingState@alLoaded& (0+255),w,b
  2963  000338  0100               	movlb	0	; () banked
  2964  00033A  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2965  00033C  A4D8               	btfss	status,2,c
  2966  00033E  D003               	goto	l4230
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;main.c: 230: emptyCount++;
  2970  000340  0100               	movlb	0	; () banked
  2971  000342  4BAC               	infsnz	executingState@emptyCount& (0+255),f,b
  2972  000344  2BAD               	incf	(executingState@emptyCount+1)& (0+255),f,b
  2973  000346                     l4230:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 231: }
  2977                           ;main.c: 234: if(snInSensor == 0){
  2978  000346  0100               	movlb	0	; () banked
  2979  000348  51A8               	movf	executingState@snInSensor& (0+255),w,b
  2980  00034A  0100               	movlb	0	; () banked
  2981  00034C  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  2982  00034E  A4D8               	btfss	status,2,c
  2983  000350  D059               	goto	l4260
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;main.c: 235: int hasLabel;
  2987                           ;main.c: 236: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2988  000352  0E0D               	movlw	13
  2989  000354  6E35               	movwf	(??_executingState+1)& (0+255),c
  2990  000356  0EAF               	movlw	175
  2991  000358  6E34               	movwf	??_executingState& (0+255),c
  2992  00035A  0EB6               	movlw	182
  2993  00035C                     u3587:
  2994  00035C  2EE8               	decfsz	wreg,f,c
  2995  00035E  D7FE               	bra	u3587
  2996  000360  2E34               	decfsz	??_executingState& (0+255),f,c
  2997  000362  D7FC               	bra	u3587
  2998  000364  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2999  000366  D7FA               	bra	u3587
  3000  000368  D000               	nop2	
  3001                           
  3002                           ;main.c: 237: emptyCount = 0;
  3003  00036A  0E00               	movlw	0
  3004  00036C  0100               	movlb	0	; () banked
  3005  00036E  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3006  000370  0E00               	movlw	0
  3007  000372  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;main.c: 238: if(readSnSensor() == 1){
  3011  000374  EC56  F00B         	call	_readSnSensor	;wreg free
  3012  000378  0410               	decf	?_readSnSensor,w,c
  3013  00037A  1011               	iorwf	?_readSnSensor+1,w,c
  3014  00037C  A4D8               	btfss	status,2,c
  3015  00037E  D005               	goto	l4240
  3016                           
  3017                           ;main.c: 239: hasLabel = 0;
  3018  000380  0E00               	movlw	0
  3019  000382  0100               	movlb	0	; () banked
  3020  000384  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3021  000386  0E00               	movlw	0
  3022  000388  D004               	goto	L3
  3023  00038A                     l4240:
  3024                           
  3025                           ;main.c: 241: hasLabel = 1;
  3026  00038A  0E00               	movlw	0
  3027  00038C  0100               	movlb	0	; () banked
  3028  00038E  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3029  000390  0E01               	movlw	1
  3030  000392                     L3:
  3031  000392  6FA2               	movwf	executingState@hasLabel& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;main.c: 242: }
  3035                           ;main.c: 243: if(hasLabel == 0){
  3036                           
  3037                           ; BSR set to: 0
  3038  000394  0100               	movlb	0	; () banked
  3039  000396  51A2               	movf	executingState@hasLabel& (0+255),w,b
  3040  000398  0100               	movlb	0	; () banked
  3041  00039A  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3042  00039C  A4D8               	btfss	status,2,c
  3043  00039E  D014               	goto	l4250
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;main.c: 244: servoRotate90n(2);
  3047  0003A0  0E00               	movlw	0
  3048  0003A2  6E11               	movwf	servoRotate90n@servo+1,c
  3049  0003A4  0E02               	movlw	2
  3050  0003A6  6E10               	movwf	servoRotate90n@servo,c
  3051  0003A8  EC13  F007         	call	_servoRotate90n	;wreg free
  3052                           
  3053                           ;main.c: 245: servoRotate0(2);
  3054  0003AC  0E00               	movlw	0
  3055  0003AE  6E11               	movwf	servoRotate0@servo+1,c
  3056  0003B0  0E02               	movlw	2
  3057  0003B2  6E10               	movwf	servoRotate0@servo,c
  3058  0003B4  ECB0  F006         	call	_servoRotate0	;wreg free
  3059                           
  3060                           ;main.c: 246: runCanSn = 0;
  3061  0003B8  0E00               	movlw	0
  3062  0003BA  0100               	movlb	0	; () banked
  3063  0003BC  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3064  0003BE  0E00               	movlw	0
  3065  0003C0  6F80               	movwf	executingState@runCanSn& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 247: snNoLabel++;
  3069  0003C2  4A49               	infsnz	_snNoLabel,f,c
  3070  0003C4  2A4A               	incf	_snNoLabel+1,f,c
  3071                           
  3072                           ;main.c: 248: }else if(hasLabel == 1){
  3073  0003C6  D019               	goto	l4258
  3074  0003C8                     l4250:
  3075                           
  3076                           ; BSR set to: 0
  3077  0003C8  0100               	movlb	0	; () banked
  3078  0003CA  05A2               	decf	executingState@hasLabel& (0+255),w,b
  3079  0003CC  0100               	movlb	0	; () banked
  3080  0003CE  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3081  0003D0  A4D8               	btfss	status,2,c
  3082  0003D2  D013               	goto	l4258
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 249: servoRotate90(2);
  3086  0003D4  0E00               	movlw	0
  3087  0003D6  6E11               	movwf	servoRotate90@servo+1,c
  3088  0003D8  0E02               	movlw	2
  3089  0003DA  6E10               	movwf	servoRotate90@servo,c
  3090  0003DC  EC4D  F006         	call	_servoRotate90	;wreg free
  3091                           
  3092                           ;main.c: 250: servoRotate0(2);
  3093  0003E0  0E00               	movlw	0
  3094  0003E2  6E11               	movwf	servoRotate0@servo+1,c
  3095  0003E4  0E02               	movlw	2
  3096  0003E6  6E10               	movwf	servoRotate0@servo,c
  3097  0003E8  ECB0  F006         	call	_servoRotate0	;wreg free
  3098                           
  3099                           ;main.c: 251: runCanSn = 0;
  3100  0003EC  0E00               	movlw	0
  3101  0003EE  0100               	movlb	0	; () banked
  3102  0003F0  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3103  0003F2  0E00               	movlw	0
  3104  0003F4  6F80               	movwf	executingState@runCanSn& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;main.c: 252: snLabel++;
  3108  0003F6  4A47               	infsnz	_snLabel,f,c
  3109  0003F8  2A48               	incf	_snLabel+1,f,c
  3110  0003FA                     l4258:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 253: }
  3114                           ;main.c: 254: snInSensor = 1;
  3115  0003FA  0E00               	movlw	0
  3116  0003FC  0100               	movlb	0	; () banked
  3117  0003FE  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  3118  000400  0E01               	movlw	1
  3119  000402  6FA8               	movwf	executingState@snInSensor& (0+255),b
  3120  000404                     l4260:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;main.c: 255: }
  3124                           ;main.c: 257: if(alInSensor == 0){
  3125  000404  0100               	movlb	0	; () banked
  3126  000406  51AA               	movf	executingState@alInSensor& (0+255),w,b
  3127  000408  0100               	movlb	0	; () banked
  3128  00040A  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3129  00040C  A4D8               	btfss	status,2,c
  3130  00040E  D049               	goto	l4288
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 258: emptyCount = 0;
  3134  000410  0E00               	movlw	0
  3135  000412  0100               	movlb	0	; () banked
  3136  000414  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3137  000416  0E00               	movlw	0
  3138  000418  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 259: int hasTab;
  3142                           ;main.c: 260: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3143  00041A  0E0D               	movlw	13
  3144  00041C  6E35               	movwf	(??_executingState+1)& (0+255),c
  3145  00041E  0EAF               	movlw	175
  3146  000420  6E34               	movwf	??_executingState& (0+255),c
  3147  000422  0EB6               	movlw	182
  3148  000424                     u3597:
  3149  000424  2EE8               	decfsz	wreg,f,c
  3150  000426  D7FE               	bra	u3597
  3151  000428  2E34               	decfsz	??_executingState& (0+255),f,c
  3152  00042A  D7FC               	bra	u3597
  3153  00042C  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3154  00042E  D7FA               	bra	u3597
  3155  000430  D000               	nop2	
  3156                           
  3157                           ;main.c: 261: hasTab = servoRotateArm();
  3158  000432  ECA1  F008         	call	_servoRotateArm	;wreg free
  3159  000436  C010  F09E         	movff	?_servoRotateArm,executingState@hasTab
  3160  00043A  C011  F09F         	movff	?_servoRotateArm+1,executingState@hasTab+1
  3161                           
  3162                           ;main.c: 262: servoRotate90n(4);
  3163  00043E  0E00               	movlw	0
  3164  000440  6E11               	movwf	servoRotate90n@servo+1,c
  3165  000442  0E04               	movlw	4
  3166  000444  6E10               	movwf	servoRotate90n@servo,c
  3167  000446  EC13  F007         	call	_servoRotate90n	;wreg free
  3168                           
  3169                           ;main.c: 263: if(hasTab){
  3170  00044A  0100               	movlb	0	; () banked
  3171  00044C  519E               	movf	executingState@hasTab& (0+255),w,b
  3172  00044E  0100               	movlb	0	; () banked
  3173  000450  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3174  000452  B4D8               	btfsc	status,2,c
  3175  000454  D00E               	goto	l4278
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;main.c: 264: servoRotate90n(3);
  3179  000456  0E00               	movlw	0
  3180  000458  6E11               	movwf	servoRotate90n@servo+1,c
  3181  00045A  0E03               	movlw	3
  3182  00045C  6E10               	movwf	servoRotate90n@servo,c
  3183  00045E  EC13  F007         	call	_servoRotate90n	;wreg free
  3184                           
  3185                           ;main.c: 265: runCanAl = 0;
  3186  000462  0E00               	movlw	0
  3187  000464  0100               	movlb	0	; () banked
  3188  000466  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3189  000468  0E00               	movlw	0
  3190  00046A  6F82               	movwf	executingState@runCanAl& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 266: alTab++;
  3194  00046C  4A43               	infsnz	_alTab,f,c
  3195  00046E  2A44               	incf	_alTab+1,f,c
  3196                           
  3197                           ;main.c: 267: }else if (hasTab == 0){
  3198  000470  D013               	goto	l4286
  3199  000472                     l4278:
  3200                           
  3201                           ; BSR set to: 0
  3202  000472  0100               	movlb	0	; () banked
  3203  000474  519E               	movf	executingState@hasTab& (0+255),w,b
  3204  000476  0100               	movlb	0	; () banked
  3205  000478  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3206  00047A  A4D8               	btfss	status,2,c
  3207  00047C  D00D               	goto	l4286
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 268: servoRotate90(3);
  3211  00047E  0E00               	movlw	0
  3212  000480  6E11               	movwf	servoRotate90@servo+1,c
  3213  000482  0E03               	movlw	3
  3214  000484  6E10               	movwf	servoRotate90@servo,c
  3215  000486  EC4D  F006         	call	_servoRotate90	;wreg free
  3216                           
  3217                           ;main.c: 269: runCanAl = 0;
  3218  00048A  0E00               	movlw	0
  3219  00048C  0100               	movlb	0	; () banked
  3220  00048E  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3221  000490  0E00               	movlw	0
  3222  000492  6F82               	movwf	executingState@runCanAl& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 270: alNoTab++;
  3226  000494  4A41               	infsnz	_alNoTab,f,c
  3227  000496  2A42               	incf	_alNoTab+1,f,c
  3228  000498                     l4286:
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;main.c: 271: }
  3232                           ;main.c: 272: alInSensor = 1;
  3233  000498  0E00               	movlw	0
  3234  00049A  0100               	movlb	0	; () banked
  3235  00049C  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  3236  00049E  0E01               	movlw	1
  3237  0004A0  6FAA               	movwf	executingState@alInSensor& (0+255),b
  3238  0004A2                     l4288:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 273: }
  3242                           ;main.c: 275: timedif = get_timeDif(start_s);
  3243  0004A2  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  3244  0004A6  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  3245  0004AA  EC0F  F005         	call	_get_timeDif	;wreg free
  3246  0004AE  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  3247  0004B2  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  3248                           
  3249                           ;main.c: 276: if(emptyCount > 20){
  3250  0004B6  0100               	movlb	0	; () banked
  3251  0004B8  BFAD               	btfsc	(executingState@emptyCount+1)& (0+255),7,b
  3252  0004BA  D00F               	goto	l4298
  3253  0004BC  0100               	movlb	0	; () banked
  3254  0004BE  51AD               	movf	(executingState@emptyCount+1)& (0+255),w,b
  3255  0004C0  E105               	bnz	u3320
  3256  0004C2  0E15               	movlw	21
  3257  0004C4  0100               	movlb	0	; () banked
  3258  0004C6  5DAC               	subwf	executingState@emptyCount& (0+255),w,b
  3259  0004C8  A0D8               	btfss	status,0,c
  3260  0004CA  D007               	goto	l4298
  3261  0004CC                     u3320:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 277: state = FINISH;
  3265  0004CC  0E02               	movlw	2
  3266  0004CE  6E4B               	movwf	_state,c
  3267                           
  3268                           ;main.c: 278: runResult = 1;
  3269  0004D0  0E00               	movlw	0
  3270  0004D2  6E46               	movwf	_runResult+1,c
  3271  0004D4  0E01               	movlw	1
  3272  0004D6  6E45               	movwf	_runResult,c
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;main.c: 279: return;
  3276  0004D8  0012               	return	
  3277  0004DA                     l4298:
  3278                           
  3279                           ; BSR set to: 0
  3280  0004DA  0100               	movlb	0	; () banked
  3281  0004DC  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3282  0004DE  D00E               	goto	l4304
  3283  0004E0  0100               	movlb	0	; () banked
  3284  0004E2  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3285  0004E4  E105               	bnz	u3330
  3286  0004E6  0EB5               	movlw	181
  3287  0004E8  0100               	movlb	0	; () banked
  3288  0004EA  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3289  0004EC  A0D8               	btfss	status,0,c
  3290  0004EE  D006               	goto	l4304
  3291  0004F0                     u3330:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;main.c: 281: state = FINISH;
  3295  0004F0  0E02               	movlw	2
  3296  0004F2  6E4B               	movwf	_state,c
  3297                           
  3298                           ;main.c: 282: runResult = 0;
  3299  0004F4  0E00               	movlw	0
  3300  0004F6  6E46               	movwf	_runResult+1,c
  3301  0004F8  0E00               	movlw	0
  3302  0004FA  D7ED               	goto	L4
  3303  0004FC                     l4304:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 284: }
  3307                           ;main.c: 285: _delay((unsigned long)((500)*(10000000/4000.0)));
  3308  0004FC  0E07               	movlw	7
  3309  0004FE  6E35               	movwf	(??_executingState+1)& (0+255),c
  3310  000500  0E58               	movlw	88
  3311  000502  6E34               	movwf	??_executingState& (0+255),c
  3312  000504  0E5A               	movlw	90
  3313  000506                     u3607:
  3314  000506  2EE8               	decfsz	wreg,f,c
  3315  000508  D7FE               	bra	u3607
  3316  00050A  2E34               	decfsz	??_executingState& (0+255),f,c
  3317  00050C  D7FC               	bra	u3607
  3318  00050E  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3319  000510  D7FA               	bra	u3607
  3320  000512                     l4306:
  3321  000512  0100               	movlb	0	; () banked
  3322  000514  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3323  000516  D008               	goto	l4308
  3324  000518  0100               	movlb	0	; () banked
  3325  00051A  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3326  00051C  E107               	bnz	l263
  3327  00051E  0EB4               	movlw	180
  3328  000520  0100               	movlb	0	; () banked
  3329  000522  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3330  000524  B0D8               	btfsc	status,0,c
  3331  000526  D002               	goto	l263
  3332  000528                     l4308:
  3333                           
  3334                           ; BSR set to: 0
  3335  000528  B081               	btfsc	3969,0,c	;volatile
  3336  00052A  D671               	goto	l4176
  3337  00052C                     l263:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 286: }
  3341                           ;main.c: 288: LATCbits.LATC6 = 0;
  3342  00052C  9C8B               	bcf	3979,6,c	;volatile
  3343                           
  3344                           ;main.c: 289: int res[4];
  3345                           ;main.c: 290: res[0] = alTab;
  3346  00052E  C043  F094         	movff	_alTab,executingState@res
  3347  000532  C044  F095         	movff	_alTab+1,executingState@res+1
  3348                           
  3349                           ;main.c: 291: res[1] = alNoTab;
  3350  000536  C041  F096         	movff	_alNoTab,executingState@res+2
  3351  00053A  C042  F097         	movff	_alNoTab+1,executingState@res+3
  3352                           
  3353                           ;main.c: 292: res[2] = snLabel;
  3354  00053E  C047  F098         	movff	_snLabel,executingState@res+4
  3355  000542  C048  F099         	movff	_snLabel+1,executingState@res+5
  3356                           
  3357                           ;main.c: 293: res[3] = snNoLabel;
  3358  000546  C049  F09A         	movff	_snNoLabel,executingState@res+6
  3359  00054A  C04A  F09B         	movff	_snNoLabel+1,executingState@res+7
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 294: eeprom_LogResult(res);
  3363  00054E  0E94               	movlw	low executingState@res
  3364  000550  6E13               	movwf	eeprom_LogResult@data,c
  3365  000552  0E00               	movlw	high executingState@res
  3366  000554  6E14               	movwf	eeprom_LogResult@data+1,c
  3367  000556  ECAE  F009         	call	_eeprom_LogResult	;wreg free
  3368                           
  3369                           ;main.c: 295: state = FINISH;
  3370  00055A  0E02               	movlw	2
  3371  00055C  6E4B               	movwf	_state,c
  3372  00055E  0012               	return		;funcret
  3373  000560                     __end_of_executingState:
  3374                           	opt stack 0
  3375                           tblptru	equ	0xFF8
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           intcon3	equ	0xFF0
  3380                           postinc0	equ	0xFEE
  3381                           wreg	equ	0xFE8
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _update_lcd *****************
  3390 ;; Defined at:
  3391 ;;		line 44 in file "main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    4
  3412 ;; This function calls:
  3413 ;;		_lcdInst
  3414 ;;		_printf
  3415 ;; This function is called by:
  3416 ;;		_mainState
  3417 ;;		_executingState
  3418 ;;		_finishState
  3419 ;;		_logState
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text11
  3424  000B62                     __ptext11:
  3425                           	opt stack 0
  3426  000B62                     _update_lcd:
  3427                           	opt stack 25
  3428                           
  3429                           ;main.c: 46: lcdInst(0b10000000);;
  3430                           
  3431                           ;incstack = 0
  3432  000B62  0E80               	movlw	128
  3433  000B64  ECA7  F00B         	call	_lcdInst
  3434                           
  3435                           ;main.c: 48: switch (state)
  3436  000B68  D083               	goto	l3914
  3437  000B6A                     l3882:
  3438                           
  3439                           ;main.c: 51: printf("%02x/%01x/%02x ", time[6], time[5], time[4]);
  3440  000B6A  0EBF               	movlw	low STR_1
  3441  000B6C  6E1C               	movwf	printf@f,c
  3442  000B6E  0EFF               	movlw	high STR_1
  3443  000B70  6E1D               	movwf	printf@f+1,c
  3444  000B72  C058  F01E         	movff	_time+12,?_printf+2
  3445  000B76  C059  F01F         	movff	_time+13,?_printf+3
  3446  000B7A  C056  F020         	movff	_time+10,?_printf+4
  3447  000B7E  C057  F021         	movff	_time+11,?_printf+5
  3448  000B82  C054  F022         	movff	_time+8,?_printf+6
  3449  000B86  C055  F023         	movff	_time+9,?_printf+7
  3450  000B8A  ECB0  F002         	call	_printf	;wreg free
  3451                           
  3452                           ;main.c: 52: printf("%02x:%02x:%02x", time[2], time[1], time[0]);
  3453  000B8E  0EDE               	movlw	low STR_2
  3454  000B90  6E1C               	movwf	printf@f,c
  3455  000B92  0EFF               	movlw	high STR_2
  3456  000B94  6E1D               	movwf	printf@f+1,c
  3457  000B96  C050  F01E         	movff	_time+4,?_printf+2
  3458  000B9A  C051  F01F         	movff	_time+5,?_printf+3
  3459  000B9E  C04E  F020         	movff	_time+2,?_printf+4
  3460  000BA2  C04F  F021         	movff	_time+3,?_printf+5
  3461  000BA6  C04C  F022         	movff	_time,?_printf+6
  3462  000BAA  C04D  F023         	movff	_time+1,?_printf+7
  3463  000BAE  ECB0  F002         	call	_printf	;wreg free
  3464                           
  3465                           ;main.c: 54: lcdInst(0b11000000);;
  3466  000BB2  0EC0               	movlw	192
  3467  000BB4  ECA7  F00B         	call	_lcdInst
  3468                           
  3469                           ;main.c: 55: printf("1:Start 2:Logs  ");
  3470  000BB8  0EAE               	movlw	low STR_3
  3471  000BBA  6E1C               	movwf	printf@f,c
  3472  000BBC  0EFF               	movlw	high STR_3
  3473  000BBE  6E1D               	movwf	printf@f+1,c
  3474  000BC0  ECB0  F002         	call	_printf	;wreg free
  3475                           
  3476                           ;main.c: 56: break;
  3477  000BC4  D063               	goto	l3916
  3478  000BC6                     l3888:
  3479                           
  3480                           ;main.c: 59: printf("%03d              ", logdata);
  3481  000BC6  0E11               	movlw	low STR_4
  3482  000BC8  6E1C               	movwf	printf@f,c
  3483  000BCA  0EFF               	movlw	high STR_4
  3484  000BCC  6E1D               	movwf	printf@f+1,c
  3485  000BCE  C05A  F01E         	movff	_logdata,?_printf+2
  3486  000BD2  6A1F               	clrf	?_printf+3,c
  3487  000BD4  ECB0  F002         	call	_printf	;wreg free
  3488                           
  3489                           ;main.c: 60: lcdInst(0b11000000);
  3490  000BD8  0EC0               	movlw	192
  3491  000BDA  ECA7  F00B         	call	_lcdInst
  3492                           
  3493                           ;main.c: 61: printf("1:Prev 0:Exit   ");
  3494  000BDE  0E9D               	movlw	low STR_5
  3495  000BE0  6E1C               	movwf	printf@f,c
  3496  000BE2  0EFF               	movlw	high STR_5
  3497  000BE4  6E1D               	movwf	printf@f+1,c
  3498  000BE6  ECB0  F002         	call	_printf	;wreg free
  3499                           
  3500                           ;main.c: 62: break;
  3501  000BEA  D050               	goto	l3916
  3502  000BEC                     l3894:
  3503                           
  3504                           ;main.c: 64: printf("Executing...    ");
  3505  000BEC  0E8C               	movlw	low STR_6
  3506  000BEE  6E1C               	movwf	printf@f,c
  3507  000BF0  0EFF               	movlw	high STR_6
  3508  000BF2  6E1D               	movwf	printf@f+1,c
  3509  000BF4  ECB0  F002         	call	_printf	;wreg free
  3510                           
  3511                           ;main.c: 65: lcdInst(0b11000000);;
  3512  000BF8  0EC0               	movlw	192
  3513  000BFA  ECA7  F00B         	call	_lcdInst
  3514                           
  3515                           ;main.c: 66: printf("aN%d/a%d/sN%d/S%d",alNoTab, alTab, snNoLabel, snLabel);
  3516  000BFE  0E24               	movlw	low STR_7
  3517  000C00  6E1C               	movwf	printf@f,c
  3518  000C02  0EFF               	movlw	high STR_7
  3519  000C04  6E1D               	movwf	printf@f+1,c
  3520  000C06  C041  F01E         	movff	_alNoTab,?_printf+2
  3521  000C0A  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3522  000C0E  C043  F020         	movff	_alTab,?_printf+4
  3523  000C12  C044  F021         	movff	_alTab+1,?_printf+5
  3524  000C16  C049  F022         	movff	_snNoLabel,?_printf+6
  3525  000C1A  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3526  000C1E  C047  F024         	movff	_snLabel,?_printf+8
  3527  000C22  C048  F025         	movff	_snLabel+1,?_printf+9
  3528  000C26  ECB0  F002         	call	_printf	;wreg free
  3529                           
  3530                           ;main.c: 68: break;
  3531  000C2A  D030               	goto	l3916
  3532  000C2C                     l3900:
  3533                           
  3534                           ;main.c: 71: if(runResult == 1){
  3535  000C2C  0445               	decf	_runResult,w,c
  3536  000C2E  1046               	iorwf	_runResult+1,w,c
  3537  000C30  A4D8               	btfss	status,2,c
  3538  000C32  D007               	goto	l3904
  3539                           
  3540                           ;main.c: 72: printf("Finished        ");
  3541  000C34  0E6A               	movlw	low STR_8
  3542  000C36  6E1C               	movwf	printf@f,c
  3543  000C38  0EFF               	movlw	high STR_8
  3544  000C3A  6E1D               	movwf	printf@f+1,c
  3545  000C3C  ECB0  F002         	call	_printf	;wreg free
  3546                           
  3547                           ;main.c: 73: }
  3548  000C40  D006               	goto	l3906
  3549  000C42                     l3904:
  3550                           
  3551                           ;main.c: 74: else
  3552                           ;main.c: 75: {
  3553                           ;main.c: 76: printf("Terminated      ");
  3554  000C42  0E7B               	movlw	low STR_9
  3555  000C44  6E1C               	movwf	printf@f,c
  3556  000C46  0EFF               	movlw	high STR_9
  3557  000C48  6E1D               	movwf	printf@f+1,c
  3558  000C4A  ECB0  F002         	call	_printf	;wreg free
  3559  000C4E                     l3906:
  3560                           
  3561                           ;main.c: 77: }
  3562                           ;main.c: 78: lcdInst(0b11000000);;
  3563  000C4E  0EC0               	movlw	192
  3564  000C50  ECA7  F00B         	call	_lcdInst
  3565                           
  3566                           ;main.c: 79: printf("0:Menu          ");
  3567  000C54  0E59               	movlw	low STR_10
  3568  000C56  6E1C               	movwf	printf@f,c
  3569  000C58  0EFF               	movlw	high STR_10
  3570  000C5A  6E1D               	movwf	printf@f+1,c
  3571  000C5C  ECB0  F002         	call	_printf	;wreg free
  3572                           
  3573                           ;main.c: 80: break;
  3574  000C60  D015               	goto	l3916
  3575  000C62                     l3910:
  3576                           
  3577                           ;main.c: 82: printf("error");
  3578  000C62  0EF9               	movlw	low STR_11
  3579  000C64  6E1C               	movwf	printf@f,c
  3580  000C66  0EFF               	movlw	high STR_11
  3581  000C68  6E1D               	movwf	printf@f+1,c
  3582  000C6A  ECB0  F002         	call	_printf	;wreg free
  3583                           
  3584                           ;main.c: 84: }
  3585                           
  3586                           ;main.c: 83: break;
  3587  000C6E  D00E               	goto	l3916
  3588  000C70                     l3914:
  3589  000C70  504B               	movf	_state,w,c
  3590                           
  3591                           ; Switch size 1, requested type "space"
  3592                           ; Number of cases is 4, Range of values is 0 to 3
  3593                           ; switch strategies available:
  3594                           ; Name         Instructions Cycles
  3595                           ; simple_byte           13     7 (average)
  3596                           ;	Chosen strategy is simple_byte
  3597  000C72  0A00               	xorlw	0	; case 0
  3598  000C74  B4D8               	btfsc	status,2,c
  3599  000C76  D779               	goto	l3882
  3600  000C78  0A01               	xorlw	1	; case 1
  3601  000C7A  B4D8               	btfsc	status,2,c
  3602  000C7C  D7B7               	goto	l3894
  3603  000C7E  0A03               	xorlw	3	; case 2
  3604  000C80  B4D8               	btfsc	status,2,c
  3605  000C82  D7D4               	goto	l3900
  3606  000C84  0A01               	xorlw	1	; case 3
  3607  000C86  B4D8               	btfsc	status,2,c
  3608  000C88  D79E               	goto	l3888
  3609  000C8A  D7EB               	goto	l3910
  3610  000C8C                     l3916:
  3611                           
  3612                           ;main.c: 86: lcdInst(0b10000000);;
  3613  000C8C  0E80               	movlw	128
  3614  000C8E  ECA7  F00B         	call	_lcdInst
  3615                           
  3616                           ;main.c: 87: lcdInst(0b11000000);;
  3617  000C92  0EC0               	movlw	192
  3618  000C94  ECA7  F00B         	call	_lcdInst
  3619  000C98  0012               	return		;funcret
  3620  000C9A                     __end_of_update_lcd:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           intcon3	equ	0xFF0
  3627                           postinc0	equ	0xFEE
  3628                           wreg	equ	0xFE8
  3629                           indf2	equ	0xFDF
  3630                           postinc2	equ	0xFDE
  3631                           postdec2	equ	0xFDD
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _servoRotateArm *****************
  3637 ;; Defined at:
  3638 ;;		line 210 in file "servos.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;		None
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  i               2   20[COMRAM] int 
  3643 ;;  res             2   18[COMRAM] int 
  3644 ;;  i               2    0        unsigned int 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  2   15[COMRAM] int 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;Total ram usage:        7 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    1
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_executingState
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text12
  3669  001142                     __ptext12:
  3670                           	opt stack 0
  3671  001142                     _servoRotateArm:
  3672                           	opt stack 28
  3673                           
  3674                           ;servos.c: 211: unsigned int i;
  3675                           ;servos.c: 212: int res = -1;
  3676                           
  3677                           ;incstack = 0
  3678  001142  6813               	setf	servoRotateArm@res,c
  3679  001144  6814               	setf	servoRotateArm@res+1,c
  3680                           
  3681                           ;servos.c: 213: for(int i = 0; i < 60; i++){
  3682  001146  0E00               	movlw	0
  3683  001148  6E16               	movwf	servoRotateArm@i_1035+1,c
  3684  00114A  0E00               	movlw	0
  3685  00114C  6E15               	movwf	servoRotateArm@i_1035,c
  3686  00114E  BE16               	btfsc	servoRotateArm@i_1035+1,7,c
  3687  001150  D006               	goto	l500
  3688  001152  5016               	movf	servoRotateArm@i_1035+1,w,c
  3689  001154  E126               	bnz	l501
  3690  001156  0E3C               	movlw	60
  3691  001158  5C15               	subwf	servoRotateArm@i_1035,w,c
  3692  00115A  B0D8               	btfsc	status,0,c
  3693  00115C  D022               	goto	l501
  3694  00115E                     l500:
  3695                           
  3696                           ;servos.c: 214: LATBbits.LATB2 = 1;
  3697  00115E  848A               	bsf	3978,2,c	;volatile
  3698                           
  3699                           ;servos.c: 215: _delay((unsigned long)((1800)*(10000000/4000000.0)));
  3700  001160  0E06               	movlw	6
  3701  001162  6E12               	movwf	??_servoRotateArm& (0+255),c
  3702  001164  0ED7               	movlw	215
  3703  001166                     u3617:
  3704  001166  2EE8               	decfsz	wreg,f,c
  3705  001168  D7FE               	bra	u3617
  3706  00116A  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  3707  00116C  D7FC               	bra	u3617
  3708  00116E  F000               	nop	
  3709                           
  3710                           ;servos.c: 216: LATBbits.LATB2 = 0;
  3711  001170  948A               	bcf	3978,2,c	;volatile
  3712                           
  3713                           ;servos.c: 217: _delay((unsigned long)((18200)*(10000000/4000000.0)));
  3714  001172  0E3C               	movlw	60
  3715  001174  6E12               	movwf	??_servoRotateArm& (0+255),c
  3716  001176  0E16               	movlw	22
  3717  001178                     u3627:
  3718  001178  2EE8               	decfsz	wreg,f,c
  3719  00117A  D7FE               	bra	u3627
  3720  00117C  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  3721  00117E  D7FC               	bra	u3627
  3722                           
  3723                           ;servos.c: 218: if(PORTCbits.RC1 == 1){
  3724  001180  A282               	btfss	3970,1,c	;volatile
  3725  001182  D004               	goto	l4060
  3726                           
  3727                           ;servos.c: 219: res = 1;
  3728  001184  0E00               	movlw	0
  3729  001186  6E14               	movwf	servoRotateArm@res+1,c
  3730  001188  0E01               	movlw	1
  3731  00118A  D003               	goto	L5
  3732  00118C                     l4060:
  3733                           
  3734                           ;servos.c: 221: res = 0;
  3735  00118C  0E00               	movlw	0
  3736  00118E  6E14               	movwf	servoRotateArm@res+1,c
  3737  001190  0E00               	movlw	0
  3738  001192                     L5:
  3739  001192  6E13               	movwf	servoRotateArm@res,c
  3740  001194  4A15               	infsnz	servoRotateArm@i_1035,f,c
  3741  001196  2A16               	incf	servoRotateArm@i_1035+1,f,c
  3742  001198  BE16               	btfsc	servoRotateArm@i_1035+1,7,c
  3743  00119A  D7E1               	goto	l500
  3744  00119C  5016               	movf	servoRotateArm@i_1035+1,w,c
  3745  00119E  E101               	bnz	u3040
  3746  0011A0  D7DA               	goto	L6
  3747  0011A2                     u3040:
  3748  0011A2                     l501:
  3749                           
  3750                           ;servos.c: 222: }
  3751                           ;servos.c: 223: }
  3752                           ;servos.c: 224: return res;
  3753  0011A2  C013  F010         	movff	servoRotateArm@res,?_servoRotateArm
  3754  0011A6  C014  F011         	movff	servoRotateArm@res+1,?_servoRotateArm+1
  3755  0011AA  0012               	return		;funcret
  3756  0011AC                     __end_of_servoRotateArm:
  3757                           	opt stack 0
  3758                           tblptru	equ	0xFF8
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           indf2	equ	0xFDF
  3766                           postinc2	equ	0xFDE
  3767                           postdec2	equ	0xFDD
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _servoRotate90n *****************
  3773 ;; Defined at:
  3774 ;;		line 167 in file "servos.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  servo           2   15[COMRAM] int 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  i               2   19[COMRAM] unsigned int 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;Total ram usage:        6 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    1
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_executingState
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text13
  3803  000E26                     __ptext13:
  3804                           	opt stack 0
  3805  000E26                     _servoRotate90n:
  3806                           	opt stack 28
  3807                           
  3808                           ;servos.c: 169: unsigned int i;
  3809                           ;servos.c: 170: for (i = 0; i < 50; i++) {
  3810                           
  3811                           ;incstack = 0
  3812  000E26  0E00               	movlw	0
  3813  000E28  6E15               	movwf	servoRotate90n@i+1,c
  3814  000E2A  0E00               	movlw	0
  3815  000E2C  6E14               	movwf	servoRotate90n@i,c
  3816  000E2E                     l3956:
  3817  000E2E  5015               	movf	servoRotate90n@i+1,w,c
  3818  000E30  E15A               	bnz	l497
  3819  000E32  0E32               	movlw	50
  3820  000E34  5C14               	subwf	servoRotate90n@i,w,c
  3821  000E36  B0D8               	btfsc	status,0,c
  3822  000E38  0012               	return	
  3823  000E3A  D00A               	goto	l3962
  3824  000E3C                     l484:
  3825                           
  3826                           ;servos.c: 173: LATAbits.LATA4 = 1;
  3827  000E3C  8889               	bsf	3977,4,c	;volatile
  3828                           
  3829                           ;servos.c: 174: break;
  3830  000E3E  D020               	goto	l3964
  3831  000E40                     l486:
  3832                           
  3833                           ;servos.c: 176: LATAbits.LATA5 = 1;
  3834  000E40  8A89               	bsf	3977,5,c	;volatile
  3835                           
  3836                           ;servos.c: 177: break;
  3837  000E42  D01E               	goto	l3964
  3838  000E44                     l487:
  3839                           
  3840                           ;servos.c: 179: LATEbits.LATE0 = 1;
  3841  000E44  808D               	bsf	3981,0,c	;volatile
  3842                           
  3843                           ;servos.c: 180: break;
  3844  000E46  D01C               	goto	l3964
  3845  000E48                     l488:
  3846                           
  3847                           ;servos.c: 182: LATEbits.LATE1 = 1;
  3848  000E48  828D               	bsf	3981,1,c	;volatile
  3849                           
  3850                           ;servos.c: 183: break;
  3851  000E4A  D01A               	goto	l3964
  3852  000E4C                     l489:
  3853                           
  3854                           ;servos.c: 185: LATBbits.LATB2 = 1;
  3855  000E4C  848A               	bsf	3978,2,c	;volatile
  3856                           
  3857                           ;servos.c: 187: }
  3858                           
  3859                           ;servos.c: 186: break;
  3860  000E4E  D018               	goto	l3964
  3861  000E50                     l3962:
  3862  000E50  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  3863  000E54  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  3864                           
  3865                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3866                           ; Switch size 1, requested type "space"
  3867                           ; Number of cases is 1, Range of values is 0 to 0
  3868                           ; switch strategies available:
  3869                           ; Name         Instructions Cycles
  3870                           ; simple_byte            4     3 (average)
  3871                           ;	Chosen strategy is simple_byte
  3872  000E58  5013               	movf	??_servoRotate90n+1,w,c
  3873  000E5A  0A00               	xorlw	0	; case 0
  3874  000E5C  A4D8               	btfss	status,2,c
  3875  000E5E  D010               	goto	l3964
  3876                           
  3877                           ; Switch size 1, requested type "space"
  3878                           ; Number of cases is 5, Range of values is 0 to 4
  3879                           ; switch strategies available:
  3880                           ; Name         Instructions Cycles
  3881                           ; simple_byte           16     9 (average)
  3882                           ;	Chosen strategy is simple_byte
  3883  000E60  5012               	movf	??_servoRotate90n,w,c
  3884  000E62  0A00               	xorlw	0	; case 0
  3885  000E64  B4D8               	btfsc	status,2,c
  3886  000E66  D7EA               	goto	l484
  3887  000E68  0A01               	xorlw	1	; case 1
  3888  000E6A  B4D8               	btfsc	status,2,c
  3889  000E6C  D7E9               	goto	l486
  3890  000E6E  0A03               	xorlw	3	; case 2
  3891  000E70  B4D8               	btfsc	status,2,c
  3892  000E72  D7E8               	goto	l487
  3893  000E74  0A01               	xorlw	1	; case 3
  3894  000E76  B4D8               	btfsc	status,2,c
  3895  000E78  D7E7               	goto	l488
  3896  000E7A  0A07               	xorlw	7	; case 4
  3897  000E7C  B4D8               	btfsc	status,2,c
  3898  000E7E  D7E6               	goto	l489
  3899  000E80                     l3964:
  3900                           
  3901                           ;servos.c: 188: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3902  000E80  0ED6               	movlw	214
  3903  000E82                     u3637:
  3904  000E82  D000               	nop2	
  3905  000E84  D000               	nop2	
  3906  000E86  2EE8               	decfsz	wreg,f,c
  3907  000E88  D7FC               	bra	u3637
  3908  000E8A  D000               	nop2	
  3909                           
  3910                           ;servos.c: 189: switch (servo) {
  3911  000E8C  D00A               	goto	l3968
  3912  000E8E                     l491:
  3913                           
  3914                           ;servos.c: 191: LATAbits.LATA4 = 0;
  3915  000E8E  9889               	bcf	3977,4,c	;volatile
  3916                           
  3917                           ;servos.c: 192: break;
  3918  000E90  D020               	goto	l3970
  3919  000E92                     l493:
  3920                           
  3921                           ;servos.c: 194: LATAbits.LATA5 = 0;
  3922  000E92  9A89               	bcf	3977,5,c	;volatile
  3923                           
  3924                           ;servos.c: 195: break;
  3925  000E94  D01E               	goto	l3970
  3926  000E96                     l494:
  3927                           
  3928                           ;servos.c: 197: LATEbits.LATE0 = 0;
  3929  000E96  908D               	bcf	3981,0,c	;volatile
  3930                           
  3931                           ;servos.c: 198: break;
  3932  000E98  D01C               	goto	l3970
  3933  000E9A                     l495:
  3934                           
  3935                           ;servos.c: 200: LATEbits.LATE1 = 0;
  3936  000E9A  928D               	bcf	3981,1,c	;volatile
  3937                           
  3938                           ;servos.c: 201: break;
  3939  000E9C  D01A               	goto	l3970
  3940  000E9E                     l496:
  3941                           
  3942                           ;servos.c: 203: LATBbits.LATB2 = 0;
  3943  000E9E  948A               	bcf	3978,2,c	;volatile
  3944                           
  3945                           ;servos.c: 205: }
  3946                           
  3947                           ;servos.c: 204: break;
  3948  000EA0  D018               	goto	l3970
  3949  000EA2                     l3968:
  3950  000EA2  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  3951  000EA6  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  3952                           
  3953                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3954                           ; Switch size 1, requested type "space"
  3955                           ; Number of cases is 1, Range of values is 0 to 0
  3956                           ; switch strategies available:
  3957                           ; Name         Instructions Cycles
  3958                           ; simple_byte            4     3 (average)
  3959                           ;	Chosen strategy is simple_byte
  3960  000EAA  5013               	movf	??_servoRotate90n+1,w,c
  3961  000EAC  0A00               	xorlw	0	; case 0
  3962  000EAE  A4D8               	btfss	status,2,c
  3963  000EB0  D010               	goto	l3970
  3964                           
  3965                           ; Switch size 1, requested type "space"
  3966                           ; Number of cases is 5, Range of values is 0 to 4
  3967                           ; switch strategies available:
  3968                           ; Name         Instructions Cycles
  3969                           ; simple_byte           16     9 (average)
  3970                           ;	Chosen strategy is simple_byte
  3971  000EB2  5012               	movf	??_servoRotate90n,w,c
  3972  000EB4  0A00               	xorlw	0	; case 0
  3973  000EB6  B4D8               	btfsc	status,2,c
  3974  000EB8  D7EA               	goto	l491
  3975  000EBA  0A01               	xorlw	1	; case 1
  3976  000EBC  B4D8               	btfsc	status,2,c
  3977  000EBE  D7E9               	goto	l493
  3978  000EC0  0A03               	xorlw	3	; case 2
  3979  000EC2  B4D8               	btfsc	status,2,c
  3980  000EC4  D7E8               	goto	l494
  3981  000EC6  0A01               	xorlw	1	; case 3
  3982  000EC8  B4D8               	btfsc	status,2,c
  3983  000ECA  D7E7               	goto	l495
  3984  000ECC  0A07               	xorlw	7	; case 4
  3985  000ECE  B4D8               	btfsc	status,2,c
  3986  000ED0  D7E6               	goto	l496
  3987  000ED2                     l3970:
  3988                           
  3989                           ;servos.c: 206: _delay((unsigned long)((19400)*(10000000/4000000.0)));
  3990  000ED2  0E3F               	movlw	63
  3991  000ED4  6E12               	movwf	??_servoRotate90n& (0+255),c
  3992  000ED6  0EFC               	movlw	252
  3993  000ED8                     u3647:
  3994  000ED8  2EE8               	decfsz	wreg,f,c
  3995  000EDA  D7FE               	bra	u3647
  3996  000EDC  2E12               	decfsz	??_servoRotate90n& (0+255),f,c
  3997  000EDE  D7FC               	bra	u3647
  3998  000EE0  4A14               	infsnz	servoRotate90n@i,f,c
  3999  000EE2  2A15               	incf	servoRotate90n@i+1,f,c
  4000  000EE4  D7A4               	goto	l3956
  4001  000EE6                     l497:
  4002  000EE6  0012               	return		;funcret
  4003  000EE8                     __end_of_servoRotate90n:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           intcon3	equ	0xFF0
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           indf2	equ	0xFDF
  4013                           postinc2	equ	0xFDE
  4014                           postdec2	equ	0xFDD
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _servoRotate4 *****************
  4020 ;; Defined at:
  4021 ;;		line 58 in file "servos.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  angle           2   15[COMRAM] int 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  i               2   18[COMRAM] unsigned int 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4035 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;Total ram usage:        5 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_executingState
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text14
  4050  0014C0                     __ptext14:
  4051                           	opt stack 0
  4052  0014C0                     _servoRotate4:
  4053                           	opt stack 28
  4054                           
  4055                           ;servos.c: 59: unsigned int i;
  4056                           ;servos.c: 60: for (i = 0; i < 300; i++) {
  4057                           
  4058                           ;incstack = 0
  4059  0014C0  0E00               	movlw	0
  4060  0014C2  6E14               	movwf	servoRotate4@i+1,c
  4061  0014C4  0E00               	movlw	0
  4062  0014C6  6E13               	movwf	servoRotate4@i,c
  4063  0014C8                     l3944:
  4064  0014C8  0E2C               	movlw	44
  4065  0014CA  5C13               	subwf	servoRotate4@i,w,c
  4066  0014CC  0E01               	movlw	1
  4067  0014CE  5814               	subwfb	servoRotate4@i+1,w,c
  4068  0014D0  B0D8               	btfsc	status,0,c
  4069  0014D2  0012               	return	
  4070                           
  4071                           ;servos.c: 61: LATEbits.LATE1 = 1;
  4072  0014D4  828D               	bsf	3981,1,c	;volatile
  4073                           
  4074                           ;servos.c: 62: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  4075  0014D6  0E05               	movlw	5
  4076  0014D8  6E12               	movwf	??_servoRotate4& (0+255),c
  4077  0014DA  0EDE               	movlw	222
  4078  0014DC                     u3657:
  4079  0014DC  2EE8               	decfsz	wreg,f,c
  4080  0014DE  D7FE               	bra	u3657
  4081  0014E0  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  4082  0014E2  D7FC               	bra	u3657
  4083                           
  4084                           ;servos.c: 63: LATEbits.LATE1 = 0;
  4085  0014E4  928D               	bcf	3981,1,c	;volatile
  4086                           
  4087                           ;servos.c: 64: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  4088  0014E6  0E3D               	movlw	61
  4089  0014E8  6E12               	movwf	??_servoRotate4& (0+255),c
  4090  0014EA  0E0F               	movlw	15
  4091  0014EC                     u3667:
  4092  0014EC  2EE8               	decfsz	wreg,f,c
  4093  0014EE  D7FE               	bra	u3667
  4094  0014F0  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  4095  0014F2  D7FC               	bra	u3667
  4096  0014F4  F000               	nop	
  4097  0014F6  4A13               	infsnz	servoRotate4@i,f,c
  4098  0014F8  2A14               	incf	servoRotate4@i+1,f,c
  4099  0014FA  D7E6               	goto	l3944
  4100  0014FC                     __end_of_servoRotate4:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           intcon	equ	0xFF2
  4106                           intcon3	equ	0xFF0
  4107                           postinc0	equ	0xFEE
  4108                           wreg	equ	0xFE8
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _readSnTop *****************
  4117 ;; Defined at:
  4118 ;;		line 25 in file "sensors.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  2   15[COMRAM] int 
  4125 ;; Registers used:
  4126 ;;		wreg, status,2
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;Total ram usage:        2 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    1
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_executingState
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text15
  4147  001694                     __ptext15:
  4148                           	opt stack 0
  4149  001694                     _readSnTop:
  4150                           	opt stack 28
  4151                           
  4152                           ;sensors.c: 26: if(PORTAbits.RA2 == 1){
  4153                           
  4154                           ;incstack = 0
  4155  001694  A480               	btfss	3968,2,c	;volatile
  4156  001696  D005               	goto	l3988
  4157                           
  4158                           ;sensors.c: 27: return 1;
  4159  001698  0E00               	movlw	0
  4160  00169A  6E11               	movwf	?_readSnTop+1,c
  4161  00169C  0E01               	movlw	1
  4162  00169E  6E10               	movwf	?_readSnTop,c
  4163  0016A0  0012               	return	
  4164  0016A2                     l3988:
  4165                           
  4166                           ;sensors.c: 28: }
  4167                           ;sensors.c: 29: return 0;
  4168  0016A2  0E00               	movlw	0
  4169  0016A4  6E11               	movwf	?_readSnTop+1,c
  4170  0016A6  0E00               	movlw	0
  4171  0016A8  6E10               	movwf	?_readSnTop,c
  4172  0016AA  0012               	return	
  4173  0016AC                     __end_of_readSnTop:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           intcon	equ	0xFF2
  4179                           intcon3	equ	0xFF0
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           indf2	equ	0xFDF
  4183                           postinc2	equ	0xFDE
  4184                           postdec2	equ	0xFDD
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _readSnSensor *****************
  4190 ;; Defined at:
  4191 ;;		line 39 in file "sensors.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  2   15[COMRAM] int 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;Total ram usage:        2 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    1
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_executingState
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text16
  4220  0016AC                     __ptext16:
  4221                           	opt stack 0
  4222  0016AC                     _readSnSensor:
  4223                           	opt stack 28
  4224                           
  4225                           ;sensors.c: 40: if(PORTCbits.RC0 == 1){
  4226                           
  4227                           ;incstack = 0
  4228  0016AC  A082               	btfss	3970,0,c	;volatile
  4229  0016AE  D005               	goto	l4040
  4230                           
  4231                           ;sensors.c: 41: return 1;
  4232  0016B0  0E00               	movlw	0
  4233  0016B2  6E11               	movwf	?_readSnSensor+1,c
  4234  0016B4  0E01               	movlw	1
  4235  0016B6  6E10               	movwf	?_readSnSensor,c
  4236  0016B8  0012               	return	
  4237  0016BA                     l4040:
  4238                           
  4239                           ;sensors.c: 42: }
  4240                           ;sensors.c: 43: return 0;
  4241  0016BA  0E00               	movlw	0
  4242  0016BC  6E11               	movwf	?_readSnSensor+1,c
  4243  0016BE  0E00               	movlw	0
  4244  0016C0  6E10               	movwf	?_readSnSensor,c
  4245  0016C2  0012               	return	
  4246  0016C4                     __end_of_readSnSensor:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           intcon3	equ	0xFF0
  4253                           postinc0	equ	0xFEE
  4254                           wreg	equ	0xFE8
  4255                           indf2	equ	0xFDF
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           fsr2h	equ	0xFDA
  4259                           fsr2l	equ	0xFD9
  4260                           status	equ	0xFD8
  4261                           
  4262 ;; *************** function _readSnBot *****************
  4263 ;; Defined at:
  4264 ;;		line 11 in file "sensors.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  2   15[COMRAM] int 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4278 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;Total ram usage:        2 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    1
  4285 ;; This function calls:
  4286 ;;		Nothing
  4287 ;; This function is called by:
  4288 ;;		_executingState
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text17
  4293  0016C4                     __ptext17:
  4294                           	opt stack 0
  4295  0016C4                     _readSnBot:
  4296                           	opt stack 28
  4297                           
  4298                           ;sensors.c: 12: if(PORTAbits.RA0 == 1){
  4299                           
  4300                           ;incstack = 0
  4301  0016C4  A080               	btfss	3968,0,c	;volatile
  4302  0016C6  D005               	goto	l4008
  4303                           
  4304                           ;sensors.c: 13: return 1;
  4305  0016C8  0E00               	movlw	0
  4306  0016CA  6E11               	movwf	?_readSnBot+1,c
  4307  0016CC  0E01               	movlw	1
  4308  0016CE  6E10               	movwf	?_readSnBot,c
  4309  0016D0  0012               	return	
  4310  0016D2                     l4008:
  4311                           
  4312                           ;sensors.c: 14: }
  4313                           ;sensors.c: 15: return 0;
  4314  0016D2  0E00               	movlw	0
  4315  0016D4  6E11               	movwf	?_readSnBot+1,c
  4316  0016D6  0E00               	movlw	0
  4317  0016D8  6E10               	movwf	?_readSnBot,c
  4318  0016DA  0012               	return	
  4319  0016DC                     __end_of_readSnBot:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           intcon3	equ	0xFF0
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _readAlTop *****************
  4336 ;; Defined at:
  4337 ;;		line 32 in file "sensors.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  2   15[COMRAM] int 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;Total ram usage:        2 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    1
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_executingState
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text18
  4366  0016DC                     __ptext18:
  4367                           	opt stack 0
  4368  0016DC                     _readAlTop:
  4369                           	opt stack 28
  4370                           
  4371                           ;sensors.c: 33: if(PORTAbits.RA3 == 1){
  4372                           
  4373                           ;incstack = 0
  4374  0016DC  A680               	btfss	3968,3,c	;volatile
  4375  0016DE  D005               	goto	l3998
  4376                           
  4377                           ;sensors.c: 34: return 1;
  4378  0016E0  0E00               	movlw	0
  4379  0016E2  6E11               	movwf	?_readAlTop+1,c
  4380  0016E4  0E01               	movlw	1
  4381  0016E6  6E10               	movwf	?_readAlTop,c
  4382  0016E8  0012               	return	
  4383  0016EA                     l3998:
  4384                           
  4385                           ;sensors.c: 35: }
  4386                           ;sensors.c: 36: return 0;
  4387  0016EA  0E00               	movlw	0
  4388  0016EC  6E11               	movwf	?_readAlTop+1,c
  4389  0016EE  0E00               	movlw	0
  4390  0016F0  6E10               	movwf	?_readAlTop,c
  4391  0016F2  0012               	return	
  4392  0016F4                     __end_of_readAlTop:
  4393                           	opt stack 0
  4394                           tblptru	equ	0xFF8
  4395                           prodh	equ	0xFF4
  4396                           prodl	equ	0xFF3
  4397                           intcon	equ	0xFF2
  4398                           intcon3	equ	0xFF0
  4399                           postinc0	equ	0xFEE
  4400                           wreg	equ	0xFE8
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _readAlBot *****************
  4409 ;; Defined at:
  4410 ;;		line 18 in file "sensors.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  2   15[COMRAM] int 
  4417 ;; Registers used:
  4418 ;;		wreg, status,2
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4424 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;Total ram usage:        2 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    1
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		_executingState
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text19
  4439  0016F4                     __ptext19:
  4440                           	opt stack 0
  4441  0016F4                     _readAlBot:
  4442                           	opt stack 28
  4443                           
  4444                           ;sensors.c: 19: if(PORTAbits.RA1 == 1){
  4445                           
  4446                           ;incstack = 0
  4447  0016F4  A280               	btfss	3968,1,c	;volatile
  4448  0016F6  D005               	goto	l4018
  4449                           
  4450                           ;sensors.c: 20: return 1;
  4451  0016F8  0E00               	movlw	0
  4452  0016FA  6E11               	movwf	?_readAlBot+1,c
  4453  0016FC  0E01               	movlw	1
  4454  0016FE  6E10               	movwf	?_readAlBot,c
  4455  001700  0012               	return	
  4456  001702                     l4018:
  4457                           
  4458                           ;sensors.c: 21: }
  4459                           ;sensors.c: 22: return 0;
  4460  001702  0E00               	movlw	0
  4461  001704  6E11               	movwf	?_readAlBot+1,c
  4462  001706  0E00               	movlw	0
  4463  001708  6E10               	movwf	?_readAlBot,c
  4464  00170A  0012               	return	
  4465  00170C                     __end_of_readAlBot:
  4466                           	opt stack 0
  4467                           tblptru	equ	0xFF8
  4468                           prodh	equ	0xFF4
  4469                           prodl	equ	0xFF3
  4470                           intcon	equ	0xFF2
  4471                           intcon3	equ	0xFF0
  4472                           postinc0	equ	0xFEE
  4473                           wreg	equ	0xFE8
  4474                           indf2	equ	0xFDF
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _get_timeDif *****************
  4482 ;; Defined at:
  4483 ;;		line 108 in file "main.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  start           2   23[COMRAM] int 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  start_s         2   40[COMRAM] int 
  4488 ;;  s_one           2   38[COMRAM] int 
  4489 ;;  s_ten           2   36[COMRAM] int 
  4490 ;;  m_one           2   34[COMRAM] int 
  4491 ;;  m_ten           2   32[COMRAM] int 
  4492 ;;  h_one           2   30[COMRAM] int 
  4493 ;;  h_ten           2   28[COMRAM] int 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  2   23[COMRAM] int 
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;Total ram usage:       23 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    4
  4510 ;; This function calls:
  4511 ;;		___wmul
  4512 ;;		_get_time
  4513 ;; This function is called by:
  4514 ;;		_executingState
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text20
  4519  000A1E                     __ptext20:
  4520                           	opt stack 0
  4521  000A1E                     _get_timeDif:
  4522                           	opt stack 25
  4523                           
  4524                           ;main.c: 109: get_time(time);
  4525                           
  4526                           ;incstack = 0
  4527  000A1E  0E4C               	movlw	low _time
  4528  000A20  6E13               	movwf	get_time@time,c
  4529  000A22  0E00               	movlw	high _time
  4530  000A24  6E14               	movwf	get_time@time+1,c
  4531  000A26  EC1D  F008         	call	_get_time	;wreg free
  4532                           
  4533                           ;main.c: 110: int h_ten = (time[2] & 0b11110000)>>4;
  4534  000A2A  EE20  F050         	lfsr	2,_time+4
  4535  000A2E  CFDE F01A          	movff	postinc2,??_get_timeDif
  4536  000A32  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4537  000A36  0E04               	movlw	4
  4538  000A38  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4539  000A3A                     u2905:
  4540  000A3A  341B               	rlcf	??_get_timeDif+1,w,c
  4541  000A3C  321B               	rrcf	??_get_timeDif+1,f,c
  4542  000A3E  321A               	rrcf	??_get_timeDif,f,c
  4543  000A40  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4544  000A42  D7FB               	goto	u2905
  4545  000A44  0E0F               	movlw	15
  4546  000A46  141A               	andwf	??_get_timeDif,w,c
  4547  000A48  6E1D               	movwf	get_timeDif@h_ten,c
  4548  000A4A  6A1E               	clrf	get_timeDif@h_ten+1,c
  4549                           
  4550                           ;main.c: 111: int h_one = (time[2] & 0b00001111);
  4551  000A4C  0E0F               	movlw	15
  4552  000A4E  1450               	andwf	_time+4,w,c
  4553  000A50  6E1F               	movwf	get_timeDif@h_one,c
  4554  000A52  6A20               	clrf	get_timeDif@h_one+1,c
  4555                           
  4556                           ;main.c: 112: int m_ten = (time[1] & 0b11110000)>>4;
  4557  000A54  EE20  F04E         	lfsr	2,_time+2
  4558  000A58  CFDE F01A          	movff	postinc2,??_get_timeDif
  4559  000A5C  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4560  000A60  0E04               	movlw	4
  4561  000A62  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4562  000A64                     u2915:
  4563  000A64  341B               	rlcf	??_get_timeDif+1,w,c
  4564  000A66  321B               	rrcf	??_get_timeDif+1,f,c
  4565  000A68  321A               	rrcf	??_get_timeDif,f,c
  4566  000A6A  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4567  000A6C  D7FB               	goto	u2915
  4568  000A6E  0E0F               	movlw	15
  4569  000A70  141A               	andwf	??_get_timeDif,w,c
  4570  000A72  6E21               	movwf	get_timeDif@m_ten,c
  4571  000A74  6A22               	clrf	get_timeDif@m_ten+1,c
  4572                           
  4573                           ;main.c: 113: int m_one = (time[1] & 0b00001111);
  4574  000A76  0E0F               	movlw	15
  4575  000A78  144E               	andwf	_time+2,w,c
  4576  000A7A  6E23               	movwf	get_timeDif@m_one,c
  4577  000A7C  6A24               	clrf	get_timeDif@m_one+1,c
  4578                           
  4579                           ;main.c: 114: int s_ten = (time[0] & 0b11110000)>>4;
  4580  000A7E  C04C  F01A         	movff	_time,??_get_timeDif
  4581  000A82  C04D  F01B         	movff	_time+1,??_get_timeDif+1
  4582  000A86  0E04               	movlw	4
  4583  000A88  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4584  000A8A                     u2925:
  4585  000A8A  341B               	rlcf	??_get_timeDif+1,w,c
  4586  000A8C  321B               	rrcf	??_get_timeDif+1,f,c
  4587  000A8E  321A               	rrcf	??_get_timeDif,f,c
  4588  000A90  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4589  000A92  D7FB               	goto	u2925
  4590  000A94  0E0F               	movlw	15
  4591  000A96  141A               	andwf	??_get_timeDif,w,c
  4592  000A98  6E25               	movwf	get_timeDif@s_ten,c
  4593  000A9A  6A26               	clrf	get_timeDif@s_ten+1,c
  4594                           
  4595                           ;main.c: 115: int s_one = (time[0] & 0b00001111);
  4596  000A9C  0E0F               	movlw	15
  4597  000A9E  144C               	andwf	_time,w,c
  4598  000AA0  6E27               	movwf	get_timeDif@s_one,c
  4599  000AA2  6A28               	clrf	get_timeDif@s_one+1,c
  4600                           
  4601                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4602  000AA4  C021  F010         	movff	get_timeDif@m_ten,___wmul@multiplier
  4603  000AA8  C022  F011         	movff	get_timeDif@m_ten+1,___wmul@multiplier+1
  4604  000AAC  0E00               	movlw	0
  4605  000AAE  6E13               	movwf	___wmul@multiplicand+1,c
  4606  000AB0  0E0A               	movlw	10
  4607  000AB2  6E12               	movwf	___wmul@multiplicand,c
  4608  000AB4  EC1A  F00B         	call	___wmul	;wreg free
  4609  000AB8  5023               	movf	get_timeDif@m_one,w,c
  4610  000ABA  2410               	addwf	?___wmul,w,c
  4611  000ABC  6E2B               	movwf	_get_timeDif$1730,c
  4612  000ABE  5024               	movf	get_timeDif@m_one+1,w,c
  4613  000AC0  2011               	addwfc	?___wmul+1,w,c
  4614  000AC2  6E2C               	movwf	_get_timeDif$1730+1,c
  4615                           
  4616                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4617  000AC4  C01D  F010         	movff	get_timeDif@h_ten,___wmul@multiplier
  4618  000AC8  C01E  F011         	movff	get_timeDif@h_ten+1,___wmul@multiplier+1
  4619  000ACC  0E00               	movlw	0
  4620  000ACE  6E13               	movwf	___wmul@multiplicand+1,c
  4621  000AD0  0E0A               	movlw	10
  4622  000AD2  6E12               	movwf	___wmul@multiplicand,c
  4623  000AD4  EC1A  F00B         	call	___wmul	;wreg free
  4624  000AD8  501F               	movf	get_timeDif@h_one,w,c
  4625  000ADA  2410               	addwf	?___wmul,w,c
  4626  000ADC  6E2D               	movwf	_get_timeDif$1731,c
  4627  000ADE  5020               	movf	get_timeDif@h_one+1,w,c
  4628  000AE0  2011               	addwfc	?___wmul+1,w,c
  4629  000AE2  6E2E               	movwf	_get_timeDif$1731+1,c
  4630                           
  4631                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4632  000AE4  C025  F010         	movff	get_timeDif@s_ten,___wmul@multiplier
  4633  000AE8  C026  F011         	movff	get_timeDif@s_ten+1,___wmul@multiplier+1
  4634  000AEC  0E00               	movlw	0
  4635  000AEE  6E13               	movwf	___wmul@multiplicand+1,c
  4636  000AF0  0E0A               	movlw	10
  4637  000AF2  6E12               	movwf	___wmul@multiplicand,c
  4638  000AF4  EC1A  F00B         	call	___wmul	;wreg free
  4639  000AF8  C010  F01A         	movff	?___wmul,??_get_timeDif
  4640  000AFC  C011  F01B         	movff	?___wmul+1,??_get_timeDif+1
  4641  000B00  C02D  F010         	movff	_get_timeDif$1731,___wmul@multiplier
  4642  000B04  C02E  F011         	movff	_get_timeDif$1731+1,___wmul@multiplier+1
  4643  000B08  0E0E               	movlw	14
  4644  000B0A  6E13               	movwf	___wmul@multiplicand+1,c
  4645  000B0C  0E10               	movlw	16
  4646  000B0E  6E12               	movwf	___wmul@multiplicand,c
  4647  000B10  EC1A  F00B         	call	___wmul	;wreg free
  4648  000B14  5010               	movf	?___wmul,w,c
  4649  000B16  261A               	addwf	??_get_timeDif,f,c
  4650  000B18  5011               	movf	?___wmul+1,w,c
  4651  000B1A  221B               	addwfc	??_get_timeDif+1,f,c
  4652  000B1C  C02B  F010         	movff	_get_timeDif$1730,___wmul@multiplier
  4653  000B20  C02C  F011         	movff	_get_timeDif$1730+1,___wmul@multiplier+1
  4654  000B24  0E00               	movlw	0
  4655  000B26  6E13               	movwf	___wmul@multiplicand+1,c
  4656  000B28  0E3C               	movlw	60
  4657  000B2A  6E12               	movwf	___wmul@multiplicand,c
  4658  000B2C  EC1A  F00B         	call	___wmul	;wreg free
  4659  000B30  5010               	movf	?___wmul,w,c
  4660  000B32  261A               	addwf	??_get_timeDif,f,c
  4661  000B34  5011               	movf	?___wmul+1,w,c
  4662  000B36  221B               	addwfc	??_get_timeDif+1,f,c
  4663  000B38  5027               	movf	get_timeDif@s_one,w,c
  4664  000B3A  241A               	addwf	??_get_timeDif,w,c
  4665  000B3C  6E29               	movwf	get_timeDif@start_s,c
  4666  000B3E  5028               	movf	get_timeDif@s_one+1,w,c
  4667  000B40  201B               	addwfc	??_get_timeDif+1,w,c
  4668  000B42  6E2A               	movwf	get_timeDif@start_s+1,c
  4669                           
  4670                           ;main.c: 118: return start_s - start;
  4671  000B44  C018  F01A         	movff	get_timeDif@start,??_get_timeDif
  4672  000B48  C019  F01B         	movff	get_timeDif@start+1,??_get_timeDif+1
  4673  000B4C  1E1A               	comf	??_get_timeDif,f,c
  4674  000B4E  1E1B               	comf	??_get_timeDif+1,f,c
  4675  000B50  4A1A               	infsnz	??_get_timeDif,f,c
  4676  000B52  2A1B               	incf	??_get_timeDif+1,f,c
  4677  000B54  5029               	movf	get_timeDif@start_s,w,c
  4678  000B56  241A               	addwf	??_get_timeDif,w,c
  4679  000B58  6E18               	movwf	?_get_timeDif,c
  4680  000B5A  502A               	movf	get_timeDif@start_s+1,w,c
  4681  000B5C  201B               	addwfc	??_get_timeDif+1,w,c
  4682  000B5E  6E19               	movwf	?_get_timeDif+1,c
  4683  000B60  0012               	return	
  4684  000B62                     __end_of_get_timeDif:
  4685                           	opt stack 0
  4686                           tblptru	equ	0xFF8
  4687                           prodh	equ	0xFF4
  4688                           prodl	equ	0xFF3
  4689                           intcon	equ	0xFF2
  4690                           intcon3	equ	0xFF0
  4691                           postinc0	equ	0xFEE
  4692                           wreg	equ	0xFE8
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _get_time *****************
  4701 ;; Defined at:
  4702 ;;		line 23 in file "RTC.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  time            2   18[COMRAM] PTR int 
  4705 ;;		 -> starttime(14), time(14), 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  i               1   22[COMRAM] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      void 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4717 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;Total ram usage:        5 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    3
  4724 ;; This function calls:
  4725 ;;		_I2C_Master_Read
  4726 ;;		_I2C_Master_Start
  4727 ;;		_I2C_Master_Stop
  4728 ;;		_I2C_Master_Write
  4729 ;; This function is called by:
  4730 ;;		_get_timeDif
  4731 ;;		_mainState
  4732 ;;		_executingState
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text21
  4737  00103A                     __ptext21:
  4738                           	opt stack 0
  4739  00103A                     _get_time:
  4740                           	opt stack 26
  4741                           
  4742                           ;RTC.c: 25: I2C_Master_Start();
  4743                           
  4744                           ;incstack = 0
  4745  00103A  ECB6  F00B         	call	_I2C_Master_Start	;wreg free
  4746                           
  4747                           ;RTC.c: 26: I2C_Master_Write(0b11010000);
  4748  00103E  0E00               	movlw	0
  4749  001040  6E12               	movwf	I2C_Master_Write@d+1,c
  4750  001042  0ED0               	movlw	208
  4751  001044  6E11               	movwf	I2C_Master_Write@d,c
  4752  001046  ECAD  F00B         	call	_I2C_Master_Write	;wreg free
  4753                           
  4754                           ;RTC.c: 27: I2C_Master_Write(0x00);
  4755  00104A  0E00               	movlw	0
  4756  00104C  6E12               	movwf	I2C_Master_Write@d+1,c
  4757  00104E  0E00               	movlw	0
  4758  001050  6E11               	movwf	I2C_Master_Write@d,c
  4759  001052  ECAD  F00B         	call	_I2C_Master_Write	;wreg free
  4760                           
  4761                           ;RTC.c: 28: I2C_Master_Stop();
  4762  001056  ECB2  F00B         	call	_I2C_Master_Stop	;wreg free
  4763                           
  4764                           ;RTC.c: 31: I2C_Master_Start();
  4765  00105A  ECB6  F00B         	call	_I2C_Master_Start	;wreg free
  4766                           
  4767                           ;RTC.c: 32: I2C_Master_Write(0b11010001);
  4768  00105E  0E00               	movlw	0
  4769  001060  6E12               	movwf	I2C_Master_Write@d+1,c
  4770  001062  0ED1               	movlw	209
  4771  001064  6E11               	movwf	I2C_Master_Write@d,c
  4772  001066  ECAD  F00B         	call	_I2C_Master_Write	;wreg free
  4773                           
  4774                           ;RTC.c: 33: for (unsigned char i = 0; i < 0x06; i++) {
  4775  00106A  0E00               	movlw	0
  4776  00106C  6E17               	movwf	get_time@i,c
  4777  00106E                     l3778:
  4778  00106E  0E05               	movlw	5
  4779  001070  6417               	cpfsgt	get_time@i,c
  4780  001072  D001               	goto	l3782
  4781  001074  D013               	goto	l3788
  4782  001076                     l3782:
  4783                           
  4784                           ;RTC.c: 34: time[i] = I2C_Master_Read(1);
  4785  001076  0E01               	movlw	1
  4786  001078  ECF4  F00A         	call	_I2C_Master_Read
  4787  00107C  6E15               	movwf	??_get_time& (0+255),c
  4788  00107E  6A16               	clrf	(??_get_time+1)& (0+255),c
  4789  001080  5017               	movf	get_time@i,w,c
  4790  001082  0D02               	mullw	2
  4791  001084  50F3               	movf	prodl,w,c
  4792  001086  2413               	addwf	get_time@time,w,c
  4793  001088  6ED9               	movwf	fsr2l,c
  4794  00108A  50F4               	movf	prodh,w,c
  4795  00108C  2014               	addwfc	get_time@time+1,w,c
  4796  00108E  6EDA               	movwf	fsr2h,c
  4797  001090  C015  FFDE         	movff	??_get_time,postinc2
  4798  001094  C016  FFDD         	movff	??_get_time+1,postdec2
  4799  001098  2A17               	incf	get_time@i,f,c
  4800  00109A  D7E9               	goto	l3778
  4801  00109C                     l3788:
  4802                           
  4803                           ;RTC.c: 35: }
  4804                           ;RTC.c: 36: time[6] = I2C_Master_Read(0);
  4805  00109C  0E00               	movlw	0
  4806  00109E  ECF4  F00A         	call	_I2C_Master_Read
  4807  0010A2  6E15               	movwf	??_get_time& (0+255),c
  4808  0010A4  6A16               	clrf	(??_get_time+1)& (0+255),c
  4809  0010A6  EE20 F00C          	lfsr	2,12
  4810  0010AA  5013               	movf	get_time@time,w,c
  4811  0010AC  26D9               	addwf	fsr2l,f,c
  4812  0010AE  5014               	movf	get_time@time+1,w,c
  4813  0010B0  22DA               	addwfc	fsr2h,f,c
  4814  0010B2  C015  FFDE         	movff	??_get_time,postinc2
  4815  0010B6  C016  FFDD         	movff	??_get_time+1,postdec2
  4816                           
  4817                           ;RTC.c: 37: I2C_Master_Stop();
  4818  0010BA  ECB2  F00B         	call	_I2C_Master_Stop	;wreg free
  4819  0010BE  0012               	return		;funcret
  4820  0010C0                     __end_of_get_time:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon	equ	0xFF2
  4826                           intcon3	equ	0xFF0
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf2	equ	0xFDF
  4830                           postinc2	equ	0xFDE
  4831                           postdec2	equ	0xFDD
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _I2C_Master_Write *****************
  4837 ;; Defined at:
  4838 ;;		line 47 in file "I2C.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  d               2   16[COMRAM] unsigned int 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;Total ram usage:        2 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    2
  4859 ;; This function calls:
  4860 ;;		_I2C_Master_Wait
  4861 ;; This function is called by:
  4862 ;;		_fixLCD
  4863 ;;		_get_time
  4864 ;;		_set_time
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text22
  4869  00175A                     __ptext22:
  4870                           	opt stack 0
  4871  00175A                     _I2C_Master_Write:
  4872                           	opt stack 26
  4873                           
  4874                           ;I2C.c: 49: I2C_Master_Wait();
  4875                           
  4876                           ;incstack = 0
  4877  00175A  EC91  F00B         	call	_I2C_Master_Wait	;wreg free
  4878                           
  4879                           ;I2C.c: 50: SSPBUF = d;
  4880  00175E  C011  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4881  001762  0012               	return		;funcret
  4882  001764                     __end_of_I2C_Master_Write:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon3	equ	0xFF0
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           indf2	equ	0xFDF
  4892                           postinc2	equ	0xFDE
  4893                           postdec2	equ	0xFDD
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _I2C_Master_Stop *****************
  4899 ;; Defined at:
  4900 ;;		line 41 in file "I2C.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, status,2, status,0, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    2
  4921 ;; This function calls:
  4922 ;;		_I2C_Master_Wait
  4923 ;; This function is called by:
  4924 ;;		_fixLCD
  4925 ;;		_get_time
  4926 ;;		_set_time
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text23
  4931  001764                     __ptext23:
  4932                           	opt stack 0
  4933  001764                     _I2C_Master_Stop:
  4934                           	opt stack 26
  4935                           
  4936                           ;I2C.c: 43: I2C_Master_Wait();
  4937                           
  4938                           ;incstack = 0
  4939  001764  EC91  F00B         	call	_I2C_Master_Wait	;wreg free
  4940                           
  4941                           ;I2C.c: 44: PEN = 1;
  4942  001768  84C5               	bsf	4037,2,c	;volatile
  4943  00176A  0012               	return		;funcret
  4944  00176C                     __end_of_I2C_Master_Stop:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           intcon	equ	0xFF2
  4950                           intcon3	equ	0xFF0
  4951                           postinc0	equ	0xFEE
  4952                           wreg	equ	0xFE8
  4953                           indf2	equ	0xFDF
  4954                           postinc2	equ	0xFDE
  4955                           postdec2	equ	0xFDD
  4956                           fsr2h	equ	0xFDA
  4957                           fsr2l	equ	0xFD9
  4958                           status	equ	0xFD8
  4959                           
  4960 ;; *************** function _I2C_Master_Start *****************
  4961 ;; Defined at:
  4962 ;;		line 29 in file "I2C.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1    wreg      void 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    2
  4983 ;; This function calls:
  4984 ;;		_I2C_Master_Wait
  4985 ;; This function is called by:
  4986 ;;		_fixLCD
  4987 ;;		_get_time
  4988 ;;		_set_time
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text24
  4993  00176C                     __ptext24:
  4994                           	opt stack 0
  4995  00176C                     _I2C_Master_Start:
  4996                           	opt stack 26
  4997                           
  4998                           ;I2C.c: 31: I2C_Master_Wait();
  4999                           
  5000                           ;incstack = 0
  5001  00176C  EC91  F00B         	call	_I2C_Master_Wait	;wreg free
  5002                           
  5003                           ;I2C.c: 32: SEN = 1;
  5004  001770  80C5               	bsf	4037,0,c	;volatile
  5005  001772  0012               	return		;funcret
  5006  001774                     __end_of_I2C_Master_Start:
  5007                           	opt stack 0
  5008                           tblptru	equ	0xFF8
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           intcon3	equ	0xFF0
  5013                           postinc0	equ	0xFEE
  5014                           wreg	equ	0xFE8
  5015                           indf2	equ	0xFDF
  5016                           postinc2	equ	0xFDE
  5017                           postdec2	equ	0xFDD
  5018                           fsr2h	equ	0xFDA
  5019                           fsr2l	equ	0xFD9
  5020                           status	equ	0xFD8
  5021                           
  5022 ;; *************** function _I2C_Master_Read *****************
  5023 ;; Defined at:
  5024 ;;		line 53 in file "I2C.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  a               1    wreg     unsigned char 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  a               1   16[COMRAM] unsigned char 
  5029 ;;  temp            1   17[COMRAM] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  1    wreg      unsigned char 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;Total ram usage:        2 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    2
  5046 ;; This function calls:
  5047 ;;		_I2C_Master_Wait
  5048 ;; This function is called by:
  5049 ;;		_fixLCD
  5050 ;;		_get_time
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text25
  5055  0015E8                     __ptext25:
  5056                           	opt stack 0
  5057  0015E8                     _I2C_Master_Read:
  5058                           	opt stack 26
  5059                           
  5060                           ;incstack = 0
  5061                           ;I2C_Master_Read@a stored from wreg
  5062  0015E8  6E11               	movwf	I2C_Master_Read@a,c
  5063                           
  5064                           ;I2C.c: 55: unsigned char temp;
  5065                           ;I2C.c: 56: I2C_Master_Wait();
  5066  0015EA  EC91  F00B         	call	_I2C_Master_Wait	;wreg free
  5067                           
  5068                           ;I2C.c: 57: RCEN = 1;
  5069  0015EE  86C5               	bsf	4037,3,c	;volatile
  5070                           
  5071                           ;I2C.c: 58: I2C_Master_Wait();
  5072  0015F0  EC91  F00B         	call	_I2C_Master_Wait	;wreg free
  5073                           
  5074                           ;I2C.c: 59: temp = SSPBUF;
  5075  0015F4  CFC9 F012          	movff	4041,I2C_Master_Read@temp	;volatile
  5076                           
  5077                           ;I2C.c: 60: I2C_Master_Wait();
  5078  0015F8  EC91  F00B         	call	_I2C_Master_Wait	;wreg free
  5079                           
  5080                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5081  0015FC  5011               	movf	I2C_Master_Read@a,w,c
  5082  0015FE  A4D8               	btfss	status,2,c
  5083  001600  D002               	goto	u2480
  5084  001602  8AC5               	bsf	4037,5,c	;volatile
  5085  001604  D001               	goto	l3560
  5086  001606                     u2480:
  5087  001606  9AC5               	bcf	4037,5,c	;volatile
  5088  001608                     l3560:
  5089                           
  5090                           ;I2C.c: 62: ACKEN = 1;
  5091  001608  88C5               	bsf	4037,4,c	;volatile
  5092                           
  5093                           ;I2C.c: 63: return temp;
  5094  00160A  5012               	movf	I2C_Master_Read@temp,w,c
  5095  00160C  0012               	return	
  5096  00160E                     __end_of_I2C_Master_Read:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           intcon3	equ	0xFF0
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _I2C_Master_Wait *****************
  5113 ;; Defined at:
  5114 ;;		line 24 in file "I2C.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;		None
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;Total ram usage:        1 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    1
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_I2C_Master_Start
  5139 ;;		_I2C_Master_Stop
  5140 ;;		_I2C_Master_Write
  5141 ;;		_I2C_Master_Read
  5142 ;;		_I2C_Master_RepeatedStart
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text26
  5147  001722                     __ptext26:
  5148                           	opt stack 0
  5149  001722                     _I2C_Master_Wait:
  5150                           	opt stack 26
  5151  001722                     l34:
  5152  001722  B4C7               	btfsc	4039,2,c	;volatile
  5153  001724  D7FE               	goto	l34
  5154  001726  CFC5 F010          	movff	4037,??_I2C_Master_Wait	;volatile
  5155  00172A  0E1F               	movlw	31
  5156  00172C  1610               	andwf	??_I2C_Master_Wait,f,c
  5157  00172E  B4D8               	btfsc	status,2,c
  5158  001730  0012               	return	
  5159  001732  D7F7               	goto	l34
  5160  001734                     __end_of_I2C_Master_Wait:
  5161                           	opt stack 0
  5162                           tblptru	equ	0xFF8
  5163                           prodh	equ	0xFF4
  5164                           prodl	equ	0xFF3
  5165                           intcon	equ	0xFF2
  5166                           intcon3	equ	0xFF0
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           fsr2h	equ	0xFDA
  5173                           fsr2l	equ	0xFD9
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function _eeprom_LogResult *****************
  5177 ;; Defined at:
  5178 ;;		line 82 in file "eeprom.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;  data            2   18[COMRAM] PTR unsigned char 
  5181 ;;		 -> executingState@res(8), 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  i               2   21[COMRAM] int 
  5184 ;;  address         1   20[COMRAM] unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;Total ram usage:        5 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    3
  5201 ;; This function calls:
  5202 ;;		_eeprom_WriteByte
  5203 ;;		_newestAddress
  5204 ;; This function is called by:
  5205 ;;		_executingState
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text27
  5210  00135C                     __ptext27:
  5211                           	opt stack 0
  5212  00135C                     _eeprom_LogResult:
  5213                           	opt stack 26
  5214                           
  5215                           ;eeprom.c: 83: uint8_t address = newestAddress() + 5;
  5216                           
  5217                           ;incstack = 0
  5218  00135C  EC9A  F00B         	call	_newestAddress	;wreg free
  5219  001360  0F05               	addlw	5
  5220  001362  6E15               	movwf	eeprom_LogResult@address,c
  5221                           
  5222                           ;eeprom.c: 84: eeprom_WriteByte(0x0000, address);
  5223  001364  0E00               	movlw	0
  5224  001366  6E11               	movwf	eeprom_WriteByte@address+1,c
  5225  001368  0E00               	movlw	0
  5226  00136A  6E10               	movwf	eeprom_WriteByte@address,c
  5227  00136C  C015  F012         	movff	eeprom_LogResult@address,eeprom_WriteByte@data
  5228  001370  EC07  F00B         	call	_eeprom_WriteByte	;wreg free
  5229                           
  5230                           ;eeprom.c: 85: for(int i = 0; i < 5; i++){
  5231  001374  0E00               	movlw	0
  5232  001376  6E17               	movwf	eeprom_LogResult@i+1,c
  5233  001378  0E00               	movlw	0
  5234  00137A  6E16               	movwf	eeprom_LogResult@i,c
  5235  00137C  BE17               	btfsc	eeprom_LogResult@i+1,7,c
  5236  00137E  D006               	goto	l4074
  5237  001380  5017               	movf	eeprom_LogResult@i+1,w,c
  5238  001382  E111               	bnz	l347
  5239  001384  0E05               	movlw	5
  5240  001386  5C16               	subwf	eeprom_LogResult@i,w,c
  5241  001388  B0D8               	btfsc	status,0,c
  5242  00138A  0012               	return	
  5243  00138C                     l4074:
  5244                           
  5245                           ;eeprom.c: 86: eeprom_WriteByte(address + i, 0xFF);
  5246  00138C  5015               	movf	eeprom_LogResult@address,w,c
  5247  00138E  2416               	addwf	eeprom_LogResult@i,w,c
  5248  001390  6E10               	movwf	eeprom_WriteByte@address,c
  5249  001392  0E00               	movlw	0
  5250  001394  2017               	addwfc	eeprom_LogResult@i+1,w,c
  5251  001396  6E11               	movwf	eeprom_WriteByte@address+1,c
  5252  001398  0EFF               	movlw	255
  5253  00139A  6E12               	movwf	eeprom_WriteByte@data,c
  5254  00139C  EC07  F00B         	call	_eeprom_WriteByte	;wreg free
  5255  0013A0  4A16               	infsnz	eeprom_LogResult@i,f,c
  5256  0013A2  2A17               	incf	eeprom_LogResult@i+1,f,c
  5257  0013A4  D7EB               	goto	L7
  5258  0013A6                     l347:
  5259  0013A6  0012               	return		;funcret
  5260  0013A8                     __end_of_eeprom_LogResult:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           intcon	equ	0xFF2
  5266                           intcon3	equ	0xFF0
  5267                           postinc0	equ	0xFEE
  5268                           wreg	equ	0xFE8
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           fsr2h	equ	0xFDA
  5273                           fsr2l	equ	0xFD9
  5274                           status	equ	0xFD8
  5275                           
  5276 ;; *************** function _dispenseSnCan *****************
  5277 ;; Defined at:
  5278 ;;		line 233 in file "servos.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;		None
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;		None
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      void 
  5285 ;; Registers used:
  5286 ;;		wreg, status,2, status,0, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;Total ram usage:        2 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    2
  5299 ;; This function calls:
  5300 ;;		_servoRotate0
  5301 ;;		_servoRotate90
  5302 ;; This function is called by:
  5303 ;;		_executingState
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text28
  5308  001536                     __ptext28:
  5309                           	opt stack 0
  5310  001536                     _dispenseSnCan:
  5311                           	opt stack 27
  5312                           
  5313                           ;servos.c: 234: servoRotate90(0);
  5314                           
  5315                           ;incstack = 0
  5316  001536  0E00               	movlw	0
  5317  001538  6E11               	movwf	servoRotate90@servo+1,c
  5318  00153A  0E00               	movlw	0
  5319  00153C  6E10               	movwf	servoRotate90@servo,c
  5320  00153E  EC4D  F006         	call	_servoRotate90	;wreg free
  5321                           
  5322                           ;servos.c: 235: _delay((unsigned long)((800)*(10000000/4000.0)));
  5323  001542  0E0B               	movlw	11
  5324  001544  6E17               	movwf	(??_dispenseSnCan+1)& (0+255),c
  5325  001546  0E26               	movlw	38
  5326  001548  6E16               	movwf	??_dispenseSnCan& (0+255),c
  5327  00154A  0E5E               	movlw	94
  5328  00154C                     u3677:
  5329  00154C  2EE8               	decfsz	wreg,f,c
  5330  00154E  D7FE               	bra	u3677
  5331  001550  2E16               	decfsz	??_dispenseSnCan& (0+255),f,c
  5332  001552  D7FC               	bra	u3677
  5333  001554  2E17               	decfsz	(??_dispenseSnCan+1)& (0+255),f,c
  5334  001556  D7FA               	bra	u3677
  5335                           
  5336                           ;servos.c: 236: servoRotate0(0);
  5337  001558  0E00               	movlw	0
  5338  00155A  6E11               	movwf	servoRotate0@servo+1,c
  5339  00155C  0E00               	movlw	0
  5340  00155E  6E10               	movwf	servoRotate0@servo,c
  5341  001560  ECB0  F006         	call	_servoRotate0	;wreg free
  5342  001564  0012               	return		;funcret
  5343  001566                     __end_of_dispenseSnCan:
  5344                           	opt stack 0
  5345                           tblptru	equ	0xFF8
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           intcon3	equ	0xFF0
  5350                           postinc0	equ	0xFEE
  5351                           wreg	equ	0xFE8
  5352                           indf2	equ	0xFDF
  5353                           postinc2	equ	0xFDE
  5354                           postdec2	equ	0xFDD
  5355                           fsr2h	equ	0xFDA
  5356                           fsr2l	equ	0xFD9
  5357                           status	equ	0xFD8
  5358                           
  5359 ;; *************** function _dispenseAlCan *****************
  5360 ;; Defined at:
  5361 ;;		line 227 in file "servos.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;		None
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;		None
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      void 
  5368 ;; Registers used:
  5369 ;;		wreg, status,2, status,0, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;Total ram usage:        2 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    2
  5382 ;; This function calls:
  5383 ;;		_servoRotate0
  5384 ;;		_servoRotate90
  5385 ;; This function is called by:
  5386 ;;		_executingState
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text29
  5391  001566                     __ptext29:
  5392                           	opt stack 0
  5393  001566                     _dispenseAlCan:
  5394                           	opt stack 27
  5395                           
  5396                           ;servos.c: 228: servoRotate90(1);
  5397                           
  5398                           ;incstack = 0
  5399  001566  0E00               	movlw	0
  5400  001568  6E11               	movwf	servoRotate90@servo+1,c
  5401  00156A  0E01               	movlw	1
  5402  00156C  6E10               	movwf	servoRotate90@servo,c
  5403  00156E  EC4D  F006         	call	_servoRotate90	;wreg free
  5404                           
  5405                           ;servos.c: 229: _delay((unsigned long)((800)*(10000000/4000.0)));
  5406  001572  0E0B               	movlw	11
  5407  001574  6E17               	movwf	(??_dispenseAlCan+1)& (0+255),c
  5408  001576  0E26               	movlw	38
  5409  001578  6E16               	movwf	??_dispenseAlCan& (0+255),c
  5410  00157A  0E5E               	movlw	94
  5411  00157C                     u3687:
  5412  00157C  2EE8               	decfsz	wreg,f,c
  5413  00157E  D7FE               	bra	u3687
  5414  001580  2E16               	decfsz	??_dispenseAlCan& (0+255),f,c
  5415  001582  D7FC               	bra	u3687
  5416  001584  2E17               	decfsz	(??_dispenseAlCan+1)& (0+255),f,c
  5417  001586  D7FA               	bra	u3687
  5418                           
  5419                           ;servos.c: 230: servoRotate0(1);
  5420  001588  0E00               	movlw	0
  5421  00158A  6E11               	movwf	servoRotate0@servo+1,c
  5422  00158C  0E01               	movlw	1
  5423  00158E  6E10               	movwf	servoRotate0@servo,c
  5424  001590  ECB0  F006         	call	_servoRotate0	;wreg free
  5425  001594  0012               	return		;funcret
  5426  001596                     __end_of_dispenseAlCan:
  5427                           	opt stack 0
  5428                           tblptru	equ	0xFF8
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           intcon3	equ	0xFF0
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _servoRotate90 *****************
  5443 ;; Defined at:
  5444 ;;		line 124 in file "servos.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  servo           2   15[COMRAM] int 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  i               2   19[COMRAM] unsigned int 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:        6 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    1
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_executingState
  5469 ;;		_dispenseAlCan
  5470 ;;		_dispenseSnCan
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           	psect	text30
  5475  000C9A                     __ptext30:
  5476                           	opt stack 0
  5477  000C9A                     _servoRotate90:
  5478                           	opt stack 28
  5479                           
  5480                           ;servos.c: 126: unsigned int i;
  5481                           ;servos.c: 127: for (i = 0; i < 50; i++) {
  5482                           
  5483                           ;incstack = 0
  5484  000C9A  0E00               	movlw	0
  5485  000C9C  6E15               	movwf	servoRotate90@i+1,c
  5486  000C9E  0E00               	movlw	0
  5487  000CA0  6E14               	movwf	servoRotate90@i,c
  5488  000CA2                     l3822:
  5489  000CA2  5015               	movf	servoRotate90@i+1,w,c
  5490  000CA4  E15C               	bnz	l478
  5491  000CA6  0E32               	movlw	50
  5492  000CA8  5C14               	subwf	servoRotate90@i,w,c
  5493  000CAA  B0D8               	btfsc	status,0,c
  5494  000CAC  0012               	return	
  5495  000CAE  D00A               	goto	l3828
  5496  000CB0                     l465:
  5497                           
  5498                           ;servos.c: 130: LATAbits.LATA4 = 1;
  5499  000CB0  8889               	bsf	3977,4,c	;volatile
  5500                           
  5501                           ;servos.c: 131: break;
  5502  000CB2  D020               	goto	l3830
  5503  000CB4                     l467:
  5504                           
  5505                           ;servos.c: 133: LATAbits.LATA5 = 1;
  5506  000CB4  8A89               	bsf	3977,5,c	;volatile
  5507                           
  5508                           ;servos.c: 134: break;
  5509  000CB6  D01E               	goto	l3830
  5510  000CB8                     l468:
  5511                           
  5512                           ;servos.c: 136: LATEbits.LATE0 = 1;
  5513  000CB8  808D               	bsf	3981,0,c	;volatile
  5514                           
  5515                           ;servos.c: 137: break;
  5516  000CBA  D01C               	goto	l3830
  5517  000CBC                     l469:
  5518                           
  5519                           ;servos.c: 139: LATEbits.LATE1 = 1;
  5520  000CBC  828D               	bsf	3981,1,c	;volatile
  5521                           
  5522                           ;servos.c: 140: break;
  5523  000CBE  D01A               	goto	l3830
  5524  000CC0                     l470:
  5525                           
  5526                           ;servos.c: 142: LATBbits.LATB2 = 1;
  5527  000CC0  848A               	bsf	3978,2,c	;volatile
  5528                           
  5529                           ;servos.c: 144: }
  5530                           
  5531                           ;servos.c: 143: break;
  5532  000CC2  D018               	goto	l3830
  5533  000CC4                     l3828:
  5534  000CC4  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5535  000CC8  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5536                           
  5537                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5538                           ; Switch size 1, requested type "space"
  5539                           ; Number of cases is 1, Range of values is 0 to 0
  5540                           ; switch strategies available:
  5541                           ; Name         Instructions Cycles
  5542                           ; simple_byte            4     3 (average)
  5543                           ;	Chosen strategy is simple_byte
  5544  000CCC  5013               	movf	??_servoRotate90+1,w,c
  5545  000CCE  0A00               	xorlw	0	; case 0
  5546  000CD0  A4D8               	btfss	status,2,c
  5547  000CD2  D010               	goto	l3830
  5548                           
  5549                           ; Switch size 1, requested type "space"
  5550                           ; Number of cases is 5, Range of values is 0 to 4
  5551                           ; switch strategies available:
  5552                           ; Name         Instructions Cycles
  5553                           ; simple_byte           16     9 (average)
  5554                           ;	Chosen strategy is simple_byte
  5555  000CD4  5012               	movf	??_servoRotate90,w,c
  5556  000CD6  0A00               	xorlw	0	; case 0
  5557  000CD8  B4D8               	btfsc	status,2,c
  5558  000CDA  D7EA               	goto	l465
  5559  000CDC  0A01               	xorlw	1	; case 1
  5560  000CDE  B4D8               	btfsc	status,2,c
  5561  000CE0  D7E9               	goto	l467
  5562  000CE2  0A03               	xorlw	3	; case 2
  5563  000CE4  B4D8               	btfsc	status,2,c
  5564  000CE6  D7E8               	goto	l468
  5565  000CE8  0A01               	xorlw	1	; case 3
  5566  000CEA  B4D8               	btfsc	status,2,c
  5567  000CEC  D7E7               	goto	l469
  5568  000CEE  0A07               	xorlw	7	; case 4
  5569  000CF0  B4D8               	btfsc	status,2,c
  5570  000CF2  D7E6               	goto	l470
  5571  000CF4                     l3830:
  5572                           
  5573                           ;servos.c: 145: _delay((unsigned long)((2400)*(10000000/4000000.0)));
  5574  000CF4  0E08               	movlw	8
  5575  000CF6  6E12               	movwf	??_servoRotate90& (0+255),c
  5576  000CF8  0ECA               	movlw	202
  5577  000CFA                     u3697:
  5578  000CFA  2EE8               	decfsz	wreg,f,c
  5579  000CFC  D7FE               	bra	u3697
  5580  000CFE  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5581  000D00  D7FC               	bra	u3697
  5582                           
  5583                           ;servos.c: 146: switch (servo) {
  5584  000D02  D00A               	goto	l3834
  5585  000D04                     l472:
  5586                           
  5587                           ;servos.c: 148: LATAbits.LATA4 = 0;
  5588  000D04  9889               	bcf	3977,4,c	;volatile
  5589                           
  5590                           ;servos.c: 149: break;
  5591  000D06  D020               	goto	l3836
  5592  000D08                     l474:
  5593                           
  5594                           ;servos.c: 151: LATAbits.LATA5 = 0;
  5595  000D08  9A89               	bcf	3977,5,c	;volatile
  5596                           
  5597                           ;servos.c: 152: break;
  5598  000D0A  D01E               	goto	l3836
  5599  000D0C                     l475:
  5600                           
  5601                           ;servos.c: 154: LATEbits.LATE0 = 0;
  5602  000D0C  908D               	bcf	3981,0,c	;volatile
  5603                           
  5604                           ;servos.c: 155: break;
  5605  000D0E  D01C               	goto	l3836
  5606  000D10                     l476:
  5607                           
  5608                           ;servos.c: 157: LATEbits.LATE1 = 0;
  5609  000D10  928D               	bcf	3981,1,c	;volatile
  5610                           
  5611                           ;servos.c: 158: break;
  5612  000D12  D01A               	goto	l3836
  5613  000D14                     l477:
  5614                           
  5615                           ;servos.c: 160: LATBbits.LATB2 = 0;
  5616  000D14  948A               	bcf	3978,2,c	;volatile
  5617                           
  5618                           ;servos.c: 162: }
  5619                           
  5620                           ;servos.c: 161: break;
  5621  000D16  D018               	goto	l3836
  5622  000D18                     l3834:
  5623  000D18  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5624  000D1C  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5625                           
  5626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5627                           ; Switch size 1, requested type "space"
  5628                           ; Number of cases is 1, Range of values is 0 to 0
  5629                           ; switch strategies available:
  5630                           ; Name         Instructions Cycles
  5631                           ; simple_byte            4     3 (average)
  5632                           ;	Chosen strategy is simple_byte
  5633  000D20  5013               	movf	??_servoRotate90+1,w,c
  5634  000D22  0A00               	xorlw	0	; case 0
  5635  000D24  A4D8               	btfss	status,2,c
  5636  000D26  D010               	goto	l3836
  5637                           
  5638                           ; Switch size 1, requested type "space"
  5639                           ; Number of cases is 5, Range of values is 0 to 4
  5640                           ; switch strategies available:
  5641                           ; Name         Instructions Cycles
  5642                           ; simple_byte           16     9 (average)
  5643                           ;	Chosen strategy is simple_byte
  5644  000D28  5012               	movf	??_servoRotate90,w,c
  5645  000D2A  0A00               	xorlw	0	; case 0
  5646  000D2C  B4D8               	btfsc	status,2,c
  5647  000D2E  D7EA               	goto	l472
  5648  000D30  0A01               	xorlw	1	; case 1
  5649  000D32  B4D8               	btfsc	status,2,c
  5650  000D34  D7E9               	goto	l474
  5651  000D36  0A03               	xorlw	3	; case 2
  5652  000D38  B4D8               	btfsc	status,2,c
  5653  000D3A  D7E8               	goto	l475
  5654  000D3C  0A01               	xorlw	1	; case 3
  5655  000D3E  B4D8               	btfsc	status,2,c
  5656  000D40  D7E7               	goto	l476
  5657  000D42  0A07               	xorlw	7	; case 4
  5658  000D44  B4D8               	btfsc	status,2,c
  5659  000D46  D7E6               	goto	l477
  5660  000D48                     l3836:
  5661                           
  5662                           ;servos.c: 163: _delay((unsigned long)((17600)*(10000000/4000000.0)));
  5663  000D48  0E3A               	movlw	58
  5664  000D4A  6E12               	movwf	??_servoRotate90& (0+255),c
  5665  000D4C  0E23               	movlw	35
  5666  000D4E                     u3707:
  5667  000D4E  2EE8               	decfsz	wreg,f,c
  5668  000D50  D7FE               	bra	u3707
  5669  000D52  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5670  000D54  D7FC               	bra	u3707
  5671  000D56  F000               	nop	
  5672  000D58  4A14               	infsnz	servoRotate90@i,f,c
  5673  000D5A  2A15               	incf	servoRotate90@i+1,f,c
  5674  000D5C  D7A2               	goto	l3822
  5675  000D5E                     l478:
  5676  000D5E  0012               	return		;funcret
  5677  000D60                     __end_of_servoRotate90:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           prodh	equ	0xFF4
  5681                           prodl	equ	0xFF3
  5682                           intcon	equ	0xFF2
  5683                           intcon3	equ	0xFF0
  5684                           postinc0	equ	0xFEE
  5685                           wreg	equ	0xFE8
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           postdec2	equ	0xFDD
  5689                           fsr2h	equ	0xFDA
  5690                           fsr2l	equ	0xFD9
  5691                           status	equ	0xFD8
  5692                           
  5693 ;; *************** function _eeprom_initialize *****************
  5694 ;; Defined at:
  5695 ;;		line 73 in file "eeprom.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;		None
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      void 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;Total ram usage:        0 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    3
  5716 ;; This function calls:
  5717 ;;		_eeprom_WriteByte
  5718 ;;		_newestAddress
  5719 ;; This function is called by:
  5720 ;;		_main
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text31
  5725  001678                     __ptext31:
  5726                           	opt stack 0
  5727  001678                     _eeprom_initialize:
  5728                           	opt stack 27
  5729                           
  5730                           ;eeprom.c: 74: if(newestAddress() == 0b11111111){
  5731                           
  5732                           ;incstack = 0
  5733  001678  EC9A  F00B         	call	_newestAddress	;wreg free
  5734  00167C  0AFF               	xorlw	255
  5735  00167E  A4D8               	btfss	status,2,c
  5736  001680  0012               	return	
  5737                           
  5738                           ;eeprom.c: 75: eeprom_WriteByte(0x0000, 0x00);
  5739  001682  0E00               	movlw	0
  5740  001684  6E11               	movwf	eeprom_WriteByte@address+1,c
  5741  001686  0E00               	movlw	0
  5742  001688  6E10               	movwf	eeprom_WriteByte@address,c
  5743  00168A  0E00               	movlw	0
  5744  00168C  6E12               	movwf	eeprom_WriteByte@data,c
  5745  00168E  EC07  F00B         	call	_eeprom_WriteByte	;wreg free
  5746  001692  0012               	return	
  5747  001694                     __end_of_eeprom_initialize:
  5748                           	opt stack 0
  5749                           tblptru	equ	0xFF8
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           intcon3	equ	0xFF0
  5754                           postinc0	equ	0xFEE
  5755                           wreg	equ	0xFE8
  5756                           indf2	equ	0xFDF
  5757                           postinc2	equ	0xFDE
  5758                           postdec2	equ	0xFDD
  5759                           fsr2h	equ	0xFDA
  5760                           fsr2l	equ	0xFD9
  5761                           status	equ	0xFD8
  5762                           
  5763 ;; *************** function _newestAddress *****************
  5764 ;; Defined at:
  5765 ;;		line 69 in file "eeprom.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;		None
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      unsigned char 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;Total ram usage:        0 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    2
  5786 ;; This function calls:
  5787 ;;		_eeprom_ReadByte
  5788 ;; This function is called by:
  5789 ;;		_eeprom_initialize
  5790 ;;		_eeprom_LogResult
  5791 ;;		_eeprom_GetLog
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text32
  5796  001734                     __ptext32:
  5797                           	opt stack 0
  5798  001734                     _newestAddress:
  5799                           	opt stack 26
  5800                           
  5801                           ;eeprom.c: 70: return eeprom_ReadByte(0x0000);
  5802                           
  5803                           ;incstack = 0
  5804  001734  0E00               	movlw	0
  5805  001736  6E11               	movwf	eeprom_ReadByte@address+1,c
  5806  001738  0E00               	movlw	0
  5807  00173A  6E10               	movwf	eeprom_ReadByte@address,c
  5808  00173C  EC86  F00B         	call	_eeprom_ReadByte	;wreg free
  5809  001740  0012               	return	
  5810  001742                     __end_of_newestAddress:
  5811                           	opt stack 0
  5812                           tblptru	equ	0xFF8
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           intcon3	equ	0xFF0
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           postdec2	equ	0xFDD
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _eeprom_ReadByte *****************
  5827 ;; Defined at:
  5828 ;;		line 14 in file "eeprom.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  address         2   15[COMRAM] unsigned int 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      unsigned char 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;Total ram usage:        2 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    1
  5849 ;; This function calls:
  5850 ;;		Nothing
  5851 ;; This function is called by:
  5852 ;;		_newestAddress
  5853 ;;		_eeprom_GetLog
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text33
  5858  00170C                     __ptext33:
  5859                           	opt stack 0
  5860  00170C                     _eeprom_ReadByte:
  5861                           	opt stack 26
  5862                           
  5863                           ;eeprom.c: 18: EEADRH = (uint8_t)(address >> 8);
  5864                           
  5865                           ;incstack = 0
  5866  00170C  5011               	movf	eeprom_ReadByte@address+1,w,c
  5867  00170E  6EAA               	movwf	4010,c	;volatile
  5868                           
  5869                           ;eeprom.c: 19: EEADR = (uint8_t)address;
  5870  001710  C010  FFA9         	movff	eeprom_ReadByte@address,4009	;volatile
  5871                           
  5872                           ;eeprom.c: 21: EECON1bits.EEPGD = 0;
  5873  001714  9EA6               	bcf	4006,7,c	;volatile
  5874                           
  5875                           ;eeprom.c: 22: EECON1bits.CFGS = 0;
  5876  001716  9CA6               	bcf	4006,6,c	;volatile
  5877                           
  5878                           ;eeprom.c: 23: EECON1bits.RD = 1;
  5879  001718  80A6               	bsf	4006,0,c	;volatile
  5880  00171A                     l326:
  5881  00171A  B0A6               	btfsc	4006,0,c	;volatile
  5882  00171C  D7FE               	goto	l326
  5883                           
  5884                           ;eeprom.c: 29: return EEDATA;
  5885  00171E  50A8               	movf	4008,w,c	;volatile
  5886  001720  0012               	return	
  5887  001722                     __end_of_eeprom_ReadByte:
  5888                           	opt stack 0
  5889                           tblptru	equ	0xFF8
  5890                           prodh	equ	0xFF4
  5891                           prodl	equ	0xFF3
  5892                           intcon	equ	0xFF2
  5893                           intcon3	equ	0xFF0
  5894                           postinc0	equ	0xFEE
  5895                           wreg	equ	0xFE8
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function _eeprom_WriteByte *****************
  5904 ;; Defined at:
  5905 ;;		line 37 in file "eeprom.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  address         2   15[COMRAM] unsigned int 
  5908 ;;  data            1   17[COMRAM] unsigned char 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;		None
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  1    wreg      void 
  5913 ;; Registers used:
  5914 ;;		wreg, status,2
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5920 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;Total ram usage:        3 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:    1
  5927 ;; This function calls:
  5928 ;;		Nothing
  5929 ;; This function is called by:
  5930 ;;		_eeprom_initialize
  5931 ;;		_eeprom_LogResult
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text34
  5936  00160E                     __ptext34:
  5937                           	opt stack 0
  5938  00160E                     _eeprom_WriteByte:
  5939                           	opt stack 27
  5940                           
  5941                           ;eeprom.c: 40: EEADRH = (uint8_t)(address >> 8);
  5942                           
  5943                           ;incstack = 0
  5944  00160E  5011               	movf	eeprom_WriteByte@address+1,w,c
  5945  001610  6EAA               	movwf	4010,c	;volatile
  5946                           
  5947                           ;eeprom.c: 41: EEADR = (uint8_t)address;
  5948  001612  C010  FFA9         	movff	eeprom_WriteByte@address,4009	;volatile
  5949                           
  5950                           ;eeprom.c: 43: EEDATA = data;
  5951  001616  C012  FFA8         	movff	eeprom_WriteByte@data,4008	;volatile
  5952                           
  5953                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  5954  00161A  9EA6               	bcf	4006,7,c	;volatile
  5955                           
  5956                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  5957  00161C  9CA6               	bcf	4006,6,c	;volatile
  5958                           
  5959                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  5960  00161E  84A6               	bsf	4006,2,c	;volatile
  5961                           
  5962                           ;eeprom.c: 50: EECON2 = 0x55;
  5963  001620  0E55               	movlw	85
  5964  001622  6EA7               	movwf	4007,c	;volatile
  5965                           
  5966                           ;eeprom.c: 51: EECON2 = 0xAA;
  5967  001624  0EAA               	movlw	170
  5968  001626  6EA7               	movwf	4007,c	;volatile
  5969                           
  5970                           ;eeprom.c: 52: EECON1bits.WR = 1;
  5971  001628  82A6               	bsf	4006,1,c	;volatile
  5972  00162A                     l332:
  5973  00162A  A8A1               	btfss	4001,4,c	;volatile
  5974  00162C  D7FE               	goto	l332
  5975                           
  5976                           ;eeprom.c: 58: }
  5977                           ;eeprom.c: 60: PIR2bits.EEIF = 0;
  5978  00162E  98A1               	bcf	4001,4,c	;volatile
  5979                           
  5980                           ;eeprom.c: 61: EECON1bits.WREN = 0;
  5981  001630  94A6               	bcf	4006,2,c	;volatile
  5982  001632  0012               	return		;funcret
  5983  001634                     __end_of_eeprom_WriteByte:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           intcon3	equ	0xFF0
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           indf2	equ	0xFDF
  5993                           postinc2	equ	0xFDE
  5994                           postdec2	equ	0xFDD
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function _debugState *****************
  6000 ;; Defined at:
  6001 ;;		line 330 in file "main.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;		None
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;		None
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      void 
  6008 ;; Registers used:
  6009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;Total ram usage:        0 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    4
  6022 ;; This function calls:
  6023 ;;		_lcdInst
  6024 ;;		_printf
  6025 ;;		_servoRotate0
  6026 ;; This function is called by:
  6027 ;;		_main
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text35
  6032  001596                     __ptext35:
  6033                           	opt stack 0
  6034  001596                     _debugState:
  6035                           	opt stack 26
  6036                           
  6037                           ;main.c: 331: LATCbits.LATC6 = 1;
  6038                           
  6039                           ;incstack = 0
  6040  001596  8C8B               	bsf	3979,6,c	;volatile
  6041                           
  6042                           ;main.c: 332: lcdInst(0b10000000);;
  6043  001598  0E80               	movlw	128
  6044  00159A  ECA7  F00B         	call	_lcdInst
  6045                           
  6046                           ;main.c: 333: printf("going debug");
  6047  00159E  0EED               	movlw	low STR_13
  6048  0015A0  6E1C               	movwf	printf@f,c
  6049  0015A2  0EFF               	movlw	high STR_13
  6050  0015A4  6E1D               	movwf	printf@f+1,c
  6051  0015A6  ECB0  F002         	call	_printf	;wreg free
  6052                           
  6053                           ;main.c: 334: lcdInst(0b11000000);;
  6054  0015AA  0EC0               	movlw	192
  6055  0015AC  ECA7  F00B         	call	_lcdInst
  6056                           
  6057                           ;main.c: 341: servoRotate0(3);
  6058  0015B0  0E00               	movlw	0
  6059  0015B2  6E11               	movwf	servoRotate0@servo+1,c
  6060  0015B4  0E03               	movlw	3
  6061  0015B6  6E10               	movwf	servoRotate0@servo,c
  6062  0015B8  ECB0  F006         	call	_servoRotate0	;wreg free
  6063                           
  6064                           ;main.c: 345: state = MAIN;
  6065  0015BC  0E00               	movlw	0
  6066  0015BE  6E4B               	movwf	_state,c
  6067  0015C0  0012               	return		;funcret
  6068  0015C2                     __end_of_debugState:
  6069                           	opt stack 0
  6070                           tblptru	equ	0xFF8
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           intcon3	equ	0xFF0
  6075                           postinc0	equ	0xFEE
  6076                           wreg	equ	0xFE8
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function _servoRotate0 *****************
  6085 ;; Defined at:
  6086 ;;		line 81 in file "servos.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  servo           2   15[COMRAM] int 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  i               2   19[COMRAM] unsigned int 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;Total ram usage:        6 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    1
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_executingState
  6111 ;;		_debugState
  6112 ;;		_dispenseAlCan
  6113 ;;		_dispenseSnCan
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text36
  6118  000D60                     __ptext36:
  6119                           	opt stack 0
  6120  000D60                     _servoRotate0:
  6121                           	opt stack 28
  6122                           
  6123                           ;servos.c: 83: unsigned int i;
  6124                           ;servos.c: 84: for (i = 0; i < 50; i++) {
  6125                           
  6126                           ;incstack = 0
  6127  000D60  0E00               	movlw	0
  6128  000D62  6E15               	movwf	servoRotate0@i+1,c
  6129  000D64  0E00               	movlw	0
  6130  000D66  6E14               	movwf	servoRotate0@i,c
  6131  000D68                     l3794:
  6132  000D68  5015               	movf	servoRotate0@i+1,w,c
  6133  000D6A  E15C               	bnz	l459
  6134  000D6C  0E32               	movlw	50
  6135  000D6E  5C14               	subwf	servoRotate0@i,w,c
  6136  000D70  B0D8               	btfsc	status,0,c
  6137  000D72  0012               	return	
  6138  000D74  D00A               	goto	l3800
  6139  000D76                     l446:
  6140                           
  6141                           ;servos.c: 87: LATAbits.LATA4 = 1;
  6142  000D76  8889               	bsf	3977,4,c	;volatile
  6143                           
  6144                           ;servos.c: 88: break;
  6145  000D78  D020               	goto	l3802
  6146  000D7A                     l448:
  6147                           
  6148                           ;servos.c: 90: LATAbits.LATA5 = 1;
  6149  000D7A  8A89               	bsf	3977,5,c	;volatile
  6150                           
  6151                           ;servos.c: 91: break;
  6152  000D7C  D01E               	goto	l3802
  6153  000D7E                     l449:
  6154                           
  6155                           ;servos.c: 93: LATEbits.LATE0 = 1;
  6156  000D7E  808D               	bsf	3981,0,c	;volatile
  6157                           
  6158                           ;servos.c: 94: break;
  6159  000D80  D01C               	goto	l3802
  6160  000D82                     l450:
  6161                           
  6162                           ;servos.c: 96: LATEbits.LATE1 = 1;
  6163  000D82  828D               	bsf	3981,1,c	;volatile
  6164                           
  6165                           ;servos.c: 97: break;
  6166  000D84  D01A               	goto	l3802
  6167  000D86                     l451:
  6168                           
  6169                           ;servos.c: 99: LATBbits.LATB2 = 1;
  6170  000D86  848A               	bsf	3978,2,c	;volatile
  6171                           
  6172                           ;servos.c: 101: }
  6173                           
  6174                           ;servos.c: 100: break;
  6175  000D88  D018               	goto	l3802
  6176  000D8A                     l3800:
  6177  000D8A  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  6178  000D8E  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  6179                           
  6180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6181                           ; Switch size 1, requested type "space"
  6182                           ; Number of cases is 1, Range of values is 0 to 0
  6183                           ; switch strategies available:
  6184                           ; Name         Instructions Cycles
  6185                           ; simple_byte            4     3 (average)
  6186                           ;	Chosen strategy is simple_byte
  6187  000D92  5013               	movf	??_servoRotate0+1,w,c
  6188  000D94  0A00               	xorlw	0	; case 0
  6189  000D96  A4D8               	btfss	status,2,c
  6190  000D98  D010               	goto	l3802
  6191                           
  6192                           ; Switch size 1, requested type "space"
  6193                           ; Number of cases is 5, Range of values is 0 to 4
  6194                           ; switch strategies available:
  6195                           ; Name         Instructions Cycles
  6196                           ; simple_byte           16     9 (average)
  6197                           ;	Chosen strategy is simple_byte
  6198  000D9A  5012               	movf	??_servoRotate0,w,c
  6199  000D9C  0A00               	xorlw	0	; case 0
  6200  000D9E  B4D8               	btfsc	status,2,c
  6201  000DA0  D7EA               	goto	l446
  6202  000DA2  0A01               	xorlw	1	; case 1
  6203  000DA4  B4D8               	btfsc	status,2,c
  6204  000DA6  D7E9               	goto	l448
  6205  000DA8  0A03               	xorlw	3	; case 2
  6206  000DAA  B4D8               	btfsc	status,2,c
  6207  000DAC  D7E8               	goto	l449
  6208  000DAE  0A01               	xorlw	1	; case 3
  6209  000DB0  B4D8               	btfsc	status,2,c
  6210  000DB2  D7E7               	goto	l450
  6211  000DB4  0A07               	xorlw	7	; case 4
  6212  000DB6  B4D8               	btfsc	status,2,c
  6213  000DB8  D7E6               	goto	l451
  6214  000DBA                     l3802:
  6215                           
  6216                           ;servos.c: 102: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  6217  000DBA  0E05               	movlw	5
  6218  000DBC  6E12               	movwf	??_servoRotate0& (0+255),c
  6219  000DBE  0EDE               	movlw	222
  6220  000DC0                     u3717:
  6221  000DC0  2EE8               	decfsz	wreg,f,c
  6222  000DC2  D7FE               	bra	u3717
  6223  000DC4  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  6224  000DC6  D7FC               	bra	u3717
  6225                           
  6226                           ;servos.c: 103: switch (servo) {
  6227  000DC8  D00A               	goto	l3806
  6228  000DCA                     l453:
  6229                           
  6230                           ;servos.c: 105: LATAbits.LATA4 = 0;
  6231  000DCA  9889               	bcf	3977,4,c	;volatile
  6232                           
  6233                           ;servos.c: 106: break;
  6234  000DCC  D020               	goto	l3808
  6235  000DCE                     l455:
  6236                           
  6237                           ;servos.c: 108: LATAbits.LATA5 = 0;
  6238  000DCE  9A89               	bcf	3977,5,c	;volatile
  6239                           
  6240                           ;servos.c: 109: break;
  6241  000DD0  D01E               	goto	l3808
  6242  000DD2                     l456:
  6243                           
  6244                           ;servos.c: 111: LATEbits.LATE0 = 0;
  6245  000DD2  908D               	bcf	3981,0,c	;volatile
  6246                           
  6247                           ;servos.c: 112: break;
  6248  000DD4  D01C               	goto	l3808
  6249  000DD6                     l457:
  6250                           
  6251                           ;servos.c: 114: LATEbits.LATE1 = 0;
  6252  000DD6  928D               	bcf	3981,1,c	;volatile
  6253                           
  6254                           ;servos.c: 115: break;
  6255  000DD8  D01A               	goto	l3808
  6256  000DDA                     l458:
  6257                           
  6258                           ;servos.c: 117: LATBbits.LATB2 = 0;
  6259  000DDA  948A               	bcf	3978,2,c	;volatile
  6260                           
  6261                           ;servos.c: 119: }
  6262                           
  6263                           ;servos.c: 118: break;
  6264  000DDC  D018               	goto	l3808
  6265  000DDE                     l3806:
  6266  000DDE  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  6267  000DE2  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  6268                           
  6269                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6270                           ; Switch size 1, requested type "space"
  6271                           ; Number of cases is 1, Range of values is 0 to 0
  6272                           ; switch strategies available:
  6273                           ; Name         Instructions Cycles
  6274                           ; simple_byte            4     3 (average)
  6275                           ;	Chosen strategy is simple_byte
  6276  000DE6  5013               	movf	??_servoRotate0+1,w,c
  6277  000DE8  0A00               	xorlw	0	; case 0
  6278  000DEA  A4D8               	btfss	status,2,c
  6279  000DEC  D010               	goto	l3808
  6280                           
  6281                           ; Switch size 1, requested type "space"
  6282                           ; Number of cases is 5, Range of values is 0 to 4
  6283                           ; switch strategies available:
  6284                           ; Name         Instructions Cycles
  6285                           ; simple_byte           16     9 (average)
  6286                           ;	Chosen strategy is simple_byte
  6287  000DEE  5012               	movf	??_servoRotate0,w,c
  6288  000DF0  0A00               	xorlw	0	; case 0
  6289  000DF2  B4D8               	btfsc	status,2,c
  6290  000DF4  D7EA               	goto	l453
  6291  000DF6  0A01               	xorlw	1	; case 1
  6292  000DF8  B4D8               	btfsc	status,2,c
  6293  000DFA  D7E9               	goto	l455
  6294  000DFC  0A03               	xorlw	3	; case 2
  6295  000DFE  B4D8               	btfsc	status,2,c
  6296  000E00  D7E8               	goto	l456
  6297  000E02  0A01               	xorlw	1	; case 3
  6298  000E04  B4D8               	btfsc	status,2,c
  6299  000E06  D7E7               	goto	l457
  6300  000E08  0A07               	xorlw	7	; case 4
  6301  000E0A  B4D8               	btfsc	status,2,c
  6302  000E0C  D7E6               	goto	l458
  6303  000E0E                     l3808:
  6304                           
  6305                           ;servos.c: 120: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  6306  000E0E  0E3D               	movlw	61
  6307  000E10  6E12               	movwf	??_servoRotate0& (0+255),c
  6308  000E12  0E0F               	movlw	15
  6309  000E14                     u3727:
  6310  000E14  2EE8               	decfsz	wreg,f,c
  6311  000E16  D7FE               	bra	u3727
  6312  000E18  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  6313  000E1A  D7FC               	bra	u3727
  6314  000E1C  F000               	nop	
  6315  000E1E  4A14               	infsnz	servoRotate0@i,f,c
  6316  000E20  2A15               	incf	servoRotate0@i+1,f,c
  6317  000E22  D7A2               	goto	l3794
  6318  000E24                     l459:
  6319  000E24  0012               	return		;funcret
  6320  000E26                     __end_of_servoRotate0:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           intcon	equ	0xFF2
  6326                           intcon3	equ	0xFF0
  6327                           postinc0	equ	0xFEE
  6328                           wreg	equ	0xFE8
  6329                           indf2	equ	0xFDF
  6330                           postinc2	equ	0xFDE
  6331                           postdec2	equ	0xFDD
  6332                           fsr2h	equ	0xFDA
  6333                           fsr2l	equ	0xFD9
  6334                           status	equ	0xFD8
  6335                           
  6336 ;; *************** function _printf *****************
  6337 ;; Defined at:
  6338 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  f               2   27[COMRAM] PTR const unsigned char 
  6341 ;;		 -> STR_16(15), STR_15(15), STR_14(15), STR_13(12), 
  6342 ;;		 -> STR_12(18), STR_11(6), STR_10(17), STR_9(17), 
  6343 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(17), 
  6344 ;;		 -> STR_4(19), STR_3(17), STR_2(15), STR_1(16), 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  idx             1   41[COMRAM] unsigned char 
  6347 ;;  tmpval          4    0        struct .
  6348 ;;  cp              3    0        PTR const unsigned char 
  6349 ;;  width           2   48[COMRAM] int 
  6350 ;;  val             2   45[COMRAM] unsigned int 
  6351 ;;  ap              2   42[COMRAM] PTR void [1]
  6352 ;;		 -> ?_printf(2), 
  6353 ;;  len             2    0        unsigned int 
  6354 ;;  c               1   50[COMRAM] char 
  6355 ;;  flag            1   47[COMRAM] unsigned char 
  6356 ;;  prec            1   44[COMRAM] char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  2   27[COMRAM] int 
  6359 ;; Registers used:
  6360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:       24 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    3
  6373 ;; This function calls:
  6374 ;;		___lwdiv
  6375 ;;		___lwmod
  6376 ;;		___wmul
  6377 ;;		_isdigit
  6378 ;;		_putch
  6379 ;; This function is called by:
  6380 ;;		_update_lcd
  6381 ;;		_executingState
  6382 ;;		_debugState
  6383 ;;		_fixLCD
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text37
  6388  000560                     __ptext37:
  6389                           	opt stack 0
  6390  000560                     _printf:
  6391                           	opt stack 25
  6392                           
  6393                           ;doprnt.c: 466: va_list ap;
  6394                           ;doprnt.c: 499: signed char c;
  6395                           ;doprnt.c: 501: int width;
  6396                           ;doprnt.c: 506: signed char prec;
  6397                           ;doprnt.c: 508: unsigned char flag;
  6398                           ;doprnt.c: 523: union {
  6399                           ;doprnt.c: 524: unsigned long vd;
  6400                           ;doprnt.c: 525: double integ;
  6401                           ;doprnt.c: 526: } tmpval;
  6402                           ;doprnt.c: 528: unsigned int val;
  6403                           ;doprnt.c: 529: unsigned len;
  6404                           ;doprnt.c: 530: const char * cp;
  6405                           ;doprnt.c: 533: *ap = __va_start();
  6406                           
  6407                           ;incstack = 0
  6408  000560  0E1E               	movlw	low (?_printf+2)
  6409  000562  6E2B               	movwf	printf@ap,c
  6410  000564  0E00               	movlw	high (?_printf+2)
  6411  000566  6E2C               	movwf	printf@ap+1,c
  6412                           
  6413                           ;doprnt.c: 536: while(c = *f++) {
  6414  000568  D174               	goto	l3772
  6415  00056A                     l3646:
  6416                           
  6417                           ;doprnt.c: 538: if(c != '%')
  6418  00056A  0E25               	movlw	37
  6419  00056C  1833               	xorwf	printf@c,w,c
  6420  00056E  B4D8               	btfsc	status,2,c
  6421  000570  D004               	goto	l3650
  6422                           
  6423                           ;doprnt.c: 540: {
  6424                           ;doprnt.c: 541: (putch(c) );
  6425  000572  5033               	movf	printf@c,w,c
  6426  000574  ECA1  F00B         	call	_putch
  6427                           
  6428                           ;doprnt.c: 542: continue;
  6429  000578  D16C               	goto	l3772
  6430  00057A                     l3650:
  6431                           
  6432                           ;doprnt.c: 543: }
  6433                           ;doprnt.c: 546: width = 0;
  6434  00057A  0E00               	movlw	0
  6435  00057C  6E32               	movwf	printf@width+1,c
  6436  00057E  0E00               	movlw	0
  6437  000580  6E31               	movwf	printf@width,c
  6438                           
  6439                           ;doprnt.c: 548: flag = 0;
  6440  000582  0E00               	movlw	0
  6441  000584  6E30               	movwf	printf@flag,c
  6442                           
  6443                           ;doprnt.c: 551: switch(*f) {
  6444                           
  6445                           ;doprnt.c: 550: for(;;) {
  6446  000586  D003               	goto	l3656
  6447  000588                     l3652:
  6448                           
  6449                           ;doprnt.c: 580: flag |= 0x04;
  6450  000588  8430               	bsf	printf@flag,2,c
  6451                           
  6452                           ;doprnt.c: 581: f++;
  6453  00058A  4A1C               	infsnz	printf@f,f,c
  6454  00058C  2A1D               	incf	printf@f+1,f,c
  6455  00058E                     l3656:
  6456  00058E  C01C  FFF6         	movff	printf@f,tblptrl
  6457  000592  C01D  FFF7         	movff	printf@f+1,tblptrh
  6458  000596                     	if	0	;tblptru may be non-zero
  6459  000596                     	endif
  6460  000596                     	if	0	;tblptru may be non-zero
  6461  000596                     	endif
  6462  000596  0008               	tblrd		*
  6463  000598  50F5               	movf	tablat,w,c
  6464                           
  6465                           ; Switch size 1, requested type "space"
  6466                           ; Number of cases is 1, Range of values is 48 to 48
  6467                           ; switch strategies available:
  6468                           ; Name         Instructions Cycles
  6469                           ; simple_byte            4     3 (average)
  6470                           ;	Chosen strategy is simple_byte
  6471  00059A  0A30               	xorlw	48	; case 48
  6472  00059C  B4D8               	btfsc	status,2,c
  6473  00059E  D7F4               	goto	l3652
  6474                           
  6475                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6476                           
  6477                           ;doprnt.c: 586: }
  6478                           
  6479                           ;doprnt.c: 585: break;
  6480  0005A0  C01C  FFF6         	movff	printf@f,tblptrl
  6481  0005A4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6482  0005A8                     	if	0	;tblptru may be non-zero
  6483  0005A8                     	endif
  6484  0005A8                     	if	0	;tblptru may be non-zero
  6485  0005A8                     	endif
  6486  0005A8  0008               	tblrd		*
  6487  0005AA  50F5               	movf	tablat,w,c
  6488  0005AC  EC2D  F00B         	call	_isdigit
  6489  0005B0  A0D8               	btfss	status,0,c
  6490  0005B2  D035               	goto	l3674
  6491                           
  6492                           ;doprnt.c: 598: width = 0;
  6493  0005B4  0E00               	movlw	0
  6494  0005B6  6E32               	movwf	printf@width+1,c
  6495  0005B8  0E00               	movlw	0
  6496  0005BA  6E31               	movwf	printf@width,c
  6497  0005BC                     l3662:
  6498                           
  6499                           ;doprnt.c: 600: width *= 10;
  6500  0005BC  C031  F010         	movff	printf@width,___wmul@multiplier
  6501  0005C0  C032  F011         	movff	printf@width+1,___wmul@multiplier+1
  6502  0005C4  0E00               	movlw	0
  6503  0005C6  6E13               	movwf	___wmul@multiplicand+1,c
  6504  0005C8  0E0A               	movlw	10
  6505  0005CA  6E12               	movwf	___wmul@multiplicand,c
  6506  0005CC  EC1A  F00B         	call	___wmul	;wreg free
  6507  0005D0  C010  F031         	movff	?___wmul,printf@width
  6508  0005D4  C011  F032         	movff	?___wmul+1,printf@width+1
  6509                           
  6510                           ;doprnt.c: 601: width += *f++ - '0';
  6511  0005D8  0ED0               	movlw	208
  6512  0005DA  6E26               	movwf	??_printf& (0+255),c
  6513  0005DC  0EFF               	movlw	255
  6514  0005DE  6E27               	movwf	(??_printf+1)& (0+255),c
  6515  0005E0  C01C  FFF6         	movff	printf@f,tblptrl
  6516  0005E4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6517  0005E8                     	if	0	;tblptru may be non-zero
  6518  0005E8                     	endif
  6519  0005E8                     	if	0	;tblptru may be non-zero
  6520  0005E8                     	endif
  6521  0005E8  0008               	tblrd		*
  6522  0005EA  50F5               	movf	tablat,w,c
  6523  0005EC  6E28               	movwf	(??_printf+2)& (0+255),c
  6524  0005EE  6A29               	clrf	(??_printf+3)& (0+255),c
  6525  0005F0  5026               	movf	??_printf,w,c
  6526  0005F2  2628               	addwf	??_printf+2,f,c
  6527  0005F4  5027               	movf	??_printf+1,w,c
  6528  0005F6  2229               	addwfc	??_printf+3,f,c
  6529  0005F8  5028               	movf	??_printf+2,w,c
  6530  0005FA  2631               	addwf	printf@width,f,c
  6531  0005FC  5029               	movf	??_printf+3,w,c
  6532  0005FE  2232               	addwfc	printf@width+1,f,c
  6533  000600  4A1C               	infsnz	printf@f,f,c
  6534  000602  2A1D               	incf	printf@f+1,f,c
  6535                           
  6536                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6537  000604  C01C  FFF6         	movff	printf@f,tblptrl
  6538  000608  C01D  FFF7         	movff	printf@f+1,tblptrh
  6539  00060C                     	if	0	;tblptru may be non-zero
  6540  00060C                     	endif
  6541  00060C                     	if	0	;tblptru may be non-zero
  6542  00060C                     	endif
  6543  00060C  0008               	tblrd		*
  6544  00060E  50F5               	movf	tablat,w,c
  6545  000610  EC2D  F00B         	call	_isdigit
  6546  000614  A0D8               	btfss	status,0,c
  6547  000616  D003               	goto	l3674
  6548  000618  D7D1               	goto	l3662
  6549  00061A                     l3670:
  6550                           
  6551                           ;doprnt.c: 721: flag |= 0x80;
  6552  00061A  8E30               	bsf	printf@flag,7,c
  6553                           
  6554                           ;doprnt.c: 723: break;
  6555  00061C  D017               	goto	l558
  6556  00061E                     l3674:
  6557  00061E  C01C  FFF6         	movff	printf@f,tblptrl
  6558  000622  C01D  FFF7         	movff	printf@f+1,tblptrh
  6559  000626  4A1C               	infsnz	printf@f,f,c
  6560  000628  2A1D               	incf	printf@f+1,f,c
  6561  00062A                     	if	0	;tblptru may be non-zero
  6562  00062A                     	endif
  6563  00062A                     	if	0	;tblptru may be non-zero
  6564  00062A                     	endif
  6565  00062A  0008               	tblrd		*
  6566  00062C  CFF5 F033          	movff	tablat,printf@c
  6567  000630  5033               	movf	printf@c,w,c
  6568                           
  6569                           ; Switch size 1, requested type "space"
  6570                           ; Number of cases is 4, Range of values is 0 to 120
  6571                           ; switch strategies available:
  6572                           ; Name         Instructions Cycles
  6573                           ; simple_byte           13     7 (average)
  6574                           ;	Chosen strategy is simple_byte
  6575  000632  0A00               	xorlw	0	; case 0
  6576  000634  B4D8               	btfsc	status,2,c
  6577  000636  0012               	return	
  6578  000638  0A64               	xorlw	100	; case 100
  6579  00063A  B4D8               	btfsc	status,2,c
  6580  00063C  D007               	goto	l558
  6581  00063E  0A0D               	xorlw	13	; case 105
  6582  000640  B4D8               	btfsc	status,2,c
  6583  000642  D004               	goto	l558
  6584  000644  0A11               	xorlw	17	; case 120
  6585  000646  B4D8               	btfsc	status,2,c
  6586  000648  D7E8               	goto	l3670
  6587  00064A  D103               	goto	l3772
  6588  00064C                     l558:
  6589                           
  6590                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6591  00064C  BE30               	btfsc	printf@flag,7,c
  6592  00064E  D015               	goto	l3686
  6593                           
  6594                           ;doprnt.c: 1253: {
  6595                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6596  000650  C02B  FFD9         	movff	printf@ap,fsr2l
  6597  000654  C02C  FFDA         	movff	printf@ap+1,fsr2h
  6598  000658  CFDE F02E          	movff	postinc2,printf@val
  6599  00065C  CFDD F02F          	movff	postdec2,printf@val+1
  6600  000660  0E02               	movlw	2
  6601  000662  262B               	addwf	printf@ap,f,c
  6602  000664  0E00               	movlw	0
  6603  000666  222C               	addwfc	printf@ap+1,f,c
  6604                           
  6605                           ;doprnt.c: 1261: if((int)val < 0) {
  6606  000668  AE2F               	btfss	printf@val+1,7,c
  6607  00066A  D044               	goto	l3720
  6608                           
  6609                           ;doprnt.c: 1262: flag |= 0x03;
  6610  00066C  0E03               	movlw	3
  6611  00066E  1230               	iorwf	printf@flag,f,c
  6612                           
  6613                           ;doprnt.c: 1263: val = -val;
  6614  000670  6C2E               	negf	printf@val,c
  6615  000672  1E2F               	comf	printf@val+1,f,c
  6616  000674  B0D8               	btfsc	status,0,c
  6617  000676  2A2F               	incf	printf@val+1,f,c
  6618                           
  6619                           ;doprnt.c: 1264: }
  6620                           ;doprnt.c: 1266: }
  6621  000678  D03D               	goto	l3720
  6622  00067A                     l3686:
  6623                           
  6624                           ;doprnt.c: 1268: else
  6625                           ;doprnt.c: 1273: {
  6626                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6627  00067A  C02B  FFD9         	movff	printf@ap,fsr2l
  6628  00067E  C02C  FFDA         	movff	printf@ap+1,fsr2h
  6629  000682  CFDE F02E          	movff	postinc2,printf@val
  6630  000686  CFDD F02F          	movff	postdec2,printf@val+1
  6631  00068A  0E02               	movlw	2
  6632  00068C  262B               	addwf	printf@ap,f,c
  6633  00068E  0E00               	movlw	0
  6634  000690  222C               	addwfc	printf@ap+1,f,c
  6635                           
  6636                           ;doprnt.c: 1287: }
  6637                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6638  000692  D030               	goto	l3720
  6639  000694                     l3690:
  6640                           
  6641                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6642  000694  0E01               	movlw	1
  6643  000696  6E33               	movwf	printf@c,c
  6644  000698                     l3692:
  6645  000698  0E05               	movlw	5
  6646  00069A  1833               	xorwf	printf@c,w,c
  6647  00069C  B4D8               	btfsc	status,2,c
  6648  00069E  D032               	goto	l3722
  6649                           
  6650                           ;doprnt.c: 1306: if(val < dpowers[c])
  6651  0006A0  5033               	movf	printf@c,w,c
  6652  0006A2  0D02               	mullw	2
  6653  0006A4  0EF8               	movlw	low _dpowers
  6654  0006A6  24F3               	addwf	prodl,w,c
  6655  0006A8  6EF6               	movwf	tblptrl,c
  6656  0006AA  0EFE               	movlw	high _dpowers
  6657  0006AC  20F4               	addwfc	prodh,w,c
  6658  0006AE  6EF7               	movwf	tblptrh,c
  6659  0006B0                     	if	0	;There are less than 3 active tblptr bytes
  6660  0006B0                     	endif
  6661  0006B0  0009               	tblrd		*+
  6662  0006B2  50F5               	movf	tablat,w,c
  6663  0006B4  5C2E               	subwf	printf@val,w,c
  6664  0006B6  0009               	tblrd		*+
  6665  0006B8  50F5               	movf	tablat,w,c
  6666  0006BA  582F               	subwfb	printf@val+1,w,c
  6667  0006BC  A0D8               	btfss	status,0,c
  6668  0006BE  D022               	goto	l3722
  6669                           
  6670                           ;doprnt.c: 1307: break;
  6671  0006C0  2A33               	incf	printf@c,f,c
  6672  0006C2  D7EA               	goto	l3692
  6673  0006C4                     l3704:
  6674                           
  6675                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6676  0006C4  0E01               	movlw	1
  6677  0006C6  6E33               	movwf	printf@c,c
  6678  0006C8                     l3706:
  6679  0006C8  0E04               	movlw	4
  6680  0006CA  1833               	xorwf	printf@c,w,c
  6681  0006CC  B4D8               	btfsc	status,2,c
  6682  0006CE  D01A               	goto	l3722
  6683                           
  6684                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6685  0006D0  5033               	movf	printf@c,w,c
  6686  0006D2  0D02               	mullw	2
  6687  0006D4  0E02               	movlw	low _hexpowers
  6688  0006D6  24F3               	addwf	prodl,w,c
  6689  0006D8  6EF6               	movwf	tblptrl,c
  6690  0006DA  0EFF               	movlw	high _hexpowers
  6691  0006DC  20F4               	addwfc	prodh,w,c
  6692  0006DE  6EF7               	movwf	tblptrh,c
  6693  0006E0                     	if	0	;There are less than 3 active tblptr bytes
  6694  0006E0                     	endif
  6695  0006E0  0009               	tblrd		*+
  6696  0006E2  50F5               	movf	tablat,w,c
  6697  0006E4  5C2E               	subwf	printf@val,w,c
  6698  0006E6  0009               	tblrd		*+
  6699  0006E8  50F5               	movf	tablat,w,c
  6700  0006EA  582F               	subwfb	printf@val+1,w,c
  6701  0006EC  A0D8               	btfss	status,0,c
  6702  0006EE  D00A               	goto	l3722
  6703                           
  6704                           ;doprnt.c: 1318: break;
  6705  0006F0  2A33               	incf	printf@c,f,c
  6706  0006F2  D7EA               	goto	l3706
  6707  0006F4                     l3720:
  6708  0006F4  5030               	movf	printf@flag,w,c
  6709  0006F6  0B80               	andlw	128
  6710                           
  6711                           ; Switch size 1, requested type "space"
  6712                           ; Number of cases is 2, Range of values is 0 to 128
  6713                           ; switch strategies available:
  6714                           ; Name         Instructions Cycles
  6715                           ; simple_byte            7     4 (average)
  6716                           ;	Chosen strategy is simple_byte
  6717  0006F8  0A00               	xorlw	0	; case 0
  6718  0006FA  B4D8               	btfsc	status,2,c
  6719  0006FC  D7CB               	goto	l3690
  6720  0006FE  0A80               	xorlw	128	; case 128
  6721  000700  B4D8               	btfsc	status,2,c
  6722  000702  D7E0               	goto	l3704
  6723  000704                     l3722:
  6724                           
  6725                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6726  000704  5031               	movf	printf@width,w,c
  6727  000706  1032               	iorwf	printf@width+1,w,c
  6728  000708  B4D8               	btfsc	status,2,c
  6729  00070A  D009               	goto	l3728
  6730  00070C  C030  F026         	movff	printf@flag,??_printf
  6731  000710  0E03               	movlw	3
  6732  000712  1626               	andwf	??_printf,f,c
  6733  000714  B4D8               	btfsc	status,2,c
  6734  000716  D003               	goto	l3728
  6735                           
  6736                           ;doprnt.c: 1346: width--;
  6737  000718  0631               	decf	printf@width,f,c
  6738  00071A  A0D8               	btfss	status,0,c
  6739  00071C  0632               	decf	printf@width+1,f,c
  6740  00071E                     l3728:
  6741                           
  6742                           ;doprnt.c: 1381: if(width > c)
  6743  00071E  0E80               	movlw	128
  6744  000720  BE33               	btfsc	printf@c,7,c
  6745  000722  0E7F               	movlw	127
  6746  000724  6E26               	movwf	??_printf& (0+255),c
  6747  000726  5031               	movf	printf@width,w,c
  6748  000728  5C33               	subwf	printf@c,w,c
  6749  00072A  5032               	movf	printf@width+1,w,c
  6750  00072C  0A80               	xorlw	128
  6751  00072E  5826               	subwfb	??_printf& (0+255),w,c
  6752  000730  B0D8               	btfsc	status,0,c
  6753  000732  D007               	goto	l3732
  6754                           
  6755                           ;doprnt.c: 1382: width -= c;
  6756  000734  5033               	movf	printf@c,w,c
  6757  000736  5E31               	subwf	printf@width,f,c
  6758  000738  0E00               	movlw	0
  6759  00073A  BE33               	btfsc	printf@c,7,c
  6760  00073C  0EFF               	movlw	255
  6761  00073E  5A32               	subwfb	printf@width+1,f,c
  6762  000740  D004               	goto	l3734
  6763  000742                     l3732:
  6764                           
  6765                           ;doprnt.c: 1383: else
  6766                           ;doprnt.c: 1384: width = 0;
  6767  000742  0E00               	movlw	0
  6768  000744  6E32               	movwf	printf@width+1,c
  6769  000746  0E00               	movlw	0
  6770  000748  6E31               	movwf	printf@width,c
  6771  00074A                     l3734:
  6772                           
  6773                           ;doprnt.c: 1387: if(flag & 0x04) {
  6774  00074A  A430               	btfss	printf@flag,2,c
  6775  00074C  D014               	goto	l3746
  6776                           
  6777                           ;doprnt.c: 1392: if(flag & 0x03)
  6778  00074E  C030  F026         	movff	printf@flag,??_printf
  6779  000752  0E03               	movlw	3
  6780  000754  1626               	andwf	??_printf,f,c
  6781  000756  B4D8               	btfsc	status,2,c
  6782  000758  D003               	goto	l3740
  6783                           
  6784                           ;doprnt.c: 1393: (putch('-') );
  6785  00075A  0E2D               	movlw	45
  6786  00075C  ECA1  F00B         	call	_putch
  6787  000760                     l3740:
  6788                           
  6789                           ;doprnt.c: 1415: if(width)
  6790  000760  5031               	movf	printf@width,w,c
  6791  000762  1032               	iorwf	printf@width+1,w,c
  6792  000764  B4D8               	btfsc	status,2,c
  6793  000766  D01E               	goto	l3756
  6794                           
  6795                           ;doprnt.c: 1417: (putch('0') );
  6796                           
  6797                           ;doprnt.c: 1416: do
  6798  000768  0E30               	movlw	48
  6799  00076A  ECA1  F00B         	call	_putch
  6800                           
  6801                           ;doprnt.c: 1418: while(--width);
  6802  00076E  0631               	decf	printf@width,f,c
  6803  000770  A0D8               	btfss	status,0,c
  6804  000772  0632               	decf	printf@width+1,f,c
  6805  000774  D7F5               	goto	l3740
  6806  000776                     l3746:
  6807                           
  6808                           ;doprnt.c: 1422: {
  6809                           ;doprnt.c: 1424: if(width
  6810                           ;doprnt.c: 1428: )
  6811  000776  5031               	movf	printf@width,w,c
  6812  000778  1032               	iorwf	printf@width+1,w,c
  6813  00077A  B4D8               	btfsc	status,2,c
  6814  00077C  D00A               	goto	l3752
  6815  00077E                     l3748:
  6816                           
  6817                           ;doprnt.c: 1430: (putch(' ') );
  6818  00077E  0E20               	movlw	32
  6819  000780  ECA1  F00B         	call	_putch
  6820                           
  6821                           ;doprnt.c: 1431: while(--width);
  6822  000784  0631               	decf	printf@width,f,c
  6823  000786  A0D8               	btfss	status,0,c
  6824  000788  0632               	decf	printf@width+1,f,c
  6825  00078A  5031               	movf	printf@width,w,c
  6826  00078C  1032               	iorwf	printf@width+1,w,c
  6827  00078E  A4D8               	btfss	status,2,c
  6828  000790  D7F6               	goto	l3748
  6829  000792                     l3752:
  6830                           
  6831                           ;doprnt.c: 1438: if(flag & 0x03)
  6832  000792  C030  F026         	movff	printf@flag,??_printf
  6833  000796  0E03               	movlw	3
  6834  000798  1626               	andwf	??_printf,f,c
  6835  00079A  B4D8               	btfsc	status,2,c
  6836  00079C  D003               	goto	l3756
  6837                           
  6838                           ;doprnt.c: 1439: (putch('-') );
  6839  00079E  0E2D               	movlw	45
  6840  0007A0  ECA1  F00B         	call	_putch
  6841  0007A4                     l3756:
  6842                           
  6843                           ;doprnt.c: 1469: }
  6844                           ;doprnt.c: 1472: prec = c;
  6845  0007A4  C033  F02D         	movff	printf@c,printf@prec
  6846                           
  6847                           ;doprnt.c: 1474: while(prec--) {
  6848  0007A8  D050               	goto	l3770
  6849  0007AA                     l3758:
  6850                           
  6851                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6852  0007AA  502D               	movf	printf@prec,w,c
  6853  0007AC  0D02               	mullw	2
  6854  0007AE  0EF8               	movlw	low _dpowers
  6855  0007B0  24F3               	addwf	prodl,w,c
  6856  0007B2  6EF6               	movwf	tblptrl,c
  6857  0007B4  0EFE               	movlw	high _dpowers
  6858  0007B6  20F4               	addwfc	prodh,w,c
  6859  0007B8  6EF7               	movwf	tblptrh,c
  6860  0007BA                     	if	0	;There are less than 3 active tblptr bytes
  6861  0007BA                     	endif
  6862  0007BA  0009               	tblrd		*+
  6863  0007BC  CFF5 F012          	movff	tablat,___lwdiv@divisor
  6864  0007C0  000A               	tblrd		*-
  6865  0007C2  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  6866  0007C6  C02E  F010         	movff	printf@val,___lwdiv@dividend
  6867  0007CA  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  6868  0007CE  EC5E  F009         	call	___lwdiv	;wreg free
  6869  0007D2  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  6870  0007D6  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  6871  0007DA  0E00               	movlw	0
  6872  0007DC  6E1A               	movwf	___lwmod@divisor+1,c
  6873  0007DE  0E0A               	movlw	10
  6874  0007E0  6E19               	movwf	___lwmod@divisor,c
  6875  0007E2  EC3F  F00A         	call	___lwmod	;wreg free
  6876  0007E6  5017               	movf	?___lwmod,w,c
  6877  0007E8  0F30               	addlw	48
  6878  0007EA  6E33               	movwf	printf@c,c
  6879                           
  6880                           ;doprnt.c: 1491: break;
  6881  0007EC  D02B               	goto	l3768
  6882  0007EE                     l3760:
  6883                           
  6884                           ;doprnt.c: 1499: {
  6885                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6886  0007EE  C02E  F010         	movff	printf@val,___lwdiv@dividend
  6887  0007F2  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  6888  0007F6  502D               	movf	printf@prec,w,c
  6889  0007F8  0D02               	mullw	2
  6890  0007FA  0E02               	movlw	low _hexpowers
  6891  0007FC  24F3               	addwf	prodl,w,c
  6892  0007FE  6EF6               	movwf	tblptrl,c
  6893  000800  0EFF               	movlw	high _hexpowers
  6894  000802  20F4               	addwfc	prodh,w,c
  6895  000804  6EF7               	movwf	tblptrh,c
  6896  000806                     	if	0	;There are less than 3 active tblptr bytes
  6897  000806                     	endif
  6898  000806  0009               	tblrd		*+
  6899  000808  CFF5 F012          	movff	tablat,___lwdiv@divisor
  6900  00080C  000A               	tblrd		*-
  6901  00080E  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  6902  000812  EC5E  F009         	call	___lwdiv	;wreg free
  6903  000816  5010               	movf	?___lwdiv,w,c
  6904  000818  0B0F               	andlw	15
  6905  00081A  6E2A               	movwf	printf@idx,c
  6906                           
  6907                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6908  00081C  502A               	movf	printf@idx,w,c
  6909  00081E  0D01               	mullw	1
  6910  000820  0E48               	movlw	low STR_17
  6911  000822  24F3               	addwf	prodl,w,c
  6912  000824  6EF6               	movwf	tblptrl,c
  6913  000826  0EFF               	movlw	high STR_17
  6914  000828  20F4               	addwfc	prodh,w,c
  6915  00082A  6EF7               	movwf	tblptrh,c
  6916  00082C                     	if	0	;There are less than 3 active tblptr bytes
  6917  00082C                     	endif
  6918  00082C  0008               	tblrd		*
  6919  00082E  CFF5 F033          	movff	tablat,printf@c
  6920                           
  6921                           ;doprnt.c: 1523: }
  6922                           
  6923                           ;doprnt.c: 1508: }
  6924                           ;doprnt.c: 1510: break;
  6925  000832  D008               	goto	l3768
  6926  000834                     l3766:
  6927  000834  5030               	movf	printf@flag,w,c
  6928  000836  0B80               	andlw	128
  6929                           
  6930                           ; Switch size 1, requested type "space"
  6931                           ; Number of cases is 2, Range of values is 0 to 128
  6932                           ; switch strategies available:
  6933                           ; Name         Instructions Cycles
  6934                           ; simple_byte            7     4 (average)
  6935                           ;	Chosen strategy is simple_byte
  6936  000838  0A00               	xorlw	0	; case 0
  6937  00083A  B4D8               	btfsc	status,2,c
  6938  00083C  D7B6               	goto	l3758
  6939  00083E  0A80               	xorlw	128	; case 128
  6940  000840  B4D8               	btfsc	status,2,c
  6941  000842  D7D5               	goto	l3760
  6942  000844                     l3768:
  6943                           
  6944                           ;doprnt.c: 1524: (putch(c) );
  6945  000844  5033               	movf	printf@c,w,c
  6946  000846  ECA1  F00B         	call	_putch
  6947  00084A                     l3770:
  6948  00084A  062D               	decf	printf@prec,f,c
  6949  00084C  282D               	incf	printf@prec,w,c
  6950  00084E  A4D8               	btfss	status,2,c
  6951  000850  D7F1               	goto	l3766
  6952  000852                     l3772:
  6953  000852  C01C  FFF6         	movff	printf@f,tblptrl
  6954  000856  C01D  FFF7         	movff	printf@f+1,tblptrh
  6955  00085A  4A1C               	infsnz	printf@f,f,c
  6956  00085C  2A1D               	incf	printf@f+1,f,c
  6957  00085E                     	if	0	;tblptru may be non-zero
  6958  00085E                     	endif
  6959  00085E                     	if	0	;tblptru may be non-zero
  6960  00085E                     	endif
  6961  00085E  0008               	tblrd		*
  6962  000860  CFF5 F033          	movff	tablat,printf@c
  6963  000864  5033               	movf	printf@c,w,c
  6964  000866  B4D8               	btfsc	status,2,c
  6965  000868  0012               	return	
  6966  00086A  D67F               	goto	l3646
  6967  00086C                     __end_of_printf:
  6968                           	opt stack 0
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon	equ	0xFF2
  6976                           intcon3	equ	0xFF0
  6977                           postinc0	equ	0xFEE
  6978                           wreg	equ	0xFE8
  6979                           indf2	equ	0xFDF
  6980                           postinc2	equ	0xFDE
  6981                           postdec2	equ	0xFDD
  6982                           fsr2h	equ	0xFDA
  6983                           fsr2l	equ	0xFD9
  6984                           status	equ	0xFD8
  6985                           
  6986 ;; *************** function _putch *****************
  6987 ;; Defined at:
  6988 ;;		line 31 in file "lcd.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  data            1    wreg     unsigned char 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  data            1   17[COMRAM] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      void 
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;Total ram usage:        1 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    2
  7009 ;; This function calls:
  7010 ;;		_lcdNibble
  7011 ;; This function is called by:
  7012 ;;		_printf
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text38
  7017  001742                     __ptext38:
  7018                           	opt stack 0
  7019  001742                     _putch:
  7020                           	opt stack 25
  7021                           
  7022                           ;incstack = 0
  7023                           ;putch@data stored from wreg
  7024  001742  6E12               	movwf	putch@data,c
  7025                           
  7026                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7027  001744  848C               	bsf	3980,2,c	;volatile
  7028                           
  7029                           ;lcd.c: 33: lcdNibble(data);
  7030  001746  5012               	movf	putch@data,w,c
  7031  001748  EC33  F009         	call	_lcdNibble
  7032  00174C  0012               	return		;funcret
  7033  00174E                     __end_of_putch:
  7034                           	opt stack 0
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           intcon	equ	0xFF2
  7042                           intcon3	equ	0xFF0
  7043                           postinc0	equ	0xFEE
  7044                           wreg	equ	0xFE8
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _isdigit *****************
  7053 ;; Defined at:
  7054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  c               1    wreg     unsigned char 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  c               1   17[COMRAM] unsigned char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;		None               void
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        3 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    1
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_printf
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text39
  7083  00165A                     __ptext39:
  7084                           	opt stack 0
  7085  00165A                     _isdigit:
  7086                           	opt stack 26
  7087                           
  7088                           ;incstack = 0
  7089                           ;isdigit@c stored from wreg
  7090  00165A  6E12               	movwf	isdigit@c,c
  7091  00165C  0E00               	movlw	0
  7092  00165E  6E11               	movwf	_isdigit$1339,c
  7093  001660  0E3A               	movlw	58
  7094  001662  6012               	cpfslt	isdigit@c,c
  7095  001664  D005               	goto	l3592
  7096  001666  0E2F               	movlw	47
  7097  001668  6412               	cpfsgt	isdigit@c,c
  7098  00166A  D002               	goto	l3592
  7099  00166C  0E01               	movlw	1
  7100  00166E  6E11               	movwf	_isdigit$1339,c
  7101  001670                     l3592:
  7102  001670  C011  F010         	movff	_isdigit$1339,??_isdigit
  7103  001674  3010               	rrcf	??_isdigit,w,c
  7104  001676  0012               	return	
  7105  001678                     __end_of_isdigit:
  7106                           	opt stack 0
  7107                           tblptru	equ	0xFF8
  7108                           tblptrh	equ	0xFF7
  7109                           tblptrl	equ	0xFF6
  7110                           tablat	equ	0xFF5
  7111                           prodh	equ	0xFF4
  7112                           prodl	equ	0xFF3
  7113                           intcon	equ	0xFF2
  7114                           intcon3	equ	0xFF0
  7115                           postinc0	equ	0xFEE
  7116                           wreg	equ	0xFE8
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function ___wmul *****************
  7125 ;; Defined at:
  7126 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  multiplier      2   15[COMRAM] unsigned int 
  7129 ;;  multiplicand    2   17[COMRAM] unsigned int 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;  product         2   19[COMRAM] unsigned int 
  7132 ;; Return value:  Size  Location     Type
  7133 ;;                  2   15[COMRAM] unsigned int 
  7134 ;; Registers used:
  7135 ;;		wreg, status,2, status,0, prodl, prodh
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;Total ram usage:        6 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    1
  7148 ;; This function calls:
  7149 ;;		Nothing
  7150 ;; This function is called by:
  7151 ;;		_get_timeDif
  7152 ;;		_executingState
  7153 ;;		_printf
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text40
  7158  001634                     __ptext40:
  7159                           	opt stack 0
  7160  001634                     ___wmul:
  7161                           	opt stack 26
  7162                           
  7163                           ;incstack = 0
  7164  001634  5010               	movf	___wmul@multiplier,w,c
  7165  001636  0212               	mulwf	___wmul@multiplicand,c
  7166  001638  CFF3 F014          	movff	prodl,___wmul@product
  7167  00163C  CFF4 F015          	movff	prodh,___wmul@product+1
  7168  001640  5010               	movf	___wmul@multiplier,w,c
  7169  001642  0213               	mulwf	___wmul@multiplicand+1,c
  7170  001644  50F3               	movf	prodl,w,c
  7171  001646  2615               	addwf	___wmul@product+1,f,c
  7172  001648  5011               	movf	___wmul@multiplier+1,w,c
  7173  00164A  0212               	mulwf	___wmul@multiplicand,c
  7174  00164C  50F3               	movf	prodl,w,c
  7175  00164E  2615               	addwf	___wmul@product+1,f,c
  7176  001650  C014  F010         	movff	___wmul@product,?___wmul
  7177  001654  C015  F011         	movff	___wmul@product+1,?___wmul+1
  7178  001658  0012               	return	
  7179  00165A                     __end_of___wmul:
  7180                           	opt stack 0
  7181                           tblptru	equ	0xFF8
  7182                           tblptrh	equ	0xFF7
  7183                           tblptrl	equ	0xFF6
  7184                           tablat	equ	0xFF5
  7185                           prodh	equ	0xFF4
  7186                           prodl	equ	0xFF3
  7187                           intcon	equ	0xFF2
  7188                           intcon3	equ	0xFF0
  7189                           postinc0	equ	0xFEE
  7190                           wreg	equ	0xFE8
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           fsr2h	equ	0xFDA
  7195                           fsr2l	equ	0xFD9
  7196                           status	equ	0xFD8
  7197                           
  7198 ;; *************** function ___lwmod *****************
  7199 ;; Defined at:
  7200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  dividend        2   22[COMRAM] unsigned int 
  7203 ;;  divisor         2   24[COMRAM] unsigned int 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  counter         1   26[COMRAM] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  2   22[COMRAM] unsigned int 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        5 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    1
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_printf
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text41
  7230  00147E                     __ptext41:
  7231                           	opt stack 0
  7232  00147E                     ___lwmod:
  7233                           	opt stack 26
  7234                           
  7235                           ;incstack = 0
  7236  00147E  5019               	movf	___lwmod@divisor,w,c
  7237  001480  101A               	iorwf	___lwmod@divisor+1,w,c
  7238  001482  B4D8               	btfsc	status,2,c
  7239  001484  D018               	goto	l1013
  7240  001486  0E01               	movlw	1
  7241  001488  6E1B               	movwf	___lwmod@counter,c
  7242  00148A  D004               	goto	l3630
  7243  00148C                     l3628:
  7244  00148C  90D8               	bcf	status,0,c
  7245  00148E  3619               	rlcf	___lwmod@divisor,f,c
  7246  001490  361A               	rlcf	___lwmod@divisor+1,f,c
  7247  001492  2A1B               	incf	___lwmod@counter,f,c
  7248  001494                     l3630:
  7249  001494  AE1A               	btfss	___lwmod@divisor+1,7,c
  7250  001496  D7FA               	goto	l3628
  7251  001498                     l3632:
  7252  001498  5019               	movf	___lwmod@divisor,w,c
  7253  00149A  5C17               	subwf	___lwmod@dividend,w,c
  7254  00149C  501A               	movf	___lwmod@divisor+1,w,c
  7255  00149E  5818               	subwfb	___lwmod@dividend+1,w,c
  7256  0014A0  A0D8               	btfss	status,0,c
  7257  0014A2  D004               	goto	l3636
  7258  0014A4  5019               	movf	___lwmod@divisor,w,c
  7259  0014A6  5E17               	subwf	___lwmod@dividend,f,c
  7260  0014A8  501A               	movf	___lwmod@divisor+1,w,c
  7261  0014AA  5A18               	subwfb	___lwmod@dividend+1,f,c
  7262  0014AC                     l3636:
  7263  0014AC  90D8               	bcf	status,0,c
  7264  0014AE  321A               	rrcf	___lwmod@divisor+1,f,c
  7265  0014B0  3219               	rrcf	___lwmod@divisor,f,c
  7266  0014B2  2E1B               	decfsz	___lwmod@counter,f,c
  7267  0014B4  D7F1               	goto	l3632
  7268  0014B6                     l1013:
  7269  0014B6  C017  F017         	movff	___lwmod@dividend,?___lwmod
  7270  0014BA  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  7271  0014BE  0012               	return		;funcret
  7272  0014C0                     __end_of___lwmod:
  7273                           	opt stack 0
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           intcon3	equ	0xFF0
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           fsr2h	equ	0xFDA
  7288                           fsr2l	equ	0xFD9
  7289                           status	equ	0xFD8
  7290                           
  7291 ;; *************** function ___lwdiv *****************
  7292 ;; Defined at:
  7293 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  dividend        2   15[COMRAM] unsigned int 
  7296 ;;  divisor         2   17[COMRAM] unsigned int 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  quotient        2   20[COMRAM] unsigned int 
  7299 ;;  counter         1   19[COMRAM] unsigned char 
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  2   15[COMRAM] unsigned int 
  7302 ;; Registers used:
  7303 ;;		wreg, status,2, status,0
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;Total ram usage:        7 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    1
  7316 ;; This function calls:
  7317 ;;		Nothing
  7318 ;; This function is called by:
  7319 ;;		_printf
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text42
  7324  0012BC                     __ptext42:
  7325                           	opt stack 0
  7326  0012BC                     ___lwdiv:
  7327                           	opt stack 26
  7328                           
  7329                           ;incstack = 0
  7330  0012BC  0E00               	movlw	0
  7331  0012BE  6E16               	movwf	___lwdiv@quotient+1,c
  7332  0012C0  0E00               	movlw	0
  7333  0012C2  6E15               	movwf	___lwdiv@quotient,c
  7334  0012C4  5012               	movf	___lwdiv@divisor,w,c
  7335  0012C6  1013               	iorwf	___lwdiv@divisor+1,w,c
  7336  0012C8  B4D8               	btfsc	status,2,c
  7337  0012CA  D01C               	goto	l1003
  7338  0012CC  0E01               	movlw	1
  7339  0012CE  6E14               	movwf	___lwdiv@counter,c
  7340  0012D0  D004               	goto	l3610
  7341  0012D2                     l3608:
  7342  0012D2  90D8               	bcf	status,0,c
  7343  0012D4  3612               	rlcf	___lwdiv@divisor,f,c
  7344  0012D6  3613               	rlcf	___lwdiv@divisor+1,f,c
  7345  0012D8  2A14               	incf	___lwdiv@counter,f,c
  7346  0012DA                     l3610:
  7347  0012DA  AE13               	btfss	___lwdiv@divisor+1,7,c
  7348  0012DC  D7FA               	goto	l3608
  7349  0012DE                     l3612:
  7350  0012DE  90D8               	bcf	status,0,c
  7351  0012E0  3615               	rlcf	___lwdiv@quotient,f,c
  7352  0012E2  3616               	rlcf	___lwdiv@quotient+1,f,c
  7353  0012E4  5012               	movf	___lwdiv@divisor,w,c
  7354  0012E6  5C10               	subwf	___lwdiv@dividend,w,c
  7355  0012E8  5013               	movf	___lwdiv@divisor+1,w,c
  7356  0012EA  5811               	subwfb	___lwdiv@dividend+1,w,c
  7357  0012EC  A0D8               	btfss	status,0,c
  7358  0012EE  D005               	goto	l3620
  7359  0012F0  5012               	movf	___lwdiv@divisor,w,c
  7360  0012F2  5E10               	subwf	___lwdiv@dividend,f,c
  7361  0012F4  5013               	movf	___lwdiv@divisor+1,w,c
  7362  0012F6  5A11               	subwfb	___lwdiv@dividend+1,f,c
  7363  0012F8  8015               	bsf	___lwdiv@quotient,0,c
  7364  0012FA                     l3620:
  7365  0012FA  90D8               	bcf	status,0,c
  7366  0012FC  3213               	rrcf	___lwdiv@divisor+1,f,c
  7367  0012FE  3212               	rrcf	___lwdiv@divisor,f,c
  7368  001300  2E14               	decfsz	___lwdiv@counter,f,c
  7369  001302  D7ED               	goto	l3612
  7370  001304                     l1003:
  7371  001304  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  7372  001308  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7373  00130C  0012               	return		;funcret
  7374  00130E                     __end_of___lwdiv:
  7375                           	opt stack 0
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           prodh	equ	0xFF4
  7381                           prodl	equ	0xFF3
  7382                           intcon	equ	0xFF2
  7383                           intcon3	equ	0xFF0
  7384                           postinc0	equ	0xFEE
  7385                           wreg	equ	0xFE8
  7386                           indf2	equ	0xFDF
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _lcdInst *****************
  7394 ;; Defined at:
  7395 ;;		line 26 in file "lcd.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;  data            1    wreg     unsigned char 
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  data            1   17[COMRAM] unsigned char 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, status,0, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;Total ram usage:        1 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    2
  7416 ;; This function calls:
  7417 ;;		_lcdNibble
  7418 ;; This function is called by:
  7419 ;;		_initLCD
  7420 ;;		_update_lcd
  7421 ;;		_executingState
  7422 ;;		_debugState
  7423 ;;		_fixLCD
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text43
  7428  00174E                     __ptext43:
  7429                           	opt stack 0
  7430  00174E                     _lcdInst:
  7431                           	opt stack 26
  7432                           
  7433                           ;incstack = 0
  7434                           ;lcdInst@data stored from wreg
  7435  00174E  6E12               	movwf	lcdInst@data,c
  7436                           
  7437                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7438  001750  948C               	bcf	3980,2,c	;volatile
  7439                           
  7440                           ;lcd.c: 28: lcdNibble(data);
  7441  001752  5012               	movf	lcdInst@data,w,c
  7442  001754  EC33  F009         	call	_lcdNibble
  7443  001758  0012               	return		;funcret
  7444  00175A                     __end_of_lcdInst:
  7445                           	opt stack 0
  7446                           tblptru	equ	0xFF8
  7447                           tblptrh	equ	0xFF7
  7448                           tblptrl	equ	0xFF6
  7449                           tablat	equ	0xFF5
  7450                           prodh	equ	0xFF4
  7451                           prodl	equ	0xFF3
  7452                           intcon	equ	0xFF2
  7453                           intcon3	equ	0xFF0
  7454                           postinc0	equ	0xFEE
  7455                           wreg	equ	0xFE8
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _lcdNibble *****************
  7464 ;; Defined at:
  7465 ;;		line 36 in file "lcd.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  data            1    wreg     unsigned char 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  data            1   16[COMRAM] unsigned char 
  7470 ;;  temp            1   15[COMRAM] unsigned char 
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      void 
  7473 ;; Registers used:
  7474 ;;		wreg, status,2, status,0
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;Total ram usage:        2 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    1
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_lcdInst
  7491 ;;		_putch
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           	psect	text44
  7496  001266                     __ptext44:
  7497                           	opt stack 0
  7498  001266                     _lcdNibble:
  7499                           	opt stack 25
  7500                           
  7501                           ;incstack = 0
  7502                           ;lcdNibble@data stored from wreg
  7503  001266  6E11               	movwf	lcdNibble@data,c
  7504                           
  7505                           ;lcd.c: 38: char temp = data & 0xF0;
  7506  001268  5011               	movf	lcdNibble@data,w,c
  7507  00126A  0BF0               	andlw	240
  7508  00126C  6E10               	movwf	lcdNibble@temp,c
  7509                           
  7510                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7511  00126E  508C               	movf	3980,w,c	;volatile
  7512  001270  0B0F               	andlw	15
  7513  001272  6E8C               	movwf	3980,c	;volatile
  7514                           
  7515                           ;lcd.c: 40: LATD = temp | LATD;
  7516  001274  5010               	movf	lcdNibble@temp,w,c
  7517  001276  108C               	iorwf	3980,w,c	;volatile
  7518  001278  6E8C               	movwf	3980,c	;volatile
  7519                           
  7520                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7521  00127A  968C               	bcf	3980,3,c	;volatile
  7522                           
  7523                           ;lcd.c: 43: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7524  00127C  0E14               	movlw	20
  7525  00127E                     u3737:
  7526  00127E  2EE8               	decfsz	wreg,f,c
  7527  001280  D7FE               	bra	u3737
  7528  001282  D000               	nop2	
  7529                           
  7530                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7531  001284  868C               	bsf	3980,3,c	;volatile
  7532                           
  7533                           ;lcd.c: 45: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7534  001286  0E14               	movlw	20
  7535  001288                     u3747:
  7536  001288  2EE8               	decfsz	wreg,f,c
  7537  00128A  D7FE               	bra	u3747
  7538  00128C  D000               	nop2	
  7539                           
  7540                           ;lcd.c: 47: data = data << 4;
  7541  00128E  3811               	swapf	lcdNibble@data,w,c
  7542  001290  0BF0               	andlw	240
  7543  001292  6E11               	movwf	lcdNibble@data,c
  7544                           
  7545                           ;lcd.c: 49: temp = data & 0xF0;
  7546  001294  5011               	movf	lcdNibble@data,w,c
  7547  001296  0BF0               	andlw	240
  7548  001298  6E10               	movwf	lcdNibble@temp,c
  7549                           
  7550                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7551  00129A  508C               	movf	3980,w,c	;volatile
  7552  00129C  0B0F               	andlw	15
  7553  00129E  6E8C               	movwf	3980,c	;volatile
  7554                           
  7555                           ;lcd.c: 51: LATD = temp | LATD;
  7556  0012A0  5010               	movf	lcdNibble@temp,w,c
  7557  0012A2  108C               	iorwf	3980,w,c	;volatile
  7558  0012A4  6E8C               	movwf	3980,c	;volatile
  7559                           
  7560                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7561  0012A6  968C               	bcf	3980,3,c	;volatile
  7562                           
  7563                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7564  0012A8  0E14               	movlw	20
  7565  0012AA                     u3757:
  7566  0012AA  2EE8               	decfsz	wreg,f,c
  7567  0012AC  D7FE               	bra	u3757
  7568  0012AE  D000               	nop2	
  7569                           
  7570                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7571  0012B0  868C               	bsf	3980,3,c	;volatile
  7572                           
  7573                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7574  0012B2  0E14               	movlw	20
  7575  0012B4                     u3767:
  7576  0012B4  2EE8               	decfsz	wreg,f,c
  7577  0012B6  D7FE               	bra	u3767
  7578  0012B8  D000               	nop2	
  7579  0012BA  0012               	return		;funcret
  7580  0012BC                     __end_of_lcdNibble:
  7581                           	opt stack 0
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           intcon3	equ	0xFF0
  7590                           postinc0	equ	0xFEE
  7591                           wreg	equ	0xFE8
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _keypressed *****************
  7600 ;; Defined at:
  7601 ;;		line 482 in file "main.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;		None
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  keypress        1   14[COMRAM] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      void 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;Total ram usage:       15 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		Interrupt level 2
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	intcode
  7629  000008                     __pintcode:
  7630                           	opt stack 0
  7631  000008                     _keypressed:
  7632                           	opt stack 25
  7633                           
  7634                           ;incstack = 0
  7635  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7636  00000A  ED74  F007         	call	int_func,f	;refresh shadow registers
  7637                           tblptru	equ	0xFF8
  7638                           tblptrh	equ	0xFF7
  7639                           tblptrl	equ	0xFF6
  7640                           tablat	equ	0xFF5
  7641                           prodh	equ	0xFF4
  7642                           prodl	equ	0xFF3
  7643                           intcon	equ	0xFF2
  7644                           intcon3	equ	0xFF0
  7645                           postinc0	equ	0xFEE
  7646                           wreg	equ	0xFE8
  7647                           indf2	equ	0xFDF
  7648                           postinc2	equ	0xFDE
  7649                           postdec2	equ	0xFDD
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654                           	psect	intcode_body
  7655  000EE8                     __pintcode_body:
  7656                           	opt stack 25
  7657  000EE8                     int_func:
  7658                           	opt stack 25
  7659  000EE8  0006               	pop		; remove dummy address from shadow register refresh
  7660  000EEA  CFFA F001          	movff	pclath,??_keypressed
  7661  000EEE  CFFB F002          	movff	pclatu,??_keypressed+1
  7662  000EF2  CFE9 F003          	movff	fsr0l,??_keypressed+2
  7663  000EF6  CFEA F004          	movff	fsr0h,??_keypressed+3
  7664  000EFA  CFE1 F005          	movff	fsr1l,??_keypressed+4
  7665  000EFE  CFE2 F006          	movff	fsr1h,??_keypressed+5
  7666  000F02  CFD9 F007          	movff	fsr2l,??_keypressed+6
  7667  000F06  CFDA F008          	movff	fsr2h,??_keypressed+7
  7668  000F0A  CFF3 F009          	movff	prodl,??_keypressed+8
  7669  000F0E  CFF4 F00A          	movff	prodh,??_keypressed+9
  7670  000F12  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  7671  000F16  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  7672  000F1A  CFF8 F00D          	movff	tblptru,??_keypressed+12
  7673  000F1E  CFF5 F00E          	movff	tablat,??_keypressed+13
  7674                           
  7675                           ;main.c: 484: if (INT1IF)
  7676  000F22  A0F0               	btfss	intcon3,0,c	;volatile
  7677  000F24  D01C               	goto	i2l311
  7678  000F26                     i2l2256:
  7679                           
  7680                           ;main.c: 487: {
  7681                           ;main.c: 488: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7682  000F26  3881               	swapf	3969,w,c	;volatile
  7683  000F28  0B0F               	andlw	15
  7684  000F2A  0B0F               	andlw	15
  7685  000F2C  6E0F               	movwf	keypressed@keypress,c
  7686                           
  7687                           ;main.c: 489: if (keypress == 0b1101)
  7688  000F2E  0E0D               	movlw	13
  7689  000F30  180F               	xorwf	keypressed@keypress,w,c
  7690  000F32  A4D8               	btfss	status,2,c
  7691  000F34  D7F8               	goto	i2l2256
  7692                           
  7693                           ;main.c: 490: {
  7694                           ;main.c: 491: LATA = 0x00;
  7695  000F36  0E00               	movlw	0
  7696  000F38  6E89               	movwf	3977,c	;volatile
  7697                           
  7698                           ;main.c: 492: LATB = 0x00;
  7699  000F3A  0E00               	movlw	0
  7700  000F3C  6E8A               	movwf	3978,c	;volatile
  7701                           
  7702                           ;main.c: 493: LATC = 0x00;
  7703  000F3E  0E00               	movlw	0
  7704  000F40  6E8B               	movwf	3979,c	;volatile
  7705                           
  7706                           ;main.c: 494: LATD = 0x00;
  7707  000F42  0E00               	movlw	0
  7708  000F44  6E8C               	movwf	3980,c	;volatile
  7709                           
  7710                           ;main.c: 495: LATE = 0x00;
  7711  000F46  0E00               	movlw	0
  7712  000F48  6E8D               	movwf	3981,c	;volatile
  7713                           
  7714                           ;main.c: 496: LATCbits.LATC6 = 0;
  7715  000F4A  9C8B               	bcf	3979,6,c	;volatile
  7716                           
  7717                           ;main.c: 497: LATBbits.LATB0 = 0;
  7718  000F4C  908A               	bcf	3978,0,c	;volatile
  7719                           
  7720                           ;main.c: 498: state = FINISH;
  7721  000F4E  0E02               	movlw	2
  7722  000F50  6E4B               	movwf	_state,c
  7723                           
  7724                           ;main.c: 499: runResult = 0;
  7725  000F52  0E00               	movlw	0
  7726  000F54  6E46               	movwf	_runResult+1,c
  7727  000F56  0E00               	movlw	0
  7728  000F58  6E45               	movwf	_runResult,c
  7729                           
  7730                           ;main.c: 500: (INTCONbits.GIE = 0);
  7731  000F5A  9EF2               	bcf	intcon,7,c	;volatile
  7732                           
  7733                           ;main.c: 502: }
  7734                           ;main.c: 503: }
  7735                           ;main.c: 504: INT1IF = 0;
  7736                           
  7737                           ;main.c: 501: break;
  7738  000F5C  90F0               	bcf	intcon3,0,c	;volatile
  7739  000F5E                     i2l311:
  7740  000F5E  C00E  FFF5         	movff	??_keypressed+13,tablat
  7741  000F62  C00D  FFF8         	movff	??_keypressed+12,tblptru
  7742  000F66  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  7743  000F6A  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  7744  000F6E  C00A  FFF4         	movff	??_keypressed+9,prodh
  7745  000F72  C009  FFF3         	movff	??_keypressed+8,prodl
  7746  000F76  C008  FFDA         	movff	??_keypressed+7,fsr2h
  7747  000F7A  C007  FFD9         	movff	??_keypressed+6,fsr2l
  7748  000F7E  C006  FFE2         	movff	??_keypressed+5,fsr1h
  7749  000F82  C005  FFE1         	movff	??_keypressed+4,fsr1l
  7750  000F86  C004  FFEA         	movff	??_keypressed+3,fsr0h
  7751  000F8A  C003  FFE9         	movff	??_keypressed+2,fsr0l
  7752  000F8E  C002  FFFB         	movff	??_keypressed+1,pclatu
  7753  000F92  C001  FFFA         	movff	??_keypressed,pclath
  7754  000F96  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7755  000F98  0011               	retfie		f
  7756  000F9A                     __end_of_keypressed:
  7757                           	opt stack 0
  7758                           pclatu	equ	0xFFB
  7759                           pclath	equ	0xFFA
  7760                           tblptru	equ	0xFF8
  7761                           tblptrh	equ	0xFF7
  7762                           tblptrl	equ	0xFF6
  7763                           tablat	equ	0xFF5
  7764                           prodh	equ	0xFF4
  7765                           prodl	equ	0xFF3
  7766                           intcon	equ	0xFF2
  7767                           intcon3	equ	0xFF0
  7768                           postinc0	equ	0xFEE
  7769                           fsr0h	equ	0xFEA
  7770                           fsr0l	equ	0xFE9
  7771                           wreg	equ	0xFE8
  7772                           fsr1h	equ	0xFE2
  7773                           fsr1l	equ	0xFE1
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           pclatu	equ	0xFFB
  7781                           pclath	equ	0xFFA
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           intcon	equ	0xFF2
  7789                           intcon3	equ	0xFF0
  7790                           postinc0	equ	0xFEE
  7791                           fsr0h	equ	0xFEA
  7792                           fsr0l	equ	0xFE9
  7793                           wreg	equ	0xFE8
  7794                           fsr1h	equ	0xFE2
  7795                           fsr1l	equ	0xFE1
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803                           	psect	rparam
  7804  0000                     pclatu	equ	0xFFB
  7805                           pclath	equ	0xFFA
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           prodh	equ	0xFF4
  7811                           prodl	equ	0xFF3
  7812                           intcon	equ	0xFF2
  7813                           intcon3	equ	0xFF0
  7814                           postinc0	equ	0xFEE
  7815                           fsr0h	equ	0xFEA
  7816                           fsr0l	equ	0xFE9
  7817                           wreg	equ	0xFE8
  7818                           fsr1h	equ	0xFE2
  7819                           fsr1l	equ	0xFE1
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           fsr2h	equ	0xFDA
  7824                           fsr2l	equ	0xFD9
  7825                           status	equ	0xFD8
  7826                           
  7827                           	psect	temp
  7828  00005B                     btemp:
  7829                           	opt stack 0
  7830  00005B                     	ds	1
  7831  0000                     int$flags	set	btemp
  7832                           pclatu	equ	0xFFB
  7833                           pclath	equ	0xFFA
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           intcon3	equ	0xFF0
  7842                           postinc0	equ	0xFEE
  7843                           fsr0h	equ	0xFEA
  7844                           fsr0l	equ	0xFE9
  7845                           wreg	equ	0xFE8
  7846                           fsr1h	equ	0xFE2
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8


Data Sizes:
    Strings     238
    Constant    42
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      90
    BANK0           128     46      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eeprom_LogResult@data	PTR unsigned char  size(2) Largest target is 8
		 -> executingState@res(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[15]), STR_15(CODE[15]), STR_14(CODE[15]), STR_13(CODE[12]), 
		 -> STR_12(CODE[18]), STR_11(CODE[6]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[19]), STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@time	PTR int  size(2) Largest target is 14
		 -> starttime(BANK0[14]), time(COMRAM[14]), 

    eeprom_GetLog@res	PTR int  size(2) Largest target is 1
		 -> logdata(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_fixLCD
    _eeprom_GetLog->_eeprom_ReadByte
    _fixLCD->_printf
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _executingState->_printf
    _update_lcd->_printf
    _get_timeDif->_get_time
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _eeprom_LogResult->_eeprom_WriteByte
    _dispenseSnCan->_servoRotate0
    _dispenseSnCan->_servoRotate90
    _dispenseAlCan->_servoRotate0
    _dispenseAlCan->_servoRotate90
    _eeprom_initialize->_eeprom_WriteByte
    _newestAddress->_eeprom_ReadByte
    _debugState->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executingState

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   61718
                    _I2C_Master_Init
                         _debugState
                  _eeprom_initialize
                     _executingState
                        _finishState
                             _fixLCD
                            _initLCD
                           _logState
                          _mainState
 ---------------------------------------------------------------------------------
 (1) _mainState                                            2     2      0    7379
                                             51 COMRAM     2     2      0
                           _get_time
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _logState                                             4     4      0    7050
                                             51 COMRAM     4     4      0
                      _eeprom_GetLog
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _eeprom_GetLog                                        9     5      4     846
                                             17 COMRAM     9     5      4
                    _eeprom_ReadByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (1) _fixLCD                                              13    13      0    7871
                                             51 COMRAM    13    13      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             28 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _finishState                                          4     4      0    6136
                                             51 COMRAM     4     4      0
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _readKey                                              5     3      2      69
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _executingState                                      49    49      0   25097
                                             51 COMRAM     3     3      0
                                              0 BANK0     46    46      0
                             ___wmul
                      _dispenseAlCan
                      _dispenseSnCan
                   _eeprom_LogResult
                           _get_time
                        _get_timeDif
                            _lcdInst
                             _printf
                          _readAlBot
                          _readAlTop
                          _readSnBot
                       _readSnSensor
                          _readSnTop
                       _servoRotate0
                       _servoRotate4
                      _servoRotate90
                     _servoRotate90n
                     _servoRotateArm
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _update_lcd                                           0     0      0    6033
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _servoRotateArm                                       9     7      2     108
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate90n                                       6     4      2     438
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate4                                         5     3      2     145
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _readSnTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnSensor                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_timeDif                                         23    21      2    3598
                                             23 COMRAM    23    21      2
                             ___wmul
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1181
                                             18 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                             16 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             16 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_LogResult                                     5     3      2    1012
                                             18 COMRAM     5     3      2
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (2) _dispenseSnCan                                        2     2      0    1184
                                             21 COMRAM     2     2      0
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _dispenseAlCan                                        2     2      0    1184
                                             21 COMRAM     2     2      0
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        6     4      2     438
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _eeprom_initialize                                    0     0      0     771
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (3) _newestAddress                                        0     0      0     216
                    _eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (4) _eeprom_ReadByte                                      2     0      2     216
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_WriteByte                                     3     0      3     555
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _debugState                                           0     0      0    6779
                            _lcdInst
                             _printf
                       _servoRotate0
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         6     4      2     746
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    5838
                                             27 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1926
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _debugState
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _servoRotate0
   _eeprom_initialize
     _eeprom_WriteByte
     _newestAddress
       _eeprom_ReadByte
   _executingState
     ___wmul
     _dispenseAlCan
       _servoRotate0
       _servoRotate90
     _dispenseSnCan
       _servoRotate0
       _servoRotate90
     _eeprom_LogResult
       _eeprom_WriteByte
       _newestAddress
         _eeprom_ReadByte
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _get_timeDif
       ___wmul
       _get_time
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readAlBot
     _readAlTop
     _readSnBot
     _readSnSensor
     _readSnTop
     _servoRotate0
     _servoRotate4
     _servoRotate90
     _servoRotate90n
     _servoRotateArm
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _finishState
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _fixLCD
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _logState
     _eeprom_GetLog
       _eeprom_ReadByte
       _newestAddress
         _eeprom_ReadByte
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _mainState
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2E      3C       5       46.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      34        0.0%
DATA                 0      0      96       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 22 17:35:18 2017

              ?_get_timeDif 0018                          l34 1722                ?_finishState 0001  
           readKey@keypress 0012         ___wmul@multiplicand 0012                 __CFG_BORV$3 000000  
             servoRotate0@i 0014               servoRotate4@i 0013                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
               __CFG_OSC$HS 000000                         l213 1408                         l214 1432  
                       l216 1414                         l332 162A                         l500 115E  
                       l501 11A2                         l326 171A                         l263 052C  
                       l352 120A                         l450 0D82                         l290 0A1C  
                       l451 0D86                         l347 13A6                         l453 0DCA  
                       l446 0D76                         l470 0CC0                         l455 0DCE  
                       l456 0DD2                         l448 0D7A                         l472 0D04  
                       l457 0DD6                         l449 0D7E                         l465 0CB0  
                       l458 0DDA                         l474 0D08                         l459 0E24  
                       l475 0D0C                         l467 0CB4                         l491 0E8E  
                       l476 0D10                         l468 0CB8                         l484 0E3C  
                       l477 0D14                         l469 0CBC                         l493 0E92  
                       l558 064C                         l478 0D5E                         l494 0E96  
                       l486 0E40                         l495 0E9A                         l487 0E44  
                       l496 0E9E                         l488 0E48                         l489 0E4C  
                       l497 0EE6                         l950 1130                __CFG_CPB$OFF 000000  
                       _PEN 007E2A                __CFG_CPD$OFF 000000                         _SEN 007E28  
            ?_dispenseAlCan 0001                         prod 000FF3                         wreg 000FE8  
            ?_dispenseSnCan 0001              servoRotate90@i 0014                __CFG_LVP$OFF 000000  
     __end_of_newestAddress 1742                __CFG_WDT$OFF 000000                        l1003 1304  
                      l1013 14B6                        l4008 16D2                        l4040 16BA  
                      l4120 13E2                        l4112 13D6                        l4018 1702  
                      l4210 02D6                        l4060 118C                        l4230 0346  
                      l4304 04FC                        l4240 038A                        l4224 0328  
                      l4320 151A                        l3610 12DA                        l4074 138C  
                      l4250 03C8                        l4306 0512                        l4090 11D6  
                      l3620 12FA                        l3612 12DE                        l4308 0528  
                      l4260 0404                        l2724 10E2                        l4332 131A  
                      l3630 1494                        l2726 10EE                        l4422 0A0A  
                      l4086 11C6                        l3608 12D2                        l3632 1498  
                      l3704 06C4                        l3720 06F4                        l3800 0D8A  
                      l3560 1608                        l4192 026E                        l4184 0242  
                      l4176 020E                        l2808 1424                        l2736 1122  
                      l2728 10F2                        l3706 06C8                        l3722 0704  
                      l3650 057A                        l3802 0DBA                        l4258 03FA  
                      l4346 134C                        l4098 13AC                        l3636 14AC  
                      l3628 148C                        l3740 0760                        l3732 0742  
                      l3652 0588                        l3900 0C2C                        l4196 0284  
                      l4188 0258                        l4380 08E0                        l3734 074A  
                      l3670 061A                        l3662 05BC                        l3646 056A  
                      l3806 0DDE                        l3830 0CF4                        l3822 0CA2  
                      l3910 0C62                        l4286 0498                        l4278 0472  
                      l3592 1670                        l3760 07EE                        l3752 0792  
                      l3728 071E                        l3656 058E                        l3808 0E0E  
                      l3904 0C42                        l4288 04A2                        l4384 0914  
                      l4480 100E                        l3770 084A                        l3746 0776  
                      l3690 0694                        l3674 061E                        l3834 0D18  
                      l3906 0C4E                        l3914 0C70                        l4298 04DA  
                      l4394 0938                        l4482 1014                        l4474 0FFC  
                      l3748 077E                        l3756 07A4                        l3692 0698  
                      l3772 0852                        l3836 0D48                        l3828 0CC4  
                      l3916 0C8C                        l4388 091C                        l4476 1002  
                      l3758 07AA                        l3766 0834                        l3686 067A  
                      l3782 1076                        l4478 1008                        l4486 1018  
                      l3768 0844                        l3944 14C8                        l3794 0D68  
                      l3778 106E                        l3970 0ED2                        l3962 0E50  
                      l3882 0B6A                        l3788 109C                        l3964 0E80  
                      l3956 0E2E            _eeprom_LogResult 135C                        l3894 0BEC  
                      l3968 0EA2                        l3888 0BC6                        l3988 16A2  
                      l3998 16EA                        STR_1 FFBF                        STR_2 FFDE  
                      STR_3 FFAE                        STR_4 FF11                        STR_5 FF9D  
                      STR_6 FF8C                        STR_7 FF24                        STR_8 FF6A  
                      STR_9 FF7B              eeprom_GetLog@i 0019                        _LATA 000F89  
                      _LATB 000F8A                        _LATC 000F8B                        u3040 11A2  
                      _LATD 000F8C                        _LATE 000F8D                        u3125 0042  
                      u3135 0076                        u3320 04CC                        u3145 00A6  
                      u3330 04F0                        u3410 09B4                        u1820 1432  
                      u3430 09CA                        u2480 1606                        u3450 09E2  
                      u3428 09B6                        u3470 09F8                        u3607 0506  
                      u1775 123A                        u3448 09CC                        u2905 0A3A  
                      u3617 1166                        u3537 143E                        u3707 0D4E  
                      u2915 0A64                        u3627 1178                        u3547 1472  
                      u3468 09E4                        u3717 0DC0                        u2925 0A8A  
                      u3637 0E82                        u3557 1508                        u3727 0E14  
                      u3647 0ED8                        u3567 02B0                        u3488 09FA  
                      u3737 127E                        u3657 14DC                        u3577 0302  
                      u3747 1288                        u3667 14EC                        u3587 035C  
                      _RCEN 007E2B                        u3757 12AA                        u3677 154C  
                      u3597 0424                        u3767 12B4                        u3687 157C  
                      u3697 0CFA                        _RSEN 007E29                        _main 0F9A  
                      _keys FEE7                        _time 004C                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 005B                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000             ??_servoRotate90 0012  
           ??_eeprom_GetLog 0016               __CFG_MCLRE$ON 000000             servoRotate90n@i 0014  
              ___param_bank 000000            ?_I2C_Master_Init 001D            ?_I2C_Master_Read 0001  
          ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001                       ?_main 0001  
                     _ACKEN 007E2C                       _ACKDT 007E2D                       _EEADR 000FA9  
                     STR_10 FF59        eeprom_WriteByte@data 0012                       STR_11 FFF9  
                     STR_12 FF36                       STR_13 FFED                       STR_14 FFCF  
                     STR_15 FFDE                       STR_16 FF15                       STR_17 FF48  
                     _CMCON 000FB4             __end_of___lldiv 1142                get_time@time 0013  
           __end_of___lwdiv 130E             __end_of___lwmod 14C0                       i2l311 0F5E  
                     _PORTB 000F81                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
       servoRotate90n@servo 0010               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
           __end_of_lcdInst 175A              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
                     _alTab 0043             __end_of_initLCD 147E              __CFG_EBTRB$OFF 000000  
           __end_of_dpowers FF02             __end_of_readKey 1438             __end_of_isdigit 1678  
                     _state 004B                       _putch 1742            _eeprom_WriteByte 160E  
                     pclath 000FFA                       tablat 000FF5                       status 000FD8  
          ??_servoRotate90n 0012    __size_of_eeprom_ReadByte 0016              __CFG_PBADEN$ON 000000  
          ??_servoRotateArm 0012             __initialization 15C2                __end_of_main 103A  
              __end_of_keys FEF8             ??_dispenseAlCan 0016                      ??_main 0041  
             __activetblptr 000002             ??_dispenseSnCan 0016           ?_I2C_Master_Start 0001  
         ?_I2C_Master_Write 0011           executingState@res 0094               ?_readSnSensor 0010  
        ??_I2C_Master_Start 0011                      _ADCON0 000FC2                      _ADCON1 000FC1  
        ??_I2C_Master_Write 0013                      _EEADRH 000FAA                      _EEDATA 000FA8  
                    _EECON2 000FA7                      ?_putch 0001            eeprom_GetLog@res 0014  
                    _INT1IE 007F83                      _INT1IF 007F80                      i2l2256 0F26  
                    _OSCCON 000FD3                      _SSPADD 000FC8                      _TRISC3 007CA3  
                    _TRISC4 007CA4                      _SSPBUF 000FC9              __CFG_XINST$OFF 000000  
          __end_of_get_time 10C0                      ___wmul 1634              __CFG_STVREN$ON 000000  
                    _fixLCD 086C                   ??___lldiv 0018      executingState@alLoaded 00A6  
                 ??___lwdiv 0014                   ??___lwmod 001B        __size_of_get_timeDif 0144  
          __end_of_logState 135C                      clear_0 15C8                      clear_1 15D4  
               logState@log 0034                   ??_lcdInst 0012                      _printf 0560  
      __size_of_finishState 003A                   ??_initLCD 0013      executingState@hasLabel 00A2  
                 ??_readKey 0012                   ??_isdigit 0010                __mediumconst FEE6  
            ??_readSnSensor 0012                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8      executingState@snLoaded 00A4                  __accesstop 0080  
   __end_of__initialization 15DA               ___rparam_used 000001      executingState@runCanAl 0082  
    executingState@runCanSn 0080              __pcstackCOMRAM 0001           ??_eeprom_ReadByte 0012  
  __end_of_eeprom_LogResult 13A8           servoRotate4@angle 0010           servoRotate0@servo 0010  
             __end_of_putch 174E          __size_of_lcdNibble 0056        executingState@hasTab 009E  
        __size_of_mainState 0048                     ??_putch 0012                  __pbssBANK0 00AE  
         servoRotateArm@res 0013          __size_of_readAlBot 0018                  _debugState 1596  
        __size_of_readAlTop 0018          __size_of_readSnBot 0018          __size_of_readSnTop 0018  
                   ?___wmul 0010                     ?_fixLCD 0001    __end_of_eeprom_WriteByte 1634  
                   ?_printf 001C     __size_of_executingState 054E           eeprom_GetLog@back 0012  
         _eeprom_initialize 1678          ?_eeprom_initialize 0001                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7                   ?_get_time 0013  
                 ?_logState 0001         ??_eeprom_initialize 0013           __end_of_lcdNibble 12BC  
          get_timeDif@h_one 001F            get_timeDif@h_ten 001D            get_timeDif@m_one 0023  
          get_timeDif@m_ten 0021                     __Hparam 0000            get_timeDif@s_one 0027  
          get_timeDif@s_ten 0025                     __Lparam 0000            get_timeDif@start 0018  
      __end_of_readSnSensor 16C4       __end_of_servoRotate90 0D60       __end_of_eeprom_GetLog 120C  
                   _alNoTab 0041                     ___lldiv 10C0             __size_of___wmul 0026  
                   ___lwdiv 12BC                     ___lwmod 147E             __size_of_fixLCD 01B2  
         __end_of_mainState 13F0      __size_of_newestAddress 000E                     __pcinit 15C2  
                   __ramtop 1000                     _lcdInst 174E                     __ptext0 0F9A  
                   __ptext1 13A8                     __ptext2 130E                     __ptext3 11AC  
                   __ptext4 086C                     __ptext5 1438                     __ptext6 120C  
                   __ptext7 10C0                     __ptext8 14FC                     __ptext9 13F0  
         __end_of_readAlBot 170C           __end_of_readAlTop 16F4             __size_of_printf 030C  
 __end_of_eeprom_initialize 1694                     _initLCD 1438           __end_of_hexpowers FF0A  
         __end_of_readSnBot 16DC                     _dpowers FEF8           __end_of_readSnTop 16AC  
                   _readKey 13F0                     _snLabel 0047                     _isdigit 165A  
                   _logdata 005A                     fixLCD@i 0035                     fixLCD@j 003E  
                _keypressed 0008    __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026  
  __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008                  fixLCD@time 0037  
                ??_get_time 0015              __pintcode_body 0EE8        end_of_initialization 15DA  
               ?_debugState 0001               __Lmediumconst FEE6                  ??_logState 0034  
                   int_func 0EE8   __size_of_I2C_Master_Start 0008   __size_of_I2C_Master_Write 000A  
           ___lldiv@divisor 0014             ___lldiv@counter 001C               ?_servoRotate0 0010  
             ?_servoRotate4 0010                     printf@c 0033                     printf@f 001C  
          I2C_Master_Init@c 001D            I2C_Master_Read@a 0011                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTAbits 000F80  
                 _PORTBbits 000F81                   _PORTCbits 000F82       __end_of_dispenseAlCan 1596  
         eeprom_LogResult@i 0016       __end_of_dispenseSnCan 1566                  _update_lcd 0B62  
             _newestAddress 1734                  _statictime FF0A        servoRotateArm@i_1035 0015  
       finishState@keypress 0036             _eeprom_ReadByte 170C                 printf@width 0031  
            ??_servoRotate0 0012              ??_servoRotate4 0012               ??_get_timeDif 001A  
        servoRotate90@servo 0010               ??_finishState 0034              __end_of___wmul 165A  
         ?_eeprom_LogResult 0013              __end_of_fixLCD 0A1E     __size_of_servoRotate90n 00C2  
    eeprom_ReadByte@address 0010     __size_of_servoRotateArm 006A              _executingState 0012  
        ??_eeprom_LogResult 0015  __size_of_eeprom_initialize 001C         __size_of_debugState 002C  
            __end_of_printf 086C         start_initialization 15C2                 ?_keypressed 0001  
            ?_newestAddress 0001           ??_I2C_Master_Init 0021           ??_I2C_Master_Read 0011  
         ??_I2C_Master_Wait 0010           ??_I2C_Master_Stop 0011       __size_of_readSnSensor 0018  
   eeprom_LogResult@address 0015            _get_timeDif$1730 002B            _get_timeDif$1731 002D  
        get_timeDif@start_s 0029                    ??___wmul 0014                    ??_fixLCD 0034  
    __end_of_executingState 0560            __CFG_LPT1OSC$OFF 000000           ?_eeprom_WriteByte 0010  
                  ??_printf 0026         __end_of_get_timeDif 0B62          ??_eeprom_WriteByte 0013  
               __pbssCOMRAM 0041         __end_of_finishState 1536       executingState@timedif 00A0  
             __pcstackBANK0 0080                 ?_update_lcd 0001       executingState@start_s 009C  
              _readSnSensor 16AC     __end_of_eeprom_ReadByte 1722                _isdigit$1339 0011  
         __size_of_get_time 0086         executingState@h_one 0086         executingState@h_ten 0084  
       executingState@m_one 008A         executingState@m_ten 0088         executingState@s_one 008E  
       executingState@s_ten 008C            _I2C_Master_Start 176C            _I2C_Master_Write 175A  
         __size_of_logState 004E         _executingState$1732 0090         _executingState$1733 0092  
          ___lwdiv@dividend 0010           __CFG_CCP2MX$PORTC 000000         __size_of_keypressed 0F92  
                 __pintcode 0008               __pmediumconst FEE6                   _lcdNibble 1266  
                  ?___lldiv 0010                    ?___lwdiv 0010                    ?___lwmod 0017  
           ?_executingState 0001                    ?_lcdInst 0001                    ?_initLCD 0001  
                 _mainState 13A8                    ?_readKey 0010                    ?_isdigit 0001  
   eeprom_WriteByte@address 0010                   _readAlBot 16F4                   _readAlTop 16DC  
           ??_newestAddress 0012        __end_of_servoRotate0 0E26        __end_of_servoRotate4 14FC  
                 _hexpowers FF02                   _readSnBot 16C4            ___lwdiv@quotient 0015  
                 _readSnTop 1694              __size_of_putch 000C                   _snNoLabel 0049  
              ??_debugState 0034              ___wmul@product 0014                    _LATAbits 000F89  
                  _LATBbits 000F8A                    _LATCbits 000F8B                    _LATDbits 000F8C  
                  _LATEbits 000F8D                    _PIR2bits 000FA1            __CFG_WDTPS$32768 000000  
                ?_lcdNibble 0001                 _get_timeDif 0A1E         __size_of_update_lcd 0138  
               _finishState 14FC              _servoRotate90n 0E26              _servoRotateArm 1142  
                 _runResult 0045           ___wmul@multiplier 0010               lcdNibble@data 0011  
                ?_mainState 0001                  printf@flag 0030                   _starttime 00AE  
             lcdNibble@temp 0010          __end_of_debugState 15C2                  printf@prec 002D  
                 get_time@i 0017                  ?_readAlBot 0010                  ?_readAlTop 0010  
                ?_readSnBot 0010                  ?_readSnTop 0010            ?_eeprom_ReadByte 0010  
       I2C_Master_Read@temp 0012      __size_of_servoRotate90 00C6      __size_of_eeprom_GetLog 0060  
                _EECON1bits 000FA6          keypressed@keypress 000F                    __Hrparam 0000  
                  __Lrparam 0000          __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate90n 0EE8  
    __end_of_servoRotateArm 11AC            __size_of___lldiv 0082            __size_of___lwdiv 0052  
          __size_of___lwmod 0042            __size_of_lcdInst 000C    executingState@alInSensor 00AA  
           _I2C_Master_Init 120C             _I2C_Master_Read 15E8            __size_of_initLCD 0046  
           _I2C_Master_Wait 1722             _I2C_Master_Stop 1764            __size_of_readKey 0048  
              ??_keypressed 0001            __size_of_isdigit 001E             ___lwdiv@divisor 0012  
           ___lwdiv@counter 0014                    __ptext10 0012                    __ptext11 0B62  
                  __ptext20 0A1E                    __ptext12 1142                    __ptext21 103A  
                  __ptext13 0E26                    __ptext30 0C9A                    __ptext22 175A  
                  __ptext14 14C0                    __ptext31 1678                    __ptext23 1764  
                  __ptext15 1694                    __ptext40 1634                    __ptext32 1734  
                  __ptext24 176C                    __ptext16 16AC                    __ptext41 147E  
                  __ptext33 170C                    __ptext25 15E8                    __ptext17 16C4  
                  __ptext42 12BC                    __ptext34 160E                    __ptext26 1722  
                  __ptext18 16DC                    __ptext43 174E                    __ptext35 1596  
                  __ptext27 135C                    __ptext19 16F4                    __ptext44 1266  
                  __ptext36 0D60                    __ptext28 1536                    __ptext37 0560  
                  __ptext29 1566                    __ptext38 1742                    __ptext39 165A  
                  _get_time 103A   __size_of_eeprom_LogResult 004C        eeprom_GetLog@address 0018  
         mainState@keypress 0034                    _logState 130E               __size_of_main 00A0  
               fixLCD@i_584 0040      __size_of_dispenseAlCan 0030      __size_of_dispenseSnCan 0030  
               ??_lcdNibble 0010             ?_servoRotate90n 0010          __end_of_keypressed 0F9A  
                  int$flags 005B               _servoRotate90 0C9A             ?_servoRotateArm 0010  
             _eeprom_GetLog 11AC                   printf@idx 002A                   printf@val 002E  
     __size_of_servoRotate0 00C6       __size_of_servoRotate4 003C                 ??_mainState 0034  
                 putch@data 0012    __end_of_I2C_Master_Start 1774    __end_of_I2C_Master_Write 1764  
                _INTCONbits 000FF2                 ??_readAlBot 0012                    readKey@i 0013  
               ??_readAlTop 0012                ??_update_lcd 0034                 ??_readSnBot 0012  
                  isdigit@c 0012                 ??_readSnTop 0012   __size_of_eeprom_WriteByte 0026  
                  intlevel2 0000            ___lwmod@dividend 0017            ___lldiv@dividend 0010  
          ??_executingState 0034              ?_servoRotate90 0010                _servoRotate0 0D60  
              _servoRotate4 14C0              ?_eeprom_GetLog 0012                    printf@ap 002B  
        __end_of_update_lcd 0C9A     __end_of_I2C_Master_Init 1266     __end_of_I2C_Master_Read 160E  
   __end_of_I2C_Master_Wait 1734     __end_of_I2C_Master_Stop 176C                 lcdInst@data 0012  
      eeprom_LogResult@data 0013            logState@keypress 0036          __end_of_statictime FF11  
          ___lldiv@quotient 0018           I2C_Master_Write@d 0011             ___lwmod@divisor 0019  
           ___lwmod@counter 001B               _dispenseAlCan 1566    executingState@emptyCount 00AC  
             _dispenseSnCan 1536    executingState@snInSensor 00A8  
