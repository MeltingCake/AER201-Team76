

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 01:01:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.40
    67                           ; Generated 01/12/2016 GMT
    68                           ; 
    69                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4620 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	idataCOMRAM
   102  0019B6                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _loopcount
   106  0019B6  001E               	dw	30
   107                           
   108                           	psect	mediumconst
   109  00FEE0                     __pmediumconst:
   110                           	opt stack 0
   111  00FEE0  00                 	db	0
   112  00FEE1                     _keys:
   113                           	opt stack 0
   114  00FEE1  31                 	db	49
   115  00FEE2  32                 	db	50
   116  00FEE3  33                 	db	51
   117  00FEE4  41                 	db	65
   118  00FEE5  34                 	db	52
   119  00FEE6  35                 	db	53
   120  00FEE7  36                 	db	54
   121  00FEE8  42                 	db	66
   122  00FEE9  37                 	db	55
   123  00FEEA  38                 	db	56
   124  00FEEB  39                 	db	57
   125  00FEEC  43                 	db	67
   126  00FEED  2A                 	db	42
   127  00FEEE  30                 	db	48
   128  00FEEF  23                 	db	35
   129  00FEF0  44                 	db	68
   130  00FEF1  00                 	db	0
   131  00FEF2                     __end_of_keys:
   132                           	opt stack 0
   133  00FEF2                     _dpowers:
   134                           	opt stack 0
   135  00FEF2  0001               	dw	1
   136  00FEF4  000A               	dw	10
   137  00FEF6  0064               	dw	100
   138  00FEF8  03E8               	dw	1000
   139  00FEFA  2710               	dw	10000
   140  00FEFC                     __end_of_dpowers:
   141                           	opt stack 0
   142  00FEFC                     _hexpowers:
   143                           	opt stack 0
   144  00FEFC  0001               	dw	1
   145  00FEFE  0010               	dw	16
   146  00FF00  0100               	dw	256
   147  00FF02  1000               	dw	4096
   148  00FF04                     __end_of_hexpowers:
   149                           	opt stack 0
   150  00FF04                     _statictime:
   151                           	opt stack 0
   152  00FF04  00                 	db	0
   153  00FF05  01                 	db	1
   154  00FF06  01                 	db	1
   155  00FF07  03                 	db	3
   156  00FF08  12                 	db	18
   157  00FF09  04                 	db	4
   158  00FF0A  17                 	db	23
   159  00FF0B                     __end_of_statictime:
   160                           	opt stack 0
   161  0000                     _ADCON0	set	4034
   162  0000                     _ADCON1	set	4033
   163  0000                     _CMCON	set	4020
   164  0000                     _EEADR	set	4009
   165  0000                     _EEADRH	set	4010
   166  0000                     _EECON1bits	set	4006
   167  0000                     _EECON2	set	4007
   168  0000                     _EEDATA	set	4008
   169  0000                     _INTCONbits	set	4082
   170  0000                     _LATA	set	3977
   171  0000                     _LATAbits	set	3977
   172  0000                     _LATB	set	3978
   173  0000                     _LATBbits	set	3978
   174  0000                     _LATC	set	3979
   175  0000                     _LATCbits	set	3979
   176  0000                     _LATD	set	3980
   177  0000                     _LATDbits	set	3980
   178  0000                     _LATE	set	3981
   179  0000                     _LATEbits	set	3981
   180  0000                     _OSCCON	set	4051
   181  0000                     _PIR2bits	set	4001
   182  0000                     _PORTAbits	set	3968
   183  0000                     _PORTB	set	3969
   184  0000                     _PORTBbits	set	3969
   185  0000                     _PORTCbits	set	3970
   186  0000                     _SSPADD	set	4040
   187  0000                     _SSPBUF	set	4041
   188  0000                     _SSPCON1	set	4038
   189  0000                     _SSPCON2	set	4037
   190  0000                     _SSPSTAT	set	4039
   191  0000                     _TRISA	set	3986
   192  0000                     _TRISB	set	3987
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISE	set	3990
   196  0000                     _ACKDT	set	32301
   197  0000                     _ACKEN	set	32300
   198  0000                     _INT1IE	set	32643
   199  0000                     _INT1IF	set	32640
   200  0000                     _PEN	set	32298
   201  0000                     _RCEN	set	32299
   202  0000                     _RSEN	set	32297
   203  0000                     _SEN	set	32296
   204  0000                     _TRISC3	set	31907
   205  0000                     _TRISC4	set	31908
   206  00FF0B                     STR_4:
   207  00FF0B  61                 	db	97	;'a'
   208  00FF0C  4E                 	db	78	;'N'
   209  00FF0D  25                 	db	37
   210  00FF0E  64                 	db	100	;'d'
   211  00FF0F  2F                 	db	47
   212  00FF10  61                 	db	97	;'a'
   213  00FF11  25                 	db	37
   214  00FF12  64                 	db	100	;'d'
   215  00FF13  2F                 	db	47
   216  00FF14  73                 	db	115	;'s'
   217  00FF15  4E                 	db	78	;'N'
   218  00FF16  25                 	db	37
   219  00FF17  64                 	db	100	;'d'
   220  00FF18  2F                 	db	47
   221  00FF19  53                 	db	83	;'S'
   222  00FF1A  25                 	db	37
   223  00FF1B  64                 	db	100	;'d'
   224  00FF1C  20                 	db	32
   225  00FF1D  20                 	db	32
   226  00FF1E  20                 	db	32
   227  00FF1F  00                 	db	0
   228  00FF20                     STR_14:
   229  00FF20  45                 	db	69	;'E'
   230  00FF21  78                 	db	120	;'x'
   231  00FF22  65                 	db	101	;'e'
   232  00FF23  63                 	db	99	;'c'
   233  00FF24  75                 	db	117	;'u'
   234  00FF25  74                 	db	116	;'t'
   235  00FF26  69                 	db	105	;'i'
   236  00FF27  6E                 	db	110	;'n'
   237  00FF28  67                 	db	103	;'g'
   238  00FF29  20                 	db	32
   239  00FF2A  20                 	db	32
   240  00FF2B  20                 	db	32
   241  00FF2C  20                 	db	32
   242  00FF2D  25                 	db	37
   243  00FF2E  30                 	db	48	;'0'
   244  00FF2F  33                 	db	51	;'3'
   245  00FF30  64                 	db	100	;'d'
   246  00FF31  00                 	db	0
   247  00FF32                     STR_22:
   248  00FF32  30                 	db	48	;'0'
   249  00FF33  31                 	db	49	;'1'
   250  00FF34  32                 	db	50	;'2'
   251  00FF35  33                 	db	51	;'3'
   252  00FF36  34                 	db	52	;'4'
   253  00FF37  35                 	db	53	;'5'
   254  00FF38  36                 	db	54	;'6'
   255  00FF39  37                 	db	55	;'7'
   256  00FF3A  38                 	db	56	;'8'
   257  00FF3B  39                 	db	57	;'9'
   258  00FF3C  61                 	db	97	;'a'
   259  00FF3D  62                 	db	98	;'b'
   260  00FF3E  63                 	db	99	;'c'
   261  00FF3F  64                 	db	100	;'d'
   262  00FF40  65                 	db	101	;'e'
   263  00FF41  66                 	db	102	;'f'
   264  00FF42  00                 	db	0
   265  00FF43                     STR_13:
   266  00FF43  20                 	db	32
   267  00FF44  20                 	db	32
   268  00FF45  20                 	db	32
   269  00FF46  20                 	db	32
   270  00FF47  20                 	db	32
   271  00FF48  20                 	db	32
   272  00FF49  20                 	db	32
   273  00FF4A  20                 	db	32
   274  00FF4B  20                 	db	32
   275  00FF4C  20                 	db	32
   276  00FF4D  20                 	db	32
   277  00FF4E  20                 	db	32
   278  00FF4F  20                 	db	32
   279  00FF50  20                 	db	32
   280  00FF51  20                 	db	32
   281  00FF52  20                 	db	32
   282  00FF53  00                 	db	0
   283  00FF54                     STR_6:
   284  00FF54  45                 	db	69	;'E'
   285  00FF55  78                 	db	120	;'x'
   286  00FF56  65                 	db	101	;'e'
   287  00FF57  63                 	db	99	;'c'
   288  00FF58  75                 	db	117	;'u'
   289  00FF59  74                 	db	116	;'t'
   290  00FF5A  69                 	db	105	;'i'
   291  00FF5B  6E                 	db	110	;'n'
   292  00FF5C  67                 	db	103	;'g'
   293  00FF5D  2E                 	db	46
   294  00FF5E  2E                 	db	46
   295  00FF5F  2E                 	db	46
   296  00FF60  20                 	db	32
   297  00FF61  20                 	db	32
   298  00FF62  20                 	db	32
   299  00FF63  20                 	db	32
   300  00FF64  00                 	db	0
   301  00FF65                     STR_12:
   302  00FF65  69                 	db	105	;'i'
   303  00FF66  6E                 	db	110	;'n'
   304  00FF67  69                 	db	105	;'i'
   305  00FF68  74                 	db	116	;'t'
   306  00FF69  69                 	db	105	;'i'
   307  00FF6A  61                 	db	97	;'a'
   308  00FF6B  6C                 	db	108	;'l'
   309  00FF6C  69                 	db	105	;'i'
   310  00FF6D  7A                 	db	122	;'z'
   311  00FF6E  69                 	db	105	;'i'
   312  00FF6F  6E                 	db	110	;'n'
   313  00FF70  67                 	db	103	;'g'
   314  00FF71  20                 	db	32
   315  00FF72  20                 	db	32
   316  00FF73  20                 	db	32
   317  00FF74  20                 	db	32
   318  00FF75  00                 	db	0
   319  00FF76                     STR_5:
   320  00FF76  31                 	db	49	;'1'
   321  00FF77  3A                 	db	58	;':'
   322  00FF78  50                 	db	80	;'P'
   323  00FF79  72                 	db	114	;'r'
   324  00FF7A  65                 	db	101	;'e'
   325  00FF7B  76                 	db	118	;'v'
   326  00FF7C  20                 	db	32
   327  00FF7D  30                 	db	48	;'0'
   328  00FF7E  3A                 	db	58	;':'
   329  00FF7F  45                 	db	69	;'E'
   330  00FF80  78                 	db	120	;'x'
   331  00FF81  69                 	db	105	;'i'
   332  00FF82  74                 	db	116	;'t'
   333  00FF83  20                 	db	32
   334  00FF84  20                 	db	32
   335  00FF85  20                 	db	32
   336  00FF86  00                 	db	0
   337  00FF87                     STR_3:
   338  00FF87  31                 	db	49	;'1'
   339  00FF88  3A                 	db	58	;':'
   340  00FF89  53                 	db	83	;'S'
   341  00FF8A  74                 	db	116	;'t'
   342  00FF8B  61                 	db	97	;'a'
   343  00FF8C  72                 	db	114	;'r'
   344  00FF8D  74                 	db	116	;'t'
   345  00FF8E  20                 	db	32
   346  00FF8F  32                 	db	50	;'2'
   347  00FF90  3A                 	db	58	;':'
   348  00FF91  4C                 	db	76	;'L'
   349  00FF92  6F                 	db	111	;'o'
   350  00FF93  67                 	db	103	;'g'
   351  00FF94  73                 	db	115	;'s'
   352  00FF95  20                 	db	32
   353  00FF96  20                 	db	32
   354  00FF97  00                 	db	0
   355  00FF98                     STR_10:
   356  00FF98  53                 	db	83	;'S'
   357  00FF99  74                 	db	116	;'t'
   358  00FF9A  6F                 	db	111	;'o'
   359  00FF9B  70                 	db	112	;'p'
   360  00FF9C  70                 	db	112	;'p'
   361  00FF9D  65                 	db	101	;'e'
   362  00FF9E  64                 	db	100	;'d'
   363  00FF9F  20                 	db	32
   364  00FFA0  20                 	db	32
   365  00FFA1  20                 	db	32
   366  00FFA2  30                 	db	48	;'0'
   367  00FFA3  3A                 	db	58	;':'
   368  00FFA4  48                 	db	72	;'H'
   369  00FFA5  6F                 	db	111	;'o'
   370  00FFA6  6D                 	db	109	;'m'
   371  00FFA7  65                 	db	101	;'e'
   372  00FFA8  00                 	db	0
   373  00FFA9                     STR_1:
   374  00FFA9  25                 	db	37
   375  00FFAA  30                 	db	48	;'0'
   376  00FFAB  32                 	db	50	;'2'
   377  00FFAC  78                 	db	120	;'x'
   378  00FFAD  2F                 	db	47
   379  00FFAE  25                 	db	37
   380  00FFAF  30                 	db	48	;'0'
   381  00FFB0  31                 	db	49	;'1'
   382  00FFB1  78                 	db	120	;'x'
   383  00FFB2  2F                 	db	47
   384  00FFB3  25                 	db	37
   385  00FFB4  30                 	db	48	;'0'
   386  00FFB5  32                 	db	50	;'2'
   387  00FFB6  78                 	db	120	;'x'
   388  00FFB7  20                 	db	32
   389  00FFB8  00                 	db	0
   390  00FFB9                     STR_9:
   391  00FFB9  46                 	db	70	;'F'
   392  00FFBA  69                 	db	105	;'i'
   393  00FFBB  6E                 	db	110	;'n'
   394  00FFBC  69                 	db	105	;'i'
   395  00FFBD  73                 	db	115	;'s'
   396  00FFBE  68                 	db	104	;'h'
   397  00FFBF  65                 	db	101	;'e'
   398  00FFC0  64                 	db	100	;'d'
   399  00FFC1  20                 	db	32
   400  00FFC2  30                 	db	48	;'0'
   401  00FFC3  3A                 	db	58	;':'
   402  00FFC4  48                 	db	72	;'H'
   403  00FFC5  6F                 	db	111	;'o'
   404  00FFC6  6D                 	db	109	;'m'
   405  00FFC7  65                 	db	101	;'e'
   406  00FFC8  00                 	db	0
   407  00FFC9                     STR_16:
   408  00FFC9  25                 	db	37
   409  00FFCA  64                 	db	100	;'d'
   410  00FFCB  2F                 	db	47
   411  00FFCC  25                 	db	37
   412  00FFCD  64                 	db	100	;'d'
   413  00FFCE  2F                 	db	47
   414  00FFCF  25                 	db	37
   415  00FFD0  64                 	db	100	;'d'
   416  00FFD1  2F                 	db	47
   417  00FFD2  25                 	db	37
   418  00FFD3  64                 	db	100	;'d'
   419  00FFD4  20                 	db	32
   420  00FFD5  20                 	db	32
   421  00FFD6  20                 	db	32
   422  00FFD7  00                 	db	0
   423  00FFD8                     STR_17:
   424  00FFD8  25                 	db	37
   425  00FFD9  30                 	db	48	;'0'
   426  00FFDA  32                 	db	50	;'2'
   427  00FFDB  78                 	db	120	;'x'
   428  00FFDC  25                 	db	37
   429  00FFDD  30                 	db	48	;'0'
   430  00FFDE  32                 	db	50	;'2'
   431  00FFDF  78                 	db	120	;'x'
   432  00FFE0  2F                 	db	47
   433  00FFE1  25                 	db	37
   434  00FFE2  30                 	db	48	;'0'
   435  00FFE3  32                 	db	50	;'2'
   436  00FFE4  78                 	db	120	;'x'
   437  00FFE5  20                 	db	32
   438  00FFE6  00                 	db	0
   439  00FFE7                     STR_2:
   440  00FFE7  25                 	db	37
   441  00FFE8  30                 	db	48	;'0'
   442  00FFE9  32                 	db	50	;'2'
   443  00FFEA  78                 	db	120	;'x'
   444  00FFEB  3A                 	db	58	;':'
   445  00FFEC  25                 	db	37
   446  00FFED  30                 	db	48	;'0'
   447  00FFEE  32                 	db	50	;'2'
   448  00FFEF  78                 	db	120	;'x'
   449  00FFF0  3A                 	db	58	;':'
   450  00FFF1  25                 	db	37
   451  00FFF2  30                 	db	48	;'0'
   452  00FFF3  32                 	db	50	;'2'
   453  00FFF4  78                 	db	120	;'x'
   454  00FFF5  00                 	db	0
   455  00FFF6                     STR_11:
   456  00FFF6  65                 	db	101	;'e'
   457  00FFF7  72                 	db	114	;'r'
   458  00FFF8  72                 	db	114	;'r'
   459  00FFF9  6F                 	db	111	;'o'
   460  00FFFA  72                 	db	114	;'r'
   461  00FFFB  00                 	db	0
   462  00FFFC                     STR_15:
   463  00FFFC  25                 	db	37
   464  00FFFD  64                 	db	100	;'d'
   465  00FFFE  00                 	db	0
   466  0000                     
   467                           ; #config settings
   468  00FFFF  00                 	db	0	; dummy byte at the end
   469  0000                     
   470                           	psect	cinit
   471  0016CC                     __pcinit:
   472                           	opt stack 0
   473  0016CC                     start_initialization:
   474                           	opt stack 0
   475  0016CC                     __initialization:
   476                           	opt stack 0
   477                           
   478                           ; Initialize objects allocated to COMRAM (2 bytes)
   479                           ; load TBLPTR registers with __pidataCOMRAM
   480  0016CC  0EB6               	movlw	low __pidataCOMRAM
   481  0016CE  6EF6               	movwf	tblptrl,c
   482  0016D0  0E19               	movlw	high __pidataCOMRAM
   483  0016D2  6EF7               	movwf	tblptrh,c
   484  0016D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   485  0016D6  6EF8               	movwf	tblptru,c
   486  0016D8  0009               	tblrd		*+	;fetch initializer
   487  0016DA  CFF5 F050          	movff	tablat,__pdataCOMRAM
   488  0016DE  0009               	tblrd		*+	;fetch initializer
   489  0016E0  CFF5 F051          	movff	tablat,__pdataCOMRAM+1
   490                           
   491                           ; Clear objects allocated to BANK0 (28 bytes)
   492  0016E4  EE00  F0AE         	lfsr	0,__pbssBANK0
   493  0016E8  0E1C               	movlw	28
   494  0016EA                     clear_0:
   495  0016EA  6AEE               	clrf	postinc0,c
   496  0016EC  06E8               	decf	wreg,f,c
   497  0016EE  E1FD               	bnz	clear_0
   498                           
   499                           ; Clear objects allocated to COMRAM (15 bytes)
   500  0016F0  EE00  F041         	lfsr	0,__pbssCOMRAM
   501  0016F4  0E0F               	movlw	15
   502  0016F6                     clear_1:
   503  0016F6  6AEE               	clrf	postinc0,c
   504  0016F8  06E8               	decf	wreg,f,c
   505  0016FA  E1FD               	bnz	clear_1
   506  0016FC                     end_of_initialization:
   507                           	opt stack 0
   508  0016FC                     __end_of__initialization:
   509                           	opt stack 0
   510  0016FC  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   511  0016FE  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   512  001700  0E00               	movlw	low (__Lmediumconst shr (0+16))
   513  001702  6EF8               	movwf	tblptru,c
   514  001704  0100               	movlb	0
   515  001706  EF00  F007         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           
   523                           	psect	bssCOMRAM
   524  000041                     __pbssCOMRAM:
   525                           	opt stack 0
   526  000041                     _alNoTab:
   527                           	opt stack 0
   528  000041                     	ds	2
   529  000043                     _alTab:
   530                           	opt stack 0
   531  000043                     	ds	2
   532  000045                     _runResult:
   533                           	opt stack 0
   534  000045                     	ds	2
   535  000047                     _snLabel:
   536                           	opt stack 0
   537  000047                     	ds	2
   538  000049                     _snNoLabel:
   539                           	opt stack 0
   540  000049                     	ds	2
   541  00004B                     _state:
   542                           	opt stack 0
   543  00004B                     	ds	1
   544  00004C                     _logdata:
   545                           	opt stack 0
   546  00004C                     	ds	4
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           
   554                           	psect	dataCOMRAM
   555  000050                     __pdataCOMRAM:
   556                           	opt stack 0
   557  000050                     _loopcount:
   558                           	opt stack 0
   559  000050                     	ds	2
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           
   567                           	psect	bssBANK0
   568  0000AE                     __pbssBANK0:
   569                           	opt stack 0
   570  0000AE                     _starttime:
   571                           	opt stack 0
   572  0000AE                     	ds	14
   573  0000BC                     _time:
   574                           	opt stack 0
   575  0000BC                     	ds	14
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           
   583                           	psect	cstackBANK0
   584  000080                     __pcstackBANK0:
   585                           	opt stack 0
   586  000080                     executingState@runCanSn:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x0
   590  000080                     	ds	2
   591  000082                     executingState@runCanAl:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x2
   595  000082                     	ds	2
   596  000084                     executingState@h_ten:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x4
   600  000084                     	ds	2
   601  000086                     executingState@h_one:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x6
   605  000086                     	ds	2
   606  000088                     executingState@m_ten:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x8
   610  000088                     	ds	2
   611  00008A                     executingState@m_one:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0xA
   615  00008A                     	ds	2
   616  00008C                     executingState@s_ten:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0xC
   620  00008C                     	ds	2
   621  00008E                     executingState@s_one:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0xE
   625  00008E                     	ds	2
   626  000090                     _executingState$1740:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x10
   630  000090                     	ds	2
   631  000092                     _executingState$1741:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x12
   635  000092                     	ds	2
   636  000094                     executingState@count:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x14
   640  000094                     	ds	2
   641  000096                     executingState@start_s:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x16
   645  000096                     	ds	2
   646  000098                     executingState@i:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x18
   650  000098                     	ds	2
   651  00009A                     executingState@res:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x1A
   655  00009A                     	ds	4
   656  00009E                     executingState@emptyCount:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x1E
   660  00009E                     	ds	2
   661  0000A0                     executingState@snLoaded:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x20
   665  0000A0                     	ds	2
   666  0000A2                     executingState@alLoaded:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x22
   670  0000A2                     	ds	2
   671  0000A4                     executingState@snInSensor:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x24
   675  0000A4                     	ds	2
   676  0000A6                     executingState@alInSensor:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x26
   680  0000A6                     	ds	2
   681  0000A8                     executingState@hasTab:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x28
   685  0000A8                     	ds	2
   686  0000AA                     executingState@timedif:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x2A
   690  0000AA                     	ds	2
   691  0000AC                     executingState@hasLabel:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x2C
   695  0000AC                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           
   703                           	psect	cstackCOMRAM
   704  000001                     __pcstackCOMRAM:
   705                           	opt stack 0
   706  000001                     ??_keypressed:
   707  000001                     
   708                           ; 1 bytes @ 0x0
   709  000001                     	ds	14
   710  00000F                     keypressed@keypress:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0xE
   714  00000F                     	ds	1
   715  000010                     ??_isdigit:
   716  000010                     ??_I2C_Master_Wait:
   717  000010                     ?_readSnTop:
   718                           	opt stack 0
   719  000010                     ?_readAlTop:
   720                           	opt stack 0
   721  000010                     ?_readSnBot:
   722                           	opt stack 0
   723  000010                     ?_readAlBot:
   724                           	opt stack 0
   725  000010                     ?_readSnSensor:
   726                           	opt stack 0
   727  000010                     ?_servoRotateArm:
   728                           	opt stack 0
   729  000010                     ?_readKey:
   730                           	opt stack 0
   731  000010                     ?___wmul:
   732                           	opt stack 0
   733  000010                     ?___lwdiv:
   734                           	opt stack 0
   735  000010                     ?___lldiv:
   736                           	opt stack 0
   737  000010                     lcdNibble@temp:
   738                           	opt stack 0
   739  000010                     eeprom_ReadByte@address:
   740                           	opt stack 0
   741  000010                     eeprom_WriteByte@address:
   742                           	opt stack 0
   743  000010                     servoRotate1@angle:
   744                           	opt stack 0
   745  000010                     servoRotate2@angle:
   746                           	opt stack 0
   747  000010                     servoRotate4@angle:
   748                           	opt stack 0
   749  000010                     servoRotate0@servo:
   750                           	opt stack 0
   751  000010                     servoRotate90@servo:
   752                           	opt stack 0
   753  000010                     servoRotate90n@servo:
   754                           	opt stack 0
   755  000010                     ___wmul@multiplier:
   756                           	opt stack 0
   757  000010                     ___lwdiv@dividend:
   758                           	opt stack 0
   759  000010                     ___lldiv@dividend:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0xF
   763  000010                     	ds	1
   764  000011                     I2C_Master_Read@a:
   765                           	opt stack 0
   766  000011                     lcdNibble@data:
   767                           	opt stack 0
   768  000011                     _isdigit$1353:
   769                           	opt stack 0
   770  000011                     I2C_Master_Write@d:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x10
   774  000011                     	ds	1
   775  000012                     ??_servoRotate90n:
   776  000012                     ??_servoRotate2:
   777  000012                     ??_servoRotate0:
   778  000012                     ??_servoRotate1:
   779  000012                     ??_servoRotate4:
   780  000012                     ??_servoRotate90:
   781  000012                     ??_servoRotateArm:
   782  000012                     I2C_Master_Read@temp:
   783                           	opt stack 0
   784  000012                     lcdInst@data:
   785                           	opt stack 0
   786  000012                     putch@data:
   787                           	opt stack 0
   788  000012                     readKey@keypress:
   789                           	opt stack 0
   790  000012                     eeprom_WriteByte@data:
   791                           	opt stack 0
   792  000012                     isdigit@c:
   793                           	opt stack 0
   794  000012                     eeprom_GetLog@back:
   795                           	opt stack 0
   796  000012                     ___wmul@multiplicand:
   797                           	opt stack 0
   798  000012                     ___lwdiv@divisor:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x11
   802  000012                     	ds	1
   803  000013                     ??_initLCD:
   804  000013                     readKey@i:
   805                           	opt stack 0
   806  000013                     eeprom_LogResult@data:
   807                           	opt stack 0
   808  000013                     get_time@time:
   809                           	opt stack 0
   810  000013                     servoRotate1@i:
   811                           	opt stack 0
   812  000013                     servoRotate2@i:
   813                           	opt stack 0
   814  000013                     servoRotate4@i:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x12
   818  000013                     	ds	1
   819  000014                     ___lwdiv@counter:
   820                           	opt stack 0
   821  000014                     eeprom_GetLog@res:
   822                           	opt stack 0
   823  000014                     servoRotate0@i:
   824                           	opt stack 0
   825  000014                     servoRotate90@i:
   826                           	opt stack 0
   827  000014                     servoRotate90n@i:
   828                           	opt stack 0
   829  000014                     ___wmul@product:
   830                           	opt stack 0
   831  000014                     ___lldiv@divisor:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x13
   835  000014                     	ds	1
   836  000015                     ??_get_time:
   837  000015                     eeprom_LogResult@address:
   838                           	opt stack 0
   839  000015                     servoRotateArm@i_1049:
   840                           	opt stack 0
   841  000015                     ___lwdiv@quotient:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x14
   845  000015                     	ds	1
   846  000016                     ??_dispenseSnCan:
   847  000016                     ??_dispenseAlCan:
   848  000016                     eeprom_GetLog@address:
   849                           	opt stack 0
   850  000016                     eeprom_LogResult@i:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x15
   854  000016                     	ds	1
   855  000017                     ?___lwmod:
   856                           	opt stack 0
   857  000017                     get_time@i:
   858                           	opt stack 0
   859  000017                     eeprom_GetLog@i:
   860                           	opt stack 0
   861  000017                     servoRotateArm@res:
   862                           	opt stack 0
   863  000017                     ___lwmod@dividend:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x16
   867  000017                     	ds	1
   868  000018                     ?_get_timeDif:
   869                           	opt stack 0
   870  000018                     get_timeDif@start:
   871                           	opt stack 0
   872  000018                     ___lldiv@quotient:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x17
   876  000018                     	ds	1
   877  000019                     ___lwmod@divisor:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x18
   881  000019                     	ds	1
   882  00001A                     ??_get_timeDif:
   883                           
   884                           ; 1 bytes @ 0x19
   885  00001A                     	ds	1
   886  00001B                     ___lwmod@counter:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x1A
   890  00001B                     	ds	1
   891  00001C                     ?_printf:
   892                           	opt stack 0
   893  00001C                     ___lldiv@counter:
   894                           	opt stack 0
   895  00001C                     printf@f:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x1B
   899  00001C                     	ds	1
   900  00001D                     get_timeDif@h_ten:
   901                           	opt stack 0
   902  00001D                     I2C_Master_Init@c:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x1C
   906  00001D                     	ds	2
   907  00001F                     get_timeDif@h_one:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x1E
   911  00001F                     	ds	2
   912  000021                     ??_I2C_Master_Init:
   913  000021                     get_timeDif@m_ten:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x20
   917  000021                     	ds	2
   918  000023                     get_timeDif@m_one:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x22
   922  000023                     	ds	2
   923  000025                     get_timeDif@s_ten:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x24
   927  000025                     	ds	1
   928  000026                     ??_printf:
   929                           
   930                           ; 1 bytes @ 0x25
   931  000026                     	ds	1
   932  000027                     get_timeDif@s_one:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x26
   936  000027                     	ds	2
   937  000029                     get_timeDif@start_s:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x28
   941  000029                     	ds	1
   942  00002A                     printf@idx:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x29
   946  00002A                     	ds	1
   947  00002B                     printf@ap:
   948                           	opt stack 0
   949  00002B                     _get_timeDif$1738:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x2A
   953  00002B                     	ds	2
   954  00002D                     printf@prec:
   955                           	opt stack 0
   956  00002D                     _get_timeDif$1739:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x2C
   960  00002D                     	ds	1
   961  00002E                     printf@val:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x2D
   965  00002E                     	ds	2
   966  000030                     printf@flag:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x2F
   970  000030                     	ds	1
   971  000031                     printf@width:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x30
   975  000031                     	ds	2
   976  000033                     printf@c:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x32
   980  000033                     	ds	1
   981  000034                     ??_executingState:
   982  000034                     ??_finishState:
   983  000034                     ??_fixLCD:
   984  000034                     mainState@keypress:
   985                           	opt stack 0
   986  000034                     logState@keypress:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x33
   990  000034                     	ds	1
   991  000035                     fixLCD@i:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x34
   995  000035                     	ds	1
   996  000036                     finishState@keypress:
   997                           	opt stack 0
   998  000036                     logState@log:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x35
  1002  000036                     	ds	1
  1003  000037                     fixLCD@time:
  1004                           	opt stack 0
  1005                           
  1006                           ; 7 bytes @ 0x36
  1007  000037                     	ds	7
  1008  00003E                     fixLCD@j:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x3D
  1012  00003E                     	ds	2
  1013  000040                     fixLCD@i_599:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x3F
  1017  000040                     	ds	1
  1018  000041                     tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           
  1025                           ; 1 bytes @ 0x40
  1026 ;;
  1027 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1028 ;;
  1029 ;; *************** function _main *****************
  1030 ;; Defined at:
  1031 ;;		line 447 in file "main.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels required when called:    6
  1051 ;; This function calls:
  1052 ;;		_I2C_Master_Init
  1053 ;;		_debugState
  1054 ;;		_eeprom_initialize
  1055 ;;		_executingState
  1056 ;;		_finishState
  1057 ;;		_fixLCD
  1058 ;;		_initLCD
  1059 ;;		_lcdInst
  1060 ;;		_logState
  1061 ;;		_mainState
  1062 ;;		_printf
  1063 ;; This function is called by:
  1064 ;;		Startup code after reset
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text0
  1069  000E00                     __ptext0:
  1070                           	opt stack 0
  1071  000E00                     _main:
  1072                           	opt stack 25
  1073                           
  1074                           ;main.c: 450: fixLCD();
  1075                           
  1076                           ;incstack = 0
  1077  000E00  ECCA  F004         	call	_fixLCD	;wreg free
  1078                           
  1079                           ;main.c: 452: OSCCON = 0xF0;
  1080  000E04  0EF0               	movlw	240
  1081  000E06  6ED3               	movwf	4051,c	;volatile
  1082                           
  1083                           ;main.c: 458: TRISA = 0b00001111;
  1084  000E08  0E0F               	movlw	15
  1085  000E0A  6E92               	movwf	3986,c	;volatile
  1086                           
  1087                           ;main.c: 459: TRISB = 0b11110010;
  1088  000E0C  0EF2               	movlw	242
  1089  000E0E  6E93               	movwf	3987,c	;volatile
  1090                           
  1091                           ;main.c: 460: TRISC = 0b00011011;
  1092  000E10  0E1B               	movlw	27
  1093  000E12  6E94               	movwf	3988,c	;volatile
  1094                           
  1095                           ;main.c: 461: TRISD = 0x00;
  1096  000E14  0E00               	movlw	0
  1097  000E16  6E95               	movwf	3989,c	;volatile
  1098                           
  1099                           ;main.c: 462: TRISE = 0x00;
  1100  000E18  0E00               	movlw	0
  1101  000E1A  6E96               	movwf	3990,c	;volatile
  1102                           
  1103                           ;main.c: 464: LATA = 0x00;
  1104  000E1C  0E00               	movlw	0
  1105  000E1E  6E89               	movwf	3977,c	;volatile
  1106                           
  1107                           ;main.c: 465: LATB = 0x00;
  1108  000E20  0E00               	movlw	0
  1109  000E22  6E8A               	movwf	3978,c	;volatile
  1110                           
  1111                           ;main.c: 466: LATC = 0x00;
  1112  000E24  0E00               	movlw	0
  1113  000E26  6E8B               	movwf	3979,c	;volatile
  1114                           
  1115                           ;main.c: 467: LATD = 0x00;
  1116  000E28  0E00               	movlw	0
  1117  000E2A  6E8C               	movwf	3980,c	;volatile
  1118                           
  1119                           ;main.c: 468: LATE = 0x00;
  1120  000E2C  0E00               	movlw	0
  1121  000E2E  6E8D               	movwf	3981,c	;volatile
  1122                           
  1123                           ;main.c: 470: ADCON0 = 0x00;
  1124  000E30  0E00               	movlw	0
  1125  000E32  6EC2               	movwf	4034,c	;volatile
  1126                           
  1127                           ;main.c: 471: ADCON1 = 0x0F;
  1128  000E34  0E0F               	movlw	15
  1129  000E36  6EC1               	movwf	4033,c	;volatile
  1130                           
  1131                           ;main.c: 474: initLCD();
  1132  000E38  EC02  F00B         	call	_initLCD	;wreg free
  1133                           
  1134                           ;main.c: 475: I2C_Master_Init(10000);
  1135  000E3C  0E10               	movlw	16
  1136  000E3E  6E1D               	movwf	I2C_Master_Init@c,c
  1137  000E40  0E27               	movlw	39
  1138  000E42  6E1E               	movwf	I2C_Master_Init@c+1,c
  1139  000E44  0E00               	movlw	0
  1140  000E46  6E1F               	movwf	I2C_Master_Init@c+2,c
  1141  000E48  0E00               	movlw	0
  1142  000E4A  6E20               	movwf	I2C_Master_Init@c+3,c
  1143  000E4C  EC0D  F00A         	call	_I2C_Master_Init	;wreg free
  1144                           
  1145                           ;main.c: 477: eeprom_initialize();
  1146  000E50  EC5A  F00C         	call	_eeprom_initialize	;wreg free
  1147                           
  1148                           ;main.c: 478: INT1IE = 1;
  1149  000E54  86F0               	bsf	intcon3,3,c	;volatile
  1150                           
  1151                           ;main.c: 479: CMCON = 0x07;
  1152  000E56  0E07               	movlw	7
  1153  000E58  6EB4               	movwf	4020,c	;volatile
  1154                           
  1155                           ;main.c: 480: (INTCONbits.GIE = 0);
  1156  000E5A  9EF2               	bcf	intcon,7,c	;volatile
  1157                           
  1158                           ;main.c: 482: lcdInst(0b10000000);;
  1159  000E5C  0E80               	movlw	128
  1160  000E5E  ECC5  F00C         	call	_lcdInst
  1161                           
  1162                           ;main.c: 483: printf("                ");
  1163  000E62  0E43               	movlw	low STR_13
  1164  000E64  6E1C               	movwf	printf@f,c
  1165  000E66  0EFF               	movlw	high STR_13
  1166  000E68  6E1D               	movwf	printf@f+1,c
  1167  000E6A  EC44  F003         	call	_printf	;wreg free
  1168                           
  1169                           ;main.c: 484: lcdInst(0b11000000);;
  1170  000E6E  0EC0               	movlw	192
  1171  000E70  ECC5  F00C         	call	_lcdInst
  1172                           
  1173                           ;main.c: 485: printf("                ");
  1174  000E74  0E43               	movlw	low STR_13
  1175  000E76  6E1C               	movwf	printf@f,c
  1176  000E78  0EFF               	movlw	high STR_13
  1177  000E7A  6E1D               	movwf	printf@f+1,c
  1178  000E7C  EC44  F003         	call	_printf	;wreg free
  1179                           
  1180                           ;main.c: 486: lcdInst(0b11000000);;
  1181  000E80  0EC0               	movlw	192
  1182  000E82  ECC5  F00C         	call	_lcdInst
  1183                           
  1184                           ;main.c: 488: state = MAIN;
  1185  000E86  0E00               	movlw	0
  1186  000E88  6E4B               	movwf	_state,c
  1187                           
  1188                           ;main.c: 494: {
  1189                           ;main.c: 495: switch (state)
  1190                           
  1191                           ;main.c: 493: while (1)
  1192  000E8A  D00E               	goto	l4616
  1193  000E8C                     l4604:
  1194                           
  1195                           ;main.c: 498: mainState();
  1196  000E8C  ECBA  F00A         	call	_mainState	;wreg free
  1197                           
  1198                           ;main.c: 499: break;
  1199  000E90  D00B               	goto	l4616
  1200  000E92                     l4606:
  1201                           
  1202                           ;main.c: 501: executingState();
  1203  000E92  EC09  F000         	call	_executingState	;wreg free
  1204                           
  1205                           ;main.c: 502: break;
  1206  000E96  D008               	goto	l4616
  1207  000E98                     l4608:
  1208                           
  1209                           ;main.c: 504: finishState();
  1210  000E98  EC85  F00B         	call	_finishState	;wreg free
  1211                           
  1212                           ;main.c: 505: break;
  1213  000E9C  D005               	goto	l4616
  1214  000E9E                     l4610:
  1215                           
  1216                           ;main.c: 507: logState();
  1217  000E9E  EC25  F009         	call	_logState	;wreg free
  1218                           
  1219                           ;main.c: 508: break;
  1220  000EA2  D002               	goto	l4616
  1221  000EA4                     l4612:
  1222                           
  1223                           ;main.c: 510: debugState();
  1224  000EA4  ECD8  F00C         	call	_debugState	;wreg free
  1225  000EA8                     l4616:
  1226  000EA8  504B               	movf	_state,w,c
  1227                           
  1228                           ; Switch size 1, requested type "space"
  1229                           ; Number of cases is 5, Range of values is 0 to 5
  1230                           ; switch strategies available:
  1231                           ; Name         Instructions Cycles
  1232                           ; simple_byte           16     9 (average)
  1233                           ;	Chosen strategy is simple_byte
  1234  000EAA  0A00               	xorlw	0	; case 0
  1235  000EAC  B4D8               	btfsc	status,2,c
  1236  000EAE  D7EE               	goto	l4604
  1237  000EB0  0A01               	xorlw	1	; case 1
  1238  000EB2  B4D8               	btfsc	status,2,c
  1239  000EB4  D7EE               	goto	l4606
  1240  000EB6  0A03               	xorlw	3	; case 2
  1241  000EB8  B4D8               	btfsc	status,2,c
  1242  000EBA  D7EE               	goto	l4608
  1243  000EBC  0A01               	xorlw	1	; case 3
  1244  000EBE  B4D8               	btfsc	status,2,c
  1245  000EC0  D7EE               	goto	l4610
  1246  000EC2  0A06               	xorlw	6	; case 5
  1247  000EC4  B4D8               	btfsc	status,2,c
  1248  000EC6  D7EE               	goto	l4612
  1249  000EC8  D7EF               	goto	l4616
  1250  000ECA                     __end_of_main:
  1251                           	opt stack 0
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           intcon	equ	0xFF2
  1257                           intcon3	equ	0xFF0
  1258                           postinc0	equ	0xFEE
  1259                           wreg	equ	0xFE8
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function _mainState *****************
  1263 ;; Defined at:
  1264 ;;		line 123 in file "main.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  keypress        2   51[COMRAM] int 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;Total ram usage:        2 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    5
  1285 ;; This function calls:
  1286 ;;		_get_time
  1287 ;;		_readKey
  1288 ;;		_update_lcd
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text1
  1295  001574                     __ptext1:
  1296                           	opt stack 0
  1297  001574                     _mainState:
  1298                           	opt stack 25
  1299                           
  1300                           ;main.c: 125: LATBbits.LATB0 = 0;
  1301                           
  1302                           ;incstack = 0
  1303  001574  908A               	bcf	3978,0,c	;volatile
  1304                           
  1305                           ;main.c: 126: LATCbits.LATC6 = 0;
  1306  001576  9C8B               	bcf	3979,6,c	;volatile
  1307  001578                     l4180:
  1308                           
  1309                           ;main.c: 128: {
  1310                           ;main.c: 130: get_time(time);
  1311  001578  0EBC               	movlw	low _time
  1312  00157A  6E13               	movwf	get_time@time,c
  1313  00157C  0E00               	movlw	high _time
  1314  00157E  6E14               	movwf	get_time@time+1,c
  1315  001580  ECE2  F008         	call	_get_time	;wreg free
  1316                           
  1317                           ;main.c: 131: update_lcd();
  1318  001584  ECA3  F005         	call	_update_lcd	;wreg free
  1319                           
  1320                           ;main.c: 133: int keypress = readKey();
  1321  001588  ECDE  F00A         	call	_readKey	;wreg free
  1322  00158C  C010  F034         	movff	?_readKey,mainState@keypress
  1323  001590  C011  F035         	movff	?_readKey+1,mainState@keypress+1
  1324                           
  1325                           ;main.c: 134: if(keypress == 0b0000){
  1326  001594  5034               	movf	mainState@keypress,w,c
  1327  001596  1035               	iorwf	mainState@keypress+1,w,c
  1328  001598  A4D8               	btfss	status,2,c
  1329  00159A  D003               	goto	l4194
  1330                           
  1331                           ;main.c: 140: state = EXECUTING;
  1332  00159C  0E01               	movlw	1
  1333  00159E                     L1:
  1334  00159E  6E4B               	movwf	_state,c
  1335                           
  1336                           ;main.c: 141: return;
  1337  0015A0  0012               	return	
  1338  0015A2                     l4194:
  1339  0015A2  0434               	decf	mainState@keypress,w,c
  1340  0015A4  1035               	iorwf	mainState@keypress+1,w,c
  1341  0015A6  A4D8               	btfss	status,2,c
  1342  0015A8  D002               	goto	l4202
  1343                           
  1344                           ;main.c: 144: state = LOG;
  1345  0015AA  0E03               	movlw	3
  1346  0015AC  D7F8               	goto	L1
  1347  0015AE                     l4202:
  1348  0015AE  0E03               	movlw	3
  1349  0015B0  1834               	xorwf	mainState@keypress,w,c
  1350  0015B2  1035               	iorwf	mainState@keypress+1,w,c
  1351  0015B4  A4D8               	btfss	status,2,c
  1352  0015B6  D7E0               	goto	l4180
  1353                           
  1354                           ;main.c: 147: state = DEBUG;
  1355  0015B8  0E05               	movlw	5
  1356  0015BA  D7F1               	goto	L1
  1357  0015BC                     __end_of_mainState:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           intcon	equ	0xFF2
  1364                           intcon3	equ	0xFF0
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           status	equ	0xFD8
  1368                           
  1369 ;; *************** function _logState *****************
  1370 ;; Defined at:
  1371 ;;		line 354 in file "main.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  keypress        2   51[COMRAM] int 
  1376 ;;  log             2   53[COMRAM] int 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;Total ram usage:        4 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    5
  1393 ;; This function calls:
  1394 ;;		_eeprom_GetLog
  1395 ;;		_readKey
  1396 ;;		_update_lcd
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text2
  1403  00124A                     __ptext2:
  1404                           	opt stack 0
  1405  00124A                     _logState:
  1406                           	opt stack 25
  1407                           
  1408                           ;main.c: 356: int log = 0;
  1409                           
  1410                           ;incstack = 0
  1411  00124A  0E00               	movlw	0
  1412  00124C  6E37               	movwf	logState@log+1,c
  1413  00124E  0E00               	movlw	0
  1414  001250  6E36               	movwf	logState@log,c
  1415                           
  1416                           ;main.c: 357: eeprom_GetLog(log, &logdata);
  1417  001252  C036  F012         	movff	logState@log,eeprom_GetLog@back
  1418  001256  C037  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1419  00125A  0E4C               	movlw	low _logdata
  1420  00125C  6E14               	movwf	eeprom_GetLog@res,c
  1421  00125E  0E00               	movlw	high _logdata
  1422  001260  6E15               	movwf	eeprom_GetLog@res+1,c
  1423  001262  ECE0  F009         	call	_eeprom_GetLog	;wreg free
  1424                           
  1425                           ;main.c: 358: update_lcd();
  1426  001266  ECA3  F005         	call	_update_lcd	;wreg free
  1427  00126A                     l4464:
  1428                           
  1429                           ;main.c: 360: int keypress = readKey();
  1430  00126A  ECDE  F00A         	call	_readKey	;wreg free
  1431  00126E  C010  F034         	movff	?_readKey,logState@keypress
  1432  001272  C011  F035         	movff	?_readKey+1,logState@keypress+1
  1433                           
  1434                           ;main.c: 361: if(keypress == 0b0000){
  1435  001276  5034               	movf	logState@keypress,w,c
  1436  001278  1035               	iorwf	logState@keypress+1,w,c
  1437  00127A  A4D8               	btfss	status,2,c
  1438  00127C  D01F               	goto	l4480
  1439                           
  1440                           ;main.c: 362: log++;
  1441  00127E  4A36               	infsnz	logState@log,f,c
  1442  001280  2A37               	incf	logState@log+1,f,c
  1443                           
  1444                           ;main.c: 363: eeprom_GetLog(log, &logdata);
  1445  001282  C036  F012         	movff	logState@log,eeprom_GetLog@back
  1446  001286  C037  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1447  00128A  0E4C               	movlw	low _logdata
  1448  00128C  6E14               	movwf	eeprom_GetLog@res,c
  1449  00128E  0E00               	movlw	high _logdata
  1450  001290  6E15               	movwf	eeprom_GetLog@res+1,c
  1451  001292  ECE0  F009         	call	_eeprom_GetLog	;wreg free
  1452                           
  1453                           ;main.c: 364: if(logdata[0] == 255){
  1454  001296  284C               	incf	_logdata,w,c
  1455  001298  A4D8               	btfss	status,2,c
  1456  00129A  D00D               	goto	l4478
  1457                           
  1458                           ;main.c: 365: log--;
  1459  00129C  0636               	decf	logState@log,f,c
  1460  00129E  A0D8               	btfss	status,0,c
  1461  0012A0  0637               	decf	logState@log+1,f,c
  1462                           
  1463                           ;main.c: 366: eeprom_GetLog(log, &logdata);
  1464  0012A2  C036  F012         	movff	logState@log,eeprom_GetLog@back
  1465  0012A6  C037  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1466  0012AA  0E4C               	movlw	low _logdata
  1467  0012AC  6E14               	movwf	eeprom_GetLog@res,c
  1468  0012AE  0E00               	movlw	high _logdata
  1469  0012B0  6E15               	movwf	eeprom_GetLog@res+1,c
  1470  0012B2  ECE0  F009         	call	_eeprom_GetLog	;wreg free
  1471  0012B6                     l4478:
  1472                           
  1473                           ;main.c: 367: }
  1474                           ;main.c: 368: update_lcd();
  1475  0012B6  ECA3  F005         	call	_update_lcd	;wreg free
  1476                           
  1477                           ;main.c: 369: }else if(keypress == 0b1101){
  1478  0012BA  D7D7               	goto	l4464
  1479  0012BC                     l4480:
  1480  0012BC  0E0D               	movlw	13
  1481  0012BE  1834               	xorwf	logState@keypress,w,c
  1482  0012C0  1035               	iorwf	logState@keypress+1,w,c
  1483  0012C2  A4D8               	btfss	status,2,c
  1484  0012C4  D7D2               	goto	l4464
  1485                           
  1486                           ;main.c: 370: state = MAIN;
  1487  0012C6  0E00               	movlw	0
  1488  0012C8  6E4B               	movwf	_state,c
  1489                           
  1490                           ;main.c: 371: break;
  1491  0012CA  0012               	return	
  1492  0012CC                     __end_of_logState:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           intcon	equ	0xFF2
  1499                           intcon3	equ	0xFF0
  1500                           postinc0	equ	0xFEE
  1501                           wreg	equ	0xFE8
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _eeprom_GetLog *****************
  1505 ;; Defined at:
  1506 ;;		line 90 in file "eeprom.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  back            2   17[COMRAM] int 
  1509 ;;  res             2   19[COMRAM] PTR unsigned char 
  1510 ;;		 -> logdata(4), 
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  i               2   22[COMRAM] int 
  1513 ;;  address         1   21[COMRAM] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:        7 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    3
  1530 ;; This function calls:
  1531 ;;		_eeprom_ReadByte
  1532 ;;		_newestAddress
  1533 ;; This function is called by:
  1534 ;;		_logState
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text3
  1539  0013C0                     __ptext3:
  1540                           	opt stack 0
  1541  0013C0                     _eeprom_GetLog:
  1542                           	opt stack 26
  1543                           
  1544                           ;eeprom.c: 91: uint8_t address = newestAddress();
  1545                           
  1546                           ;incstack = 0
  1547  0013C0  ECB8  F00C         	call	_newestAddress	;wreg free
  1548  0013C4  6E16               	movwf	eeprom_GetLog@address,c
  1549                           
  1550                           ;eeprom.c: 92: address = address - (back*4);
  1551  0013C6  4412               	rlncf	eeprom_GetLog@back,w,c
  1552  0013C8  46E8               	rlncf	wreg,f,c
  1553  0013CA  0BFC               	andlw	252
  1554  0013CC  0800               	sublw	0
  1555  0013CE  2416               	addwf	eeprom_GetLog@address,w,c
  1556  0013D0  6E16               	movwf	eeprom_GetLog@address,c
  1557                           
  1558                           ;eeprom.c: 93: if(address == 0){
  1559  0013D2  5016               	movf	eeprom_GetLog@address,w,c
  1560  0013D4  A4D8               	btfss	status,2,c
  1561  0013D6  D002               	goto	l359
  1562                           
  1563                           ;eeprom.c: 94: address = 4;
  1564  0013D8  0E04               	movlw	4
  1565  0013DA  6E16               	movwf	eeprom_GetLog@address,c
  1566  0013DC                     l359:
  1567                           
  1568                           ;eeprom.c: 95: }
  1569                           ;eeprom.c: 96: for(int i = 0; i < 4; i++){
  1570  0013DC  0E00               	movlw	0
  1571  0013DE  6E18               	movwf	eeprom_GetLog@i+1,c
  1572  0013E0  0E00               	movlw	0
  1573  0013E2  6E17               	movwf	eeprom_GetLog@i,c
  1574  0013E4                     l4168:
  1575  0013E4  BE18               	btfsc	eeprom_GetLog@i+1,7,c
  1576  0013E6  D006               	goto	l4172
  1577  0013E8  5018               	movf	eeprom_GetLog@i+1,w,c
  1578  0013EA  E116               	bnz	l362
  1579  0013EC  0E04               	movlw	4
  1580  0013EE  5C17               	subwf	eeprom_GetLog@i,w,c
  1581  0013F0  B0D8               	btfsc	status,0,c
  1582  0013F2  0012               	return	
  1583  0013F4                     l4172:
  1584                           
  1585                           ;eeprom.c: 97: res[i] = eeprom_ReadByte(address + i);
  1586  0013F4  5017               	movf	eeprom_GetLog@i,w,c
  1587  0013F6  2414               	addwf	eeprom_GetLog@res,w,c
  1588  0013F8  6ED9               	movwf	fsr2l,c
  1589  0013FA  5018               	movf	eeprom_GetLog@i+1,w,c
  1590  0013FC  2015               	addwfc	eeprom_GetLog@res+1,w,c
  1591  0013FE  6EDA               	movwf	fsr2h,c
  1592  001400  5016               	movf	eeprom_GetLog@address,w,c
  1593  001402  2417               	addwf	eeprom_GetLog@i,w,c
  1594  001404  6E10               	movwf	eeprom_ReadByte@address,c
  1595  001406  0E00               	movlw	0
  1596  001408  2018               	addwfc	eeprom_GetLog@i+1,w,c
  1597  00140A  6E11               	movwf	eeprom_ReadByte@address+1,c
  1598  00140C  ECA4  F00C         	call	_eeprom_ReadByte	;wreg free
  1599  001410  6EDF               	movwf	indf2,c
  1600  001412  4A17               	infsnz	eeprom_GetLog@i,f,c
  1601  001414  2A18               	incf	eeprom_GetLog@i+1,f,c
  1602  001416  D7E6               	goto	l4168
  1603  001418                     l362:
  1604  001418  0012               	return		;funcret
  1605  00141A                     __end_of_eeprom_GetLog:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           intcon	equ	0xFF2
  1612                           intcon3	equ	0xFF0
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           indf2	equ	0xFDF
  1616                           fsr2h	equ	0xFDA
  1617                           fsr2l	equ	0xFD9
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _fixLCD *****************
  1621 ;; Defined at:
  1622 ;;		line 380 in file "main.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;		None
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  i               1   63[COMRAM] unsigned char 
  1627 ;;  time            7   54[COMRAM] unsigned char [7]
  1628 ;;  j               2   61[COMRAM] int 
  1629 ;;  i               2   52[COMRAM] int 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;Total ram usage:       13 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    4
  1646 ;; This function calls:
  1647 ;;		_I2C_Master_Init
  1648 ;;		_I2C_Master_Read
  1649 ;;		_I2C_Master_Start
  1650 ;;		_I2C_Master_Stop
  1651 ;;		_I2C_Master_Write
  1652 ;;		_initLCD
  1653 ;;		_lcdInst
  1654 ;;		_printf
  1655 ;; This function is called by:
  1656 ;;		_main
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text4
  1661  000994                     __ptext4:
  1662                           	opt stack 0
  1663  000994                     _fixLCD:
  1664                           	opt stack 26
  1665                           
  1666                           ;main.c: 382: OSCCON = 0xF0;
  1667                           
  1668                           ;incstack = 0
  1669  000994  0EF0               	movlw	240
  1670  000996  6ED3               	movwf	4051,c	;volatile
  1671                           
  1672                           ;main.c: 386: TRISA = 0x00;
  1673  000998  0E00               	movlw	0
  1674  00099A  6E92               	movwf	3986,c	;volatile
  1675                           
  1676                           ;main.c: 387: TRISB = 0b11110010;
  1677  00099C  0EF2               	movlw	242
  1678  00099E  6E93               	movwf	3987,c	;volatile
  1679                           
  1680                           ;main.c: 388: TRISC = 0x00011000;
  1681  0009A0  0E00               	movlw	0
  1682  0009A2  6E94               	movwf	3988,c	;volatile
  1683                           
  1684                           ;main.c: 389: TRISD = 0x00;
  1685  0009A4  0E00               	movlw	0
  1686  0009A6  6E95               	movwf	3989,c	;volatile
  1687                           
  1688                           ;main.c: 390: TRISE = 0x00;
  1689  0009A8  0E00               	movlw	0
  1690  0009AA  6E96               	movwf	3990,c	;volatile
  1691                           
  1692                           ;main.c: 391: LATA = 0x00;
  1693  0009AC  0E00               	movlw	0
  1694  0009AE  6E89               	movwf	3977,c	;volatile
  1695                           
  1696                           ;main.c: 392: LATB = 0x00;
  1697  0009B0  0E00               	movlw	0
  1698  0009B2  6E8A               	movwf	3978,c	;volatile
  1699                           
  1700                           ;main.c: 393: LATC = 0x00;
  1701  0009B4  0E00               	movlw	0
  1702  0009B6  6E8B               	movwf	3979,c	;volatile
  1703                           
  1704                           ;main.c: 394: LATD = 0x00;
  1705  0009B8  0E00               	movlw	0
  1706  0009BA  6E8C               	movwf	3980,c	;volatile
  1707                           
  1708                           ;main.c: 395: LATE = 0x00;
  1709  0009BC  0E00               	movlw	0
  1710  0009BE  6E8D               	movwf	3981,c	;volatile
  1711                           
  1712                           ;main.c: 396: ADCON0 = 0x00;
  1713  0009C0  0E00               	movlw	0
  1714  0009C2  6EC2               	movwf	4034,c	;volatile
  1715                           
  1716                           ;main.c: 397: ADCON1 = 0x00;
  1717  0009C4  0E00               	movlw	0
  1718  0009C6  6EC1               	movwf	4033,c	;volatile
  1719                           
  1720                           ;main.c: 399: initLCD();
  1721  0009C8  EC02  F00B         	call	_initLCD	;wreg free
  1722                           
  1723                           ;main.c: 400: I2C_Master_Init(10000);
  1724  0009CC  0E10               	movlw	16
  1725  0009CE  6E1D               	movwf	I2C_Master_Init@c,c
  1726  0009D0  0E27               	movlw	39
  1727  0009D2  6E1E               	movwf	I2C_Master_Init@c+1,c
  1728  0009D4  0E00               	movlw	0
  1729  0009D6  6E1F               	movwf	I2C_Master_Init@c+2,c
  1730  0009D8  0E00               	movlw	0
  1731  0009DA  6E20               	movwf	I2C_Master_Init@c+3,c
  1732  0009DC  EC0D  F00A         	call	_I2C_Master_Init	;wreg free
  1733                           
  1734                           ;main.c: 401: (INTCONbits.GIE = 0);
  1735  0009E0  9EF2               	bcf	intcon,7,c	;volatile
  1736                           
  1737                           ;main.c: 402: unsigned char time[7];
  1738                           ;main.c: 404: LATA = 0b01010101;
  1739  0009E2  0E55               	movlw	85
  1740  0009E4  6E89               	movwf	3977,c	;volatile
  1741                           
  1742                           ;main.c: 405: LATB = 0b01010101;
  1743  0009E6  0E55               	movlw	85
  1744  0009E8  6E8A               	movwf	3978,c	;volatile
  1745                           
  1746                           ;main.c: 406: LATC = 0b01010101;
  1747  0009EA  0E55               	movlw	85
  1748  0009EC  6E8B               	movwf	3979,c	;volatile
  1749                           
  1750                           ;main.c: 407: LATDbits.LATD0 = 1;
  1751  0009EE  808C               	bsf	3980,0,c	;volatile
  1752                           
  1753                           ;main.c: 408: LATDbits.LATD1 = 0;
  1754  0009F0  928C               	bcf	3980,1,c	;volatile
  1755                           
  1756                           ;main.c: 409: LATEbits.LATE0 = 1;
  1757  0009F2  808D               	bsf	3981,0,c	;volatile
  1758                           
  1759                           ;main.c: 410: LATEbits.LATE1 = 0;
  1760  0009F4  928D               	bcf	3981,1,c	;volatile
  1761                           
  1762                           ;main.c: 411: int i = 0;
  1763  0009F6  0E00               	movlw	0
  1764  0009F8  6E36               	movwf	fixLCD@i+1,c
  1765  0009FA  0E00               	movlw	0
  1766  0009FC  6E35               	movwf	fixLCD@i,c
  1767                           
  1768                           ;main.c: 412: int j = 0;
  1769  0009FE  0E00               	movlw	0
  1770  000A00  6E3F               	movwf	fixLCD@j+1,c
  1771  000A02  0E00               	movlw	0
  1772  000A04  6E3E               	movwf	fixLCD@j,c
  1773                           
  1774                           ;main.c: 413: while(j < 10){
  1775  000A06  D095               	goto	l4542
  1776  000A08                     l4500:
  1777                           
  1778                           ;main.c: 415: I2C_Master_Start();
  1779  000A08  ECD4  F00C         	call	_I2C_Master_Start	;wreg free
  1780                           
  1781                           ;main.c: 416: I2C_Master_Write(0b11010000);
  1782  000A0C  0E00               	movlw	0
  1783  000A0E  6E12               	movwf	I2C_Master_Write@d+1,c
  1784  000A10  0ED0               	movlw	208
  1785  000A12  6E11               	movwf	I2C_Master_Write@d,c
  1786  000A14  ECCB  F00C         	call	_I2C_Master_Write	;wreg free
  1787                           
  1788                           ;main.c: 417: I2C_Master_Write(0x00);
  1789  000A18  0E00               	movlw	0
  1790  000A1A  6E12               	movwf	I2C_Master_Write@d+1,c
  1791  000A1C  0E00               	movlw	0
  1792  000A1E  6E11               	movwf	I2C_Master_Write@d,c
  1793  000A20  ECCB  F00C         	call	_I2C_Master_Write	;wreg free
  1794                           
  1795                           ;main.c: 418: I2C_Master_Stop();
  1796  000A24  ECD0  F00C         	call	_I2C_Master_Stop	;wreg free
  1797                           
  1798                           ;main.c: 421: I2C_Master_Start();
  1799  000A28  ECD4  F00C         	call	_I2C_Master_Start	;wreg free
  1800                           
  1801                           ;main.c: 422: I2C_Master_Write(0b11010001);
  1802  000A2C  0E00               	movlw	0
  1803  000A2E  6E12               	movwf	I2C_Master_Write@d+1,c
  1804  000A30  0ED1               	movlw	209
  1805  000A32  6E11               	movwf	I2C_Master_Write@d,c
  1806  000A34  ECCB  F00C         	call	_I2C_Master_Write	;wreg free
  1807                           
  1808                           ;main.c: 423: for(unsigned char i=0;i<0x06;i++){
  1809  000A38  0E00               	movlw	0
  1810  000A3A  6E40               	movwf	fixLCD@i_599,c
  1811  000A3C                     l4504:
  1812  000A3C  0E05               	movlw	5
  1813  000A3E  6440               	cpfsgt	fixLCD@i_599,c
  1814  000A40  D001               	goto	l4508
  1815  000A42  D00E               	goto	l4514
  1816  000A44                     l4508:
  1817                           
  1818                           ;main.c: 424: time[i] = I2C_Master_Read(1);
  1819  000A44  5040               	movf	fixLCD@i_599,w,c
  1820  000A46  0D01               	mullw	1
  1821  000A48  0E37               	movlw	low fixLCD@time
  1822  000A4A  24F3               	addwf	prodl,w,c
  1823  000A4C  6ED9               	movwf	fsr2l,c
  1824  000A4E  0E00               	movlw	high fixLCD@time
  1825  000A50  20F4               	addwfc	prodh,w,c
  1826  000A52  6EDA               	movwf	fsr2h,c
  1827  000A54  0E01               	movlw	1
  1828  000A56  EC12  F00C         	call	_I2C_Master_Read
  1829  000A5A  6EDF               	movwf	indf2,c
  1830  000A5C  2A40               	incf	fixLCD@i_599,f,c
  1831  000A5E  D7EE               	goto	l4504
  1832  000A60                     l4514:
  1833                           
  1834                           ;main.c: 425: }
  1835                           ;main.c: 426: time[6] = I2C_Master_Read(0);
  1836  000A60  0E00               	movlw	0
  1837  000A62  EC12  F00C         	call	_I2C_Master_Read
  1838  000A66  6E3D               	movwf	fixLCD@time+6,c
  1839                           
  1840                           ;main.c: 427: I2C_Master_Stop();
  1841  000A68  ECD0  F00C         	call	_I2C_Master_Stop	;wreg free
  1842                           
  1843                           ;main.c: 428: lcdInst(0b10000000);;
  1844  000A6C  0E80               	movlw	128
  1845  000A6E  ECC5  F00C         	call	_lcdInst
  1846                           
  1847                           ;main.c: 429: printf("%02x%02x/%02x ", time[6],time[5],time[4]);
  1848  000A72  0ED8               	movlw	low STR_17
  1849  000A74  6E1C               	movwf	printf@f,c
  1850  000A76  0EFF               	movlw	high STR_17
  1851  000A78  6E1D               	movwf	printf@f+1,c
  1852  000A7A  C03D  F01E         	movff	fixLCD@time+6,?_printf+2
  1853  000A7E  6A1F               	clrf	?_printf+3,c
  1854  000A80  C03C  F020         	movff	fixLCD@time+5,?_printf+4
  1855  000A84  6A21               	clrf	?_printf+5,c
  1856  000A86  C03B  F022         	movff	fixLCD@time+4,?_printf+6
  1857  000A8A  6A23               	clrf	?_printf+7,c
  1858  000A8C  EC44  F003         	call	_printf	;wreg free
  1859                           
  1860                           ;main.c: 430: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1861  000A90  0EE7               	movlw	low STR_2
  1862  000A92  6E1C               	movwf	printf@f,c
  1863  000A94  0EFF               	movlw	high STR_2
  1864  000A96  6E1D               	movwf	printf@f+1,c
  1865  000A98  C039  F01E         	movff	fixLCD@time+2,?_printf+2
  1866  000A9C  6A1F               	clrf	?_printf+3,c
  1867  000A9E  C038  F020         	movff	fixLCD@time+1,?_printf+4
  1868  000AA2  6A21               	clrf	?_printf+5,c
  1869  000AA4  C037  F022         	movff	fixLCD@time,?_printf+6
  1870  000AA8  6A23               	clrf	?_printf+7,c
  1871  000AAA  EC44  F003         	call	_printf	;wreg free
  1872                           
  1873                           ;main.c: 431: lcdInst(0b11000000);;
  1874  000AAE  0EC0               	movlw	192
  1875  000AB0  ECC5  F00C         	call	_lcdInst
  1876                           
  1877                           ;main.c: 432: printf("              ");
  1878  000AB4  0E45               	movlw	low (STR_13+2)
  1879  000AB6  6E1C               	movwf	printf@f,c
  1880  000AB8  0EFF               	movlw	high (STR_13+2)
  1881  000ABA  6E1D               	movwf	printf@f+1,c
  1882  000ABC  EC44  F003         	call	_printf	;wreg free
  1883                           
  1884                           ;main.c: 433: lcdInst(0b10000000);;
  1885  000AC0  0E80               	movlw	128
  1886  000AC2  ECC5  F00C         	call	_lcdInst
  1887                           
  1888                           ;main.c: 434: lcdInst(0b11000000);;
  1889  000AC6  0EC0               	movlw	192
  1890  000AC8  ECC5  F00C         	call	_lcdInst
  1891                           
  1892                           ;main.c: 436: LATA = LATA ^ 0xFF;
  1893  000ACC  1E89               	comf	3977,f,c	;volatile
  1894                           
  1895                           ;main.c: 437: LATB = LATB ^ 0xFF;
  1896  000ACE  1E8A               	comf	3978,f,c	;volatile
  1897                           
  1898                           ;main.c: 438: LATC = LATC ^ 0xFF;
  1899  000AD0  1E8B               	comf	3979,f,c	;volatile
  1900                           
  1901                           ;main.c: 439: LATDbits.LATD0 = !LATDbits.LATD0;
  1902  000AD2  B08C               	btfsc	3980,0,c	;volatile
  1903  000AD4  D003               	goto	u3480
  1904  000AD6  6A34               	clrf	??_fixLCD& (0+255),c
  1905  000AD8  2A34               	incf	??_fixLCD& (0+255),f,c
  1906  000ADA  D001               	goto	u3498
  1907  000ADC                     u3480:
  1908  000ADC  6A34               	clrf	??_fixLCD& (0+255),c
  1909  000ADE                     u3498:
  1910  000ADE  508C               	movf	3980,w,c	;volatile
  1911  000AE0  1834               	xorwf	??_fixLCD,w,c
  1912  000AE2  0BFE               	andlw	-2
  1913  000AE4  1834               	xorwf	??_fixLCD,w,c
  1914  000AE6  6E8C               	movwf	3980,c	;volatile
  1915                           
  1916                           ;main.c: 440: LATDbits.LATD1 = !LATDbits.LATD1;
  1917  000AE8  B28C               	btfsc	3980,1,c	;volatile
  1918  000AEA  D003               	goto	u3500
  1919  000AEC  6A34               	clrf	??_fixLCD& (0+255),c
  1920  000AEE  2A34               	incf	??_fixLCD& (0+255),f,c
  1921  000AF0  D001               	goto	u3518
  1922  000AF2                     u3500:
  1923  000AF2  6A34               	clrf	??_fixLCD& (0+255),c
  1924  000AF4                     u3518:
  1925  000AF4  4634               	rlncf	??_fixLCD,f,c
  1926  000AF6  508C               	movf	3980,w,c	;volatile
  1927  000AF8  1834               	xorwf	??_fixLCD,w,c
  1928  000AFA  0BFD               	andlw	-3
  1929  000AFC  1834               	xorwf	??_fixLCD,w,c
  1930  000AFE  6E8C               	movwf	3980,c	;volatile
  1931                           
  1932                           ;main.c: 441: LATEbits.LATE0 = !LATEbits.LATE0;
  1933  000B00  B08D               	btfsc	3981,0,c	;volatile
  1934  000B02  D003               	goto	u3520
  1935  000B04  6A34               	clrf	??_fixLCD& (0+255),c
  1936  000B06  2A34               	incf	??_fixLCD& (0+255),f,c
  1937  000B08  D001               	goto	u3538
  1938  000B0A                     u3520:
  1939  000B0A  6A34               	clrf	??_fixLCD& (0+255),c
  1940  000B0C                     u3538:
  1941  000B0C  508D               	movf	3981,w,c	;volatile
  1942  000B0E  1834               	xorwf	??_fixLCD,w,c
  1943  000B10  0BFE               	andlw	-2
  1944  000B12  1834               	xorwf	??_fixLCD,w,c
  1945  000B14  6E8D               	movwf	3981,c	;volatile
  1946                           
  1947                           ;main.c: 442: LATEbits.LATE1 = !LATEbits.LATE1;
  1948  000B16  B28D               	btfsc	3981,1,c	;volatile
  1949  000B18  D003               	goto	u3540
  1950  000B1A  6A34               	clrf	??_fixLCD& (0+255),c
  1951  000B1C  2A34               	incf	??_fixLCD& (0+255),f,c
  1952  000B1E  D001               	goto	u3558
  1953  000B20                     u3540:
  1954  000B20  6A34               	clrf	??_fixLCD& (0+255),c
  1955  000B22                     u3558:
  1956  000B22  4634               	rlncf	??_fixLCD,f,c
  1957  000B24  508D               	movf	3981,w,c	;volatile
  1958  000B26  1834               	xorwf	??_fixLCD,w,c
  1959  000B28  0BFD               	andlw	-3
  1960  000B2A  1834               	xorwf	??_fixLCD,w,c
  1961  000B2C  6E8D               	movwf	3981,c	;volatile
  1962                           
  1963                           ;main.c: 443: j++;
  1964  000B2E  4A3E               	infsnz	fixLCD@j,f,c
  1965  000B30  2A3F               	incf	fixLCD@j+1,f,c
  1966  000B32                     l4542:
  1967  000B32  BE3F               	btfsc	fixLCD@j+1,7,c
  1968  000B34  D769               	goto	l4500
  1969  000B36  503F               	movf	fixLCD@j+1,w,c
  1970  000B38  E105               	bnz	l299
  1971  000B3A  0E0A               	movlw	10
  1972  000B3C  5C3E               	subwf	fixLCD@j,w,c
  1973  000B3E  B0D8               	btfsc	status,0,c
  1974  000B40  0012               	return	
  1975  000B42  D762               	goto	l4500
  1976  000B44                     l299:
  1977  000B44  0012               	return		;funcret
  1978  000B46                     __end_of_fixLCD:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           prodh	equ	0xFF4
  1985                           prodl	equ	0xFF3
  1986                           intcon	equ	0xFF2
  1987                           intcon3	equ	0xFF0
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           indf2	equ	0xFDF
  1991                           fsr2h	equ	0xFDA
  1992                           fsr2l	equ	0xFD9
  1993                           status	equ	0xFD8
  1994                           
  1995 ;; *************** function _initLCD *****************
  1996 ;; Defined at:
  1997 ;;		line 15 in file "lcd.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:        1 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    3
  2018 ;; This function calls:
  2019 ;;		_lcdInst
  2020 ;; This function is called by:
  2021 ;;		_fixLCD
  2022 ;;		_main
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text5
  2027  001604                     __ptext5:
  2028                           	opt stack 0
  2029  001604                     _initLCD:
  2030                           	opt stack 27
  2031                           
  2032                           ;lcd.c: 16: _delay((unsigned long)((15)*(10000000/4000.0)));
  2033                           
  2034                           ;incstack = 0
  2035  001604  0E31               	movlw	49
  2036  001606  6E13               	movwf	??_initLCD& (0+255),c
  2037  001608  0EB2               	movlw	178
  2038  00160A                     u3607:
  2039  00160A  2EE8               	decfsz	wreg,f,c
  2040  00160C  D7FE               	bra	u3607
  2041  00160E  2E13               	decfsz	??_initLCD& (0+255),f,c
  2042  001610  D7FC               	bra	u3607
  2043  001612  D000               	nop2	
  2044                           
  2045                           ;lcd.c: 17: lcdInst(0b00110011);
  2046  001614  0E33               	movlw	51
  2047  001616  ECC5  F00C         	call	_lcdInst
  2048                           
  2049                           ;lcd.c: 18: lcdInst(0b00110010);
  2050  00161A  0E32               	movlw	50
  2051  00161C  ECC5  F00C         	call	_lcdInst
  2052                           
  2053                           ;lcd.c: 19: lcdInst(0b00101000);
  2054  001620  0E28               	movlw	40
  2055  001622  ECC5  F00C         	call	_lcdInst
  2056                           
  2057                           ;lcd.c: 20: lcdInst(0b00001111);
  2058  001626  0E0F               	movlw	15
  2059  001628  ECC5  F00C         	call	_lcdInst
  2060                           
  2061                           ;lcd.c: 21: lcdInst(0b00000110);
  2062  00162C  0E06               	movlw	6
  2063  00162E  ECC5  F00C         	call	_lcdInst
  2064                           
  2065                           ;lcd.c: 22: lcdInst(0b00000001);
  2066  001632  0E01               	movlw	1
  2067  001634  ECC5  F00C         	call	_lcdInst
  2068                           
  2069                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2070  001638  0E31               	movlw	49
  2071  00163A  6E13               	movwf	??_initLCD& (0+255),c
  2072  00163C  0EB2               	movlw	178
  2073  00163E                     u3617:
  2074  00163E  2EE8               	decfsz	wreg,f,c
  2075  001640  D7FE               	bra	u3617
  2076  001642  2E13               	decfsz	??_initLCD& (0+255),f,c
  2077  001644  D7FC               	bra	u3617
  2078  001646  D000               	nop2	
  2079  001648  0012               	return		;funcret
  2080  00164A                     __end_of_initLCD:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           tblptrh	equ	0xFF7
  2084                           tblptrl	equ	0xFF6
  2085                           tablat	equ	0xFF5
  2086                           prodh	equ	0xFF4
  2087                           prodl	equ	0xFF3
  2088                           intcon	equ	0xFF2
  2089                           intcon3	equ	0xFF0
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           indf2	equ	0xFDF
  2093                           fsr2h	equ	0xFDA
  2094                           fsr2l	equ	0xFD9
  2095                           status	equ	0xFD8
  2096                           
  2097 ;; *************** function _I2C_Master_Init *****************
  2098 ;; Defined at:
  2099 ;;		line 13 in file "I2C.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  c               4   28[COMRAM] const unsigned long 
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2113 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;Total ram usage:        8 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    2
  2120 ;; This function calls:
  2121 ;;		___lldiv
  2122 ;; This function is called by:
  2123 ;;		_fixLCD
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text6
  2129  00141A                     __ptext6:
  2130                           	opt stack 0
  2131  00141A                     _I2C_Master_Init:
  2132                           	opt stack 27
  2133                           
  2134                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  2135                           
  2136                           ;incstack = 0
  2137  00141A  0E00               	movlw	0
  2138  00141C  6EC7               	movwf	4039,c	;volatile
  2139                           
  2140                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  2141  00141E  0E28               	movlw	40
  2142  001420  6EC6               	movwf	4038,c	;volatile
  2143                           
  2144                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  2145  001422  0E00               	movlw	0
  2146  001424  6EC5               	movwf	4037,c	;volatile
  2147                           
  2148                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  2149  001426  0E80               	movlw	128
  2150  001428  6E10               	movwf	___lldiv@dividend,c
  2151  00142A  0E96               	movlw	150
  2152  00142C  6E11               	movwf	___lldiv@dividend+1,c
  2153  00142E  0E98               	movlw	152
  2154  001430  6E12               	movwf	___lldiv@dividend+2,c
  2155  001432  0E00               	movlw	0
  2156  001434  6E13               	movwf	___lldiv@dividend+3,c
  2157  001436  C01D  F021         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2158  00143A  C01E  F022         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2159  00143E  C01F  F023         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2160  001442  C020  F024         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2161  001446  0E02               	movlw	2
  2162  001448                     u1755:
  2163  001448  90D8               	bcf	status,0,c
  2164  00144A  3621               	rlcf	??_I2C_Master_Init,f,c
  2165  00144C  3622               	rlcf	??_I2C_Master_Init+1,f,c
  2166  00144E  3623               	rlcf	??_I2C_Master_Init+2,f,c
  2167  001450  3624               	rlcf	??_I2C_Master_Init+3,f,c
  2168  001452  2EE8               	decfsz	wreg,f,c
  2169  001454  D7F9               	goto	u1755
  2170  001456  C021  F014         	movff	??_I2C_Master_Init,___lldiv@divisor
  2171  00145A  C022  F015         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2172  00145E  C023  F016         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2173  001462  C024  F017         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2174  001466  EC66  F009         	call	___lldiv	;wreg free
  2175  00146A  0410               	decf	?___lldiv,w,c
  2176  00146C  6EC8               	movwf	4040,c	;volatile
  2177                           
  2178                           ;I2C.c: 20: TRISC3 = 1;
  2179  00146E  8694               	bsf	3988,3,c	;volatile
  2180                           
  2181                           ;I2C.c: 21: TRISC4 = 1;
  2182  001470  8894               	bsf	3988,4,c	;volatile
  2183  001472  0012               	return		;funcret
  2184  001474                     __end_of_I2C_Master_Init:
  2185                           	opt stack 0
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           prodh	equ	0xFF4
  2191                           prodl	equ	0xFF3
  2192                           intcon	equ	0xFF2
  2193                           intcon3	equ	0xFF0
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           indf2	equ	0xFDF
  2197                           fsr2h	equ	0xFDA
  2198                           fsr2l	equ	0xFD9
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function ___lldiv *****************
  2202 ;; Defined at:
  2203 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  dividend        4   15[COMRAM] unsigned long 
  2206 ;;  divisor         4   19[COMRAM] unsigned long 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  quotient        4   23[COMRAM] unsigned long 
  2209 ;;  counter         1   27[COMRAM] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  4   15[COMRAM] unsigned long 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2219 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;Total ram usage:       13 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    1
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_I2C_Master_Init
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text7
  2234  0012CC                     __ptext7:
  2235                           	opt stack 0
  2236  0012CC                     ___lldiv:
  2237                           	opt stack 27
  2238                           
  2239                           ;incstack = 0
  2240  0012CC  0E00               	movlw	0
  2241  0012CE  6E18               	movwf	___lldiv@quotient,c
  2242  0012D0  0E00               	movlw	0
  2243  0012D2  6E19               	movwf	___lldiv@quotient+1,c
  2244  0012D4  0E00               	movlw	0
  2245  0012D6  6E1A               	movwf	___lldiv@quotient+2,c
  2246  0012D8  0E00               	movlw	0
  2247  0012DA  6E1B               	movwf	___lldiv@quotient+3,c
  2248  0012DC  5014               	movf	___lldiv@divisor,w,c
  2249  0012DE  1015               	iorwf	___lldiv@divisor+1,w,c
  2250  0012E0  1016               	iorwf	___lldiv@divisor+2,w,c
  2251  0012E2  1017               	iorwf	___lldiv@divisor+3,w,c
  2252  0012E4  B4D8               	btfsc	status,2,c
  2253  0012E6  D02A               	goto	l970
  2254  0012E8  0E01               	movlw	1
  2255  0012EA  6E1C               	movwf	___lldiv@counter,c
  2256  0012EC  D006               	goto	l2744
  2257  0012EE                     l2742:
  2258  0012EE  90D8               	bcf	status,0,c
  2259  0012F0  3614               	rlcf	___lldiv@divisor,f,c
  2260  0012F2  3615               	rlcf	___lldiv@divisor+1,f,c
  2261  0012F4  3616               	rlcf	___lldiv@divisor+2,f,c
  2262  0012F6  3617               	rlcf	___lldiv@divisor+3,f,c
  2263  0012F8  2A1C               	incf	___lldiv@counter,f,c
  2264  0012FA                     l2744:
  2265  0012FA  AE17               	btfss	___lldiv@divisor+3,7,c
  2266  0012FC  D7F8               	goto	l2742
  2267  0012FE                     l2746:
  2268  0012FE  90D8               	bcf	status,0,c
  2269  001300  3618               	rlcf	___lldiv@quotient,f,c
  2270  001302  3619               	rlcf	___lldiv@quotient+1,f,c
  2271  001304  361A               	rlcf	___lldiv@quotient+2,f,c
  2272  001306  361B               	rlcf	___lldiv@quotient+3,f,c
  2273  001308  5014               	movf	___lldiv@divisor,w,c
  2274  00130A  5C10               	subwf	___lldiv@dividend,w,c
  2275  00130C  5015               	movf	___lldiv@divisor+1,w,c
  2276  00130E  5811               	subwfb	___lldiv@dividend+1,w,c
  2277  001310  5016               	movf	___lldiv@divisor+2,w,c
  2278  001312  5812               	subwfb	___lldiv@dividend+2,w,c
  2279  001314  5017               	movf	___lldiv@divisor+3,w,c
  2280  001316  5813               	subwfb	___lldiv@dividend+3,w,c
  2281  001318  A0D8               	btfss	status,0,c
  2282  00131A  D009               	goto	l2754
  2283  00131C  5014               	movf	___lldiv@divisor,w,c
  2284  00131E  5E10               	subwf	___lldiv@dividend,f,c
  2285  001320  5015               	movf	___lldiv@divisor+1,w,c
  2286  001322  5A11               	subwfb	___lldiv@dividend+1,f,c
  2287  001324  5016               	movf	___lldiv@divisor+2,w,c
  2288  001326  5A12               	subwfb	___lldiv@dividend+2,f,c
  2289  001328  5017               	movf	___lldiv@divisor+3,w,c
  2290  00132A  5A13               	subwfb	___lldiv@dividend+3,f,c
  2291  00132C  8018               	bsf	___lldiv@quotient,0,c
  2292  00132E                     l2754:
  2293  00132E  90D8               	bcf	status,0,c
  2294  001330  3217               	rrcf	___lldiv@divisor+3,f,c
  2295  001332  3216               	rrcf	___lldiv@divisor+2,f,c
  2296  001334  3215               	rrcf	___lldiv@divisor+1,f,c
  2297  001336  3214               	rrcf	___lldiv@divisor,f,c
  2298  001338  2E1C               	decfsz	___lldiv@counter,f,c
  2299  00133A  D7E1               	goto	l2746
  2300  00133C                     l970:
  2301  00133C  C018  F010         	movff	___lldiv@quotient,?___lldiv
  2302  001340  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  2303  001344  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  2304  001348  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  2305  00134C  0012               	return		;funcret
  2306  00134E                     __end_of___lldiv:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           intcon3	equ	0xFF0
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           indf2	equ	0xFDF
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _finishState *****************
  2324 ;; Defined at:
  2325 ;;		line 338 in file "main.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  keypress        2   53[COMRAM] int 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;Total ram usage:        4 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    5
  2346 ;; This function calls:
  2347 ;;		_readKey
  2348 ;;		_update_lcd
  2349 ;; This function is called by:
  2350 ;;		_main
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text8
  2355  00170A                     __ptext8:
  2356                           	opt stack 0
  2357  00170A                     _finishState:
  2358                           	opt stack 25
  2359                           
  2360                           ;main.c: 340: (INTCONbits.GIE = 0);
  2361                           
  2362                           ;incstack = 0
  2363  00170A  9EF2               	bcf	intcon,7,c	;volatile
  2364                           
  2365                           ;main.c: 341: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2366  00170C  0E0D               	movlw	13
  2367  00170E  6E35               	movwf	(??_finishState+1)& (0+255),c
  2368  001710  0EAF               	movlw	175
  2369  001712  6E34               	movwf	??_finishState& (0+255),c
  2370  001714  0EB6               	movlw	182
  2371  001716                     u3627:
  2372  001716  2EE8               	decfsz	wreg,f,c
  2373  001718  D7FE               	bra	u3627
  2374  00171A  2E34               	decfsz	??_finishState& (0+255),f,c
  2375  00171C  D7FC               	bra	u3627
  2376  00171E  2E35               	decfsz	(??_finishState+1)& (0+255),f,c
  2377  001720  D7FA               	bra	u3627
  2378  001722  D000               	nop2	
  2379                           
  2380                           ;main.c: 342: update_lcd();
  2381  001724  ECA3  F005         	call	_update_lcd	;wreg free
  2382                           
  2383                           ;main.c: 343: LATBbits.LATB0 = 0;
  2384  001728  908A               	bcf	3978,0,c	;volatile
  2385                           
  2386                           ;main.c: 344: LATCbits.LATC6 = 0;
  2387  00172A  9C8B               	bcf	3979,6,c	;volatile
  2388  00172C                     l4450:
  2389                           
  2390                           ;main.c: 346: int keypress = readKey();
  2391  00172C  ECDE  F00A         	call	_readKey	;wreg free
  2392  001730  C010  F036         	movff	?_readKey,finishState@keypress
  2393  001734  C011  F037         	movff	?_readKey+1,finishState@keypress+1
  2394                           
  2395                           ;main.c: 347: if(keypress == 0b1101){
  2396  001738  0E0D               	movlw	13
  2397  00173A  1836               	xorwf	finishState@keypress,w,c
  2398  00173C  1037               	iorwf	finishState@keypress+1,w,c
  2399  00173E  A4D8               	btfss	status,2,c
  2400  001740  D7F5               	goto	l4450
  2401                           
  2402                           ;main.c: 348: state = MAIN;
  2403  001742  0E00               	movlw	0
  2404  001744  6E4B               	movwf	_state,c
  2405                           
  2406                           ;main.c: 349: return;
  2407  001746  0012               	return	
  2408  001748                     __end_of_finishState:
  2409                           	opt stack 0
  2410                           tblptru	equ	0xFF8
  2411                           tblptrh	equ	0xFF7
  2412                           tblptrl	equ	0xFF6
  2413                           tablat	equ	0xFF5
  2414                           prodh	equ	0xFF4
  2415                           prodl	equ	0xFF3
  2416                           intcon	equ	0xFF2
  2417                           intcon3	equ	0xFF0
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           indf2	equ	0xFDF
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _readKey *****************
  2426 ;; Defined at:
  2427 ;;		line 92 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  keypress        1   17[COMRAM] unsigned char 
  2432 ;;  i               2   18[COMRAM] int 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  2   15[COMRAM] int 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;Total ram usage:        5 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    1
  2449 ;; This function calls:
  2450 ;;		Nothing
  2451 ;; This function is called by:
  2452 ;;		_mainState
  2453 ;;		_finishState
  2454 ;;		_logState
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text9
  2459  0015BC                     __ptext9:
  2460                           	opt stack 0
  2461  0015BC                     _readKey:
  2462                           	opt stack 28
  2463                           
  2464                           ;main.c: 94: for (int i = 0; i < 200; i++)
  2465                           
  2466                           ;incstack = 0
  2467  0015BC  0E00               	movlw	0
  2468  0015BE  6E14               	movwf	readKey@i+1,c
  2469  0015C0  0E00               	movlw	0
  2470  0015C2  6E13               	movwf	readKey@i,c
  2471  0015C4  BE14               	btfsc	readKey@i+1,7,c
  2472  0015C6  D006               	goto	l217
  2473  0015C8  5014               	movf	readKey@i+1,w,c
  2474  0015CA  E119               	bnz	l218
  2475  0015CC  0EC8               	movlw	200
  2476  0015CE  5C13               	subwf	readKey@i,w,c
  2477  0015D0  B0D8               	btfsc	status,0,c
  2478  0015D2  D015               	goto	l218
  2479  0015D4                     l217:
  2480                           
  2481                           ;main.c: 95: {
  2482                           ;main.c: 96: if (PORTBbits.RB1 != 0)
  2483  0015D4  A281               	btfss	3969,1,c	;volatile
  2484  0015D6  D00C               	goto	l2828
  2485                           
  2486                           ;main.c: 97: {
  2487                           ;main.c: 98: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2488  0015D8  3881               	swapf	3969,w,c	;volatile
  2489  0015DA  0B0F               	andlw	15
  2490  0015DC  0B0F               	andlw	15
  2491  0015DE  6E12               	movwf	readKey@keypress,c
  2492  0015E0                     l220:
  2493  0015E0  B281               	btfsc	3969,1,c	;volatile
  2494  0015E2  D7FE               	goto	l220
  2495                           
  2496                           ;main.c: 101: }
  2497                           ;main.c: 102: __nop();
  2498  0015E4  F000               	nop	
  2499                           
  2500                           ;main.c: 103: __nop();
  2501  0015E6  F000               	nop	
  2502                           
  2503                           ;main.c: 104: return keypress;
  2504  0015E8  C012  F010         	movff	readKey@keypress,?_readKey
  2505  0015EC  6A11               	clrf	?_readKey+1,c
  2506  0015EE  0012               	return	
  2507  0015F0                     l2828:
  2508  0015F0  4A13               	infsnz	readKey@i,f,c
  2509  0015F2  2A14               	incf	readKey@i+1,f,c
  2510  0015F4  BE14               	btfsc	readKey@i+1,7,c
  2511  0015F6  D7EE               	goto	l217
  2512  0015F8  5014               	movf	readKey@i+1,w,c
  2513  0015FA  E101               	bnz	u1800
  2514  0015FC  D7E7               	goto	L2
  2515  0015FE                     u1800:
  2516  0015FE                     l218:
  2517                           
  2518                           ;main.c: 105: }
  2519                           ;main.c: 106: }
  2520                           ;main.c: 107: return -1;
  2521  0015FE  6810               	setf	?_readKey,c
  2522  001600  6811               	setf	?_readKey+1,c
  2523  001602  0012               	return		;funcret
  2524  001604                     __end_of_readKey:
  2525                           	opt stack 0
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           prodh	equ	0xFF4
  2531                           prodl	equ	0xFF3
  2532                           intcon	equ	0xFF2
  2533                           intcon3	equ	0xFF0
  2534                           postinc0	equ	0xFEE
  2535                           wreg	equ	0xFE8
  2536                           indf2	equ	0xFDF
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _executingState *****************
  2542 ;; Defined at:
  2543 ;;		line 153 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  i               2   24[BANK0 ] int 
  2548 ;;  hasTab          2   40[BANK0 ] int 
  2549 ;;  hasLabel        2   44[BANK0 ] int 
  2550 ;;  count           2   20[BANK0 ] int 
  2551 ;;  res             4   26[BANK0 ] unsigned char [4]
  2552 ;;  timedif         2   42[BANK0 ] int 
  2553 ;;  alInSensor      2   38[BANK0 ] int 
  2554 ;;  snInSensor      2   36[BANK0 ] int 
  2555 ;;  alLoaded        2   34[BANK0 ] int 
  2556 ;;  snLoaded        2   32[BANK0 ] int 
  2557 ;;  emptyCount      2   30[BANK0 ] int 
  2558 ;;  start_s         2   22[BANK0 ] int 
  2559 ;;  s_one           2   14[BANK0 ] int 
  2560 ;;  s_ten           2   12[BANK0 ] int 
  2561 ;;  m_one           2   10[BANK0 ] int 
  2562 ;;  m_ten           2    8[BANK0 ] int 
  2563 ;;  h_one           2    6[BANK0 ] int 
  2564 ;;  h_ten           2    4[BANK0 ] int 
  2565 ;;  runCanAl        2    2[BANK0 ] int 
  2566 ;;  runCanSn        2    0[BANK0 ] int 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Locals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;      Totals:         3      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2580 ;;Total ram usage:       49 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    5
  2583 ;; This function calls:
  2584 ;;		___wmul
  2585 ;;		_dispenseAlCan
  2586 ;;		_dispenseSnCan
  2587 ;;		_eeprom_LogResult
  2588 ;;		_get_time
  2589 ;;		_get_timeDif
  2590 ;;		_lcdInst
  2591 ;;		_printf
  2592 ;;		_readAlBot
  2593 ;;		_readAlTop
  2594 ;;		_readSnBot
  2595 ;;		_readSnSensor
  2596 ;;		_readSnTop
  2597 ;;		_servoRotate0
  2598 ;;		_servoRotate1
  2599 ;;		_servoRotate2
  2600 ;;		_servoRotate4
  2601 ;;		_servoRotate90
  2602 ;;		_servoRotate90n
  2603 ;;		_servoRotateArm
  2604 ;;		_update_lcd
  2605 ;; This function is called by:
  2606 ;;		_main
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text10
  2611  000012                     __ptext10:
  2612                           	opt stack 0
  2613  000012                     _executingState:
  2614                           	opt stack 25
  2615                           
  2616                           ;main.c: 159: int runCanSn, runCanAl;
  2617                           ;main.c: 160: runCanSn = 0;
  2618                           
  2619                           ;incstack = 0
  2620  000012  0E00               	movlw	0
  2621  000014  0100               	movlb	0	; () banked
  2622  000016  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2623  000018  0E00               	movlw	0
  2624  00001A  6F80               	movwf	executingState@runCanSn& (0+255),b
  2625                           
  2626                           ;main.c: 161: runCanAl = 0;
  2627  00001C  0E00               	movlw	0
  2628  00001E  0100               	movlb	0	; () banked
  2629  000020  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2630  000022  0E00               	movlw	0
  2631  000024  6F82               	movwf	executingState@runCanAl& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 163: get_time(starttime);
  2635  000026  0EAE               	movlw	low _starttime
  2636  000028  6E13               	movwf	get_time@time,c
  2637  00002A  0E00               	movlw	high _starttime
  2638  00002C  6E14               	movwf	get_time@time+1,c
  2639  00002E  ECE2  F008         	call	_get_time	;wreg free
  2640                           
  2641                           ;main.c: 164: int h_ten = (starttime[2] & 0b11110000)>>4;
  2642  000032  EE20  F0B2         	lfsr	2,_starttime+4
  2643  000036  CFDE F034          	movff	postinc2,??_executingState
  2644  00003A  CFDD F035          	movff	postdec2,??_executingState+1
  2645  00003E  0E04               	movlw	4
  2646  000040  6E36               	movwf	(??_executingState+2)& (0+255),c
  2647  000042                     u3135:
  2648  000042  3435               	rlcf	??_executingState+1,w,c
  2649  000044  3235               	rrcf	??_executingState+1,f,c
  2650  000046  3234               	rrcf	??_executingState,f,c
  2651  000048  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2652  00004A  D7FB               	goto	u3135
  2653  00004C  0E0F               	movlw	15
  2654  00004E  1434               	andwf	??_executingState,w,c
  2655  000050  0100               	movlb	0	; () banked
  2656  000052  6F84               	movwf	executingState@h_ten& (0+255),b
  2657  000054  0100               	movlb	0	; () banked
  2658  000056  6B85               	clrf	(executingState@h_ten+1)& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 165: int h_one = (starttime[2] & 0b00001111);
  2662  000058  0E0F               	movlw	15
  2663  00005A  0100               	movlb	0	; () banked
  2664  00005C  15B2               	andwf	(_starttime+4)& (0+255),w,b
  2665  00005E  0100               	movlb	0	; () banked
  2666  000060  6F86               	movwf	executingState@h_one& (0+255),b
  2667  000062  0100               	movlb	0	; () banked
  2668  000064  6B87               	clrf	(executingState@h_one+1)& (0+255),b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 166: int m_ten = (starttime[1] & 0b11110000)>>4;
  2672  000066  EE20  F0B0         	lfsr	2,_starttime+2
  2673  00006A  CFDE F034          	movff	postinc2,??_executingState
  2674  00006E  CFDD F035          	movff	postdec2,??_executingState+1
  2675  000072  0E04               	movlw	4
  2676  000074  6E36               	movwf	(??_executingState+2)& (0+255),c
  2677  000076                     u3145:
  2678  000076  3435               	rlcf	??_executingState+1,w,c
  2679  000078  3235               	rrcf	??_executingState+1,f,c
  2680  00007A  3234               	rrcf	??_executingState,f,c
  2681  00007C  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2682  00007E  D7FB               	goto	u3145
  2683  000080  0E0F               	movlw	15
  2684  000082  1434               	andwf	??_executingState,w,c
  2685  000084  0100               	movlb	0	; () banked
  2686  000086  6F88               	movwf	executingState@m_ten& (0+255),b
  2687  000088  0100               	movlb	0	; () banked
  2688  00008A  6B89               	clrf	(executingState@m_ten+1)& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 167: int m_one = (starttime[1] & 0b00001111);
  2692  00008C  0E0F               	movlw	15
  2693  00008E  0100               	movlb	0	; () banked
  2694  000090  15B0               	andwf	(_starttime+2)& (0+255),w,b
  2695  000092  0100               	movlb	0	; () banked
  2696  000094  6F8A               	movwf	executingState@m_one& (0+255),b
  2697  000096  0100               	movlb	0	; () banked
  2698  000098  6B8B               	clrf	(executingState@m_one+1)& (0+255),b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;main.c: 168: int s_ten = (starttime[0] & 0b11110000)>>4;
  2702  00009A  C0AE  F034         	movff	_starttime,??_executingState
  2703  00009E  C0AF  F035         	movff	_starttime+1,??_executingState+1
  2704  0000A2  0E04               	movlw	4
  2705  0000A4  6E36               	movwf	(??_executingState+2)& (0+255),c
  2706  0000A6                     u3155:
  2707  0000A6  3435               	rlcf	??_executingState+1,w,c
  2708  0000A8  3235               	rrcf	??_executingState+1,f,c
  2709  0000AA  3234               	rrcf	??_executingState,f,c
  2710  0000AC  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2711  0000AE  D7FB               	goto	u3155
  2712  0000B0  0E0F               	movlw	15
  2713  0000B2  1434               	andwf	??_executingState,w,c
  2714  0000B4  0100               	movlb	0	; () banked
  2715  0000B6  6F8C               	movwf	executingState@s_ten& (0+255),b
  2716  0000B8  0100               	movlb	0	; () banked
  2717  0000BA  6B8D               	clrf	(executingState@s_ten+1)& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;main.c: 169: int s_one = (starttime[0] & 0b00001111);
  2721  0000BC  0E0F               	movlw	15
  2722  0000BE  0100               	movlb	0	; () banked
  2723  0000C0  15AE               	andwf	_starttime& (0+255),w,b
  2724  0000C2  0100               	movlb	0	; () banked
  2725  0000C4  6F8E               	movwf	executingState@s_one& (0+255),b
  2726  0000C6  0100               	movlb	0	; () banked
  2727  0000C8  6B8F               	clrf	(executingState@s_one+1)& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;main.c: 170: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2731  0000CA  C088  F010         	movff	executingState@m_ten,___wmul@multiplier
  2732  0000CE  C089  F011         	movff	executingState@m_ten+1,___wmul@multiplier+1
  2733  0000D2  0E00               	movlw	0
  2734  0000D4  6E13               	movwf	___wmul@multiplicand+1,c
  2735  0000D6  0E0A               	movlw	10
  2736  0000D8  6E12               	movwf	___wmul@multiplicand,c
  2737  0000DA  EC25  F00C         	call	___wmul	;wreg free
  2738  0000DE  0100               	movlb	0	; () banked
  2739  0000E0  518A               	movf	executingState@m_one& (0+255),w,b
  2740  0000E2  2410               	addwf	?___wmul,w,c
  2741  0000E4  0100               	movlb	0	; () banked
  2742  0000E6  6F90               	movwf	_executingState$1740& (0+255),b
  2743  0000E8  0100               	movlb	0	; () banked
  2744  0000EA  518B               	movf	(executingState@m_one+1)& (0+255),w,b
  2745  0000EC  2011               	addwfc	?___wmul+1,w,c
  2746  0000EE  0100               	movlb	0	; () banked
  2747  0000F0  6F91               	movwf	(_executingState$1740+1)& (0+255),b
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;main.c: 170: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2751  0000F2  C084  F010         	movff	executingState@h_ten,___wmul@multiplier
  2752  0000F6  C085  F011         	movff	executingState@h_ten+1,___wmul@multiplier+1
  2753  0000FA  0E00               	movlw	0
  2754  0000FC  6E13               	movwf	___wmul@multiplicand+1,c
  2755  0000FE  0E0A               	movlw	10
  2756  000100  6E12               	movwf	___wmul@multiplicand,c
  2757  000102  EC25  F00C         	call	___wmul	;wreg free
  2758  000106  0100               	movlb	0	; () banked
  2759  000108  5186               	movf	executingState@h_one& (0+255),w,b
  2760  00010A  2410               	addwf	?___wmul,w,c
  2761  00010C  0100               	movlb	0	; () banked
  2762  00010E  6F92               	movwf	_executingState$1741& (0+255),b
  2763  000110  0100               	movlb	0	; () banked
  2764  000112  5187               	movf	(executingState@h_one+1)& (0+255),w,b
  2765  000114  2011               	addwfc	?___wmul+1,w,c
  2766  000116  0100               	movlb	0	; () banked
  2767  000118  6F93               	movwf	(_executingState$1741+1)& (0+255),b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 170: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2771  00011A  C08C  F010         	movff	executingState@s_ten,___wmul@multiplier
  2772  00011E  C08D  F011         	movff	executingState@s_ten+1,___wmul@multiplier+1
  2773  000122  0E00               	movlw	0
  2774  000124  6E13               	movwf	___wmul@multiplicand+1,c
  2775  000126  0E0A               	movlw	10
  2776  000128  6E12               	movwf	___wmul@multiplicand,c
  2777  00012A  EC25  F00C         	call	___wmul	;wreg free
  2778  00012E  C010  F034         	movff	?___wmul,??_executingState
  2779  000132  C011  F035         	movff	?___wmul+1,??_executingState+1
  2780  000136  C092  F010         	movff	_executingState$1741,___wmul@multiplier
  2781  00013A  C093  F011         	movff	_executingState$1741+1,___wmul@multiplier+1
  2782  00013E  0E0E               	movlw	14
  2783  000140  6E13               	movwf	___wmul@multiplicand+1,c
  2784  000142  0E10               	movlw	16
  2785  000144  6E12               	movwf	___wmul@multiplicand,c
  2786  000146  EC25  F00C         	call	___wmul	;wreg free
  2787  00014A  5010               	movf	?___wmul,w,c
  2788  00014C  2634               	addwf	??_executingState,f,c
  2789  00014E  5011               	movf	?___wmul+1,w,c
  2790  000150  2235               	addwfc	??_executingState+1,f,c
  2791  000152  C090  F010         	movff	_executingState$1740,___wmul@multiplier
  2792  000156  C091  F011         	movff	_executingState$1740+1,___wmul@multiplier+1
  2793  00015A  0E00               	movlw	0
  2794  00015C  6E13               	movwf	___wmul@multiplicand+1,c
  2795  00015E  0E3C               	movlw	60
  2796  000160  6E12               	movwf	___wmul@multiplicand,c
  2797  000162  EC25  F00C         	call	___wmul	;wreg free
  2798  000166  5010               	movf	?___wmul,w,c
  2799  000168  2634               	addwf	??_executingState,f,c
  2800  00016A  5011               	movf	?___wmul+1,w,c
  2801  00016C  2235               	addwfc	??_executingState+1,f,c
  2802  00016E  0100               	movlb	0	; () banked
  2803  000170  518E               	movf	executingState@s_one& (0+255),w,b
  2804  000172  2434               	addwf	??_executingState,w,c
  2805  000174  0100               	movlb	0	; () banked
  2806  000176  6F96               	movwf	executingState@start_s& (0+255),b
  2807  000178  0100               	movlb	0	; () banked
  2808  00017A  518F               	movf	(executingState@s_one+1)& (0+255),w,b
  2809  00017C  2035               	addwfc	??_executingState+1,w,c
  2810  00017E  0100               	movlb	0	; () banked
  2811  000180  6F97               	movwf	(executingState@start_s+1)& (0+255),b
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 172: lcdInst(0b10000000);;
  2815  000182  0E80               	movlw	128
  2816  000184  ECC5  F00C         	call	_lcdInst
  2817                           
  2818                           ;main.c: 173: printf("initializing    ");
  2819  000188  0E65               	movlw	low STR_12
  2820  00018A  6E1C               	movwf	printf@f,c
  2821  00018C  0EFF               	movlw	high STR_12
  2822  00018E  6E1D               	movwf	printf@f+1,c
  2823  000190  EC44  F003         	call	_printf	;wreg free
  2824                           
  2825                           ;main.c: 174: lcdInst(0b11000000);;
  2826  000194  0EC0               	movlw	192
  2827  000196  ECC5  F00C         	call	_lcdInst
  2828                           
  2829                           ;main.c: 175: printf("                ");
  2830  00019A  0E43               	movlw	low STR_13
  2831  00019C  6E1C               	movwf	printf@f,c
  2832  00019E  0EFF               	movlw	high STR_13
  2833  0001A0  6E1D               	movwf	printf@f+1,c
  2834  0001A2  EC44  F003         	call	_printf	;wreg free
  2835                           
  2836                           ;main.c: 179: LATBbits.LATB0 = 1;
  2837  0001A6  808A               	bsf	3978,0,c	;volatile
  2838                           
  2839                           ;main.c: 180: _delay((unsigned long)((300)*(10000000/4000.0)));
  2840  0001A8  0E04               	movlw	4
  2841  0001AA  6E35               	movwf	(??_executingState+1)& (0+255),c
  2842  0001AC  0ECF               	movlw	207
  2843  0001AE  6E34               	movwf	??_executingState& (0+255),c
  2844  0001B0  0E02               	movlw	2
  2845  0001B2                     u3637:
  2846  0001B2  2EE8               	decfsz	wreg,f,c
  2847  0001B4  D7FE               	bra	u3637
  2848  0001B6  2E34               	decfsz	??_executingState& (0+255),f,c
  2849  0001B8  D7FC               	bra	u3637
  2850  0001BA  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2851  0001BC  D7FA               	bra	u3637
  2852                           
  2853                           ;main.c: 181: LATCbits.LATC6 = 1;
  2854  0001BE  8C8B               	bsf	3979,6,c	;volatile
  2855                           
  2856                           ;main.c: 183: servoRotate90n(4);
  2857  0001C0  0E00               	movlw	0
  2858  0001C2  6E11               	movwf	servoRotate90n@servo+1,c
  2859  0001C4  0E04               	movlw	4
  2860  0001C6  6E10               	movwf	servoRotate90n@servo,c
  2861  0001C8  EC29  F008         	call	_servoRotate90n	;wreg free
  2862                           
  2863                           ;main.c: 184: servoRotate2(1);
  2864  0001CC  0E00               	movlw	0
  2865  0001CE  6E11               	movwf	servoRotate2@angle+1,c
  2866  0001D0  0E01               	movlw	1
  2867  0001D2  6E10               	movwf	servoRotate2@angle,c
  2868  0001D4  EC46  F00B         	call	_servoRotate2	;wreg free
  2869                           
  2870                           ;main.c: 185: servoRotate0(2);
  2871  0001D8  0E00               	movlw	0
  2872  0001DA  6E11               	movwf	servoRotate0@servo+1,c
  2873  0001DC  0E02               	movlw	2
  2874  0001DE  6E10               	movwf	servoRotate0@servo,c
  2875  0001E0  EC65  F007         	call	_servoRotate0	;wreg free
  2876                           
  2877                           ;main.c: 186: servoRotate1(0);
  2878  0001E4  0E00               	movlw	0
  2879  0001E6  6E11               	movwf	servoRotate1@angle+1,c
  2880  0001E8  0E00               	movlw	0
  2881  0001EA  6E10               	movwf	servoRotate1@angle,c
  2882  0001EC  ECC3  F00B         	call	_servoRotate1	;wreg free
  2883                           
  2884                           ;main.c: 187: servoRotate4(3);
  2885  0001F0  0E00               	movlw	0
  2886  0001F2  6E11               	movwf	servoRotate4@angle+1,c
  2887  0001F4  0E03               	movlw	3
  2888  0001F6  6E10               	movwf	servoRotate4@angle,c
  2889  0001F8  ECA4  F00B         	call	_servoRotate4	;wreg free
  2890                           
  2891                           ;main.c: 188: (INTCONbits.GIE = 0);
  2892  0001FC  9EF2               	bcf	intcon,7,c	;volatile
  2893                           
  2894                           ;main.c: 189: update_lcd();
  2895  0001FE  ECA3  F005         	call	_update_lcd	;wreg free
  2896                           
  2897                           ;main.c: 190: int timedif = get_timeDif(start_s);
  2898  000202  C096  F018         	movff	executingState@start_s,get_timeDif@start
  2899  000206  C097  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  2900  00020A  EC5B  F006         	call	_get_timeDif	;wreg free
  2901  00020E  C018  F0AA         	movff	?_get_timeDif,executingState@timedif
  2902  000212  C019  F0AB         	movff	?_get_timeDif+1,executingState@timedif+1
  2903                           
  2904                           ;main.c: 193: int emptyCount;
  2905                           ;main.c: 195: int snLoaded, alLoaded, snInSensor, alInSensor;
  2906                           ;main.c: 196: snLoaded = 1;
  2907  000216  0E00               	movlw	0
  2908  000218  0100               	movlb	0	; () banked
  2909  00021A  6FA1               	movwf	(executingState@snLoaded+1)& (0+255),b
  2910  00021C  0E01               	movlw	1
  2911  00021E  6FA0               	movwf	executingState@snLoaded& (0+255),b
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;main.c: 197: alLoaded = 1;
  2915  000220  0E00               	movlw	0
  2916  000222  0100               	movlb	0	; () banked
  2917  000224  6FA3               	movwf	(executingState@alLoaded+1)& (0+255),b
  2918  000226  0E01               	movlw	1
  2919  000228  6FA2               	movwf	executingState@alLoaded& (0+255),b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 198: snInSensor = 1;
  2923  00022A  0E00               	movlw	0
  2924  00022C  0100               	movlb	0	; () banked
  2925  00022E  6FA5               	movwf	(executingState@snInSensor+1)& (0+255),b
  2926  000230  0E01               	movlw	1
  2927  000232  6FA4               	movwf	executingState@snInSensor& (0+255),b
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;main.c: 199: alInSensor = 1;
  2931  000234  0E00               	movlw	0
  2932  000236  0100               	movlb	0	; () banked
  2933  000238  6FA7               	movwf	(executingState@alInSensor+1)& (0+255),b
  2934  00023A  0E01               	movlw	1
  2935  00023C  6FA6               	movwf	executingState@alInSensor& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 200: emptyCount = 0;
  2939  00023E  0E00               	movlw	0
  2940  000240  0100               	movlb	0	; () banked
  2941  000242  6F9F               	movwf	(executingState@emptyCount+1)& (0+255),b
  2942  000244  0E00               	movlw	0
  2943  000246  6F9E               	movwf	executingState@emptyCount& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;main.c: 202: alTab = 0;
  2947  000248  0E00               	movlw	0
  2948  00024A  6E44               	movwf	_alTab+1,c
  2949  00024C  0E00               	movlw	0
  2950  00024E  6E43               	movwf	_alTab,c
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 203: alNoTab = 0;
  2954  000250  0E00               	movlw	0
  2955  000252  6E42               	movwf	_alNoTab+1,c
  2956  000254  0E00               	movlw	0
  2957  000256  6E41               	movwf	_alNoTab,c
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 204: snLabel = 0;
  2961  000258  0E00               	movlw	0
  2962  00025A  6E48               	movwf	_snLabel+1,c
  2963  00025C  0E00               	movlw	0
  2964  00025E  6E47               	movwf	_snLabel,c
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 205: snNoLabel = 0;
  2968  000260  0E00               	movlw	0
  2969  000262  6E4A               	movwf	_snNoLabel+1,c
  2970  000264  0E00               	movlw	0
  2971  000266  6E49               	movwf	_snNoLabel,c
  2972                           
  2973                           ;main.c: 209: while(timedif < 180 && PORTBbits.RB0 == 1){
  2974  000268  D1D1               	goto	l4428
  2975  00026A                     l4278:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 210: update_lcd();
  2979  00026A  ECA3  F005         	call	_update_lcd	;wreg free
  2980                           
  2981                           ;main.c: 211: lcdInst(0b10000000);;
  2982  00026E  0E80               	movlw	128
  2983  000270  ECC5  F00C         	call	_lcdInst
  2984                           
  2985                           ;main.c: 212: printf("Executing    %03d", timedif);
  2986  000274  0E20               	movlw	low STR_14
  2987  000276  6E1C               	movwf	printf@f,c
  2988  000278  0EFF               	movlw	high STR_14
  2989  00027A  6E1D               	movwf	printf@f+1,c
  2990  00027C  C0AA  F01E         	movff	executingState@timedif,?_printf+2
  2991  000280  C0AB  F01F         	movff	executingState@timedif+1,?_printf+3
  2992  000284  EC44  F003         	call	_printf	;wreg free
  2993                           
  2994                           ;main.c: 215: if(readSnTop() == 0){
  2995  000288  EC68  F00C         	call	_readSnTop	;wreg free
  2996  00028C  5010               	movf	?_readSnTop,w,c
  2997  00028E  1011               	iorwf	?_readSnTop+1,w,c
  2998  000290  A4D8               	btfss	status,2,c
  2999  000292  D005               	goto	l4286
  3000                           
  3001                           ;main.c: 216: snLoaded = 0;
  3002  000294  0E00               	movlw	0
  3003  000296  0100               	movlb	0	; () banked
  3004  000298  6FA1               	movwf	(executingState@snLoaded+1)& (0+255),b
  3005  00029A  0E00               	movlw	0
  3006  00029C  6FA0               	movwf	executingState@snLoaded& (0+255),b
  3007  00029E                     l4286:
  3008                           
  3009                           ;main.c: 217: }
  3010                           ;main.c: 218: if(readAlTop() == 0){
  3011  00029E  EC8C  F00C         	call	_readAlTop	;wreg free
  3012  0002A2  5010               	movf	?_readAlTop,w,c
  3013  0002A4  1011               	iorwf	?_readAlTop+1,w,c
  3014  0002A6  A4D8               	btfss	status,2,c
  3015  0002A8  D005               	goto	l4290
  3016                           
  3017                           ;main.c: 219: alLoaded = 0;
  3018  0002AA  0E00               	movlw	0
  3019  0002AC  0100               	movlb	0	; () banked
  3020  0002AE  6FA3               	movwf	(executingState@alLoaded+1)& (0+255),b
  3021  0002B0  0E00               	movlw	0
  3022  0002B2  6FA2               	movwf	executingState@alLoaded& (0+255),b
  3023  0002B4                     l4290:
  3024                           
  3025                           ;main.c: 220: }
  3026                           ;main.c: 221: if(readSnBot() == 0){
  3027  0002B4  EC80  F00C         	call	_readSnBot	;wreg free
  3028  0002B8  5010               	movf	?_readSnBot,w,c
  3029  0002BA  1011               	iorwf	?_readSnBot+1,w,c
  3030  0002BC  A4D8               	btfss	status,2,c
  3031  0002BE  D005               	goto	l4294
  3032                           
  3033                           ;main.c: 222: snInSensor = 0;
  3034  0002C0  0E00               	movlw	0
  3035  0002C2  0100               	movlb	0	; () banked
  3036  0002C4  6FA5               	movwf	(executingState@snInSensor+1)& (0+255),b
  3037  0002C6  0E00               	movlw	0
  3038  0002C8  6FA4               	movwf	executingState@snInSensor& (0+255),b
  3039  0002CA                     l4294:
  3040                           
  3041                           ;main.c: 223: }
  3042                           ;main.c: 224: if(readAlBot() == 0){
  3043  0002CA  EC98  F00C         	call	_readAlBot	;wreg free
  3044  0002CE  5010               	movf	?_readAlBot,w,c
  3045  0002D0  1011               	iorwf	?_readAlBot+1,w,c
  3046  0002D2  A4D8               	btfss	status,2,c
  3047  0002D4  D005               	goto	l4298
  3048                           
  3049                           ;main.c: 225: alInSensor = 0;
  3050  0002D6  0E00               	movlw	0
  3051  0002D8  0100               	movlb	0	; () banked
  3052  0002DA  6FA7               	movwf	(executingState@alInSensor+1)& (0+255),b
  3053  0002DC  0E00               	movlw	0
  3054  0002DE  6FA6               	movwf	executingState@alInSensor& (0+255),b
  3055  0002E0                     l4298:
  3056                           
  3057                           ;main.c: 226: }
  3058                           ;main.c: 228: if(snLoaded == 0){
  3059  0002E0  0100               	movlb	0	; () banked
  3060  0002E2  51A0               	movf	executingState@snLoaded& (0+255),w,b
  3061  0002E4  0100               	movlb	0	; () banked
  3062  0002E6  11A1               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  3063  0002E8  A4D8               	btfss	status,2,c
  3064  0002EA  D022               	goto	l4312
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;main.c: 229: emptyCount = 0;
  3068  0002EC  0E00               	movlw	0
  3069  0002EE  0100               	movlb	0	; () banked
  3070  0002F0  6F9F               	movwf	(executingState@emptyCount+1)& (0+255),b
  3071  0002F2  0E00               	movlw	0
  3072  0002F4  6F9E               	movwf	executingState@emptyCount& (0+255),b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;main.c: 230: if(snInSensor == 1){
  3076  0002F6  0100               	movlb	0	; () banked
  3077  0002F8  05A4               	decf	executingState@snInSensor& (0+255),w,b
  3078  0002FA  0100               	movlb	0	; () banked
  3079  0002FC  11A5               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  3080  0002FE  A4D8               	btfss	status,2,c
  3081  000300  D017               	goto	l4312
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 231: _delay((unsigned long)((300)*(10000000/4000.0)));
  3085  000302  0E04               	movlw	4
  3086  000304  6E35               	movwf	(??_executingState+1)& (0+255),c
  3087  000306  0ECF               	movlw	207
  3088  000308  6E34               	movwf	??_executingState& (0+255),c
  3089  00030A  0E02               	movlw	2
  3090  00030C                     u3647:
  3091  00030C  2EE8               	decfsz	wreg,f,c
  3092  00030E  D7FE               	bra	u3647
  3093  000310  2E34               	decfsz	??_executingState& (0+255),f,c
  3094  000312  D7FC               	bra	u3647
  3095  000314  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3096  000316  D7FA               	bra	u3647
  3097                           
  3098                           ;main.c: 232: dispenseSnCan();
  3099  000318  ECE2  F00B         	call	_dispenseSnCan	;wreg free
  3100                           
  3101                           ;main.c: 233: runCanSn = 1;
  3102  00031C  0E00               	movlw	0
  3103  00031E  0100               	movlb	0	; () banked
  3104  000320  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3105  000322  0E01               	movlw	1
  3106  000324  6F80               	movwf	executingState@runCanSn& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 234: snLoaded = 1;
  3110  000326  0E00               	movlw	0
  3111  000328  0100               	movlb	0	; () banked
  3112  00032A  6FA1               	movwf	(executingState@snLoaded+1)& (0+255),b
  3113  00032C  0E01               	movlw	1
  3114  00032E  6FA0               	movwf	executingState@snLoaded& (0+255),b
  3115  000330                     l4312:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;main.c: 235: }
  3119                           ;main.c: 236: }
  3120                           ;main.c: 237: if(alLoaded == 0){
  3121  000330  0100               	movlb	0	; () banked
  3122  000332  51A2               	movf	executingState@alLoaded& (0+255),w,b
  3123  000334  0100               	movlb	0	; () banked
  3124  000336  11A3               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  3125  000338  A4D8               	btfss	status,2,c
  3126  00033A  D022               	goto	l4326
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;main.c: 238: emptyCount = 0;
  3130  00033C  0E00               	movlw	0
  3131  00033E  0100               	movlb	0	; () banked
  3132  000340  6F9F               	movwf	(executingState@emptyCount+1)& (0+255),b
  3133  000342  0E00               	movlw	0
  3134  000344  6F9E               	movwf	executingState@emptyCount& (0+255),b
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 239: if(alInSensor == 1){
  3138  000346  0100               	movlb	0	; () banked
  3139  000348  05A6               	decf	executingState@alInSensor& (0+255),w,b
  3140  00034A  0100               	movlb	0	; () banked
  3141  00034C  11A7               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3142  00034E  A4D8               	btfss	status,2,c
  3143  000350  D017               	goto	l4326
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 240: _delay((unsigned long)((300)*(10000000/4000.0)));
  3147  000352  0E04               	movlw	4
  3148  000354  6E35               	movwf	(??_executingState+1)& (0+255),c
  3149  000356  0ECF               	movlw	207
  3150  000358  6E34               	movwf	??_executingState& (0+255),c
  3151  00035A  0E02               	movlw	2
  3152  00035C                     u3657:
  3153  00035C  2EE8               	decfsz	wreg,f,c
  3154  00035E  D7FE               	bra	u3657
  3155  000360  2E34               	decfsz	??_executingState& (0+255),f,c
  3156  000362  D7FC               	bra	u3657
  3157  000364  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3158  000366  D7FA               	bra	u3657
  3159                           
  3160                           ;main.c: 241: dispenseAlCan();
  3161  000368  ECFA  F00B         	call	_dispenseAlCan	;wreg free
  3162                           
  3163                           ;main.c: 242: runCanAl = 1;
  3164  00036C  0E00               	movlw	0
  3165  00036E  0100               	movlb	0	; () banked
  3166  000370  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3167  000372  0E01               	movlw	1
  3168  000374  6F82               	movwf	executingState@runCanAl& (0+255),b
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 243: alLoaded = 1;
  3172  000376  0E00               	movlw	0
  3173  000378  0100               	movlb	0	; () banked
  3174  00037A  6FA3               	movwf	(executingState@alLoaded+1)& (0+255),b
  3175  00037C  0E01               	movlw	1
  3176  00037E  6FA2               	movwf	executingState@alLoaded& (0+255),b
  3177  000380                     l4326:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 244: }
  3181                           ;main.c: 245: }
  3182                           ;main.c: 247: if(snLoaded == 1 && alLoaded ==1){
  3183  000380  0100               	movlb	0	; () banked
  3184  000382  05A0               	decf	executingState@snLoaded& (0+255),w,b
  3185  000384  0100               	movlb	0	; () banked
  3186  000386  11A1               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  3187  000388  A4D8               	btfss	status,2,c
  3188  00038A  D009               	goto	l4332
  3189                           
  3190                           ; BSR set to: 0
  3191  00038C  0100               	movlb	0	; () banked
  3192  00038E  05A2               	decf	executingState@alLoaded& (0+255),w,b
  3193  000390  0100               	movlb	0	; () banked
  3194  000392  11A3               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  3195  000394  A4D8               	btfss	status,2,c
  3196  000396  D003               	goto	l4332
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 248: emptyCount++;
  3200  000398  0100               	movlb	0	; () banked
  3201  00039A  4B9E               	infsnz	executingState@emptyCount& (0+255),f,b
  3202  00039C  2B9F               	incf	(executingState@emptyCount+1)& (0+255),f,b
  3203  00039E                     l4332:
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 249: }
  3207                           ;main.c: 252: if(snInSensor == 0){
  3208  00039E  0100               	movlb	0	; () banked
  3209  0003A0  51A4               	movf	executingState@snInSensor& (0+255),w,b
  3210  0003A2  0100               	movlb	0	; () banked
  3211  0003A4  11A5               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  3212  0003A6  A4D8               	btfss	status,2,c
  3213  0003A8  D091               	goto	l4378
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 253: int hasLabel = 1;
  3217  0003AA  0E00               	movlw	0
  3218  0003AC  0100               	movlb	0	; () banked
  3219  0003AE  6FAD               	movwf	(executingState@hasLabel+1)& (0+255),b
  3220  0003B0  0E01               	movlw	1
  3221  0003B2  6FAC               	movwf	executingState@hasLabel& (0+255),b
  3222                           
  3223                           ;main.c: 255: emptyCount = 0;
  3224  0003B4  0E00               	movlw	0
  3225  0003B6  0100               	movlb	0	; () banked
  3226  0003B8  6F9F               	movwf	(executingState@emptyCount+1)& (0+255),b
  3227  0003BA  0E00               	movlw	0
  3228  0003BC  6F9E               	movwf	executingState@emptyCount& (0+255),b
  3229                           
  3230                           ;main.c: 256: int count = 0;
  3231  0003BE  0E00               	movlw	0
  3232  0003C0  0100               	movlb	0	; () banked
  3233  0003C2  6F95               	movwf	(executingState@count+1)& (0+255),b
  3234  0003C4  0E00               	movlw	0
  3235  0003C6  6F94               	movwf	executingState@count& (0+255),b
  3236                           
  3237                           ;main.c: 257: for(int i = 0; i < 800; i++){
  3238  0003C8  0E00               	movlw	0
  3239  0003CA  0100               	movlb	0	; () banked
  3240  0003CC  6F99               	movwf	(executingState@i+1)& (0+255),b
  3241  0003CE  0E00               	movlw	0
  3242  0003D0  6F98               	movwf	executingState@i& (0+255),b
  3243  0003D2                     l4336:
  3244                           
  3245                           ; BSR set to: 0
  3246  0003D2  0100               	movlb	0	; () banked
  3247  0003D4  BF99               	btfsc	(executingState@i+1)& (0+255),7,b
  3248  0003D6  D008               	goto	l4340
  3249  0003D8  0E20               	movlw	32
  3250  0003DA  0100               	movlb	0	; () banked
  3251  0003DC  5D98               	subwf	executingState@i& (0+255),w,b
  3252  0003DE  0E03               	movlw	3
  3253  0003E0  0100               	movlb	0	; () banked
  3254  0003E2  5999               	subwfb	(executingState@i+1)& (0+255),w,b
  3255  0003E4  B0D8               	btfsc	status,0,c
  3256  0003E6  D014               	goto	l4350
  3257  0003E8                     l4340:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;main.c: 258: if(readSnSensor() == 1){
  3261  0003E8  EC74  F00C         	call	_readSnSensor	;wreg free
  3262  0003EC  0410               	decf	?_readSnSensor,w,c
  3263  0003EE  1011               	iorwf	?_readSnSensor+1,w,c
  3264  0003F0  A4D8               	btfss	status,2,c
  3265  0003F2  D003               	goto	l4344
  3266                           
  3267                           ;main.c: 259: count++;
  3268  0003F4  0100               	movlb	0	; () banked
  3269  0003F6  4B94               	infsnz	executingState@count& (0+255),f,b
  3270  0003F8  2B95               	incf	(executingState@count+1)& (0+255),f,b
  3271  0003FA                     l4344:
  3272                           
  3273                           ;main.c: 260: }
  3274                           ;main.c: 261: _delay((unsigned long)((1)*(10000000/4000.0)));
  3275  0003FA  0E04               	movlw	4
  3276  0003FC  6E34               	movwf	??_executingState& (0+255),c
  3277  0003FE  0E3E               	movlw	62
  3278  000400                     u3667:
  3279  000400  2EE8               	decfsz	wreg,f,c
  3280  000402  D7FE               	bra	u3667
  3281  000404  2E34               	decfsz	??_executingState& (0+255),f,c
  3282  000406  D7FC               	bra	u3667
  3283  000408  0100               	movlb	0	; () banked
  3284  00040A  4B98               	infsnz	executingState@i& (0+255),f,b
  3285  00040C  2B99               	incf	(executingState@i+1)& (0+255),f,b
  3286  00040E  D7E1               	goto	l4336
  3287  000410                     l4350:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 262: }
  3291                           ;main.c: 263: if(count >= 3){
  3292  000410  0100               	movlb	0	; () banked
  3293  000412  BF95               	btfsc	(executingState@count+1)& (0+255),7,b
  3294  000414  D00D               	goto	l4354
  3295  000416  0100               	movlb	0	; () banked
  3296  000418  5195               	movf	(executingState@count+1)& (0+255),w,b
  3297  00041A  E105               	bnz	u3300
  3298  00041C  0E03               	movlw	3
  3299  00041E  0100               	movlb	0	; () banked
  3300  000420  5D94               	subwf	executingState@count& (0+255),w,b
  3301  000422  A0D8               	btfss	status,0,c
  3302  000424  D005               	goto	l4354
  3303  000426                     u3300:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 264: hasLabel = 0;
  3307  000426  0E00               	movlw	0
  3308  000428  0100               	movlb	0	; () banked
  3309  00042A  6FAD               	movwf	(executingState@hasLabel+1)& (0+255),b
  3310  00042C  0E00               	movlw	0
  3311  00042E  6FAC               	movwf	executingState@hasLabel& (0+255),b
  3312  000430                     l4354:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;main.c: 265: }
  3316                           ;main.c: 266: printf("%d", hasLabel);
  3317  000430  0EFC               	movlw	low STR_15
  3318  000432  6E1C               	movwf	printf@f,c
  3319  000434  0EFF               	movlw	high STR_15
  3320  000436  6E1D               	movwf	printf@f+1,c
  3321  000438  C0AC  F01E         	movff	executingState@hasLabel,?_printf+2
  3322  00043C  C0AD  F01F         	movff	executingState@hasLabel+1,?_printf+3
  3323  000440  EC44  F003         	call	_printf	;wreg free
  3324                           
  3325                           ;main.c: 267: if(hasLabel == 0){
  3326  000444  0100               	movlb	0	; () banked
  3327  000446  51AC               	movf	executingState@hasLabel& (0+255),w,b
  3328  000448  0100               	movlb	0	; () banked
  3329  00044A  11AD               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3330  00044C  A4D8               	btfss	status,2,c
  3331  00044E  D014               	goto	l4364
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 268: servoRotate90n(2);
  3335  000450  0E00               	movlw	0
  3336  000452  6E11               	movwf	servoRotate90n@servo+1,c
  3337  000454  0E02               	movlw	2
  3338  000456  6E10               	movwf	servoRotate90n@servo,c
  3339  000458  EC29  F008         	call	_servoRotate90n	;wreg free
  3340                           
  3341                           ;main.c: 269: servoRotate0(2);
  3342  00045C  0E00               	movlw	0
  3343  00045E  6E11               	movwf	servoRotate0@servo+1,c
  3344  000460  0E02               	movlw	2
  3345  000462  6E10               	movwf	servoRotate0@servo,c
  3346  000464  EC65  F007         	call	_servoRotate0	;wreg free
  3347                           
  3348                           ;main.c: 270: runCanSn = 0;
  3349  000468  0E00               	movlw	0
  3350  00046A  0100               	movlb	0	; () banked
  3351  00046C  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3352  00046E  0E00               	movlw	0
  3353  000470  6F80               	movwf	executingState@runCanSn& (0+255),b
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;main.c: 271: snNoLabel++;
  3357  000472  4A49               	infsnz	_snNoLabel,f,c
  3358  000474  2A4A               	incf	_snNoLabel+1,f,c
  3359                           
  3360                           ;main.c: 272: }else if(hasLabel == 1){
  3361  000476  D019               	goto	l4372
  3362  000478                     l4364:
  3363                           
  3364                           ; BSR set to: 0
  3365  000478  0100               	movlb	0	; () banked
  3366  00047A  05AC               	decf	executingState@hasLabel& (0+255),w,b
  3367  00047C  0100               	movlb	0	; () banked
  3368  00047E  11AD               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3369  000480  A4D8               	btfss	status,2,c
  3370  000482  D013               	goto	l4372
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 273: servoRotate90(2);
  3374  000484  0E00               	movlw	0
  3375  000486  6E11               	movwf	servoRotate90@servo+1,c
  3376  000488  0E02               	movlw	2
  3377  00048A  6E10               	movwf	servoRotate90@servo,c
  3378  00048C  ECC7  F007         	call	_servoRotate90	;wreg free
  3379                           
  3380                           ;main.c: 274: servoRotate0(2);
  3381  000490  0E00               	movlw	0
  3382  000492  6E11               	movwf	servoRotate0@servo+1,c
  3383  000494  0E02               	movlw	2
  3384  000496  6E10               	movwf	servoRotate0@servo,c
  3385  000498  EC65  F007         	call	_servoRotate0	;wreg free
  3386                           
  3387                           ;main.c: 275: runCanSn = 0;
  3388  00049C  0E00               	movlw	0
  3389  00049E  0100               	movlb	0	; () banked
  3390  0004A0  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3391  0004A2  0E00               	movlw	0
  3392  0004A4  6F80               	movwf	executingState@runCanSn& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;main.c: 276: snLabel++;
  3396  0004A6  4A47               	infsnz	_snLabel,f,c
  3397  0004A8  2A48               	incf	_snLabel+1,f,c
  3398  0004AA                     l4372:
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 277: }
  3402                           ;main.c: 278: snInSensor = 1;
  3403  0004AA  0E00               	movlw	0
  3404  0004AC  0100               	movlb	0	; () banked
  3405  0004AE  6FA5               	movwf	(executingState@snInSensor+1)& (0+255),b
  3406  0004B0  0E01               	movlw	1
  3407  0004B2  6FA4               	movwf	executingState@snInSensor& (0+255),b
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;main.c: 279: servoRotate0(0);
  3411  0004B4  0E00               	movlw	0
  3412  0004B6  6E11               	movwf	servoRotate0@servo+1,c
  3413  0004B8  0E00               	movlw	0
  3414  0004BA  6E10               	movwf	servoRotate0@servo,c
  3415  0004BC  EC65  F007         	call	_servoRotate0	;wreg free
  3416                           
  3417                           ;main.c: 280: servoRotate0(1);
  3418  0004C0  0E00               	movlw	0
  3419  0004C2  6E11               	movwf	servoRotate0@servo+1,c
  3420  0004C4  0E01               	movlw	1
  3421  0004C6  6E10               	movwf	servoRotate0@servo,c
  3422  0004C8  EC65  F007         	call	_servoRotate0	;wreg free
  3423  0004CC                     l4378:
  3424                           
  3425                           ;main.c: 281: }
  3426                           ;main.c: 283: if(alInSensor == 0){
  3427  0004CC  0100               	movlb	0	; () banked
  3428  0004CE  51A6               	movf	executingState@alInSensor& (0+255),w,b
  3429  0004D0  0100               	movlb	0	; () banked
  3430  0004D2  11A7               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3431  0004D4  A4D8               	btfss	status,2,c
  3432  0004D6  D062               	goto	l4416
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 284: emptyCount = 0;
  3436  0004D8  0E00               	movlw	0
  3437  0004DA  0100               	movlb	0	; () banked
  3438  0004DC  6F9F               	movwf	(executingState@emptyCount+1)& (0+255),b
  3439  0004DE  0E00               	movlw	0
  3440  0004E0  6F9E               	movwf	executingState@emptyCount& (0+255),b
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;main.c: 285: int hasTab;
  3444                           ;main.c: 286: _delay((unsigned long)((700)*(10000000/4000.0)));
  3445  0004E2  0E09               	movlw	9
  3446  0004E4  6E35               	movwf	(??_executingState+1)& (0+255),c
  3447  0004E6  0EE1               	movlw	225
  3448  0004E8  6E34               	movwf	??_executingState& (0+255),c
  3449  0004EA  0EB2               	movlw	178
  3450  0004EC                     u3677:
  3451  0004EC  2EE8               	decfsz	wreg,f,c
  3452  0004EE  D7FE               	bra	u3677
  3453  0004F0  2E34               	decfsz	??_executingState& (0+255),f,c
  3454  0004F2  D7FC               	bra	u3677
  3455  0004F4  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3456  0004F6  D7FA               	bra	u3677
  3457  0004F8  D000               	nop2	
  3458                           
  3459                           ;main.c: 287: hasTab = servoRotateArm();
  3460  0004FA  ECA7  F009         	call	_servoRotateArm	;wreg free
  3461  0004FE  C010  F0A8         	movff	?_servoRotateArm,executingState@hasTab
  3462  000502  C011  F0A9         	movff	?_servoRotateArm+1,executingState@hasTab+1
  3463                           
  3464                           ;main.c: 288: servoRotate90n(4);
  3465  000506  0E00               	movlw	0
  3466  000508  6E11               	movwf	servoRotate90n@servo+1,c
  3467  00050A  0E04               	movlw	4
  3468  00050C  6E10               	movwf	servoRotate90n@servo,c
  3469  00050E  EC29  F008         	call	_servoRotate90n	;wreg free
  3470                           
  3471                           ;main.c: 289: if(hasTab){
  3472  000512  0100               	movlb	0	; () banked
  3473  000514  51A8               	movf	executingState@hasTab& (0+255),w,b
  3474  000516  0100               	movlb	0	; () banked
  3475  000518  11A9               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3476  00051A  B4D8               	btfsc	status,2,c
  3477  00051C  D00E               	goto	l4396
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;main.c: 290: servoRotate90n(3);
  3481  00051E  0E00               	movlw	0
  3482  000520  6E11               	movwf	servoRotate90n@servo+1,c
  3483  000522  0E03               	movlw	3
  3484  000524  6E10               	movwf	servoRotate90n@servo,c
  3485  000526  EC29  F008         	call	_servoRotate90n	;wreg free
  3486                           
  3487                           ;main.c: 291: runCanAl = 0;
  3488  00052A  0E00               	movlw	0
  3489  00052C  0100               	movlb	0	; () banked
  3490  00052E  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3491  000530  0E00               	movlw	0
  3492  000532  6F82               	movwf	executingState@runCanAl& (0+255),b
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;main.c: 292: alTab++;
  3496  000534  4A43               	infsnz	_alTab,f,c
  3497  000536  2A44               	incf	_alTab+1,f,c
  3498                           
  3499                           ;main.c: 293: }else if (hasTab == 0){
  3500  000538  D013               	goto	l4404
  3501  00053A                     l4396:
  3502                           
  3503                           ; BSR set to: 0
  3504  00053A  0100               	movlb	0	; () banked
  3505  00053C  51A8               	movf	executingState@hasTab& (0+255),w,b
  3506  00053E  0100               	movlb	0	; () banked
  3507  000540  11A9               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3508  000542  A4D8               	btfss	status,2,c
  3509  000544  D00D               	goto	l4404
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;main.c: 294: servoRotate90(3);
  3513  000546  0E00               	movlw	0
  3514  000548  6E11               	movwf	servoRotate90@servo+1,c
  3515  00054A  0E03               	movlw	3
  3516  00054C  6E10               	movwf	servoRotate90@servo,c
  3517  00054E  ECC7  F007         	call	_servoRotate90	;wreg free
  3518                           
  3519                           ;main.c: 295: runCanAl = 0;
  3520  000552  0E00               	movlw	0
  3521  000554  0100               	movlb	0	; () banked
  3522  000556  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3523  000558  0E00               	movlw	0
  3524  00055A  6F82               	movwf	executingState@runCanAl& (0+255),b
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;main.c: 296: alNoTab++;
  3528  00055C  4A41               	infsnz	_alNoTab,f,c
  3529  00055E  2A42               	incf	_alNoTab+1,f,c
  3530  000560                     l4404:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;main.c: 297: }
  3534                           ;main.c: 299: servoRotate4(3);
  3535  000560  0E00               	movlw	0
  3536  000562  6E11               	movwf	servoRotate4@angle+1,c
  3537  000564  0E03               	movlw	3
  3538  000566  6E10               	movwf	servoRotate4@angle,c
  3539  000568  ECA4  F00B         	call	_servoRotate4	;wreg free
  3540                           
  3541                           ;main.c: 300: alInSensor = 1;
  3542  00056C  0E00               	movlw	0
  3543  00056E  0100               	movlb	0	; () banked
  3544  000570  6FA7               	movwf	(executingState@alInSensor+1)& (0+255),b
  3545  000572  0E01               	movlw	1
  3546  000574  6FA6               	movwf	executingState@alInSensor& (0+255),b
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;main.c: 301: if(readAlBot() == 0){
  3550  000576  EC98  F00C         	call	_readAlBot	;wreg free
  3551  00057A  5010               	movf	?_readAlBot,w,c
  3552  00057C  1011               	iorwf	?_readAlBot+1,w,c
  3553  00057E  A4D8               	btfss	status,2,c
  3554  000580  D00D               	goto	l4416
  3555                           
  3556                           ;main.c: 302: if(hasTab){
  3557  000582  0100               	movlb	0	; () banked
  3558  000584  51A8               	movf	executingState@hasTab& (0+255),w,b
  3559  000586  0100               	movlb	0	; () banked
  3560  000588  11A9               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3561  00058A  B4D8               	btfsc	status,2,c
  3562  00058C  D004               	goto	l4414
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;main.c: 303: alTab--;
  3566  00058E  0643               	decf	_alTab,f,c
  3567  000590  A0D8               	btfss	status,0,c
  3568  000592  0644               	decf	_alTab+1,f,c
  3569                           
  3570                           ;main.c: 304: }
  3571  000594  D003               	goto	l4416
  3572  000596                     l4414:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;main.c: 305: else{
  3576                           ;main.c: 306: alNoTab--;
  3577  000596  0641               	decf	_alNoTab,f,c
  3578  000598  A0D8               	btfss	status,0,c
  3579  00059A  0642               	decf	_alNoTab+1,f,c
  3580  00059C                     l4416:
  3581                           
  3582                           ;main.c: 307: }
  3583                           ;main.c: 308: }
  3584                           ;main.c: 309: }
  3585                           ;main.c: 311: timedif = get_timeDif(start_s);
  3586  00059C  C096  F018         	movff	executingState@start_s,get_timeDif@start
  3587  0005A0  C097  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  3588  0005A4  EC5B  F006         	call	_get_timeDif	;wreg free
  3589  0005A8  C018  F0AA         	movff	?_get_timeDif,executingState@timedif
  3590  0005AC  C019  F0AB         	movff	?_get_timeDif+1,executingState@timedif+1
  3591                           
  3592                           ;main.c: 312: if(emptyCount > 50){
  3593  0005B0  0100               	movlb	0	; () banked
  3594  0005B2  BF9F               	btfsc	(executingState@emptyCount+1)& (0+255),7,b
  3595  0005B4  D00E               	goto	l4422
  3596  0005B6  0100               	movlb	0	; () banked
  3597  0005B8  519F               	movf	(executingState@emptyCount+1)& (0+255),w,b
  3598  0005BA  E105               	bnz	u3380
  3599  0005BC  0E33               	movlw	51
  3600  0005BE  0100               	movlb	0	; () banked
  3601  0005C0  5D9E               	subwf	executingState@emptyCount& (0+255),w,b
  3602  0005C2  A0D8               	btfss	status,0,c
  3603  0005C4  D006               	goto	l4422
  3604  0005C6                     u3380:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;main.c: 313: state = FINISH;
  3608  0005C6  0E02               	movlw	2
  3609  0005C8  6E4B               	movwf	_state,c
  3610                           
  3611                           ;main.c: 314: runResult = 1;
  3612  0005CA  0E00               	movlw	0
  3613  0005CC  6E46               	movwf	_runResult+1,c
  3614  0005CE  0E01               	movlw	1
  3615  0005D0  D010               	goto	L3
  3616  0005D2                     l4422:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;main.c: 316: }
  3620                           ;main.c: 317: if(timedif > 180){
  3621  0005D2  0100               	movlb	0	; () banked
  3622  0005D4  BFAB               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3623  0005D6  D00F               	goto	l4426
  3624  0005D8  0100               	movlb	0	; () banked
  3625  0005DA  51AB               	movf	(executingState@timedif+1)& (0+255),w,b
  3626  0005DC  E105               	bnz	u3390
  3627  0005DE  0EB5               	movlw	181
  3628  0005E0  0100               	movlb	0	; () banked
  3629  0005E2  5DAA               	subwf	executingState@timedif& (0+255),w,b
  3630  0005E4  A0D8               	btfss	status,0,c
  3631  0005E6  D007               	goto	l4426
  3632  0005E8                     u3390:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;main.c: 318: state = FINISH;
  3636  0005E8  0E02               	movlw	2
  3637  0005EA  6E4B               	movwf	_state,c
  3638                           
  3639                           ;main.c: 319: runResult = 0;
  3640  0005EC  0E00               	movlw	0
  3641  0005EE  6E46               	movwf	_runResult+1,c
  3642  0005F0  0E00               	movlw	0
  3643  0005F2                     L3:
  3644  0005F2  6E45               	movwf	_runResult,c
  3645                           
  3646                           ;main.c: 320: break;
  3647  0005F4  D018               	goto	l267
  3648  0005F6                     l4426:
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;main.c: 321: }
  3652                           ;main.c: 322: _delay((unsigned long)((300)*(10000000/4000.0)));
  3653  0005F6  0E04               	movlw	4
  3654  0005F8  6E35               	movwf	(??_executingState+1)& (0+255),c
  3655  0005FA  0ECF               	movlw	207
  3656  0005FC  6E34               	movwf	??_executingState& (0+255),c
  3657  0005FE  0E02               	movlw	2
  3658  000600                     u3687:
  3659  000600  2EE8               	decfsz	wreg,f,c
  3660  000602  D7FE               	bra	u3687
  3661  000604  2E34               	decfsz	??_executingState& (0+255),f,c
  3662  000606  D7FC               	bra	u3687
  3663  000608  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3664  00060A  D7FA               	bra	u3687
  3665  00060C                     l4428:
  3666  00060C  0100               	movlb	0	; () banked
  3667  00060E  BFAB               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3668  000610  D008               	goto	l4430
  3669  000612  0100               	movlb	0	; () banked
  3670  000614  51AB               	movf	(executingState@timedif+1)& (0+255),w,b
  3671  000616  E107               	bnz	l267
  3672  000618  0EB4               	movlw	180
  3673  00061A  0100               	movlb	0	; () banked
  3674  00061C  5DAA               	subwf	executingState@timedif& (0+255),w,b
  3675  00061E  B0D8               	btfsc	status,0,c
  3676  000620  D002               	goto	l267
  3677  000622                     l4430:
  3678                           
  3679                           ; BSR set to: 0
  3680  000622  B081               	btfsc	3969,0,c	;volatile
  3681  000624  D622               	goto	l4278
  3682  000626                     l267:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main.c: 323: }
  3686                           ;main.c: 325: LATCbits.LATC6 = 0;
  3687  000626  9C8B               	bcf	3979,6,c	;volatile
  3688                           
  3689                           ;main.c: 326: LATBbits.LATB0 = 0;
  3690  000628  908A               	bcf	3978,0,c	;volatile
  3691                           
  3692                           ;main.c: 327: uint8_t res[4];
  3693                           ;main.c: 328: res[0] = alNoTab;
  3694  00062A  C041  F09A         	movff	_alNoTab,executingState@res
  3695                           
  3696                           ;main.c: 329: res[1] = alTab;
  3697  00062E  C043  F09B         	movff	_alTab,executingState@res+1
  3698                           
  3699                           ;main.c: 330: res[2] = snNoLabel;
  3700  000632  C049  F09C         	movff	_snNoLabel,executingState@res+2
  3701                           
  3702                           ;main.c: 331: res[3] = snLabel;
  3703  000636  C047  F09D         	movff	_snLabel,executingState@res+3
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 332: eeprom_LogResult(res);
  3707  00063A  0E9A               	movlw	low executingState@res
  3708  00063C  6E13               	movwf	eeprom_LogResult@data,c
  3709  00063E  0E00               	movlw	high executingState@res
  3710  000640  6E14               	movwf	eeprom_LogResult@data+1,c
  3711  000642  EC3A  F00A         	call	_eeprom_LogResult	;wreg free
  3712                           
  3713                           ;main.c: 333: printf("%d/%d/%d/%d   ",res[0], res[1], res[2], res[3]);
  3714  000646  0EC9               	movlw	low STR_16
  3715  000648  6E1C               	movwf	printf@f,c
  3716  00064A  0EFF               	movlw	high STR_16
  3717  00064C  6E1D               	movwf	printf@f+1,c
  3718  00064E  C09A  F01E         	movff	executingState@res,?_printf+2
  3719  000652  6A1F               	clrf	?_printf+3,c
  3720  000654  C09B  F020         	movff	executingState@res+1,?_printf+4
  3721  000658  6A21               	clrf	?_printf+5,c
  3722  00065A  C09C  F022         	movff	executingState@res+2,?_printf+6
  3723  00065E  6A23               	clrf	?_printf+7,c
  3724  000660  C09D  F024         	movff	executingState@res+3,?_printf+8
  3725  000664  6A25               	clrf	?_printf+9,c
  3726  000666  EC44  F003         	call	_printf	;wreg free
  3727                           
  3728                           ;main.c: 334: _delay((unsigned long)((3000)*(10000000/4000.0)));
  3729  00066A  0E27               	movlw	39
  3730  00066C  6E35               	movwf	(??_executingState+1)& (0+255),c
  3731  00066E  0E0D               	movlw	13
  3732  000670  6E34               	movwf	??_executingState& (0+255),c
  3733  000672  0E26               	movlw	38
  3734  000674                     u3697:
  3735  000674  2EE8               	decfsz	wreg,f,c
  3736  000676  D7FE               	bra	u3697
  3737  000678  2E34               	decfsz	??_executingState& (0+255),f,c
  3738  00067A  D7FC               	bra	u3697
  3739  00067C  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3740  00067E  D7FA               	bra	u3697
  3741  000680  D000               	nop2	
  3742                           
  3743                           ;main.c: 335: state = FINISH;
  3744  000682  0E02               	movlw	2
  3745  000684  6E4B               	movwf	_state,c
  3746  000686  0012               	return		;funcret
  3747  000688                     __end_of_executingState:
  3748                           	opt stack 0
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           intcon	equ	0xFF2
  3756                           intcon3	equ	0xFF0
  3757                           postinc0	equ	0xFEE
  3758                           wreg	equ	0xFE8
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function _update_lcd *****************
  3767 ;; Defined at:
  3768 ;;		line 44 in file "main.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;Total ram usage:        0 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    4
  3789 ;; This function calls:
  3790 ;;		_lcdInst
  3791 ;;		_printf
  3792 ;; This function is called by:
  3793 ;;		_mainState
  3794 ;;		_executingState
  3795 ;;		_finishState
  3796 ;;		_logState
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text11
  3801  000B46                     __ptext11:
  3802                           	opt stack 0
  3803  000B46                     _update_lcd:
  3804                           	opt stack 25
  3805                           
  3806                           ;main.c: 46: lcdInst(0b10000000);;
  3807                           
  3808                           ;incstack = 0
  3809  000B46  0E80               	movlw	128
  3810  000B48  ECC5  F00C         	call	_lcdInst
  3811                           
  3812                           ;main.c: 48: switch (state)
  3813  000B4C  D09F               	goto	l3982
  3814  000B4E                     l3948:
  3815                           
  3816                           ;main.c: 51: printf("%02x/%01x/%02x ", time[6], time[5], time[4]);
  3817  000B4E  0EA9               	movlw	low STR_1
  3818  000B50  6E1C               	movwf	printf@f,c
  3819  000B52  0EFF               	movlw	high STR_1
  3820  000B54  6E1D               	movwf	printf@f+1,c
  3821  000B56  C0C8  F01E         	movff	_time+12,?_printf+2
  3822  000B5A  C0C9  F01F         	movff	_time+13,?_printf+3
  3823  000B5E  C0C6  F020         	movff	_time+10,?_printf+4
  3824  000B62  C0C7  F021         	movff	_time+11,?_printf+5
  3825  000B66  C0C4  F022         	movff	_time+8,?_printf+6
  3826  000B6A  C0C5  F023         	movff	_time+9,?_printf+7
  3827  000B6E  EC44  F003         	call	_printf	;wreg free
  3828                           
  3829                           ;main.c: 52: printf("%02x:%02x:%02x", time[2], time[1], time[0]);
  3830  000B72  0EE7               	movlw	low STR_2
  3831  000B74  6E1C               	movwf	printf@f,c
  3832  000B76  0EFF               	movlw	high STR_2
  3833  000B78  6E1D               	movwf	printf@f+1,c
  3834  000B7A  C0C0  F01E         	movff	_time+4,?_printf+2
  3835  000B7E  C0C1  F01F         	movff	_time+5,?_printf+3
  3836  000B82  C0BE  F020         	movff	_time+2,?_printf+4
  3837  000B86  C0BF  F021         	movff	_time+3,?_printf+5
  3838  000B8A  C0BC  F022         	movff	_time,?_printf+6
  3839  000B8E  C0BD  F023         	movff	_time+1,?_printf+7
  3840  000B92  EC44  F003         	call	_printf	;wreg free
  3841                           
  3842                           ;main.c: 54: lcdInst(0b11000000);;
  3843  000B96  0EC0               	movlw	192
  3844  000B98  ECC5  F00C         	call	_lcdInst
  3845                           
  3846                           ;main.c: 55: printf("1:Start 2:Logs  ");
  3847  000B9C  0E87               	movlw	low STR_3
  3848  000B9E  6E1C               	movwf	printf@f,c
  3849  000BA0  0EFF               	movlw	high STR_3
  3850  000BA2  6E1D               	movwf	printf@f+1,c
  3851  000BA4  EC44  F003         	call	_printf	;wreg free
  3852                           
  3853                           ;main.c: 56: break;
  3854  000BA8  D07F               	goto	l3984
  3855  000BAA                     l3954:
  3856                           
  3857                           ;main.c: 59: printf("aN%d/a%d/sN%d/S%d   ", logdata[0], logdata[1], logdata[2], logdata[
      +                          3]);
  3858  000BAA  0E0B               	movlw	low STR_4
  3859  000BAC  6E1C               	movwf	printf@f,c
  3860  000BAE  0EFF               	movlw	high STR_4
  3861  000BB0  6E1D               	movwf	printf@f+1,c
  3862  000BB2  C04C  F01E         	movff	_logdata,?_printf+2
  3863  000BB6  6A1F               	clrf	?_printf+3,c
  3864  000BB8  C04D  F020         	movff	_logdata+1,?_printf+4
  3865  000BBC  6A21               	clrf	?_printf+5,c
  3866  000BBE  C04E  F022         	movff	_logdata+2,?_printf+6
  3867  000BC2  6A23               	clrf	?_printf+7,c
  3868  000BC4  C04F  F024         	movff	_logdata+3,?_printf+8
  3869  000BC8  6A25               	clrf	?_printf+9,c
  3870  000BCA  EC44  F003         	call	_printf	;wreg free
  3871                           
  3872                           ;main.c: 60: lcdInst(0b11000000);
  3873  000BCE  0EC0               	movlw	192
  3874  000BD0  ECC5  F00C         	call	_lcdInst
  3875                           
  3876                           ;main.c: 61: printf("1:Prev 0:Exit   ");
  3877  000BD4  0E76               	movlw	low STR_5
  3878  000BD6  6E1C               	movwf	printf@f,c
  3879  000BD8  0EFF               	movlw	high STR_5
  3880  000BDA  6E1D               	movwf	printf@f+1,c
  3881  000BDC  EC44  F003         	call	_printf	;wreg free
  3882                           
  3883                           ;main.c: 62: break;
  3884  000BE0  D063               	goto	l3984
  3885  000BE2                     l3960:
  3886                           
  3887                           ;main.c: 64: printf("Executing...    ");
  3888  000BE2  0E54               	movlw	low STR_6
  3889  000BE4  6E1C               	movwf	printf@f,c
  3890  000BE6  0EFF               	movlw	high STR_6
  3891  000BE8  6E1D               	movwf	printf@f+1,c
  3892  000BEA  EC44  F003         	call	_printf	;wreg free
  3893                           
  3894                           ;main.c: 65: lcdInst(0b11000000);;
  3895  000BEE  0EC0               	movlw	192
  3896  000BF0  ECC5  F00C         	call	_lcdInst
  3897                           
  3898                           ;main.c: 66: printf("aN%d/a%d/sN%d/S%d   ",alNoTab, alTab, snNoLabel, snLabel);
  3899  000BF4  0E0B               	movlw	low STR_4
  3900  000BF6  6E1C               	movwf	printf@f,c
  3901  000BF8  0EFF               	movlw	high STR_4
  3902  000BFA  6E1D               	movwf	printf@f+1,c
  3903  000BFC  C041  F01E         	movff	_alNoTab,?_printf+2
  3904  000C00  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3905  000C04  C043  F020         	movff	_alTab,?_printf+4
  3906  000C08  C044  F021         	movff	_alTab+1,?_printf+5
  3907  000C0C  C049  F022         	movff	_snNoLabel,?_printf+6
  3908  000C10  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3909  000C14  C047  F024         	movff	_snLabel,?_printf+8
  3910  000C18  C048  F025         	movff	_snLabel+1,?_printf+9
  3911  000C1C  EC44  F003         	call	_printf	;wreg free
  3912                           
  3913                           ;main.c: 68: break;
  3914  000C20  D043               	goto	l3984
  3915  000C22                     l3966:
  3916                           
  3917                           ;main.c: 71: printf("aN%d/a%d/sN%d/S%d   ",alNoTab, alTab, snNoLabel, snLabel);
  3918  000C22  0E0B               	movlw	low STR_4
  3919  000C24  6E1C               	movwf	printf@f,c
  3920  000C26  0EFF               	movlw	high STR_4
  3921  000C28  6E1D               	movwf	printf@f+1,c
  3922  000C2A  C041  F01E         	movff	_alNoTab,?_printf+2
  3923  000C2E  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3924  000C32  C043  F020         	movff	_alTab,?_printf+4
  3925  000C36  C044  F021         	movff	_alTab+1,?_printf+5
  3926  000C3A  C049  F022         	movff	_snNoLabel,?_printf+6
  3927  000C3E  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3928  000C42  C047  F024         	movff	_snLabel,?_printf+8
  3929  000C46  C048  F025         	movff	_snLabel+1,?_printf+9
  3930  000C4A  EC44  F003         	call	_printf	;wreg free
  3931                           
  3932                           ;main.c: 72: lcdInst(0b11000000);;
  3933  000C4E  0EC0               	movlw	192
  3934  000C50  ECC5  F00C         	call	_lcdInst
  3935                           
  3936                           ;main.c: 74: if(runResult == 1){
  3937  000C54  0445               	decf	_runResult,w,c
  3938  000C56  1046               	iorwf	_runResult+1,w,c
  3939  000C58  A4D8               	btfss	status,2,c
  3940  000C5A  D007               	goto	l3974
  3941                           
  3942                           ;main.c: 75: printf("Finished 0:Home");
  3943  000C5C  0EB9               	movlw	low STR_9
  3944  000C5E  6E1C               	movwf	printf@f,c
  3945  000C60  0EFF               	movlw	high STR_9
  3946  000C62  6E1D               	movwf	printf@f+1,c
  3947  000C64  EC44  F003         	call	_printf	;wreg free
  3948                           
  3949                           ;main.c: 76: }
  3950  000C68  D006               	goto	l3976
  3951  000C6A                     l3974:
  3952                           
  3953                           ;main.c: 77: else
  3954                           ;main.c: 78: {
  3955                           ;main.c: 79: printf("Stopped   0:Home");
  3956  000C6A  0E98               	movlw	low STR_10
  3957  000C6C  6E1C               	movwf	printf@f,c
  3958  000C6E  0EFF               	movlw	high STR_10
  3959  000C70  6E1D               	movwf	printf@f+1,c
  3960  000C72  EC44  F003         	call	_printf	;wreg free
  3961  000C76                     l3976:
  3962                           
  3963                           ;main.c: 80: }
  3964                           ;main.c: 81: lcdInst(0b11000000);;
  3965  000C76  0EC0               	movlw	192
  3966  000C78  ECC5  F00C         	call	_lcdInst
  3967                           
  3968                           ;main.c: 82: break;
  3969  000C7C  D015               	goto	l3984
  3970  000C7E                     l3978:
  3971                           
  3972                           ;main.c: 84: printf("error");
  3973  000C7E  0EF6               	movlw	low STR_11
  3974  000C80  6E1C               	movwf	printf@f,c
  3975  000C82  0EFF               	movlw	high STR_11
  3976  000C84  6E1D               	movwf	printf@f+1,c
  3977  000C86  EC44  F003         	call	_printf	;wreg free
  3978                           
  3979                           ;main.c: 86: }
  3980                           
  3981                           ;main.c: 85: break;
  3982  000C8A  D00E               	goto	l3984
  3983  000C8C                     l3982:
  3984  000C8C  504B               	movf	_state,w,c
  3985                           
  3986                           ; Switch size 1, requested type "space"
  3987                           ; Number of cases is 4, Range of values is 0 to 3
  3988                           ; switch strategies available:
  3989                           ; Name         Instructions Cycles
  3990                           ; simple_byte           13     7 (average)
  3991                           ;	Chosen strategy is simple_byte
  3992  000C8E  0A00               	xorlw	0	; case 0
  3993  000C90  B4D8               	btfsc	status,2,c
  3994  000C92  D75D               	goto	l3948
  3995  000C94  0A01               	xorlw	1	; case 1
  3996  000C96  B4D8               	btfsc	status,2,c
  3997  000C98  D7A4               	goto	l3960
  3998  000C9A  0A03               	xorlw	3	; case 2
  3999  000C9C  B4D8               	btfsc	status,2,c
  4000  000C9E  D7C1               	goto	l3966
  4001  000CA0  0A01               	xorlw	1	; case 3
  4002  000CA2  B4D8               	btfsc	status,2,c
  4003  000CA4  D782               	goto	l3954
  4004  000CA6  D7EB               	goto	l3978
  4005  000CA8                     l3984:
  4006                           
  4007                           ;main.c: 88: lcdInst(0b10000000);;
  4008  000CA8  0E80               	movlw	128
  4009  000CAA  ECC5  F00C         	call	_lcdInst
  4010                           
  4011                           ;main.c: 89: lcdInst(0b11000000);;
  4012  000CAE  0EC0               	movlw	192
  4013  000CB0  ECC5  F00C         	call	_lcdInst
  4014  000CB4  0012               	return		;funcret
  4015  000CB6                     __end_of_update_lcd:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           intcon3	equ	0xFF0
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _printf *****************
  4035 ;; Defined at:
  4036 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  f               2   27[COMRAM] PTR const unsigned char 
  4039 ;;		 -> STR_21(17), STR_20(17), STR_19(15), STR_18(15), 
  4040 ;;		 -> STR_17(15), STR_16(15), STR_15(3), STR_14(18), 
  4041 ;;		 -> STR_13(17), STR_12(17), STR_11(6), STR_10(17), 
  4042 ;;		 -> STR_9(16), STR_8(21), STR_7(21), STR_6(17), 
  4043 ;;		 -> STR_5(17), STR_4(21), STR_3(17), STR_2(15), 
  4044 ;;		 -> STR_1(16), 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  idx             1   41[COMRAM] unsigned char 
  4047 ;;  tmpval          4    0        struct .
  4048 ;;  cp              3    0        PTR const unsigned char 
  4049 ;;  width           2   48[COMRAM] int 
  4050 ;;  val             2   45[COMRAM] unsigned int 
  4051 ;;  ap              2   42[COMRAM] PTR void [1]
  4052 ;;		 -> ?_printf(2), 
  4053 ;;  len             2    0        unsigned int 
  4054 ;;  c               1   50[COMRAM] char 
  4055 ;;  flag            1   47[COMRAM] unsigned char 
  4056 ;;  prec            1   44[COMRAM] char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2   27[COMRAM] int 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:       24 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    3
  4073 ;; This function calls:
  4074 ;;		___lwdiv
  4075 ;;		___lwmod
  4076 ;;		___wmul
  4077 ;;		_isdigit
  4078 ;;		_putch
  4079 ;; This function is called by:
  4080 ;;		_update_lcd
  4081 ;;		_executingState
  4082 ;;		_fixLCD
  4083 ;;		_main
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text12
  4088  000688                     __ptext12:
  4089                           	opt stack 0
  4090  000688                     _printf:
  4091                           	opt stack 27
  4092                           
  4093                           ;doprnt.c: 466: va_list ap;
  4094                           ;doprnt.c: 499: signed char c;
  4095                           ;doprnt.c: 501: int width;
  4096                           ;doprnt.c: 506: signed char prec;
  4097                           ;doprnt.c: 508: unsigned char flag;
  4098                           ;doprnt.c: 523: union {
  4099                           ;doprnt.c: 524: unsigned long vd;
  4100                           ;doprnt.c: 525: double integ;
  4101                           ;doprnt.c: 526: } tmpval;
  4102                           ;doprnt.c: 528: unsigned int val;
  4103                           ;doprnt.c: 529: unsigned len;
  4104                           ;doprnt.c: 530: const char * cp;
  4105                           ;doprnt.c: 533: *ap = __va_start();
  4106                           
  4107                           ;incstack = 0
  4108  000688  0E1E               	movlw	low (?_printf+2)
  4109  00068A  6E2B               	movwf	printf@ap,c
  4110  00068C  0E00               	movlw	high (?_printf+2)
  4111  00068E  6E2C               	movwf	printf@ap+1,c
  4112                           
  4113                           ;doprnt.c: 536: while(c = *f++) {
  4114  000690  D174               	goto	l3854
  4115  000692                     l3728:
  4116                           
  4117                           ;doprnt.c: 538: if(c != '%')
  4118  000692  0E25               	movlw	37
  4119  000694  1833               	xorwf	printf@c,w,c
  4120  000696  B4D8               	btfsc	status,2,c
  4121  000698  D004               	goto	l3732
  4122                           
  4123                           ;doprnt.c: 540: {
  4124                           ;doprnt.c: 541: (putch(c) );
  4125  00069A  5033               	movf	printf@c,w,c
  4126  00069C  ECBF  F00C         	call	_putch
  4127                           
  4128                           ;doprnt.c: 542: continue;
  4129  0006A0  D16C               	goto	l3854
  4130  0006A2                     l3732:
  4131                           
  4132                           ;doprnt.c: 543: }
  4133                           ;doprnt.c: 546: width = 0;
  4134  0006A2  0E00               	movlw	0
  4135  0006A4  6E32               	movwf	printf@width+1,c
  4136  0006A6  0E00               	movlw	0
  4137  0006A8  6E31               	movwf	printf@width,c
  4138                           
  4139                           ;doprnt.c: 548: flag = 0;
  4140  0006AA  0E00               	movlw	0
  4141  0006AC  6E30               	movwf	printf@flag,c
  4142                           
  4143                           ;doprnt.c: 551: switch(*f) {
  4144                           
  4145                           ;doprnt.c: 550: for(;;) {
  4146  0006AE  D003               	goto	l3738
  4147  0006B0                     l3734:
  4148                           
  4149                           ;doprnt.c: 580: flag |= 0x04;
  4150  0006B0  8430               	bsf	printf@flag,2,c
  4151                           
  4152                           ;doprnt.c: 581: f++;
  4153  0006B2  4A1C               	infsnz	printf@f,f,c
  4154  0006B4  2A1D               	incf	printf@f+1,f,c
  4155  0006B6                     l3738:
  4156  0006B6  C01C  FFF6         	movff	printf@f,tblptrl
  4157  0006BA  C01D  FFF7         	movff	printf@f+1,tblptrh
  4158  0006BE                     	if	0	;tblptru may be non-zero
  4159  0006BE                     	endif
  4160  0006BE                     	if	0	;tblptru may be non-zero
  4161  0006BE                     	endif
  4162  0006BE  0008               	tblrd		*
  4163  0006C0  50F5               	movf	tablat,w,c
  4164                           
  4165                           ; Switch size 1, requested type "space"
  4166                           ; Number of cases is 1, Range of values is 48 to 48
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte            4     3 (average)
  4170                           ;	Chosen strategy is simple_byte
  4171  0006C2  0A30               	xorlw	48	; case 48
  4172  0006C4  B4D8               	btfsc	status,2,c
  4173  0006C6  D7F4               	goto	l3734
  4174                           
  4175                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4176                           
  4177                           ;doprnt.c: 586: }
  4178                           
  4179                           ;doprnt.c: 585: break;
  4180  0006C8  C01C  FFF6         	movff	printf@f,tblptrl
  4181  0006CC  C01D  FFF7         	movff	printf@f+1,tblptrh
  4182  0006D0                     	if	0	;tblptru may be non-zero
  4183  0006D0                     	endif
  4184  0006D0                     	if	0	;tblptru may be non-zero
  4185  0006D0                     	endif
  4186  0006D0  0008               	tblrd		*
  4187  0006D2  50F5               	movf	tablat,w,c
  4188  0006D4  EC4B  F00C         	call	_isdigit
  4189  0006D8  A0D8               	btfss	status,0,c
  4190  0006DA  D035               	goto	l3756
  4191                           
  4192                           ;doprnt.c: 598: width = 0;
  4193  0006DC  0E00               	movlw	0
  4194  0006DE  6E32               	movwf	printf@width+1,c
  4195  0006E0  0E00               	movlw	0
  4196  0006E2  6E31               	movwf	printf@width,c
  4197  0006E4                     l3744:
  4198                           
  4199                           ;doprnt.c: 600: width *= 10;
  4200  0006E4  C031  F010         	movff	printf@width,___wmul@multiplier
  4201  0006E8  C032  F011         	movff	printf@width+1,___wmul@multiplier+1
  4202  0006EC  0E00               	movlw	0
  4203  0006EE  6E13               	movwf	___wmul@multiplicand+1,c
  4204  0006F0  0E0A               	movlw	10
  4205  0006F2  6E12               	movwf	___wmul@multiplicand,c
  4206  0006F4  EC25  F00C         	call	___wmul	;wreg free
  4207  0006F8  C010  F031         	movff	?___wmul,printf@width
  4208  0006FC  C011  F032         	movff	?___wmul+1,printf@width+1
  4209                           
  4210                           ;doprnt.c: 601: width += *f++ - '0';
  4211  000700  0ED0               	movlw	208
  4212  000702  6E26               	movwf	??_printf& (0+255),c
  4213  000704  0EFF               	movlw	255
  4214  000706  6E27               	movwf	(??_printf+1)& (0+255),c
  4215  000708  C01C  FFF6         	movff	printf@f,tblptrl
  4216  00070C  C01D  FFF7         	movff	printf@f+1,tblptrh
  4217  000710                     	if	0	;tblptru may be non-zero
  4218  000710                     	endif
  4219  000710                     	if	0	;tblptru may be non-zero
  4220  000710                     	endif
  4221  000710  0008               	tblrd		*
  4222  000712  50F5               	movf	tablat,w,c
  4223  000714  6E28               	movwf	(??_printf+2)& (0+255),c
  4224  000716  6A29               	clrf	(??_printf+3)& (0+255),c
  4225  000718  5026               	movf	??_printf,w,c
  4226  00071A  2628               	addwf	??_printf+2,f,c
  4227  00071C  5027               	movf	??_printf+1,w,c
  4228  00071E  2229               	addwfc	??_printf+3,f,c
  4229  000720  5028               	movf	??_printf+2,w,c
  4230  000722  2631               	addwf	printf@width,f,c
  4231  000724  5029               	movf	??_printf+3,w,c
  4232  000726  2232               	addwfc	printf@width+1,f,c
  4233  000728  4A1C               	infsnz	printf@f,f,c
  4234  00072A  2A1D               	incf	printf@f+1,f,c
  4235                           
  4236                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4237  00072C  C01C  FFF6         	movff	printf@f,tblptrl
  4238  000730  C01D  FFF7         	movff	printf@f+1,tblptrh
  4239  000734                     	if	0	;tblptru may be non-zero
  4240  000734                     	endif
  4241  000734                     	if	0	;tblptru may be non-zero
  4242  000734                     	endif
  4243  000734  0008               	tblrd		*
  4244  000736  50F5               	movf	tablat,w,c
  4245  000738  EC4B  F00C         	call	_isdigit
  4246  00073C  A0D8               	btfss	status,0,c
  4247  00073E  D003               	goto	l3756
  4248  000740  D7D1               	goto	l3744
  4249  000742                     l3752:
  4250                           
  4251                           ;doprnt.c: 721: flag |= 0x80;
  4252  000742  8E30               	bsf	printf@flag,7,c
  4253                           
  4254                           ;doprnt.c: 723: break;
  4255  000744  D017               	goto	l578
  4256  000746                     l3756:
  4257  000746  C01C  FFF6         	movff	printf@f,tblptrl
  4258  00074A  C01D  FFF7         	movff	printf@f+1,tblptrh
  4259  00074E  4A1C               	infsnz	printf@f,f,c
  4260  000750  2A1D               	incf	printf@f+1,f,c
  4261  000752                     	if	0	;tblptru may be non-zero
  4262  000752                     	endif
  4263  000752                     	if	0	;tblptru may be non-zero
  4264  000752                     	endif
  4265  000752  0008               	tblrd		*
  4266  000754  CFF5 F033          	movff	tablat,printf@c
  4267  000758  5033               	movf	printf@c,w,c
  4268                           
  4269                           ; Switch size 1, requested type "space"
  4270                           ; Number of cases is 4, Range of values is 0 to 120
  4271                           ; switch strategies available:
  4272                           ; Name         Instructions Cycles
  4273                           ; simple_byte           13     7 (average)
  4274                           ;	Chosen strategy is simple_byte
  4275  00075A  0A00               	xorlw	0	; case 0
  4276  00075C  B4D8               	btfsc	status,2,c
  4277  00075E  0012               	return	
  4278  000760  0A64               	xorlw	100	; case 100
  4279  000762  B4D8               	btfsc	status,2,c
  4280  000764  D007               	goto	l578
  4281  000766  0A0D               	xorlw	13	; case 105
  4282  000768  B4D8               	btfsc	status,2,c
  4283  00076A  D004               	goto	l578
  4284  00076C  0A11               	xorlw	17	; case 120
  4285  00076E  B4D8               	btfsc	status,2,c
  4286  000770  D7E8               	goto	l3752
  4287  000772  D103               	goto	l3854
  4288  000774                     l578:
  4289                           
  4290                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4291  000774  BE30               	btfsc	printf@flag,7,c
  4292  000776  D015               	goto	l3768
  4293                           
  4294                           ;doprnt.c: 1253: {
  4295                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4296  000778  C02B  FFD9         	movff	printf@ap,fsr2l
  4297  00077C  C02C  FFDA         	movff	printf@ap+1,fsr2h
  4298  000780  CFDE F02E          	movff	postinc2,printf@val
  4299  000784  CFDD F02F          	movff	postdec2,printf@val+1
  4300  000788  0E02               	movlw	2
  4301  00078A  262B               	addwf	printf@ap,f,c
  4302  00078C  0E00               	movlw	0
  4303  00078E  222C               	addwfc	printf@ap+1,f,c
  4304                           
  4305                           ;doprnt.c: 1261: if((int)val < 0) {
  4306  000790  AE2F               	btfss	printf@val+1,7,c
  4307  000792  D044               	goto	l3802
  4308                           
  4309                           ;doprnt.c: 1262: flag |= 0x03;
  4310  000794  0E03               	movlw	3
  4311  000796  1230               	iorwf	printf@flag,f,c
  4312                           
  4313                           ;doprnt.c: 1263: val = -val;
  4314  000798  6C2E               	negf	printf@val,c
  4315  00079A  1E2F               	comf	printf@val+1,f,c
  4316  00079C  B0D8               	btfsc	status,0,c
  4317  00079E  2A2F               	incf	printf@val+1,f,c
  4318                           
  4319                           ;doprnt.c: 1264: }
  4320                           ;doprnt.c: 1266: }
  4321  0007A0  D03D               	goto	l3802
  4322  0007A2                     l3768:
  4323                           
  4324                           ;doprnt.c: 1268: else
  4325                           ;doprnt.c: 1273: {
  4326                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4327  0007A2  C02B  FFD9         	movff	printf@ap,fsr2l
  4328  0007A6  C02C  FFDA         	movff	printf@ap+1,fsr2h
  4329  0007AA  CFDE F02E          	movff	postinc2,printf@val
  4330  0007AE  CFDD F02F          	movff	postdec2,printf@val+1
  4331  0007B2  0E02               	movlw	2
  4332  0007B4  262B               	addwf	printf@ap,f,c
  4333  0007B6  0E00               	movlw	0
  4334  0007B8  222C               	addwfc	printf@ap+1,f,c
  4335                           
  4336                           ;doprnt.c: 1287: }
  4337                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4338  0007BA  D030               	goto	l3802
  4339  0007BC                     l3772:
  4340                           
  4341                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4342  0007BC  0E01               	movlw	1
  4343  0007BE  6E33               	movwf	printf@c,c
  4344  0007C0                     l3774:
  4345  0007C0  0E05               	movlw	5
  4346  0007C2  1833               	xorwf	printf@c,w,c
  4347  0007C4  B4D8               	btfsc	status,2,c
  4348  0007C6  D032               	goto	l3804
  4349                           
  4350                           ;doprnt.c: 1306: if(val < dpowers[c])
  4351  0007C8  5033               	movf	printf@c,w,c
  4352  0007CA  0D02               	mullw	2
  4353  0007CC  0EF2               	movlw	low _dpowers
  4354  0007CE  24F3               	addwf	prodl,w,c
  4355  0007D0  6EF6               	movwf	tblptrl,c
  4356  0007D2  0EFE               	movlw	high _dpowers
  4357  0007D4  20F4               	addwfc	prodh,w,c
  4358  0007D6  6EF7               	movwf	tblptrh,c
  4359  0007D8                     	if	0	;There are less than 3 active tblptr bytes
  4360  0007D8                     	endif
  4361  0007D8  0009               	tblrd		*+
  4362  0007DA  50F5               	movf	tablat,w,c
  4363  0007DC  5C2E               	subwf	printf@val,w,c
  4364  0007DE  0009               	tblrd		*+
  4365  0007E0  50F5               	movf	tablat,w,c
  4366  0007E2  582F               	subwfb	printf@val+1,w,c
  4367  0007E4  A0D8               	btfss	status,0,c
  4368  0007E6  D022               	goto	l3804
  4369                           
  4370                           ;doprnt.c: 1307: break;
  4371  0007E8  2A33               	incf	printf@c,f,c
  4372  0007EA  D7EA               	goto	l3774
  4373  0007EC                     l3786:
  4374                           
  4375                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4376  0007EC  0E01               	movlw	1
  4377  0007EE  6E33               	movwf	printf@c,c
  4378  0007F0                     l3788:
  4379  0007F0  0E04               	movlw	4
  4380  0007F2  1833               	xorwf	printf@c,w,c
  4381  0007F4  B4D8               	btfsc	status,2,c
  4382  0007F6  D01A               	goto	l3804
  4383                           
  4384                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4385  0007F8  5033               	movf	printf@c,w,c
  4386  0007FA  0D02               	mullw	2
  4387  0007FC  0EFC               	movlw	low _hexpowers
  4388  0007FE  24F3               	addwf	prodl,w,c
  4389  000800  6EF6               	movwf	tblptrl,c
  4390  000802  0EFE               	movlw	high _hexpowers
  4391  000804  20F4               	addwfc	prodh,w,c
  4392  000806  6EF7               	movwf	tblptrh,c
  4393  000808                     	if	0	;There are less than 3 active tblptr bytes
  4394  000808                     	endif
  4395  000808  0009               	tblrd		*+
  4396  00080A  50F5               	movf	tablat,w,c
  4397  00080C  5C2E               	subwf	printf@val,w,c
  4398  00080E  0009               	tblrd		*+
  4399  000810  50F5               	movf	tablat,w,c
  4400  000812  582F               	subwfb	printf@val+1,w,c
  4401  000814  A0D8               	btfss	status,0,c
  4402  000816  D00A               	goto	l3804
  4403                           
  4404                           ;doprnt.c: 1318: break;
  4405  000818  2A33               	incf	printf@c,f,c
  4406  00081A  D7EA               	goto	l3788
  4407  00081C                     l3802:
  4408  00081C  5030               	movf	printf@flag,w,c
  4409  00081E  0B80               	andlw	128
  4410                           
  4411                           ; Switch size 1, requested type "space"
  4412                           ; Number of cases is 2, Range of values is 0 to 128
  4413                           ; switch strategies available:
  4414                           ; Name         Instructions Cycles
  4415                           ; simple_byte            7     4 (average)
  4416                           ;	Chosen strategy is simple_byte
  4417  000820  0A00               	xorlw	0	; case 0
  4418  000822  B4D8               	btfsc	status,2,c
  4419  000824  D7CB               	goto	l3772
  4420  000826  0A80               	xorlw	128	; case 128
  4421  000828  B4D8               	btfsc	status,2,c
  4422  00082A  D7E0               	goto	l3786
  4423  00082C                     l3804:
  4424                           
  4425                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4426  00082C  5031               	movf	printf@width,w,c
  4427  00082E  1032               	iorwf	printf@width+1,w,c
  4428  000830  B4D8               	btfsc	status,2,c
  4429  000832  D009               	goto	l3810
  4430  000834  C030  F026         	movff	printf@flag,??_printf
  4431  000838  0E03               	movlw	3
  4432  00083A  1626               	andwf	??_printf,f,c
  4433  00083C  B4D8               	btfsc	status,2,c
  4434  00083E  D003               	goto	l3810
  4435                           
  4436                           ;doprnt.c: 1346: width--;
  4437  000840  0631               	decf	printf@width,f,c
  4438  000842  A0D8               	btfss	status,0,c
  4439  000844  0632               	decf	printf@width+1,f,c
  4440  000846                     l3810:
  4441                           
  4442                           ;doprnt.c: 1381: if(width > c)
  4443  000846  0E80               	movlw	128
  4444  000848  BE33               	btfsc	printf@c,7,c
  4445  00084A  0E7F               	movlw	127
  4446  00084C  6E26               	movwf	??_printf& (0+255),c
  4447  00084E  5031               	movf	printf@width,w,c
  4448  000850  5C33               	subwf	printf@c,w,c
  4449  000852  5032               	movf	printf@width+1,w,c
  4450  000854  0A80               	xorlw	128
  4451  000856  5826               	subwfb	??_printf& (0+255),w,c
  4452  000858  B0D8               	btfsc	status,0,c
  4453  00085A  D007               	goto	l3814
  4454                           
  4455                           ;doprnt.c: 1382: width -= c;
  4456  00085C  5033               	movf	printf@c,w,c
  4457  00085E  5E31               	subwf	printf@width,f,c
  4458  000860  0E00               	movlw	0
  4459  000862  BE33               	btfsc	printf@c,7,c
  4460  000864  0EFF               	movlw	255
  4461  000866  5A32               	subwfb	printf@width+1,f,c
  4462  000868  D004               	goto	l3816
  4463  00086A                     l3814:
  4464                           
  4465                           ;doprnt.c: 1383: else
  4466                           ;doprnt.c: 1384: width = 0;
  4467  00086A  0E00               	movlw	0
  4468  00086C  6E32               	movwf	printf@width+1,c
  4469  00086E  0E00               	movlw	0
  4470  000870  6E31               	movwf	printf@width,c
  4471  000872                     l3816:
  4472                           
  4473                           ;doprnt.c: 1387: if(flag & 0x04) {
  4474  000872  A430               	btfss	printf@flag,2,c
  4475  000874  D014               	goto	l3828
  4476                           
  4477                           ;doprnt.c: 1392: if(flag & 0x03)
  4478  000876  C030  F026         	movff	printf@flag,??_printf
  4479  00087A  0E03               	movlw	3
  4480  00087C  1626               	andwf	??_printf,f,c
  4481  00087E  B4D8               	btfsc	status,2,c
  4482  000880  D003               	goto	l3822
  4483                           
  4484                           ;doprnt.c: 1393: (putch('-') );
  4485  000882  0E2D               	movlw	45
  4486  000884  ECBF  F00C         	call	_putch
  4487  000888                     l3822:
  4488                           
  4489                           ;doprnt.c: 1415: if(width)
  4490  000888  5031               	movf	printf@width,w,c
  4491  00088A  1032               	iorwf	printf@width+1,w,c
  4492  00088C  B4D8               	btfsc	status,2,c
  4493  00088E  D01E               	goto	l3838
  4494                           
  4495                           ;doprnt.c: 1417: (putch('0') );
  4496                           
  4497                           ;doprnt.c: 1416: do
  4498  000890  0E30               	movlw	48
  4499  000892  ECBF  F00C         	call	_putch
  4500                           
  4501                           ;doprnt.c: 1418: while(--width);
  4502  000896  0631               	decf	printf@width,f,c
  4503  000898  A0D8               	btfss	status,0,c
  4504  00089A  0632               	decf	printf@width+1,f,c
  4505  00089C  D7F5               	goto	l3822
  4506  00089E                     l3828:
  4507                           
  4508                           ;doprnt.c: 1422: {
  4509                           ;doprnt.c: 1424: if(width
  4510                           ;doprnt.c: 1428: )
  4511  00089E  5031               	movf	printf@width,w,c
  4512  0008A0  1032               	iorwf	printf@width+1,w,c
  4513  0008A2  B4D8               	btfsc	status,2,c
  4514  0008A4  D00A               	goto	l3834
  4515  0008A6                     l3830:
  4516                           
  4517                           ;doprnt.c: 1430: (putch(' ') );
  4518  0008A6  0E20               	movlw	32
  4519  0008A8  ECBF  F00C         	call	_putch
  4520                           
  4521                           ;doprnt.c: 1431: while(--width);
  4522  0008AC  0631               	decf	printf@width,f,c
  4523  0008AE  A0D8               	btfss	status,0,c
  4524  0008B0  0632               	decf	printf@width+1,f,c
  4525  0008B2  5031               	movf	printf@width,w,c
  4526  0008B4  1032               	iorwf	printf@width+1,w,c
  4527  0008B6  A4D8               	btfss	status,2,c
  4528  0008B8  D7F6               	goto	l3830
  4529  0008BA                     l3834:
  4530                           
  4531                           ;doprnt.c: 1438: if(flag & 0x03)
  4532  0008BA  C030  F026         	movff	printf@flag,??_printf
  4533  0008BE  0E03               	movlw	3
  4534  0008C0  1626               	andwf	??_printf,f,c
  4535  0008C2  B4D8               	btfsc	status,2,c
  4536  0008C4  D003               	goto	l3838
  4537                           
  4538                           ;doprnt.c: 1439: (putch('-') );
  4539  0008C6  0E2D               	movlw	45
  4540  0008C8  ECBF  F00C         	call	_putch
  4541  0008CC                     l3838:
  4542                           
  4543                           ;doprnt.c: 1469: }
  4544                           ;doprnt.c: 1472: prec = c;
  4545  0008CC  C033  F02D         	movff	printf@c,printf@prec
  4546                           
  4547                           ;doprnt.c: 1474: while(prec--) {
  4548  0008D0  D050               	goto	l3852
  4549  0008D2                     l3840:
  4550                           
  4551                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4552  0008D2  502D               	movf	printf@prec,w,c
  4553  0008D4  0D02               	mullw	2
  4554  0008D6  0EF2               	movlw	low _dpowers
  4555  0008D8  24F3               	addwf	prodl,w,c
  4556  0008DA  6EF6               	movwf	tblptrl,c
  4557  0008DC  0EFE               	movlw	high _dpowers
  4558  0008DE  20F4               	addwfc	prodh,w,c
  4559  0008E0  6EF7               	movwf	tblptrh,c
  4560  0008E2                     	if	0	;There are less than 3 active tblptr bytes
  4561  0008E2                     	endif
  4562  0008E2  0009               	tblrd		*+
  4563  0008E4  CFF5 F012          	movff	tablat,___lwdiv@divisor
  4564  0008E8  000A               	tblrd		*-
  4565  0008EA  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  4566  0008EE  C02E  F010         	movff	printf@val,___lwdiv@dividend
  4567  0008F2  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  4568  0008F6  EC91  F00A         	call	___lwdiv	;wreg free
  4569  0008FA  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  4570  0008FE  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  4571  000902  0E00               	movlw	0
  4572  000904  6E1A               	movwf	___lwmod@divisor+1,c
  4573  000906  0E0A               	movlw	10
  4574  000908  6E19               	movwf	___lwmod@divisor,c
  4575  00090A  EC25  F00B         	call	___lwmod	;wreg free
  4576  00090E  5017               	movf	?___lwmod,w,c
  4577  000910  0F30               	addlw	48
  4578  000912  6E33               	movwf	printf@c,c
  4579                           
  4580                           ;doprnt.c: 1491: break;
  4581  000914  D02B               	goto	l3850
  4582  000916                     l3842:
  4583                           
  4584                           ;doprnt.c: 1499: {
  4585                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4586  000916  C02E  F010         	movff	printf@val,___lwdiv@dividend
  4587  00091A  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  4588  00091E  502D               	movf	printf@prec,w,c
  4589  000920  0D02               	mullw	2
  4590  000922  0EFC               	movlw	low _hexpowers
  4591  000924  24F3               	addwf	prodl,w,c
  4592  000926  6EF6               	movwf	tblptrl,c
  4593  000928  0EFE               	movlw	high _hexpowers
  4594  00092A  20F4               	addwfc	prodh,w,c
  4595  00092C  6EF7               	movwf	tblptrh,c
  4596  00092E                     	if	0	;There are less than 3 active tblptr bytes
  4597  00092E                     	endif
  4598  00092E  0009               	tblrd		*+
  4599  000930  CFF5 F012          	movff	tablat,___lwdiv@divisor
  4600  000934  000A               	tblrd		*-
  4601  000936  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  4602  00093A  EC91  F00A         	call	___lwdiv	;wreg free
  4603  00093E  5010               	movf	?___lwdiv,w,c
  4604  000940  0B0F               	andlw	15
  4605  000942  6E2A               	movwf	printf@idx,c
  4606                           
  4607                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4608  000944  502A               	movf	printf@idx,w,c
  4609  000946  0D01               	mullw	1
  4610  000948  0E32               	movlw	low STR_22
  4611  00094A  24F3               	addwf	prodl,w,c
  4612  00094C  6EF6               	movwf	tblptrl,c
  4613  00094E  0EFF               	movlw	high STR_22
  4614  000950  20F4               	addwfc	prodh,w,c
  4615  000952  6EF7               	movwf	tblptrh,c
  4616  000954                     	if	0	;There are less than 3 active tblptr bytes
  4617  000954                     	endif
  4618  000954  0008               	tblrd		*
  4619  000956  CFF5 F033          	movff	tablat,printf@c
  4620                           
  4621                           ;doprnt.c: 1523: }
  4622                           
  4623                           ;doprnt.c: 1508: }
  4624                           ;doprnt.c: 1510: break;
  4625  00095A  D008               	goto	l3850
  4626  00095C                     l3848:
  4627  00095C  5030               	movf	printf@flag,w,c
  4628  00095E  0B80               	andlw	128
  4629                           
  4630                           ; Switch size 1, requested type "space"
  4631                           ; Number of cases is 2, Range of values is 0 to 128
  4632                           ; switch strategies available:
  4633                           ; Name         Instructions Cycles
  4634                           ; simple_byte            7     4 (average)
  4635                           ;	Chosen strategy is simple_byte
  4636  000960  0A00               	xorlw	0	; case 0
  4637  000962  B4D8               	btfsc	status,2,c
  4638  000964  D7B6               	goto	l3840
  4639  000966  0A80               	xorlw	128	; case 128
  4640  000968  B4D8               	btfsc	status,2,c
  4641  00096A  D7D5               	goto	l3842
  4642  00096C                     l3850:
  4643                           
  4644                           ;doprnt.c: 1524: (putch(c) );
  4645  00096C  5033               	movf	printf@c,w,c
  4646  00096E  ECBF  F00C         	call	_putch
  4647  000972                     l3852:
  4648  000972  062D               	decf	printf@prec,f,c
  4649  000974  282D               	incf	printf@prec,w,c
  4650  000976  A4D8               	btfss	status,2,c
  4651  000978  D7F1               	goto	l3848
  4652  00097A                     l3854:
  4653  00097A  C01C  FFF6         	movff	printf@f,tblptrl
  4654  00097E  C01D  FFF7         	movff	printf@f+1,tblptrh
  4655  000982  4A1C               	infsnz	printf@f,f,c
  4656  000984  2A1D               	incf	printf@f+1,f,c
  4657  000986                     	if	0	;tblptru may be non-zero
  4658  000986                     	endif
  4659  000986                     	if	0	;tblptru may be non-zero
  4660  000986                     	endif
  4661  000986  0008               	tblrd		*
  4662  000988  CFF5 F033          	movff	tablat,printf@c
  4663  00098C  5033               	movf	printf@c,w,c
  4664  00098E  B4D8               	btfsc	status,2,c
  4665  000990  0012               	return	
  4666  000992  D67F               	goto	l3728
  4667  000994                     __end_of_printf:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           intcon3	equ	0xFF0
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _putch *****************
  4687 ;; Defined at:
  4688 ;;		line 31 in file "lcd.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  data            1    wreg     unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  data            1   17[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;Total ram usage:        1 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    2
  4709 ;; This function calls:
  4710 ;;		_lcdNibble
  4711 ;; This function is called by:
  4712 ;;		_printf
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text13
  4717  00197E                     __ptext13:
  4718                           	opt stack 0
  4719  00197E                     _putch:
  4720                           	opt stack 27
  4721                           
  4722                           ;incstack = 0
  4723                           ;putch@data stored from wreg
  4724  00197E  6E12               	movwf	putch@data,c
  4725                           
  4726                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4727  001980  848C               	bsf	3980,2,c	;volatile
  4728                           
  4729                           ;lcd.c: 33: lcdNibble(data);
  4730  001982  5012               	movf	putch@data,w,c
  4731  001984  EC66  F00A         	call	_lcdNibble
  4732  001988  0012               	return		;funcret
  4733  00198A                     __end_of_putch:
  4734                           	opt stack 0
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           intcon3	equ	0xFF0
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           fsr2h	equ	0xFDA
  4749                           fsr2l	equ	0xFD9
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function _isdigit *****************
  4753 ;; Defined at:
  4754 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  c               1    wreg     unsigned char 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  c               1   17[COMRAM] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;		None               void
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        3 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    1
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_printf
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text14
  4783  001896                     __ptext14:
  4784                           	opt stack 0
  4785  001896                     _isdigit:
  4786                           	opt stack 28
  4787                           
  4788                           ;incstack = 0
  4789                           ;isdigit@c stored from wreg
  4790  001896  6E12               	movwf	isdigit@c,c
  4791  001898  0E00               	movlw	0
  4792  00189A  6E11               	movwf	_isdigit$1353,c
  4793  00189C  0E3A               	movlw	58
  4794  00189E  6012               	cpfslt	isdigit@c,c
  4795  0018A0  D005               	goto	l3674
  4796  0018A2  0E2F               	movlw	47
  4797  0018A4  6412               	cpfsgt	isdigit@c,c
  4798  0018A6  D002               	goto	l3674
  4799  0018A8  0E01               	movlw	1
  4800  0018AA  6E11               	movwf	_isdigit$1353,c
  4801  0018AC                     l3674:
  4802  0018AC  C011  F010         	movff	_isdigit$1353,??_isdigit
  4803  0018B0  3010               	rrcf	??_isdigit,w,c
  4804  0018B2  0012               	return	
  4805  0018B4                     __end_of_isdigit:
  4806                           	opt stack 0
  4807                           tblptru	equ	0xFF8
  4808                           tblptrh	equ	0xFF7
  4809                           tblptrl	equ	0xFF6
  4810                           tablat	equ	0xFF5
  4811                           prodh	equ	0xFF4
  4812                           prodl	equ	0xFF3
  4813                           intcon	equ	0xFF2
  4814                           intcon3	equ	0xFF0
  4815                           postinc0	equ	0xFEE
  4816                           wreg	equ	0xFE8
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function ___lwmod *****************
  4825 ;; Defined at:
  4826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  dividend        2   22[COMRAM] unsigned int 
  4829 ;;  divisor         2   24[COMRAM] unsigned int 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  counter         1   26[COMRAM] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  2   22[COMRAM] unsigned int 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:        5 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    1
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_printf
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text15
  4856  00164A                     __ptext15:
  4857                           	opt stack 0
  4858  00164A                     ___lwmod:
  4859                           	opt stack 28
  4860                           
  4861                           ;incstack = 0
  4862  00164A  5019               	movf	___lwmod@divisor,w,c
  4863  00164C  101A               	iorwf	___lwmod@divisor+1,w,c
  4864  00164E  B4D8               	btfsc	status,2,c
  4865  001650  D018               	goto	l1033
  4866  001652  0E01               	movlw	1
  4867  001654  6E1B               	movwf	___lwmod@counter,c
  4868  001656  D004               	goto	l3712
  4869  001658                     l3710:
  4870  001658  90D8               	bcf	status,0,c
  4871  00165A  3619               	rlcf	___lwmod@divisor,f,c
  4872  00165C  361A               	rlcf	___lwmod@divisor+1,f,c
  4873  00165E  2A1B               	incf	___lwmod@counter,f,c
  4874  001660                     l3712:
  4875  001660  AE1A               	btfss	___lwmod@divisor+1,7,c
  4876  001662  D7FA               	goto	l3710
  4877  001664                     l3714:
  4878  001664  5019               	movf	___lwmod@divisor,w,c
  4879  001666  5C17               	subwf	___lwmod@dividend,w,c
  4880  001668  501A               	movf	___lwmod@divisor+1,w,c
  4881  00166A  5818               	subwfb	___lwmod@dividend+1,w,c
  4882  00166C  A0D8               	btfss	status,0,c
  4883  00166E  D004               	goto	l3718
  4884  001670  5019               	movf	___lwmod@divisor,w,c
  4885  001672  5E17               	subwf	___lwmod@dividend,f,c
  4886  001674  501A               	movf	___lwmod@divisor+1,w,c
  4887  001676  5A18               	subwfb	___lwmod@dividend+1,f,c
  4888  001678                     l3718:
  4889  001678  90D8               	bcf	status,0,c
  4890  00167A  321A               	rrcf	___lwmod@divisor+1,f,c
  4891  00167C  3219               	rrcf	___lwmod@divisor,f,c
  4892  00167E  2E1B               	decfsz	___lwmod@counter,f,c
  4893  001680  D7F1               	goto	l3714
  4894  001682                     l1033:
  4895  001682  C017  F017         	movff	___lwmod@dividend,?___lwmod
  4896  001686  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  4897  00168A  0012               	return		;funcret
  4898  00168C                     __end_of___lwmod:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon3	equ	0xFF0
  4908                           postinc0	equ	0xFEE
  4909                           wreg	equ	0xFE8
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function ___lwdiv *****************
  4918 ;; Defined at:
  4919 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  dividend        2   15[COMRAM] unsigned int 
  4922 ;;  divisor         2   17[COMRAM] unsigned int 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  quotient        2   20[COMRAM] unsigned int 
  4925 ;;  counter         1   19[COMRAM] unsigned char 
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  2   15[COMRAM] unsigned int 
  4928 ;; Registers used:
  4929 ;;		wreg, status,2, status,0
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;Total ram usage:        7 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    1
  4942 ;; This function calls:
  4943 ;;		Nothing
  4944 ;; This function is called by:
  4945 ;;		_printf
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text16
  4950  001522                     __ptext16:
  4951                           	opt stack 0
  4952  001522                     ___lwdiv:
  4953                           	opt stack 28
  4954                           
  4955                           ;incstack = 0
  4956  001522  0E00               	movlw	0
  4957  001524  6E16               	movwf	___lwdiv@quotient+1,c
  4958  001526  0E00               	movlw	0
  4959  001528  6E15               	movwf	___lwdiv@quotient,c
  4960  00152A  5012               	movf	___lwdiv@divisor,w,c
  4961  00152C  1013               	iorwf	___lwdiv@divisor+1,w,c
  4962  00152E  B4D8               	btfsc	status,2,c
  4963  001530  D01C               	goto	l1023
  4964  001532  0E01               	movlw	1
  4965  001534  6E14               	movwf	___lwdiv@counter,c
  4966  001536  D004               	goto	l3692
  4967  001538                     l3690:
  4968  001538  90D8               	bcf	status,0,c
  4969  00153A  3612               	rlcf	___lwdiv@divisor,f,c
  4970  00153C  3613               	rlcf	___lwdiv@divisor+1,f,c
  4971  00153E  2A14               	incf	___lwdiv@counter,f,c
  4972  001540                     l3692:
  4973  001540  AE13               	btfss	___lwdiv@divisor+1,7,c
  4974  001542  D7FA               	goto	l3690
  4975  001544                     l3694:
  4976  001544  90D8               	bcf	status,0,c
  4977  001546  3615               	rlcf	___lwdiv@quotient,f,c
  4978  001548  3616               	rlcf	___lwdiv@quotient+1,f,c
  4979  00154A  5012               	movf	___lwdiv@divisor,w,c
  4980  00154C  5C10               	subwf	___lwdiv@dividend,w,c
  4981  00154E  5013               	movf	___lwdiv@divisor+1,w,c
  4982  001550  5811               	subwfb	___lwdiv@dividend+1,w,c
  4983  001552  A0D8               	btfss	status,0,c
  4984  001554  D005               	goto	l3702
  4985  001556  5012               	movf	___lwdiv@divisor,w,c
  4986  001558  5E10               	subwf	___lwdiv@dividend,f,c
  4987  00155A  5013               	movf	___lwdiv@divisor+1,w,c
  4988  00155C  5A11               	subwfb	___lwdiv@dividend+1,f,c
  4989  00155E  8015               	bsf	___lwdiv@quotient,0,c
  4990  001560                     l3702:
  4991  001560  90D8               	bcf	status,0,c
  4992  001562  3213               	rrcf	___lwdiv@divisor+1,f,c
  4993  001564  3212               	rrcf	___lwdiv@divisor,f,c
  4994  001566  2E14               	decfsz	___lwdiv@counter,f,c
  4995  001568  D7ED               	goto	l3694
  4996  00156A                     l1023:
  4997  00156A  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  4998  00156E  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4999  001572  0012               	return		;funcret
  5000  001574                     __end_of___lwdiv:
  5001                           	opt stack 0
  5002                           tblptru	equ	0xFF8
  5003                           tblptrh	equ	0xFF7
  5004                           tblptrl	equ	0xFF6
  5005                           tablat	equ	0xFF5
  5006                           prodh	equ	0xFF4
  5007                           prodl	equ	0xFF3
  5008                           intcon	equ	0xFF2
  5009                           intcon3	equ	0xFF0
  5010                           postinc0	equ	0xFEE
  5011                           wreg	equ	0xFE8
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function _lcdInst *****************
  5020 ;; Defined at:
  5021 ;;		line 26 in file "lcd.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  data            1    wreg     unsigned char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  data            1   17[COMRAM] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;Total ram usage:        1 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    2
  5042 ;; This function calls:
  5043 ;;		_lcdNibble
  5044 ;; This function is called by:
  5045 ;;		_initLCD
  5046 ;;		_update_lcd
  5047 ;;		_executingState
  5048 ;;		_fixLCD
  5049 ;;		_main
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text17
  5054  00198A                     __ptext17:
  5055                           	opt stack 0
  5056  00198A                     _lcdInst:
  5057                           	opt stack 26
  5058                           
  5059                           ;incstack = 0
  5060                           ;lcdInst@data stored from wreg
  5061  00198A  6E12               	movwf	lcdInst@data,c
  5062                           
  5063                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  5064  00198C  948C               	bcf	3980,2,c	;volatile
  5065                           
  5066                           ;lcd.c: 28: lcdNibble(data);
  5067  00198E  5012               	movf	lcdInst@data,w,c
  5068  001990  EC66  F00A         	call	_lcdNibble
  5069  001994  0012               	return		;funcret
  5070  001996                     __end_of_lcdInst:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           intcon3	equ	0xFF0
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _lcdNibble *****************
  5090 ;; Defined at:
  5091 ;;		line 36 in file "lcd.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  data            1    wreg     unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  data            1   16[COMRAM] unsigned char 
  5096 ;;  temp            1   15[COMRAM] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;Total ram usage:        2 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    1
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_lcdInst
  5117 ;;		_putch
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text18
  5122  0014CC                     __ptext18:
  5123                           	opt stack 0
  5124  0014CC                     _lcdNibble:
  5125                           	opt stack 27
  5126                           
  5127                           ;incstack = 0
  5128                           ;lcdNibble@data stored from wreg
  5129  0014CC  6E11               	movwf	lcdNibble@data,c
  5130                           
  5131                           ;lcd.c: 38: char temp = data & 0xF0;
  5132  0014CE  5011               	movf	lcdNibble@data,w,c
  5133  0014D0  0BF0               	andlw	240
  5134  0014D2  6E10               	movwf	lcdNibble@temp,c
  5135                           
  5136                           ;lcd.c: 39: LATD = LATD & 0x0F;
  5137  0014D4  508C               	movf	3980,w,c	;volatile
  5138  0014D6  0B0F               	andlw	15
  5139  0014D8  6E8C               	movwf	3980,c	;volatile
  5140                           
  5141                           ;lcd.c: 40: LATD = temp | LATD;
  5142  0014DA  5010               	movf	lcdNibble@temp,w,c
  5143  0014DC  108C               	iorwf	3980,w,c	;volatile
  5144  0014DE  6E8C               	movwf	3980,c	;volatile
  5145                           
  5146                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  5147  0014E0  968C               	bcf	3980,3,c	;volatile
  5148                           
  5149                           ;lcd.c: 43: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5150  0014E2  0E14               	movlw	20
  5151  0014E4                     u3707:
  5152  0014E4  2EE8               	decfsz	wreg,f,c
  5153  0014E6  D7FE               	bra	u3707
  5154  0014E8  D000               	nop2	
  5155                           
  5156                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5157  0014EA  868C               	bsf	3980,3,c	;volatile
  5158                           
  5159                           ;lcd.c: 45: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5160  0014EC  0E14               	movlw	20
  5161  0014EE                     u3717:
  5162  0014EE  2EE8               	decfsz	wreg,f,c
  5163  0014F0  D7FE               	bra	u3717
  5164  0014F2  D000               	nop2	
  5165                           
  5166                           ;lcd.c: 47: data = data << 4;
  5167  0014F4  3811               	swapf	lcdNibble@data,w,c
  5168  0014F6  0BF0               	andlw	240
  5169  0014F8  6E11               	movwf	lcdNibble@data,c
  5170                           
  5171                           ;lcd.c: 49: temp = data & 0xF0;
  5172  0014FA  5011               	movf	lcdNibble@data,w,c
  5173  0014FC  0BF0               	andlw	240
  5174  0014FE  6E10               	movwf	lcdNibble@temp,c
  5175                           
  5176                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5177  001500  508C               	movf	3980,w,c	;volatile
  5178  001502  0B0F               	andlw	15
  5179  001504  6E8C               	movwf	3980,c	;volatile
  5180                           
  5181                           ;lcd.c: 51: LATD = temp | LATD;
  5182  001506  5010               	movf	lcdNibble@temp,w,c
  5183  001508  108C               	iorwf	3980,w,c	;volatile
  5184  00150A  6E8C               	movwf	3980,c	;volatile
  5185                           
  5186                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5187  00150C  968C               	bcf	3980,3,c	;volatile
  5188                           
  5189                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5190  00150E  0E14               	movlw	20
  5191  001510                     u3727:
  5192  001510  2EE8               	decfsz	wreg,f,c
  5193  001512  D7FE               	bra	u3727
  5194  001514  D000               	nop2	
  5195                           
  5196                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5197  001516  868C               	bsf	3980,3,c	;volatile
  5198                           
  5199                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5200  001518  0E14               	movlw	20
  5201  00151A                     u3737:
  5202  00151A  2EE8               	decfsz	wreg,f,c
  5203  00151C  D7FE               	bra	u3737
  5204  00151E  D000               	nop2	
  5205  001520  0012               	return		;funcret
  5206  001522                     __end_of_lcdNibble:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           intcon3	equ	0xFF0
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           indf2	equ	0xFDF
  5219                           postinc2	equ	0xFDE
  5220                           postdec2	equ	0xFDD
  5221                           fsr2h	equ	0xFDA
  5222                           fsr2l	equ	0xFD9
  5223                           status	equ	0xFD8
  5224                           
  5225 ;; *************** function _servoRotateArm *****************
  5226 ;; Defined at:
  5227 ;;		line 208 in file "servos.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;  i               2   20[COMRAM] int 
  5232 ;;  res             2   22[COMRAM] int 
  5233 ;;  i               2    0        unsigned int 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  2   15[COMRAM] int 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;Total ram usage:        9 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    1
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_executingState
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text19
  5258  00134E                     __ptext19:
  5259                           	opt stack 0
  5260  00134E                     _servoRotateArm:
  5261                           	opt stack 28
  5262                           
  5263                           ;servos.c: 209: unsigned int i;
  5264                           ;servos.c: 210: int res = -1;
  5265                           
  5266                           ;incstack = 0
  5267  00134E  6817               	setf	servoRotateArm@res,c
  5268  001350  6818               	setf	servoRotateArm@res+1,c
  5269                           
  5270                           ;servos.c: 211: for(int i = 0; i < loopcount+50; i++){
  5271  001352  0E00               	movlw	0
  5272  001354  6E16               	movwf	servoRotateArm@i_1049+1,c
  5273  001356  0E00               	movlw	0
  5274  001358  6E15               	movwf	servoRotateArm@i_1049,c
  5275  00135A  D01D               	goto	l4144
  5276  00135C                     l520:
  5277                           
  5278                           ;servos.c: 212: LATBbits.LATB2 = 1;
  5279  00135C  848A               	bsf	3978,2,c	;volatile
  5280                           
  5281                           ;servos.c: 213: _delay((unsigned long)((1740)*(10000000/4000000.0)));
  5282  00135E  0E06               	movlw	6
  5283  001360  6E12               	movwf	??_servoRotateArm& (0+255),c
  5284  001362  0EA5               	movlw	165
  5285  001364                     u3747:
  5286  001364  2EE8               	decfsz	wreg,f,c
  5287  001366  D7FE               	bra	u3747
  5288  001368  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  5289  00136A  D7FC               	bra	u3747
  5290  00136C  F000               	nop	
  5291                           
  5292                           ;servos.c: 214: LATBbits.LATB2 = 0;
  5293  00136E  948A               	bcf	3978,2,c	;volatile
  5294                           
  5295                           ;servos.c: 215: _delay((unsigned long)((18260)*(10000000/4000000.0)));
  5296  001370  0E3C               	movlw	60
  5297  001372  6E12               	movwf	??_servoRotateArm& (0+255),c
  5298  001374  0E48               	movlw	72
  5299  001376                     u3757:
  5300  001376  2EE8               	decfsz	wreg,f,c
  5301  001378  D7FE               	bra	u3757
  5302  00137A  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  5303  00137C  D7FC               	bra	u3757
  5304                           
  5305                           ;servos.c: 216: if(PORTCbits.RC1 == 1){
  5306  00137E  A282               	btfss	3970,1,c	;volatile
  5307  001380  D004               	goto	l4140
  5308                           
  5309                           ;servos.c: 217: res = 1;
  5310  001382  0E00               	movlw	0
  5311  001384  6E18               	movwf	servoRotateArm@res+1,c
  5312  001386  0E01               	movlw	1
  5313  001388  D003               	goto	L4
  5314  00138A                     l4140:
  5315                           
  5316                           ;servos.c: 219: res = 0;
  5317  00138A  0E00               	movlw	0
  5318  00138C  6E18               	movwf	servoRotateArm@res+1,c
  5319  00138E  0E00               	movlw	0
  5320  001390                     L4:
  5321  001390  6E17               	movwf	servoRotateArm@res,c
  5322  001392  4A15               	infsnz	servoRotateArm@i_1049,f,c
  5323  001394  2A16               	incf	servoRotateArm@i_1049+1,f,c
  5324  001396                     l4144:
  5325  001396  0E32               	movlw	50
  5326  001398  2450               	addwf	_loopcount,w,c
  5327  00139A  6E12               	movwf	??_servoRotateArm& (0+255),c
  5328  00139C  0E00               	movlw	0
  5329  00139E  2051               	addwfc	_loopcount+1,w,c
  5330  0013A0  6E13               	movwf	(??_servoRotateArm+1)& (0+255),c
  5331  0013A2  5012               	movf	??_servoRotateArm,w,c
  5332  0013A4  5C15               	subwf	servoRotateArm@i_1049,w,c
  5333  0013A6  5016               	movf	servoRotateArm@i_1049+1,w,c
  5334  0013A8  0A80               	xorlw	128
  5335  0013AA  6E14               	movwf	(??_servoRotateArm+2)& (0+255),c
  5336  0013AC  5013               	movf	??_servoRotateArm+1,w,c
  5337  0013AE  0A80               	xorlw	128
  5338  0013B0  5814               	subwfb	(??_servoRotateArm+2)& (0+255),w,c
  5339  0013B2  A0D8               	btfss	status,0,c
  5340  0013B4  D7D3               	goto	l520
  5341                           
  5342                           ;servos.c: 220: }
  5343                           ;servos.c: 221: }
  5344                           ;servos.c: 222: return res;
  5345  0013B6  C017  F010         	movff	servoRotateArm@res,?_servoRotateArm
  5346  0013BA  C018  F011         	movff	servoRotateArm@res+1,?_servoRotateArm+1
  5347  0013BE  0012               	return		;funcret
  5348  0013C0                     __end_of_servoRotateArm:
  5349                           	opt stack 0
  5350                           tblptru	equ	0xFF8
  5351                           tblptrh	equ	0xFF7
  5352                           tblptrl	equ	0xFF6
  5353                           tablat	equ	0xFF5
  5354                           prodh	equ	0xFF4
  5355                           prodl	equ	0xFF3
  5356                           intcon	equ	0xFF2
  5357                           intcon3	equ	0xFF0
  5358                           postinc0	equ	0xFEE
  5359                           wreg	equ	0xFE8
  5360                           indf2	equ	0xFDF
  5361                           postinc2	equ	0xFDE
  5362                           postdec2	equ	0xFDD
  5363                           fsr2h	equ	0xFDA
  5364                           fsr2l	equ	0xFD9
  5365                           status	equ	0xFD8
  5366                           
  5367 ;; *************** function _servoRotate90n *****************
  5368 ;; Defined at:
  5369 ;;		line 165 in file "servos.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;  servo           2   15[COMRAM] int 
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;  i               2   19[COMRAM] unsigned int 
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  1    wreg      void 
  5376 ;; Registers used:
  5377 ;;		wreg, status,2, status,0
  5378 ;; Tracked objects:
  5379 ;;		On entry : 0/0
  5380 ;;		On exit  : 0/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5383 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;Total ram usage:        6 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:    1
  5390 ;; This function calls:
  5391 ;;		Nothing
  5392 ;; This function is called by:
  5393 ;;		_executingState
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text20
  5398  001052                     __ptext20:
  5399                           	opt stack 0
  5400  001052                     _servoRotate90n:
  5401                           	opt stack 28
  5402                           
  5403                           ;servos.c: 167: unsigned int i;
  5404                           ;servos.c: 168: for (i = 0; i < loopcount; i++) {
  5405                           
  5406                           ;incstack = 0
  5407  001052  0E00               	movlw	0
  5408  001054  6E15               	movwf	servoRotate90n@i+1,c
  5409  001056  0E00               	movlw	0
  5410  001058  6E14               	movwf	servoRotate90n@i,c
  5411  00105A  D054               	goto	l499
  5412  00105C                     l502:
  5413                           
  5414                           ;servos.c: 171: LATAbits.LATA4 = 1;
  5415  00105C  8889               	bsf	3977,4,c	;volatile
  5416                           
  5417                           ;servos.c: 172: break;
  5418  00105E  D020               	goto	l4016
  5419  001060                     l504:
  5420                           
  5421                           ;servos.c: 174: LATAbits.LATA5 = 1;
  5422  001060  8A89               	bsf	3977,5,c	;volatile
  5423                           
  5424                           ;servos.c: 175: break;
  5425  001062  D01E               	goto	l4016
  5426  001064                     l505:
  5427                           
  5428                           ;servos.c: 177: LATEbits.LATE0 = 1;
  5429  001064  808D               	bsf	3981,0,c	;volatile
  5430                           
  5431                           ;servos.c: 178: break;
  5432  001066  D01C               	goto	l4016
  5433  001068                     l506:
  5434                           
  5435                           ;servos.c: 180: LATEbits.LATE1 = 1;
  5436  001068  828D               	bsf	3981,1,c	;volatile
  5437                           
  5438                           ;servos.c: 181: break;
  5439  00106A  D01A               	goto	l4016
  5440  00106C                     l507:
  5441                           
  5442                           ;servos.c: 183: LATBbits.LATB2 = 1;
  5443  00106C  848A               	bsf	3978,2,c	;volatile
  5444                           
  5445                           ;servos.c: 185: }
  5446                           
  5447                           ;servos.c: 184: break;
  5448  00106E  D018               	goto	l4016
  5449  001070                     l4014:
  5450  001070  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  5451  001074  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  5452                           
  5453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5454                           ; Switch size 1, requested type "space"
  5455                           ; Number of cases is 1, Range of values is 0 to 0
  5456                           ; switch strategies available:
  5457                           ; Name         Instructions Cycles
  5458                           ; simple_byte            4     3 (average)
  5459                           ;	Chosen strategy is simple_byte
  5460  001078  5013               	movf	??_servoRotate90n+1,w,c
  5461  00107A  0A00               	xorlw	0	; case 0
  5462  00107C  A4D8               	btfss	status,2,c
  5463  00107E  D010               	goto	l4016
  5464                           
  5465                           ; Switch size 1, requested type "space"
  5466                           ; Number of cases is 5, Range of values is 0 to 4
  5467                           ; switch strategies available:
  5468                           ; Name         Instructions Cycles
  5469                           ; simple_byte           16     9 (average)
  5470                           ;	Chosen strategy is simple_byte
  5471  001080  5012               	movf	??_servoRotate90n,w,c
  5472  001082  0A00               	xorlw	0	; case 0
  5473  001084  B4D8               	btfsc	status,2,c
  5474  001086  D7EA               	goto	l502
  5475  001088  0A01               	xorlw	1	; case 1
  5476  00108A  B4D8               	btfsc	status,2,c
  5477  00108C  D7E9               	goto	l504
  5478  00108E  0A03               	xorlw	3	; case 2
  5479  001090  B4D8               	btfsc	status,2,c
  5480  001092  D7E8               	goto	l505
  5481  001094  0A01               	xorlw	1	; case 3
  5482  001096  B4D8               	btfsc	status,2,c
  5483  001098  D7E7               	goto	l506
  5484  00109A  0A07               	xorlw	7	; case 4
  5485  00109C  B4D8               	btfsc	status,2,c
  5486  00109E  D7E6               	goto	l507
  5487  0010A0                     l4016:
  5488                           
  5489                           ;servos.c: 186: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5490  0010A0  0ED6               	movlw	214
  5491  0010A2                     u3767:
  5492  0010A2  D000               	nop2	
  5493  0010A4  D000               	nop2	
  5494  0010A6  2EE8               	decfsz	wreg,f,c
  5495  0010A8  D7FC               	bra	u3767
  5496  0010AA  D000               	nop2	
  5497                           
  5498                           ;servos.c: 187: switch (servo) {
  5499  0010AC  D00A               	goto	l4020
  5500  0010AE                     l509:
  5501                           
  5502                           ;servos.c: 189: LATAbits.LATA4 = 0;
  5503  0010AE  9889               	bcf	3977,4,c	;volatile
  5504                           
  5505                           ;servos.c: 190: break;
  5506  0010B0  D020               	goto	l4022
  5507  0010B2                     l511:
  5508                           
  5509                           ;servos.c: 192: LATAbits.LATA5 = 0;
  5510  0010B2  9A89               	bcf	3977,5,c	;volatile
  5511                           
  5512                           ;servos.c: 193: break;
  5513  0010B4  D01E               	goto	l4022
  5514  0010B6                     l512:
  5515                           
  5516                           ;servos.c: 195: LATEbits.LATE0 = 0;
  5517  0010B6  908D               	bcf	3981,0,c	;volatile
  5518                           
  5519                           ;servos.c: 196: break;
  5520  0010B8  D01C               	goto	l4022
  5521  0010BA                     l513:
  5522                           
  5523                           ;servos.c: 198: LATEbits.LATE1 = 0;
  5524  0010BA  928D               	bcf	3981,1,c	;volatile
  5525                           
  5526                           ;servos.c: 199: break;
  5527  0010BC  D01A               	goto	l4022
  5528  0010BE                     l514:
  5529                           
  5530                           ;servos.c: 201: LATBbits.LATB2 = 0;
  5531  0010BE  948A               	bcf	3978,2,c	;volatile
  5532                           
  5533                           ;servos.c: 203: }
  5534                           
  5535                           ;servos.c: 202: break;
  5536  0010C0  D018               	goto	l4022
  5537  0010C2                     l4020:
  5538  0010C2  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  5539  0010C6  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  5540                           
  5541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5542                           ; Switch size 1, requested type "space"
  5543                           ; Number of cases is 1, Range of values is 0 to 0
  5544                           ; switch strategies available:
  5545                           ; Name         Instructions Cycles
  5546                           ; simple_byte            4     3 (average)
  5547                           ;	Chosen strategy is simple_byte
  5548  0010CA  5013               	movf	??_servoRotate90n+1,w,c
  5549  0010CC  0A00               	xorlw	0	; case 0
  5550  0010CE  A4D8               	btfss	status,2,c
  5551  0010D0  D010               	goto	l4022
  5552                           
  5553                           ; Switch size 1, requested type "space"
  5554                           ; Number of cases is 5, Range of values is 0 to 4
  5555                           ; switch strategies available:
  5556                           ; Name         Instructions Cycles
  5557                           ; simple_byte           16     9 (average)
  5558                           ;	Chosen strategy is simple_byte
  5559  0010D2  5012               	movf	??_servoRotate90n,w,c
  5560  0010D4  0A00               	xorlw	0	; case 0
  5561  0010D6  B4D8               	btfsc	status,2,c
  5562  0010D8  D7EA               	goto	l509
  5563  0010DA  0A01               	xorlw	1	; case 1
  5564  0010DC  B4D8               	btfsc	status,2,c
  5565  0010DE  D7E9               	goto	l511
  5566  0010E0  0A03               	xorlw	3	; case 2
  5567  0010E2  B4D8               	btfsc	status,2,c
  5568  0010E4  D7E8               	goto	l512
  5569  0010E6  0A01               	xorlw	1	; case 3
  5570  0010E8  B4D8               	btfsc	status,2,c
  5571  0010EA  D7E7               	goto	l513
  5572  0010EC  0A07               	xorlw	7	; case 4
  5573  0010EE  B4D8               	btfsc	status,2,c
  5574  0010F0  D7E6               	goto	l514
  5575  0010F2                     l4022:
  5576                           
  5577                           ;servos.c: 204: _delay((unsigned long)((19400)*(10000000/4000000.0)));
  5578  0010F2  0E3F               	movlw	63
  5579  0010F4  6E12               	movwf	??_servoRotate90n& (0+255),c
  5580  0010F6  0EFC               	movlw	252
  5581  0010F8                     u3777:
  5582  0010F8  2EE8               	decfsz	wreg,f,c
  5583  0010FA  D7FE               	bra	u3777
  5584  0010FC  2E12               	decfsz	??_servoRotate90n& (0+255),f,c
  5585  0010FE  D7FC               	bra	u3777
  5586  001100  4A14               	infsnz	servoRotate90n@i,f,c
  5587  001102  2A15               	incf	servoRotate90n@i+1,f,c
  5588  001104                     l499:
  5589  001104  5050               	movf	_loopcount,w,c
  5590  001106  5C14               	subwf	servoRotate90n@i,w,c
  5591  001108  5051               	movf	_loopcount+1,w,c
  5592  00110A  5815               	subwfb	servoRotate90n@i+1,w,c
  5593  00110C  B0D8               	btfsc	status,0,c
  5594  00110E  0012               	return	
  5595  001110  D7AF               	goto	l4014
  5596  001112                     __end_of_servoRotate90n:
  5597                           	opt stack 0
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           intcon	equ	0xFF2
  5605                           intcon3	equ	0xFF0
  5606                           postinc0	equ	0xFEE
  5607                           wreg	equ	0xFE8
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _servoRotate4 *****************
  5616 ;; Defined at:
  5617 ;;		line 56 in file "servos.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  angle           2   15[COMRAM] int 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  i               2   18[COMRAM] unsigned int 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;Total ram usage:        5 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    1
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_executingState
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text21
  5646  001748                     __ptext21:
  5647                           	opt stack 0
  5648  001748                     _servoRotate4:
  5649                           	opt stack 28
  5650                           
  5651                           ;servos.c: 57: unsigned int i;
  5652                           ;servos.c: 58: for (i = 0; i < loopcount; i++) {
  5653                           
  5654                           ;incstack = 0
  5655  001748  0E00               	movlw	0
  5656  00174A  6E14               	movwf	servoRotate4@i+1,c
  5657  00174C  0E00               	movlw	0
  5658  00174E  6E13               	movwf	servoRotate4@i,c
  5659  001750  D013               	goto	l447
  5660  001752                     l448:
  5661                           
  5662                           ;servos.c: 59: LATEbits.LATE1 = 1;
  5663  001752  828D               	bsf	3981,1,c	;volatile
  5664                           
  5665                           ;servos.c: 60: _delay((unsigned long)((1550)*(10000000/4000000.0)));
  5666  001754  0E06               	movlw	6
  5667  001756  6E12               	movwf	??_servoRotate4& (0+255),c
  5668  001758  0E07               	movlw	7
  5669  00175A                     u3787:
  5670  00175A  2EE8               	decfsz	wreg,f,c
  5671  00175C  D7FE               	bra	u3787
  5672  00175E  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  5673  001760  D7FC               	bra	u3787
  5674                           
  5675                           ;servos.c: 61: LATEbits.LATE1 = 0;
  5676  001762  928D               	bcf	3981,1,c	;volatile
  5677                           
  5678                           ;servos.c: 62: _delay((unsigned long)((18450)*(10000000/4000000.0)));
  5679  001764  0E3C               	movlw	60
  5680  001766  6E12               	movwf	??_servoRotate4& (0+255),c
  5681  001768  0EE6               	movlw	230
  5682  00176A                     u3797:
  5683  00176A  2EE8               	decfsz	wreg,f,c
  5684  00176C  D7FE               	bra	u3797
  5685  00176E  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  5686  001770  D7FC               	bra	u3797
  5687  001772  F000               	nop	
  5688  001774  4A13               	infsnz	servoRotate4@i,f,c
  5689  001776  2A14               	incf	servoRotate4@i+1,f,c
  5690  001778                     l447:
  5691  001778  5050               	movf	_loopcount,w,c
  5692  00177A  5C13               	subwf	servoRotate4@i,w,c
  5693  00177C  5051               	movf	_loopcount+1,w,c
  5694  00177E  5814               	subwfb	servoRotate4@i+1,w,c
  5695  001780  B0D8               	btfsc	status,0,c
  5696  001782  0012               	return	
  5697  001784  D7E6               	goto	l448
  5698  001786                     __end_of_servoRotate4:
  5699                           	opt stack 0
  5700                           tblptru	equ	0xFF8
  5701                           tblptrh	equ	0xFF7
  5702                           tblptrl	equ	0xFF6
  5703                           tablat	equ	0xFF5
  5704                           prodh	equ	0xFF4
  5705                           prodl	equ	0xFF3
  5706                           intcon	equ	0xFF2
  5707                           intcon3	equ	0xFF0
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           indf2	equ	0xFDF
  5711                           postinc2	equ	0xFDE
  5712                           postdec2	equ	0xFDD
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _servoRotate0 *****************
  5718 ;; Defined at:
  5719 ;;		line 79 in file "servos.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  servo           2   15[COMRAM] int 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  i               2   19[COMRAM] unsigned int 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5733 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;Total ram usage:        6 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_executingState
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text22
  5748  000ECA                     __ptext22:
  5749                           	opt stack 0
  5750  000ECA                     _servoRotate0:
  5751                           	opt stack 28
  5752                           
  5753                           ;servos.c: 81: unsigned int i;
  5754                           ;servos.c: 82: for (i = 0; i < loopcount; i++) {
  5755                           
  5756                           ;incstack = 0
  5757  000ECA  0E00               	movlw	0
  5758  000ECC  6E15               	movwf	servoRotate0@i+1,c
  5759  000ECE  0E00               	movlw	0
  5760  000ED0  6E14               	movwf	servoRotate0@i,c
  5761  000ED2  D056               	goto	l459
  5762  000ED4                     l462:
  5763                           
  5764                           ;servos.c: 85: LATAbits.LATA4 = 1;
  5765  000ED4  8889               	bsf	3977,4,c	;volatile
  5766                           
  5767                           ;servos.c: 86: break;
  5768  000ED6  D020               	goto	l4040
  5769  000ED8                     l464:
  5770                           
  5771                           ;servos.c: 88: LATAbits.LATA5 = 1;
  5772  000ED8  8A89               	bsf	3977,5,c	;volatile
  5773                           
  5774                           ;servos.c: 89: break;
  5775  000EDA  D01E               	goto	l4040
  5776  000EDC                     l465:
  5777                           
  5778                           ;servos.c: 91: LATEbits.LATE0 = 1;
  5779  000EDC  808D               	bsf	3981,0,c	;volatile
  5780                           
  5781                           ;servos.c: 92: break;
  5782  000EDE  D01C               	goto	l4040
  5783  000EE0                     l466:
  5784                           
  5785                           ;servos.c: 94: LATEbits.LATE1 = 1;
  5786  000EE0  828D               	bsf	3981,1,c	;volatile
  5787                           
  5788                           ;servos.c: 95: break;
  5789  000EE2  D01A               	goto	l4040
  5790  000EE4                     l467:
  5791                           
  5792                           ;servos.c: 97: LATBbits.LATB2 = 1;
  5793  000EE4  848A               	bsf	3978,2,c	;volatile
  5794                           
  5795                           ;servos.c: 99: }
  5796                           
  5797                           ;servos.c: 98: break;
  5798  000EE6  D018               	goto	l4040
  5799  000EE8                     l4038:
  5800  000EE8  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  5801  000EEC  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  5802                           
  5803                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5804                           ; Switch size 1, requested type "space"
  5805                           ; Number of cases is 1, Range of values is 0 to 0
  5806                           ; switch strategies available:
  5807                           ; Name         Instructions Cycles
  5808                           ; simple_byte            4     3 (average)
  5809                           ;	Chosen strategy is simple_byte
  5810  000EF0  5013               	movf	??_servoRotate0+1,w,c
  5811  000EF2  0A00               	xorlw	0	; case 0
  5812  000EF4  A4D8               	btfss	status,2,c
  5813  000EF6  D010               	goto	l4040
  5814                           
  5815                           ; Switch size 1, requested type "space"
  5816                           ; Number of cases is 5, Range of values is 0 to 4
  5817                           ; switch strategies available:
  5818                           ; Name         Instructions Cycles
  5819                           ; simple_byte           16     9 (average)
  5820                           ;	Chosen strategy is simple_byte
  5821  000EF8  5012               	movf	??_servoRotate0,w,c
  5822  000EFA  0A00               	xorlw	0	; case 0
  5823  000EFC  B4D8               	btfsc	status,2,c
  5824  000EFE  D7EA               	goto	l462
  5825  000F00  0A01               	xorlw	1	; case 1
  5826  000F02  B4D8               	btfsc	status,2,c
  5827  000F04  D7E9               	goto	l464
  5828  000F06  0A03               	xorlw	3	; case 2
  5829  000F08  B4D8               	btfsc	status,2,c
  5830  000F0A  D7E8               	goto	l465
  5831  000F0C  0A01               	xorlw	1	; case 3
  5832  000F0E  B4D8               	btfsc	status,2,c
  5833  000F10  D7E7               	goto	l466
  5834  000F12  0A07               	xorlw	7	; case 4
  5835  000F14  B4D8               	btfsc	status,2,c
  5836  000F16  D7E6               	goto	l467
  5837  000F18                     l4040:
  5838                           
  5839                           ;servos.c: 100: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  5840  000F18  0E05               	movlw	5
  5841  000F1A  6E12               	movwf	??_servoRotate0& (0+255),c
  5842  000F1C  0EDE               	movlw	222
  5843  000F1E                     u3807:
  5844  000F1E  2EE8               	decfsz	wreg,f,c
  5845  000F20  D7FE               	bra	u3807
  5846  000F22  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  5847  000F24  D7FC               	bra	u3807
  5848                           
  5849                           ;servos.c: 101: switch (servo) {
  5850  000F26  D00A               	goto	l4044
  5851  000F28                     l469:
  5852                           
  5853                           ;servos.c: 103: LATAbits.LATA4 = 0;
  5854  000F28  9889               	bcf	3977,4,c	;volatile
  5855                           
  5856                           ;servos.c: 104: break;
  5857  000F2A  D020               	goto	l4046
  5858  000F2C                     l471:
  5859                           
  5860                           ;servos.c: 106: LATAbits.LATA5 = 0;
  5861  000F2C  9A89               	bcf	3977,5,c	;volatile
  5862                           
  5863                           ;servos.c: 107: break;
  5864  000F2E  D01E               	goto	l4046
  5865  000F30                     l472:
  5866                           
  5867                           ;servos.c: 109: LATEbits.LATE0 = 0;
  5868  000F30  908D               	bcf	3981,0,c	;volatile
  5869                           
  5870                           ;servos.c: 110: break;
  5871  000F32  D01C               	goto	l4046
  5872  000F34                     l473:
  5873                           
  5874                           ;servos.c: 112: LATEbits.LATE1 = 0;
  5875  000F34  928D               	bcf	3981,1,c	;volatile
  5876                           
  5877                           ;servos.c: 113: break;
  5878  000F36  D01A               	goto	l4046
  5879  000F38                     l474:
  5880                           
  5881                           ;servos.c: 115: LATBbits.LATB2 = 0;
  5882  000F38  948A               	bcf	3978,2,c	;volatile
  5883                           
  5884                           ;servos.c: 117: }
  5885                           
  5886                           ;servos.c: 116: break;
  5887  000F3A  D018               	goto	l4046
  5888  000F3C                     l4044:
  5889  000F3C  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  5890  000F40  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  5891                           
  5892                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5893                           ; Switch size 1, requested type "space"
  5894                           ; Number of cases is 1, Range of values is 0 to 0
  5895                           ; switch strategies available:
  5896                           ; Name         Instructions Cycles
  5897                           ; simple_byte            4     3 (average)
  5898                           ;	Chosen strategy is simple_byte
  5899  000F44  5013               	movf	??_servoRotate0+1,w,c
  5900  000F46  0A00               	xorlw	0	; case 0
  5901  000F48  A4D8               	btfss	status,2,c
  5902  000F4A  D010               	goto	l4046
  5903                           
  5904                           ; Switch size 1, requested type "space"
  5905                           ; Number of cases is 5, Range of values is 0 to 4
  5906                           ; switch strategies available:
  5907                           ; Name         Instructions Cycles
  5908                           ; simple_byte           16     9 (average)
  5909                           ;	Chosen strategy is simple_byte
  5910  000F4C  5012               	movf	??_servoRotate0,w,c
  5911  000F4E  0A00               	xorlw	0	; case 0
  5912  000F50  B4D8               	btfsc	status,2,c
  5913  000F52  D7EA               	goto	l469
  5914  000F54  0A01               	xorlw	1	; case 1
  5915  000F56  B4D8               	btfsc	status,2,c
  5916  000F58  D7E9               	goto	l471
  5917  000F5A  0A03               	xorlw	3	; case 2
  5918  000F5C  B4D8               	btfsc	status,2,c
  5919  000F5E  D7E8               	goto	l472
  5920  000F60  0A01               	xorlw	1	; case 3
  5921  000F62  B4D8               	btfsc	status,2,c
  5922  000F64  D7E7               	goto	l473
  5923  000F66  0A07               	xorlw	7	; case 4
  5924  000F68  B4D8               	btfsc	status,2,c
  5925  000F6A  D7E6               	goto	l474
  5926  000F6C                     l4046:
  5927                           
  5928                           ;servos.c: 118: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  5929  000F6C  0E3D               	movlw	61
  5930  000F6E  6E12               	movwf	??_servoRotate0& (0+255),c
  5931  000F70  0E0F               	movlw	15
  5932  000F72                     u3817:
  5933  000F72  2EE8               	decfsz	wreg,f,c
  5934  000F74  D7FE               	bra	u3817
  5935  000F76  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  5936  000F78  D7FC               	bra	u3817
  5937  000F7A  F000               	nop	
  5938  000F7C  4A14               	infsnz	servoRotate0@i,f,c
  5939  000F7E  2A15               	incf	servoRotate0@i+1,f,c
  5940  000F80                     l459:
  5941  000F80  5050               	movf	_loopcount,w,c
  5942  000F82  5C14               	subwf	servoRotate0@i,w,c
  5943  000F84  5051               	movf	_loopcount+1,w,c
  5944  000F86  5815               	subwfb	servoRotate0@i+1,w,c
  5945  000F88  B0D8               	btfsc	status,0,c
  5946  000F8A  0012               	return	
  5947  000F8C  D7AD               	goto	l4038
  5948  000F8E                     __end_of_servoRotate0:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           intcon3	equ	0xFF0
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function _readSnTop *****************
  5968 ;; Defined at:
  5969 ;;		line 25 in file "sensors.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  2   15[COMRAM] int 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;Total ram usage:        2 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    1
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_executingState
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text23
  5998  0018D0                     __ptext23:
  5999                           	opt stack 0
  6000  0018D0                     _readSnTop:
  6001                           	opt stack 28
  6002                           
  6003                           ;sensors.c: 26: if(PORTAbits.RA2 == 1){
  6004                           
  6005                           ;incstack = 0
  6006  0018D0  A480               	btfss	3968,2,c	;volatile
  6007  0018D2  D005               	goto	l4072
  6008                           
  6009                           ;sensors.c: 27: return 1;
  6010  0018D4  0E00               	movlw	0
  6011  0018D6  6E11               	movwf	?_readSnTop+1,c
  6012  0018D8  0E01               	movlw	1
  6013  0018DA  6E10               	movwf	?_readSnTop,c
  6014  0018DC  0012               	return	
  6015  0018DE                     l4072:
  6016                           
  6017                           ;sensors.c: 28: }
  6018                           ;sensors.c: 29: return 0;
  6019  0018DE  0E00               	movlw	0
  6020  0018E0  6E11               	movwf	?_readSnTop+1,c
  6021  0018E2  0E00               	movlw	0
  6022  0018E4  6E10               	movwf	?_readSnTop,c
  6023  0018E6  0012               	return	
  6024  0018E8                     __end_of_readSnTop:
  6025                           	opt stack 0
  6026                           tblptru	equ	0xFF8
  6027                           tblptrh	equ	0xFF7
  6028                           tblptrl	equ	0xFF6
  6029                           tablat	equ	0xFF5
  6030                           prodh	equ	0xFF4
  6031                           prodl	equ	0xFF3
  6032                           intcon	equ	0xFF2
  6033                           intcon3	equ	0xFF0
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _readSnSensor *****************
  6044 ;; Defined at:
  6045 ;;		line 39 in file "sensors.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  2   15[COMRAM] int 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        2 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    1
  6066 ;; This function calls:
  6067 ;;		Nothing
  6068 ;; This function is called by:
  6069 ;;		_executingState
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text24
  6074  0018E8                     __ptext24:
  6075                           	opt stack 0
  6076  0018E8                     _readSnSensor:
  6077                           	opt stack 28
  6078                           
  6079                           ;sensors.c: 40: if(PORTCbits.RC0 == 1){
  6080                           
  6081                           ;incstack = 0
  6082  0018E8  A082               	btfss	3970,0,c	;volatile
  6083  0018EA  D005               	goto	l4124
  6084                           
  6085                           ;sensors.c: 41: return 1;
  6086  0018EC  0E00               	movlw	0
  6087  0018EE  6E11               	movwf	?_readSnSensor+1,c
  6088  0018F0  0E01               	movlw	1
  6089  0018F2  6E10               	movwf	?_readSnSensor,c
  6090  0018F4  0012               	return	
  6091  0018F6                     l4124:
  6092                           
  6093                           ;sensors.c: 42: }
  6094                           ;sensors.c: 43: return 0;
  6095  0018F6  0E00               	movlw	0
  6096  0018F8  6E11               	movwf	?_readSnSensor+1,c
  6097  0018FA  0E00               	movlw	0
  6098  0018FC  6E10               	movwf	?_readSnSensor,c
  6099  0018FE  0012               	return	
  6100  001900                     __end_of_readSnSensor:
  6101                           	opt stack 0
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           prodh	equ	0xFF4
  6107                           prodl	equ	0xFF3
  6108                           intcon	equ	0xFF2
  6109                           intcon3	equ	0xFF0
  6110                           postinc0	equ	0xFEE
  6111                           wreg	equ	0xFE8
  6112                           indf2	equ	0xFDF
  6113                           postinc2	equ	0xFDE
  6114                           postdec2	equ	0xFDD
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _readSnBot *****************
  6120 ;; Defined at:
  6121 ;;		line 11 in file "sensors.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  2   15[COMRAM] int 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:        2 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    1
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_executingState
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text25
  6150  001900                     __ptext25:
  6151                           	opt stack 0
  6152  001900                     _readSnBot:
  6153                           	opt stack 28
  6154                           
  6155                           ;sensors.c: 12: if(PORTAbits.RA0 == 1){
  6156                           
  6157                           ;incstack = 0
  6158  001900  A080               	btfss	3968,0,c	;volatile
  6159  001902  D005               	goto	l4092
  6160                           
  6161                           ;sensors.c: 13: return 1;
  6162  001904  0E00               	movlw	0
  6163  001906  6E11               	movwf	?_readSnBot+1,c
  6164  001908  0E01               	movlw	1
  6165  00190A  6E10               	movwf	?_readSnBot,c
  6166  00190C  0012               	return	
  6167  00190E                     l4092:
  6168                           
  6169                           ;sensors.c: 14: }
  6170                           ;sensors.c: 15: return 0;
  6171  00190E  0E00               	movlw	0
  6172  001910  6E11               	movwf	?_readSnBot+1,c
  6173  001912  0E00               	movlw	0
  6174  001914  6E10               	movwf	?_readSnBot,c
  6175  001916  0012               	return	
  6176  001918                     __end_of_readSnBot:
  6177                           	opt stack 0
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           intcon3	equ	0xFF0
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           indf2	equ	0xFDF
  6189                           postinc2	equ	0xFDE
  6190                           postdec2	equ	0xFDD
  6191                           fsr2h	equ	0xFDA
  6192                           fsr2l	equ	0xFD9
  6193                           status	equ	0xFD8
  6194                           
  6195 ;; *************** function _readAlTop *****************
  6196 ;; Defined at:
  6197 ;;		line 32 in file "sensors.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;		None
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  2   15[COMRAM] int 
  6204 ;; Registers used:
  6205 ;;		wreg, status,2
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6211 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    1
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_executingState
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text26
  6226  001918                     __ptext26:
  6227                           	opt stack 0
  6228  001918                     _readAlTop:
  6229                           	opt stack 28
  6230                           
  6231                           ;sensors.c: 33: if(PORTAbits.RA3 == 1){
  6232                           
  6233                           ;incstack = 0
  6234  001918  A680               	btfss	3968,3,c	;volatile
  6235  00191A  D005               	goto	l4082
  6236                           
  6237                           ;sensors.c: 34: return 1;
  6238  00191C  0E00               	movlw	0
  6239  00191E  6E11               	movwf	?_readAlTop+1,c
  6240  001920  0E01               	movlw	1
  6241  001922  6E10               	movwf	?_readAlTop,c
  6242  001924  0012               	return	
  6243  001926                     l4082:
  6244                           
  6245                           ;sensors.c: 35: }
  6246                           ;sensors.c: 36: return 0;
  6247  001926  0E00               	movlw	0
  6248  001928  6E11               	movwf	?_readAlTop+1,c
  6249  00192A  0E00               	movlw	0
  6250  00192C  6E10               	movwf	?_readAlTop,c
  6251  00192E  0012               	return	
  6252  001930                     __end_of_readAlTop:
  6253                           	opt stack 0
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           prodh	equ	0xFF4
  6259                           prodl	equ	0xFF3
  6260                           intcon	equ	0xFF2
  6261                           intcon3	equ	0xFF0
  6262                           postinc0	equ	0xFEE
  6263                           wreg	equ	0xFE8
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _readAlBot *****************
  6272 ;; Defined at:
  6273 ;;		line 18 in file "sensors.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  2   15[COMRAM] int 
  6280 ;; Registers used:
  6281 ;;		wreg, status,2
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;Total ram usage:        2 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    1
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_executingState
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           	psect	text27
  6302  001930                     __ptext27:
  6303                           	opt stack 0
  6304  001930                     _readAlBot:
  6305                           	opt stack 28
  6306                           
  6307                           ;sensors.c: 19: if(PORTAbits.RA1 == 1){
  6308                           
  6309                           ;incstack = 0
  6310  001930  A280               	btfss	3968,1,c	;volatile
  6311  001932  D005               	goto	l4102
  6312                           
  6313                           ;sensors.c: 20: return 1;
  6314  001934  0E00               	movlw	0
  6315  001936  6E11               	movwf	?_readAlBot+1,c
  6316  001938  0E01               	movlw	1
  6317  00193A  6E10               	movwf	?_readAlBot,c
  6318  00193C  0012               	return	
  6319  00193E                     l4102:
  6320                           
  6321                           ;sensors.c: 21: }
  6322                           ;sensors.c: 22: return 0;
  6323  00193E  0E00               	movlw	0
  6324  001940  6E11               	movwf	?_readAlBot+1,c
  6325  001942  0E00               	movlw	0
  6326  001944  6E10               	movwf	?_readAlBot,c
  6327  001946  0012               	return	
  6328  001948                     __end_of_readAlBot:
  6329                           	opt stack 0
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           intcon3	equ	0xFF0
  6338                           postinc0	equ	0xFEE
  6339                           wreg	equ	0xFE8
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;; *************** function _get_timeDif *****************
  6348 ;; Defined at:
  6349 ;;		line 110 in file "main.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;  start           2   23[COMRAM] int 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  start_s         2   40[COMRAM] int 
  6354 ;;  s_one           2   38[COMRAM] int 
  6355 ;;  s_ten           2   36[COMRAM] int 
  6356 ;;  m_one           2   34[COMRAM] int 
  6357 ;;  m_ten           2   32[COMRAM] int 
  6358 ;;  h_one           2   30[COMRAM] int 
  6359 ;;  h_ten           2   28[COMRAM] int 
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  2   23[COMRAM] int 
  6362 ;; Registers used:
  6363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6369 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;Total ram usage:       23 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    4
  6376 ;; This function calls:
  6377 ;;		___wmul
  6378 ;;		_get_time
  6379 ;; This function is called by:
  6380 ;;		_executingState
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           	psect	text28
  6385  000CB6                     __ptext28:
  6386                           	opt stack 0
  6387  000CB6                     _get_timeDif:
  6388                           	opt stack 25
  6389                           
  6390                           ;main.c: 111: get_time(time);
  6391                           
  6392                           ;incstack = 0
  6393  000CB6  0EBC               	movlw	low _time
  6394  000CB8  6E13               	movwf	get_time@time,c
  6395  000CBA  0E00               	movlw	high _time
  6396  000CBC  6E14               	movwf	get_time@time+1,c
  6397  000CBE  ECE2  F008         	call	_get_time	;wreg free
  6398                           
  6399                           ;main.c: 112: int h_ten = (time[2] & 0b11110000)>>4;
  6400  000CC2  EE20  F0C0         	lfsr	2,_time+4
  6401  000CC6  CFDE F01A          	movff	postinc2,??_get_timeDif
  6402  000CCA  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  6403  000CCE  0E04               	movlw	4
  6404  000CD0  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  6405  000CD2                     u2925:
  6406  000CD2  341B               	rlcf	??_get_timeDif+1,w,c
  6407  000CD4  321B               	rrcf	??_get_timeDif+1,f,c
  6408  000CD6  321A               	rrcf	??_get_timeDif,f,c
  6409  000CD8  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  6410  000CDA  D7FB               	goto	u2925
  6411  000CDC  0E0F               	movlw	15
  6412  000CDE  141A               	andwf	??_get_timeDif,w,c
  6413  000CE0  6E1D               	movwf	get_timeDif@h_ten,c
  6414  000CE2  6A1E               	clrf	get_timeDif@h_ten+1,c
  6415                           
  6416                           ;main.c: 113: int h_one = (time[2] & 0b00001111);
  6417  000CE4  0E0F               	movlw	15
  6418  000CE6  0100               	movlb	0	; () banked
  6419  000CE8  15C0               	andwf	(_time+4)& (0+255),w,b
  6420  000CEA  6E1F               	movwf	get_timeDif@h_one,c
  6421  000CEC  6A20               	clrf	get_timeDif@h_one+1,c
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;main.c: 114: int m_ten = (time[1] & 0b11110000)>>4;
  6425  000CEE  EE20  F0BE         	lfsr	2,_time+2
  6426  000CF2  CFDE F01A          	movff	postinc2,??_get_timeDif
  6427  000CF6  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  6428  000CFA  0E04               	movlw	4
  6429  000CFC  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  6430  000CFE                     u2935:
  6431  000CFE  341B               	rlcf	??_get_timeDif+1,w,c
  6432  000D00  321B               	rrcf	??_get_timeDif+1,f,c
  6433  000D02  321A               	rrcf	??_get_timeDif,f,c
  6434  000D04  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  6435  000D06  D7FB               	goto	u2935
  6436  000D08  0E0F               	movlw	15
  6437  000D0A  141A               	andwf	??_get_timeDif,w,c
  6438  000D0C  6E21               	movwf	get_timeDif@m_ten,c
  6439  000D0E  6A22               	clrf	get_timeDif@m_ten+1,c
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;main.c: 115: int m_one = (time[1] & 0b00001111);
  6443  000D10  0E0F               	movlw	15
  6444  000D12  0100               	movlb	0	; () banked
  6445  000D14  15BE               	andwf	(_time+2)& (0+255),w,b
  6446  000D16  6E23               	movwf	get_timeDif@m_one,c
  6447  000D18  6A24               	clrf	get_timeDif@m_one+1,c
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;main.c: 116: int s_ten = (time[0] & 0b11110000)>>4;
  6451  000D1A  C0BC  F01A         	movff	_time,??_get_timeDif
  6452  000D1E  C0BD  F01B         	movff	_time+1,??_get_timeDif+1
  6453  000D22  0E04               	movlw	4
  6454  000D24  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  6455  000D26                     u2945:
  6456  000D26  341B               	rlcf	??_get_timeDif+1,w,c
  6457  000D28  321B               	rrcf	??_get_timeDif+1,f,c
  6458  000D2A  321A               	rrcf	??_get_timeDif,f,c
  6459  000D2C  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  6460  000D2E  D7FB               	goto	u2945
  6461  000D30  0E0F               	movlw	15
  6462  000D32  141A               	andwf	??_get_timeDif,w,c
  6463  000D34  6E25               	movwf	get_timeDif@s_ten,c
  6464  000D36  6A26               	clrf	get_timeDif@s_ten+1,c
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;main.c: 117: int s_one = (time[0] & 0b00001111);
  6468  000D38  0E0F               	movlw	15
  6469  000D3A  0100               	movlb	0	; () banked
  6470  000D3C  15BC               	andwf	_time& (0+255),w,b
  6471  000D3E  6E27               	movwf	get_timeDif@s_one,c
  6472  000D40  6A28               	clrf	get_timeDif@s_one+1,c
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;main.c: 118: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  6476  000D42  C021  F010         	movff	get_timeDif@m_ten,___wmul@multiplier
  6477  000D46  C022  F011         	movff	get_timeDif@m_ten+1,___wmul@multiplier+1
  6478  000D4A  0E00               	movlw	0
  6479  000D4C  6E13               	movwf	___wmul@multiplicand+1,c
  6480  000D4E  0E0A               	movlw	10
  6481  000D50  6E12               	movwf	___wmul@multiplicand,c
  6482  000D52  EC25  F00C         	call	___wmul	;wreg free
  6483  000D56  5023               	movf	get_timeDif@m_one,w,c
  6484  000D58  2410               	addwf	?___wmul,w,c
  6485  000D5A  6E2B               	movwf	_get_timeDif$1738,c
  6486  000D5C  5024               	movf	get_timeDif@m_one+1,w,c
  6487  000D5E  2011               	addwfc	?___wmul+1,w,c
  6488  000D60  6E2C               	movwf	_get_timeDif$1738+1,c
  6489                           
  6490                           ;main.c: 118: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  6491  000D62  C01D  F010         	movff	get_timeDif@h_ten,___wmul@multiplier
  6492  000D66  C01E  F011         	movff	get_timeDif@h_ten+1,___wmul@multiplier+1
  6493  000D6A  0E00               	movlw	0
  6494  000D6C  6E13               	movwf	___wmul@multiplicand+1,c
  6495  000D6E  0E0A               	movlw	10
  6496  000D70  6E12               	movwf	___wmul@multiplicand,c
  6497  000D72  EC25  F00C         	call	___wmul	;wreg free
  6498  000D76  501F               	movf	get_timeDif@h_one,w,c
  6499  000D78  2410               	addwf	?___wmul,w,c
  6500  000D7A  6E2D               	movwf	_get_timeDif$1739,c
  6501  000D7C  5020               	movf	get_timeDif@h_one+1,w,c
  6502  000D7E  2011               	addwfc	?___wmul+1,w,c
  6503  000D80  6E2E               	movwf	_get_timeDif$1739+1,c
  6504                           
  6505                           ;main.c: 118: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  6506  000D82  C025  F010         	movff	get_timeDif@s_ten,___wmul@multiplier
  6507  000D86  C026  F011         	movff	get_timeDif@s_ten+1,___wmul@multiplier+1
  6508  000D8A  0E00               	movlw	0
  6509  000D8C  6E13               	movwf	___wmul@multiplicand+1,c
  6510  000D8E  0E0A               	movlw	10
  6511  000D90  6E12               	movwf	___wmul@multiplicand,c
  6512  000D92  EC25  F00C         	call	___wmul	;wreg free
  6513  000D96  C010  F01A         	movff	?___wmul,??_get_timeDif
  6514  000D9A  C011  F01B         	movff	?___wmul+1,??_get_timeDif+1
  6515  000D9E  C02D  F010         	movff	_get_timeDif$1739,___wmul@multiplier
  6516  000DA2  C02E  F011         	movff	_get_timeDif$1739+1,___wmul@multiplier+1
  6517  000DA6  0E0E               	movlw	14
  6518  000DA8  6E13               	movwf	___wmul@multiplicand+1,c
  6519  000DAA  0E10               	movlw	16
  6520  000DAC  6E12               	movwf	___wmul@multiplicand,c
  6521  000DAE  EC25  F00C         	call	___wmul	;wreg free
  6522  000DB2  5010               	movf	?___wmul,w,c
  6523  000DB4  261A               	addwf	??_get_timeDif,f,c
  6524  000DB6  5011               	movf	?___wmul+1,w,c
  6525  000DB8  221B               	addwfc	??_get_timeDif+1,f,c
  6526  000DBA  C02B  F010         	movff	_get_timeDif$1738,___wmul@multiplier
  6527  000DBE  C02C  F011         	movff	_get_timeDif$1738+1,___wmul@multiplier+1
  6528  000DC2  0E00               	movlw	0
  6529  000DC4  6E13               	movwf	___wmul@multiplicand+1,c
  6530  000DC6  0E3C               	movlw	60
  6531  000DC8  6E12               	movwf	___wmul@multiplicand,c
  6532  000DCA  EC25  F00C         	call	___wmul	;wreg free
  6533  000DCE  5010               	movf	?___wmul,w,c
  6534  000DD0  261A               	addwf	??_get_timeDif,f,c
  6535  000DD2  5011               	movf	?___wmul+1,w,c
  6536  000DD4  221B               	addwfc	??_get_timeDif+1,f,c
  6537  000DD6  5027               	movf	get_timeDif@s_one,w,c
  6538  000DD8  241A               	addwf	??_get_timeDif,w,c
  6539  000DDA  6E29               	movwf	get_timeDif@start_s,c
  6540  000DDC  5028               	movf	get_timeDif@s_one+1,w,c
  6541  000DDE  201B               	addwfc	??_get_timeDif+1,w,c
  6542  000DE0  6E2A               	movwf	get_timeDif@start_s+1,c
  6543                           
  6544                           ;main.c: 120: return start_s - start;
  6545  000DE2  C018  F01A         	movff	get_timeDif@start,??_get_timeDif
  6546  000DE6  C019  F01B         	movff	get_timeDif@start+1,??_get_timeDif+1
  6547  000DEA  1E1A               	comf	??_get_timeDif,f,c
  6548  000DEC  1E1B               	comf	??_get_timeDif+1,f,c
  6549  000DEE  4A1A               	infsnz	??_get_timeDif,f,c
  6550  000DF0  2A1B               	incf	??_get_timeDif+1,f,c
  6551  000DF2  5029               	movf	get_timeDif@start_s,w,c
  6552  000DF4  241A               	addwf	??_get_timeDif,w,c
  6553  000DF6  6E18               	movwf	?_get_timeDif,c
  6554  000DF8  502A               	movf	get_timeDif@start_s+1,w,c
  6555  000DFA  201B               	addwfc	??_get_timeDif+1,w,c
  6556  000DFC  6E19               	movwf	?_get_timeDif+1,c
  6557  000DFE  0012               	return	
  6558  000E00                     __end_of_get_timeDif:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon3	equ	0xFF0
  6568                           postinc0	equ	0xFEE
  6569                           wreg	equ	0xFE8
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function _get_time *****************
  6578 ;; Defined at:
  6579 ;;		line 23 in file "RTC.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  time            2   18[COMRAM] PTR int 
  6582 ;;		 -> starttime(14), time(14), 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  i               1   22[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      void 
  6587 ;; Registers used:
  6588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6594 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;Total ram usage:        5 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    3
  6601 ;; This function calls:
  6602 ;;		_I2C_Master_Read
  6603 ;;		_I2C_Master_Start
  6604 ;;		_I2C_Master_Stop
  6605 ;;		_I2C_Master_Write
  6606 ;; This function is called by:
  6607 ;;		_get_timeDif
  6608 ;;		_mainState
  6609 ;;		_executingState
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text29
  6614  0011C4                     __ptext29:
  6615                           	opt stack 0
  6616  0011C4                     _get_time:
  6617                           	opt stack 26
  6618                           
  6619                           ;RTC.c: 25: I2C_Master_Start();
  6620                           
  6621                           ;incstack = 0
  6622  0011C4  ECD4  F00C         	call	_I2C_Master_Start	;wreg free
  6623                           
  6624                           ;RTC.c: 26: I2C_Master_Write(0b11010000);
  6625  0011C8  0E00               	movlw	0
  6626  0011CA  6E12               	movwf	I2C_Master_Write@d+1,c
  6627  0011CC  0ED0               	movlw	208
  6628  0011CE  6E11               	movwf	I2C_Master_Write@d,c
  6629  0011D0  ECCB  F00C         	call	_I2C_Master_Write	;wreg free
  6630                           
  6631                           ;RTC.c: 27: I2C_Master_Write(0x00);
  6632  0011D4  0E00               	movlw	0
  6633  0011D6  6E12               	movwf	I2C_Master_Write@d+1,c
  6634  0011D8  0E00               	movlw	0
  6635  0011DA  6E11               	movwf	I2C_Master_Write@d,c
  6636  0011DC  ECCB  F00C         	call	_I2C_Master_Write	;wreg free
  6637                           
  6638                           ;RTC.c: 28: I2C_Master_Stop();
  6639  0011E0  ECD0  F00C         	call	_I2C_Master_Stop	;wreg free
  6640                           
  6641                           ;RTC.c: 31: I2C_Master_Start();
  6642  0011E4  ECD4  F00C         	call	_I2C_Master_Start	;wreg free
  6643                           
  6644                           ;RTC.c: 32: I2C_Master_Write(0b11010001);
  6645  0011E8  0E00               	movlw	0
  6646  0011EA  6E12               	movwf	I2C_Master_Write@d+1,c
  6647  0011EC  0ED1               	movlw	209
  6648  0011EE  6E11               	movwf	I2C_Master_Write@d,c
  6649  0011F0  ECCB  F00C         	call	_I2C_Master_Write	;wreg free
  6650                           
  6651                           ;RTC.c: 33: for (unsigned char i = 0; i < 0x06; i++) {
  6652  0011F4  0E00               	movlw	0
  6653  0011F6  6E17               	movwf	get_time@i,c
  6654  0011F8                     l3860:
  6655  0011F8  0E05               	movlw	5
  6656  0011FA  6417               	cpfsgt	get_time@i,c
  6657  0011FC  D001               	goto	l3864
  6658  0011FE  D013               	goto	l3870
  6659  001200                     l3864:
  6660                           
  6661                           ;RTC.c: 34: time[i] = I2C_Master_Read(1);
  6662  001200  0E01               	movlw	1
  6663  001202  EC12  F00C         	call	_I2C_Master_Read
  6664  001206  6E15               	movwf	??_get_time& (0+255),c
  6665  001208  6A16               	clrf	(??_get_time+1)& (0+255),c
  6666  00120A  5017               	movf	get_time@i,w,c
  6667  00120C  0D02               	mullw	2
  6668  00120E  50F3               	movf	prodl,w,c
  6669  001210  2413               	addwf	get_time@time,w,c
  6670  001212  6ED9               	movwf	fsr2l,c
  6671  001214  50F4               	movf	prodh,w,c
  6672  001216  2014               	addwfc	get_time@time+1,w,c
  6673  001218  6EDA               	movwf	fsr2h,c
  6674  00121A  C015  FFDE         	movff	??_get_time,postinc2
  6675  00121E  C016  FFDD         	movff	??_get_time+1,postdec2
  6676  001222  2A17               	incf	get_time@i,f,c
  6677  001224  D7E9               	goto	l3860
  6678  001226                     l3870:
  6679                           
  6680                           ;RTC.c: 35: }
  6681                           ;RTC.c: 36: time[6] = I2C_Master_Read(0);
  6682  001226  0E00               	movlw	0
  6683  001228  EC12  F00C         	call	_I2C_Master_Read
  6684  00122C  6E15               	movwf	??_get_time& (0+255),c
  6685  00122E  6A16               	clrf	(??_get_time+1)& (0+255),c
  6686  001230  EE20 F00C          	lfsr	2,12
  6687  001234  5013               	movf	get_time@time,w,c
  6688  001236  26D9               	addwf	fsr2l,f,c
  6689  001238  5014               	movf	get_time@time+1,w,c
  6690  00123A  22DA               	addwfc	fsr2h,f,c
  6691  00123C  C015  FFDE         	movff	??_get_time,postinc2
  6692  001240  C016  FFDD         	movff	??_get_time+1,postdec2
  6693                           
  6694                           ;RTC.c: 37: I2C_Master_Stop();
  6695  001244  ECD0  F00C         	call	_I2C_Master_Stop	;wreg free
  6696  001248  0012               	return		;funcret
  6697  00124A                     __end_of_get_time:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon3	equ	0xFF0
  6707                           postinc0	equ	0xFEE
  6708                           wreg	equ	0xFE8
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           fsr2h	equ	0xFDA
  6713                           fsr2l	equ	0xFD9
  6714                           status	equ	0xFD8
  6715                           
  6716 ;; *************** function _I2C_Master_Write *****************
  6717 ;; Defined at:
  6718 ;;		line 47 in file "I2C.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  d               2   16[COMRAM] unsigned int 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;		None
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  1    wreg      void 
  6725 ;; Registers used:
  6726 ;;		wreg, status,2, status,0, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;Total ram usage:        2 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    2
  6739 ;; This function calls:
  6740 ;;		_I2C_Master_Wait
  6741 ;; This function is called by:
  6742 ;;		_fixLCD
  6743 ;;		_get_time
  6744 ;;		_set_time
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           	psect	text30
  6749  001996                     __ptext30:
  6750                           	opt stack 0
  6751  001996                     _I2C_Master_Write:
  6752                           	opt stack 26
  6753                           
  6754                           ;I2C.c: 49: I2C_Master_Wait();
  6755                           
  6756                           ;incstack = 0
  6757  001996  ECAF  F00C         	call	_I2C_Master_Wait	;wreg free
  6758                           
  6759                           ;I2C.c: 50: SSPBUF = d;
  6760  00199A  C011  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6761  00199E  0012               	return		;funcret
  6762  0019A0                     __end_of_I2C_Master_Write:
  6763                           	opt stack 0
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           intcon	equ	0xFF2
  6771                           intcon3	equ	0xFF0
  6772                           postinc0	equ	0xFEE
  6773                           wreg	equ	0xFE8
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           fsr2h	equ	0xFDA
  6778                           fsr2l	equ	0xFD9
  6779                           status	equ	0xFD8
  6780                           
  6781 ;; *************** function _I2C_Master_Stop *****************
  6782 ;; Defined at:
  6783 ;;		line 41 in file "I2C.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    2
  6804 ;; This function calls:
  6805 ;;		_I2C_Master_Wait
  6806 ;; This function is called by:
  6807 ;;		_fixLCD
  6808 ;;		_get_time
  6809 ;;		_set_time
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text31
  6814  0019A0                     __ptext31:
  6815                           	opt stack 0
  6816  0019A0                     _I2C_Master_Stop:
  6817                           	opt stack 26
  6818                           
  6819                           ;I2C.c: 43: I2C_Master_Wait();
  6820                           
  6821                           ;incstack = 0
  6822  0019A0  ECAF  F00C         	call	_I2C_Master_Wait	;wreg free
  6823                           
  6824                           ;I2C.c: 44: PEN = 1;
  6825  0019A4  84C5               	bsf	4037,2,c	;volatile
  6826  0019A6  0012               	return		;funcret
  6827  0019A8                     __end_of_I2C_Master_Stop:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           intcon3	equ	0xFF0
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           indf2	equ	0xFDF
  6840                           postinc2	equ	0xFDE
  6841                           postdec2	equ	0xFDD
  6842                           fsr2h	equ	0xFDA
  6843                           fsr2l	equ	0xFD9
  6844                           status	equ	0xFD8
  6845                           
  6846 ;; *************** function _I2C_Master_Start *****************
  6847 ;; Defined at:
  6848 ;;		line 29 in file "I2C.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, status,2, status,0, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;Total ram usage:        0 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    2
  6869 ;; This function calls:
  6870 ;;		_I2C_Master_Wait
  6871 ;; This function is called by:
  6872 ;;		_fixLCD
  6873 ;;		_get_time
  6874 ;;		_set_time
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text32
  6879  0019A8                     __ptext32:
  6880                           	opt stack 0
  6881  0019A8                     _I2C_Master_Start:
  6882                           	opt stack 26
  6883                           
  6884                           ;I2C.c: 31: I2C_Master_Wait();
  6885                           
  6886                           ;incstack = 0
  6887  0019A8  ECAF  F00C         	call	_I2C_Master_Wait	;wreg free
  6888                           
  6889                           ;I2C.c: 32: SEN = 1;
  6890  0019AC  80C5               	bsf	4037,0,c	;volatile
  6891  0019AE  0012               	return		;funcret
  6892  0019B0                     __end_of_I2C_Master_Start:
  6893                           	opt stack 0
  6894                           tblptru	equ	0xFF8
  6895                           tblptrh	equ	0xFF7
  6896                           tblptrl	equ	0xFF6
  6897                           tablat	equ	0xFF5
  6898                           prodh	equ	0xFF4
  6899                           prodl	equ	0xFF3
  6900                           intcon	equ	0xFF2
  6901                           intcon3	equ	0xFF0
  6902                           postinc0	equ	0xFEE
  6903                           wreg	equ	0xFE8
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _I2C_Master_Read *****************
  6912 ;; Defined at:
  6913 ;;		line 53 in file "I2C.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  a               1    wreg     unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  a               1   16[COMRAM] unsigned char 
  6918 ;;  temp            1   17[COMRAM] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      unsigned char 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;Total ram usage:        2 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    2
  6935 ;; This function calls:
  6936 ;;		_I2C_Master_Wait
  6937 ;; This function is called by:
  6938 ;;		_fixLCD
  6939 ;;		_get_time
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text33
  6944  001824                     __ptext33:
  6945                           	opt stack 0
  6946  001824                     _I2C_Master_Read:
  6947                           	opt stack 26
  6948                           
  6949                           ;incstack = 0
  6950                           ;I2C_Master_Read@a stored from wreg
  6951  001824  6E11               	movwf	I2C_Master_Read@a,c
  6952                           
  6953                           ;I2C.c: 55: unsigned char temp;
  6954                           ;I2C.c: 56: I2C_Master_Wait();
  6955  001826  ECAF  F00C         	call	_I2C_Master_Wait	;wreg free
  6956                           
  6957                           ;I2C.c: 57: RCEN = 1;
  6958  00182A  86C5               	bsf	4037,3,c	;volatile
  6959                           
  6960                           ;I2C.c: 58: I2C_Master_Wait();
  6961  00182C  ECAF  F00C         	call	_I2C_Master_Wait	;wreg free
  6962                           
  6963                           ;I2C.c: 59: temp = SSPBUF;
  6964  001830  CFC9 F012          	movff	4041,I2C_Master_Read@temp	;volatile
  6965                           
  6966                           ;I2C.c: 60: I2C_Master_Wait();
  6967  001834  ECAF  F00C         	call	_I2C_Master_Wait	;wreg free
  6968                           
  6969                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6970  001838  5011               	movf	I2C_Master_Read@a,w,c
  6971  00183A  A4D8               	btfss	status,2,c
  6972  00183C  D002               	goto	u2510
  6973  00183E  8AC5               	bsf	4037,5,c	;volatile
  6974  001840  D001               	goto	l3642
  6975  001842                     u2510:
  6976  001842  9AC5               	bcf	4037,5,c	;volatile
  6977  001844                     l3642:
  6978                           
  6979                           ;I2C.c: 62: ACKEN = 1;
  6980  001844  88C5               	bsf	4037,4,c	;volatile
  6981                           
  6982                           ;I2C.c: 63: return temp;
  6983  001846  5012               	movf	I2C_Master_Read@temp,w,c
  6984  001848  0012               	return	
  6985  00184A                     __end_of_I2C_Master_Read:
  6986                           	opt stack 0
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           intcon3	equ	0xFF0
  6995                           postinc0	equ	0xFEE
  6996                           wreg	equ	0xFE8
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function _I2C_Master_Wait *****************
  7005 ;; Defined at:
  7006 ;;		line 24 in file "I2C.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;		None
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        1 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    1
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_I2C_Master_Start
  7031 ;;		_I2C_Master_Stop
  7032 ;;		_I2C_Master_Write
  7033 ;;		_I2C_Master_Read
  7034 ;;		_I2C_Master_RepeatedStart
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text34
  7039  00195E                     __ptext34:
  7040                           	opt stack 0
  7041  00195E                     _I2C_Master_Wait:
  7042                           	opt stack 26
  7043  00195E                     l34:
  7044  00195E  B4C7               	btfsc	4039,2,c	;volatile
  7045  001960  D7FE               	goto	l34
  7046  001962  CFC5 F010          	movff	4037,??_I2C_Master_Wait	;volatile
  7047  001966  0E1F               	movlw	31
  7048  001968  1610               	andwf	??_I2C_Master_Wait,f,c
  7049  00196A  B4D8               	btfsc	status,2,c
  7050  00196C  0012               	return	
  7051  00196E  D7F7               	goto	l34
  7052  001970                     __end_of_I2C_Master_Wait:
  7053                           	opt stack 0
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           intcon3	equ	0xFF0
  7062                           postinc0	equ	0xFEE
  7063                           wreg	equ	0xFE8
  7064                           indf2	equ	0xFDF
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           fsr2h	equ	0xFDA
  7068                           fsr2l	equ	0xFD9
  7069                           status	equ	0xFD8
  7070                           
  7071 ;; *************** function ___wmul *****************
  7072 ;; Defined at:
  7073 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  multiplier      2   15[COMRAM] unsigned int 
  7076 ;;  multiplicand    2   17[COMRAM] unsigned int 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  product         2   19[COMRAM] unsigned int 
  7079 ;; Return value:  Size  Location     Type
  7080 ;;                  2   15[COMRAM] unsigned int 
  7081 ;; Registers used:
  7082 ;;		wreg, status,2, status,0, prodl, prodh
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;Total ram usage:        6 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    1
  7095 ;; This function calls:
  7096 ;;		Nothing
  7097 ;; This function is called by:
  7098 ;;		_get_timeDif
  7099 ;;		_executingState
  7100 ;;		_printf
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           	psect	text35
  7105  00184A                     __ptext35:
  7106                           	opt stack 0
  7107  00184A                     ___wmul:
  7108                           	opt stack 28
  7109                           
  7110                           ;incstack = 0
  7111  00184A  5010               	movf	___wmul@multiplier,w,c
  7112  00184C  0212               	mulwf	___wmul@multiplicand,c
  7113  00184E  CFF3 F014          	movff	prodl,___wmul@product
  7114  001852  CFF4 F015          	movff	prodh,___wmul@product+1
  7115  001856  5010               	movf	___wmul@multiplier,w,c
  7116  001858  0213               	mulwf	___wmul@multiplicand+1,c
  7117  00185A  50F3               	movf	prodl,w,c
  7118  00185C  2615               	addwf	___wmul@product+1,f,c
  7119  00185E  5011               	movf	___wmul@multiplier+1,w,c
  7120  001860  0212               	mulwf	___wmul@multiplicand,c
  7121  001862  50F3               	movf	prodl,w,c
  7122  001864  2615               	addwf	___wmul@product+1,f,c
  7123  001866  C014  F010         	movff	___wmul@product,?___wmul
  7124  00186A  C015  F011         	movff	___wmul@product+1,?___wmul+1
  7125  00186E  0012               	return	
  7126  001870                     __end_of___wmul:
  7127                           	opt stack 0
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           intcon3	equ	0xFF0
  7136                           postinc0	equ	0xFEE
  7137                           wreg	equ	0xFE8
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _eeprom_LogResult *****************
  7146 ;; Defined at:
  7147 ;;		line 82 in file "eeprom.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  data            2   18[COMRAM] PTR unsigned char 
  7150 ;;		 -> executingState@res(4), 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  i               2   21[COMRAM] int 
  7153 ;;  address         1   20[COMRAM] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      void 
  7156 ;; Registers used:
  7157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;Total ram usage:        5 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    3
  7170 ;; This function calls:
  7171 ;;		_eeprom_WriteByte
  7172 ;;		_newestAddress
  7173 ;; This function is called by:
  7174 ;;		_executingState
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text36
  7179  001474                     __ptext36:
  7180                           	opt stack 0
  7181  001474                     _eeprom_LogResult:
  7182                           	opt stack 26
  7183                           
  7184                           ;eeprom.c: 83: uint8_t address = newestAddress() + 4;
  7185                           
  7186                           ;incstack = 0
  7187  001474  ECB8  F00C         	call	_newestAddress	;wreg free
  7188  001478  0F04               	addlw	4
  7189  00147A  6E15               	movwf	eeprom_LogResult@address,c
  7190                           
  7191                           ;eeprom.c: 84: eeprom_WriteByte(0x0000, address);
  7192  00147C  0E00               	movlw	0
  7193  00147E  6E11               	movwf	eeprom_WriteByte@address+1,c
  7194  001480  0E00               	movlw	0
  7195  001482  6E10               	movwf	eeprom_WriteByte@address,c
  7196  001484  C015  F012         	movff	eeprom_LogResult@address,eeprom_WriteByte@data
  7197  001488  EC38  F00C         	call	_eeprom_WriteByte	;wreg free
  7198                           
  7199                           ;eeprom.c: 85: for(int i = 0; i < 4; i++){
  7200  00148C  0E00               	movlw	0
  7201  00148E  6E17               	movwf	eeprom_LogResult@i+1,c
  7202  001490  0E00               	movlw	0
  7203  001492  6E16               	movwf	eeprom_LogResult@i,c
  7204  001494  BE17               	btfsc	eeprom_LogResult@i+1,7,c
  7205  001496  D006               	goto	l4154
  7206  001498  5017               	movf	eeprom_LogResult@i+1,w,c
  7207  00149A  E117               	bnz	l356
  7208  00149C  0E04               	movlw	4
  7209  00149E  5C16               	subwf	eeprom_LogResult@i,w,c
  7210  0014A0  B0D8               	btfsc	status,0,c
  7211  0014A2  0012               	return	
  7212  0014A4                     l4154:
  7213                           
  7214                           ;eeprom.c: 86: eeprom_WriteByte(address + i, data[i]);
  7215  0014A4  5015               	movf	eeprom_LogResult@address,w,c
  7216  0014A6  2416               	addwf	eeprom_LogResult@i,w,c
  7217  0014A8  6E10               	movwf	eeprom_WriteByte@address,c
  7218  0014AA  0E00               	movlw	0
  7219  0014AC  2017               	addwfc	eeprom_LogResult@i+1,w,c
  7220  0014AE  6E11               	movwf	eeprom_WriteByte@address+1,c
  7221  0014B0  5016               	movf	eeprom_LogResult@i,w,c
  7222  0014B2  2413               	addwf	eeprom_LogResult@data,w,c
  7223  0014B4  6ED9               	movwf	fsr2l,c
  7224  0014B6  5017               	movf	eeprom_LogResult@i+1,w,c
  7225  0014B8  2014               	addwfc	eeprom_LogResult@data+1,w,c
  7226  0014BA  6EDA               	movwf	fsr2h,c
  7227  0014BC  50DF               	movf	indf2,w,c
  7228  0014BE  6E12               	movwf	eeprom_WriteByte@data,c
  7229  0014C0  EC38  F00C         	call	_eeprom_WriteByte	;wreg free
  7230  0014C4  4A16               	infsnz	eeprom_LogResult@i,f,c
  7231  0014C6  2A17               	incf	eeprom_LogResult@i+1,f,c
  7232  0014C8  D7E5               	goto	L5
  7233  0014CA                     l356:
  7234  0014CA  0012               	return		;funcret
  7235  0014CC                     __end_of_eeprom_LogResult:
  7236                           	opt stack 0
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           intcon	equ	0xFF2
  7244                           intcon3	equ	0xFF0
  7245                           postinc0	equ	0xFEE
  7246                           wreg	equ	0xFE8
  7247                           indf2	equ	0xFDF
  7248                           postinc2	equ	0xFDE
  7249                           postdec2	equ	0xFDD
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function _dispenseSnCan *****************
  7255 ;; Defined at:
  7256 ;;		line 231 in file "servos.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;		None
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;		None
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  1    wreg      void 
  7263 ;; Registers used:
  7264 ;;		wreg, status,2, status,0, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;Total ram usage:        2 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    2
  7277 ;; This function calls:
  7278 ;;		_servoRotate1
  7279 ;;		_servoRotate90
  7280 ;; This function is called by:
  7281 ;;		_executingState
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text37
  7286  0017C4                     __ptext37:
  7287                           	opt stack 0
  7288  0017C4                     _dispenseSnCan:
  7289                           	opt stack 27
  7290                           
  7291                           ;servos.c: 232: servoRotate90(0);
  7292                           
  7293                           ;incstack = 0
  7294  0017C4  0E00               	movlw	0
  7295  0017C6  6E11               	movwf	servoRotate90@servo+1,c
  7296  0017C8  0E00               	movlw	0
  7297  0017CA  6E10               	movwf	servoRotate90@servo,c
  7298  0017CC  ECC7  F007         	call	_servoRotate90	;wreg free
  7299                           
  7300                           ;servos.c: 233: _delay((unsigned long)((800)*(10000000/4000.0)));
  7301  0017D0  0E0B               	movlw	11
  7302  0017D2  6E17               	movwf	(??_dispenseSnCan+1)& (0+255),c
  7303  0017D4  0E26               	movlw	38
  7304  0017D6  6E16               	movwf	??_dispenseSnCan& (0+255),c
  7305  0017D8  0E5E               	movlw	94
  7306  0017DA                     u3827:
  7307  0017DA  2EE8               	decfsz	wreg,f,c
  7308  0017DC  D7FE               	bra	u3827
  7309  0017DE  2E16               	decfsz	??_dispenseSnCan& (0+255),f,c
  7310  0017E0  D7FC               	bra	u3827
  7311  0017E2  2E17               	decfsz	(??_dispenseSnCan+1)& (0+255),f,c
  7312  0017E4  D7FA               	bra	u3827
  7313                           
  7314                           ;servos.c: 234: servoRotate1(0);
  7315  0017E6  0E00               	movlw	0
  7316  0017E8  6E11               	movwf	servoRotate1@angle+1,c
  7317  0017EA  0E00               	movlw	0
  7318  0017EC  6E10               	movwf	servoRotate1@angle,c
  7319  0017EE  ECC3  F00B         	call	_servoRotate1	;wreg free
  7320  0017F2  0012               	return		;funcret
  7321  0017F4                     __end_of_dispenseSnCan:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           intcon3	equ	0xFF0
  7331                           postinc0	equ	0xFEE
  7332                           wreg	equ	0xFE8
  7333                           indf2	equ	0xFDF
  7334                           postinc2	equ	0xFDE
  7335                           postdec2	equ	0xFDD
  7336                           fsr2h	equ	0xFDA
  7337                           fsr2l	equ	0xFD9
  7338                           status	equ	0xFD8
  7339                           
  7340 ;; *************** function _servoRotate1 *****************
  7341 ;; Defined at:
  7342 ;;		line 21 in file "servos.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  angle           2   15[COMRAM] int 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  i               2   18[COMRAM] unsigned int 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  1    wreg      void 
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;Total ram usage:        5 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_executingState
  7367 ;;		_dispenseSnCan
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           	psect	text38
  7372  001786                     __ptext38:
  7373                           	opt stack 0
  7374  001786                     _servoRotate1:
  7375                           	opt stack 28
  7376                           
  7377                           ;servos.c: 22: unsigned int i;
  7378                           ;servos.c: 23: for (i = 0; i < loopcount; i++) {
  7379                           
  7380                           ;incstack = 0
  7381  001786  0E00               	movlw	0
  7382  001788  6E14               	movwf	servoRotate1@i+1,c
  7383  00178A  0E00               	movlw	0
  7384  00178C  6E13               	movwf	servoRotate1@i,c
  7385  00178E  D013               	goto	l430
  7386  001790                     l431:
  7387                           
  7388                           ;servos.c: 24: LATAbits.LATA4 = 1;
  7389  001790  8889               	bsf	3977,4,c	;volatile
  7390                           
  7391                           ;servos.c: 25: _delay((unsigned long)((1550)*(10000000/4000000.0)));
  7392  001792  0E06               	movlw	6
  7393  001794  6E12               	movwf	??_servoRotate1& (0+255),c
  7394  001796  0E07               	movlw	7
  7395  001798                     u3837:
  7396  001798  2EE8               	decfsz	wreg,f,c
  7397  00179A  D7FE               	bra	u3837
  7398  00179C  2E12               	decfsz	??_servoRotate1& (0+255),f,c
  7399  00179E  D7FC               	bra	u3837
  7400                           
  7401                           ;servos.c: 26: LATAbits.LATA4 = 0;
  7402  0017A0  9889               	bcf	3977,4,c	;volatile
  7403                           
  7404                           ;servos.c: 27: _delay((unsigned long)((14450)*(10000000/4000000.0)));
  7405  0017A2  0E2F               	movlw	47
  7406  0017A4  6E12               	movwf	??_servoRotate1& (0+255),c
  7407  0017A6  0EE9               	movlw	233
  7408  0017A8                     u3847:
  7409  0017A8  2EE8               	decfsz	wreg,f,c
  7410  0017AA  D7FE               	bra	u3847
  7411  0017AC  2E12               	decfsz	??_servoRotate1& (0+255),f,c
  7412  0017AE  D7FC               	bra	u3847
  7413  0017B0  D000               	nop2	
  7414  0017B2  4A13               	infsnz	servoRotate1@i,f,c
  7415  0017B4  2A14               	incf	servoRotate1@i+1,f,c
  7416  0017B6                     l430:
  7417  0017B6  5050               	movf	_loopcount,w,c
  7418  0017B8  5C13               	subwf	servoRotate1@i,w,c
  7419  0017BA  5051               	movf	_loopcount+1,w,c
  7420  0017BC  5814               	subwfb	servoRotate1@i+1,w,c
  7421  0017BE  B0D8               	btfsc	status,0,c
  7422  0017C0  0012               	return	
  7423  0017C2  D7E6               	goto	l431
  7424  0017C4                     __end_of_servoRotate1:
  7425                           	opt stack 0
  7426                           tblptru	equ	0xFF8
  7427                           tblptrh	equ	0xFF7
  7428                           tblptrl	equ	0xFF6
  7429                           tablat	equ	0xFF5
  7430                           prodh	equ	0xFF4
  7431                           prodl	equ	0xFF3
  7432                           intcon	equ	0xFF2
  7433                           intcon3	equ	0xFF0
  7434                           postinc0	equ	0xFEE
  7435                           wreg	equ	0xFE8
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           fsr2h	equ	0xFDA
  7440                           fsr2l	equ	0xFD9
  7441                           status	equ	0xFD8
  7442                           
  7443 ;; *************** function _dispenseAlCan *****************
  7444 ;; Defined at:
  7445 ;;		line 225 in file "servos.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;                  1    wreg      void 
  7452 ;; Registers used:
  7453 ;;		wreg, status,2, status,0, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;Total ram usage:        2 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    2
  7466 ;; This function calls:
  7467 ;;		_servoRotate2
  7468 ;;		_servoRotate90
  7469 ;; This function is called by:
  7470 ;;		_executingState
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           	psect	text39
  7475  0017F4                     __ptext39:
  7476                           	opt stack 0
  7477  0017F4                     _dispenseAlCan:
  7478                           	opt stack 27
  7479                           
  7480                           ;servos.c: 226: servoRotate90(1);
  7481                           
  7482                           ;incstack = 0
  7483  0017F4  0E00               	movlw	0
  7484  0017F6  6E11               	movwf	servoRotate90@servo+1,c
  7485  0017F8  0E01               	movlw	1
  7486  0017FA  6E10               	movwf	servoRotate90@servo,c
  7487  0017FC  ECC7  F007         	call	_servoRotate90	;wreg free
  7488                           
  7489                           ;servos.c: 227: _delay((unsigned long)((800)*(10000000/4000.0)));
  7490  001800  0E0B               	movlw	11
  7491  001802  6E17               	movwf	(??_dispenseAlCan+1)& (0+255),c
  7492  001804  0E26               	movlw	38
  7493  001806  6E16               	movwf	??_dispenseAlCan& (0+255),c
  7494  001808  0E5E               	movlw	94
  7495  00180A                     u3857:
  7496  00180A  2EE8               	decfsz	wreg,f,c
  7497  00180C  D7FE               	bra	u3857
  7498  00180E  2E16               	decfsz	??_dispenseAlCan& (0+255),f,c
  7499  001810  D7FC               	bra	u3857
  7500  001812  2E17               	decfsz	(??_dispenseAlCan+1)& (0+255),f,c
  7501  001814  D7FA               	bra	u3857
  7502                           
  7503                           ;servos.c: 228: servoRotate2(1);
  7504  001816  0E00               	movlw	0
  7505  001818  6E11               	movwf	servoRotate2@angle+1,c
  7506  00181A  0E01               	movlw	1
  7507  00181C  6E10               	movwf	servoRotate2@angle,c
  7508  00181E  EC46  F00B         	call	_servoRotate2	;wreg free
  7509  001822  0012               	return		;funcret
  7510  001824                     __end_of_dispenseAlCan:
  7511                           	opt stack 0
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodh	equ	0xFF4
  7517                           prodl	equ	0xFF3
  7518                           intcon	equ	0xFF2
  7519                           intcon3	equ	0xFF0
  7520                           postinc0	equ	0xFEE
  7521                           wreg	equ	0xFE8
  7522                           indf2	equ	0xFDF
  7523                           postinc2	equ	0xFDE
  7524                           postdec2	equ	0xFDD
  7525                           fsr2h	equ	0xFDA
  7526                           fsr2l	equ	0xFD9
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _servoRotate90 *****************
  7530 ;; Defined at:
  7531 ;;		line 122 in file "servos.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  servo           2   15[COMRAM] int 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;  i               2   19[COMRAM] unsigned int 
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2, status,0
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7545 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;Total ram usage:        6 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    1
  7552 ;; This function calls:
  7553 ;;		Nothing
  7554 ;; This function is called by:
  7555 ;;		_executingState
  7556 ;;		_dispenseAlCan
  7557 ;;		_dispenseSnCan
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text40
  7562  000F8E                     __ptext40:
  7563                           	opt stack 0
  7564  000F8E                     _servoRotate90:
  7565                           	opt stack 28
  7566                           
  7567                           ;servos.c: 124: unsigned int i;
  7568                           ;servos.c: 125: for (i = 0; i < loopcount; i++) {
  7569                           
  7570                           ;incstack = 0
  7571  000F8E  0E00               	movlw	0
  7572  000F90  6E15               	movwf	servoRotate90@i+1,c
  7573  000F92  0E00               	movlw	0
  7574  000F94  6E14               	movwf	servoRotate90@i,c
  7575  000F96  D056               	goto	l479
  7576  000F98                     l482:
  7577                           
  7578                           ;servos.c: 128: LATAbits.LATA4 = 1;
  7579  000F98  8889               	bsf	3977,4,c	;volatile
  7580                           
  7581                           ;servos.c: 129: break;
  7582  000F9A  D020               	goto	l3896
  7583  000F9C                     l484:
  7584                           
  7585                           ;servos.c: 131: LATAbits.LATA5 = 1;
  7586  000F9C  8A89               	bsf	3977,5,c	;volatile
  7587                           
  7588                           ;servos.c: 132: break;
  7589  000F9E  D01E               	goto	l3896
  7590  000FA0                     l485:
  7591                           
  7592                           ;servos.c: 134: LATEbits.LATE0 = 1;
  7593  000FA0  808D               	bsf	3981,0,c	;volatile
  7594                           
  7595                           ;servos.c: 135: break;
  7596  000FA2  D01C               	goto	l3896
  7597  000FA4                     l486:
  7598                           
  7599                           ;servos.c: 137: LATEbits.LATE1 = 1;
  7600  000FA4  828D               	bsf	3981,1,c	;volatile
  7601                           
  7602                           ;servos.c: 138: break;
  7603  000FA6  D01A               	goto	l3896
  7604  000FA8                     l487:
  7605                           
  7606                           ;servos.c: 140: LATBbits.LATB2 = 1;
  7607  000FA8  848A               	bsf	3978,2,c	;volatile
  7608                           
  7609                           ;servos.c: 142: }
  7610                           
  7611                           ;servos.c: 141: break;
  7612  000FAA  D018               	goto	l3896
  7613  000FAC                     l3894:
  7614  000FAC  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  7615  000FB0  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  7616                           
  7617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7618                           ; Switch size 1, requested type "space"
  7619                           ; Number of cases is 1, Range of values is 0 to 0
  7620                           ; switch strategies available:
  7621                           ; Name         Instructions Cycles
  7622                           ; simple_byte            4     3 (average)
  7623                           ;	Chosen strategy is simple_byte
  7624  000FB4  5013               	movf	??_servoRotate90+1,w,c
  7625  000FB6  0A00               	xorlw	0	; case 0
  7626  000FB8  A4D8               	btfss	status,2,c
  7627  000FBA  D010               	goto	l3896
  7628                           
  7629                           ; Switch size 1, requested type "space"
  7630                           ; Number of cases is 5, Range of values is 0 to 4
  7631                           ; switch strategies available:
  7632                           ; Name         Instructions Cycles
  7633                           ; simple_byte           16     9 (average)
  7634                           ;	Chosen strategy is simple_byte
  7635  000FBC  5012               	movf	??_servoRotate90,w,c
  7636  000FBE  0A00               	xorlw	0	; case 0
  7637  000FC0  B4D8               	btfsc	status,2,c
  7638  000FC2  D7EA               	goto	l482
  7639  000FC4  0A01               	xorlw	1	; case 1
  7640  000FC6  B4D8               	btfsc	status,2,c
  7641  000FC8  D7E9               	goto	l484
  7642  000FCA  0A03               	xorlw	3	; case 2
  7643  000FCC  B4D8               	btfsc	status,2,c
  7644  000FCE  D7E8               	goto	l485
  7645  000FD0  0A01               	xorlw	1	; case 3
  7646  000FD2  B4D8               	btfsc	status,2,c
  7647  000FD4  D7E7               	goto	l486
  7648  000FD6  0A07               	xorlw	7	; case 4
  7649  000FD8  B4D8               	btfsc	status,2,c
  7650  000FDA  D7E6               	goto	l487
  7651  000FDC                     l3896:
  7652                           
  7653                           ;servos.c: 143: _delay((unsigned long)((2400)*(10000000/4000000.0)));
  7654  000FDC  0E08               	movlw	8
  7655  000FDE  6E12               	movwf	??_servoRotate90& (0+255),c
  7656  000FE0  0ECA               	movlw	202
  7657  000FE2                     u3867:
  7658  000FE2  2EE8               	decfsz	wreg,f,c
  7659  000FE4  D7FE               	bra	u3867
  7660  000FE6  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  7661  000FE8  D7FC               	bra	u3867
  7662                           
  7663                           ;servos.c: 144: switch (servo) {
  7664  000FEA  D00A               	goto	l3900
  7665  000FEC                     l489:
  7666                           
  7667                           ;servos.c: 146: LATAbits.LATA4 = 0;
  7668  000FEC  9889               	bcf	3977,4,c	;volatile
  7669                           
  7670                           ;servos.c: 147: break;
  7671  000FEE  D020               	goto	l3902
  7672  000FF0                     l491:
  7673                           
  7674                           ;servos.c: 149: LATAbits.LATA5 = 0;
  7675  000FF0  9A89               	bcf	3977,5,c	;volatile
  7676                           
  7677                           ;servos.c: 150: break;
  7678  000FF2  D01E               	goto	l3902
  7679  000FF4                     l492:
  7680                           
  7681                           ;servos.c: 152: LATEbits.LATE0 = 0;
  7682  000FF4  908D               	bcf	3981,0,c	;volatile
  7683                           
  7684                           ;servos.c: 153: break;
  7685  000FF6  D01C               	goto	l3902
  7686  000FF8                     l493:
  7687                           
  7688                           ;servos.c: 155: LATEbits.LATE1 = 0;
  7689  000FF8  928D               	bcf	3981,1,c	;volatile
  7690                           
  7691                           ;servos.c: 156: break;
  7692  000FFA  D01A               	goto	l3902
  7693  000FFC                     l494:
  7694                           
  7695                           ;servos.c: 158: LATBbits.LATB2 = 0;
  7696  000FFC  948A               	bcf	3978,2,c	;volatile
  7697                           
  7698                           ;servos.c: 160: }
  7699                           
  7700                           ;servos.c: 159: break;
  7701  000FFE  D018               	goto	l3902
  7702  001000                     l3900:
  7703  001000  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  7704  001004  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  7705                           
  7706                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7707                           ; Switch size 1, requested type "space"
  7708                           ; Number of cases is 1, Range of values is 0 to 0
  7709                           ; switch strategies available:
  7710                           ; Name         Instructions Cycles
  7711                           ; simple_byte            4     3 (average)
  7712                           ;	Chosen strategy is simple_byte
  7713  001008  5013               	movf	??_servoRotate90+1,w,c
  7714  00100A  0A00               	xorlw	0	; case 0
  7715  00100C  A4D8               	btfss	status,2,c
  7716  00100E  D010               	goto	l3902
  7717                           
  7718                           ; Switch size 1, requested type "space"
  7719                           ; Number of cases is 5, Range of values is 0 to 4
  7720                           ; switch strategies available:
  7721                           ; Name         Instructions Cycles
  7722                           ; simple_byte           16     9 (average)
  7723                           ;	Chosen strategy is simple_byte
  7724  001010  5012               	movf	??_servoRotate90,w,c
  7725  001012  0A00               	xorlw	0	; case 0
  7726  001014  B4D8               	btfsc	status,2,c
  7727  001016  D7EA               	goto	l489
  7728  001018  0A01               	xorlw	1	; case 1
  7729  00101A  B4D8               	btfsc	status,2,c
  7730  00101C  D7E9               	goto	l491
  7731  00101E  0A03               	xorlw	3	; case 2
  7732  001020  B4D8               	btfsc	status,2,c
  7733  001022  D7E8               	goto	l492
  7734  001024  0A01               	xorlw	1	; case 3
  7735  001026  B4D8               	btfsc	status,2,c
  7736  001028  D7E7               	goto	l493
  7737  00102A  0A07               	xorlw	7	; case 4
  7738  00102C  B4D8               	btfsc	status,2,c
  7739  00102E  D7E6               	goto	l494
  7740  001030                     l3902:
  7741                           
  7742                           ;servos.c: 161: _delay((unsigned long)((17600)*(10000000/4000000.0)));
  7743  001030  0E3A               	movlw	58
  7744  001032  6E12               	movwf	??_servoRotate90& (0+255),c
  7745  001034  0E23               	movlw	35
  7746  001036                     u3877:
  7747  001036  2EE8               	decfsz	wreg,f,c
  7748  001038  D7FE               	bra	u3877
  7749  00103A  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  7750  00103C  D7FC               	bra	u3877
  7751  00103E  F000               	nop	
  7752  001040  4A14               	infsnz	servoRotate90@i,f,c
  7753  001042  2A15               	incf	servoRotate90@i+1,f,c
  7754  001044                     l479:
  7755  001044  5050               	movf	_loopcount,w,c
  7756  001046  5C14               	subwf	servoRotate90@i,w,c
  7757  001048  5051               	movf	_loopcount+1,w,c
  7758  00104A  5815               	subwfb	servoRotate90@i+1,w,c
  7759  00104C  B0D8               	btfsc	status,0,c
  7760  00104E  0012               	return	
  7761  001050  D7AD               	goto	l3894
  7762  001052                     __end_of_servoRotate90:
  7763                           	opt stack 0
  7764                           tblptru	equ	0xFF8
  7765                           tblptrh	equ	0xFF7
  7766                           tblptrl	equ	0xFF6
  7767                           tablat	equ	0xFF5
  7768                           prodh	equ	0xFF4
  7769                           prodl	equ	0xFF3
  7770                           intcon	equ	0xFF2
  7771                           intcon3	equ	0xFF0
  7772                           postinc0	equ	0xFEE
  7773                           wreg	equ	0xFE8
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function _servoRotate2 *****************
  7782 ;; Defined at:
  7783 ;;		line 32 in file "servos.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;  angle           2   15[COMRAM] int 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  i               2   18[COMRAM] unsigned int 
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  1    wreg      void 
  7790 ;; Registers used:
  7791 ;;		wreg, status,2, status,0
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;Total ram usage:        5 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    1
  7804 ;; This function calls:
  7805 ;;		Nothing
  7806 ;; This function is called by:
  7807 ;;		_executingState
  7808 ;;		_dispenseAlCan
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text41
  7813  00168C                     __ptext41:
  7814                           	opt stack 0
  7815  00168C                     _servoRotate2:
  7816                           	opt stack 28
  7817                           
  7818                           ;servos.c: 33: unsigned int i;
  7819                           ;servos.c: 34: for (i = 0; i < loopcount; i++) {
  7820                           
  7821                           ;incstack = 0
  7822  00168C  0E00               	movlw	0
  7823  00168E  6E14               	movwf	servoRotate2@i+1,c
  7824  001690  0E00               	movlw	0
  7825  001692  6E13               	movwf	servoRotate2@i,c
  7826  001694  D014               	goto	l436
  7827  001696                     l437:
  7828                           
  7829                           ;servos.c: 35: LATAbits.LATA5 = 1;
  7830  001696  8A89               	bsf	3977,5,c	;volatile
  7831                           
  7832                           ;servos.c: 36: _delay((unsigned long)((1665)*(10000000/4000000.0)));
  7833  001698  0E06               	movlw	6
  7834  00169A  6E12               	movwf	??_servoRotate2& (0+255),c
  7835  00169C  0E66               	movlw	102
  7836  00169E                     u3887:
  7837  00169E  2EE8               	decfsz	wreg,f,c
  7838  0016A0  D7FE               	bra	u3887
  7839  0016A2  2E12               	decfsz	??_servoRotate2& (0+255),f,c
  7840  0016A4  D7FC               	bra	u3887
  7841  0016A6  D000               	nop2	
  7842                           
  7843                           ;servos.c: 37: LATAbits.LATA5 = 0;
  7844  0016A8  9A89               	bcf	3977,5,c	;volatile
  7845                           
  7846                           ;servos.c: 38: _delay((unsigned long)((18335)*(10000000/4000000.0)));
  7847  0016AA  0E3C               	movlw	60
  7848  0016AC  6E12               	movwf	??_servoRotate2& (0+255),c
  7849  0016AE  0E86               	movlw	134
  7850  0016B0                     u3897:
  7851  0016B0  2EE8               	decfsz	wreg,f,c
  7852  0016B2  D7FE               	bra	u3897
  7853  0016B4  2E12               	decfsz	??_servoRotate2& (0+255),f,c
  7854  0016B6  D7FC               	bra	u3897
  7855  0016B8  F000               	nop	
  7856  0016BA  4A13               	infsnz	servoRotate2@i,f,c
  7857  0016BC  2A14               	incf	servoRotate2@i+1,f,c
  7858  0016BE                     l436:
  7859  0016BE  5050               	movf	_loopcount,w,c
  7860  0016C0  5C13               	subwf	servoRotate2@i,w,c
  7861  0016C2  5051               	movf	_loopcount+1,w,c
  7862  0016C4  5814               	subwfb	servoRotate2@i+1,w,c
  7863  0016C6  B0D8               	btfsc	status,0,c
  7864  0016C8  0012               	return	
  7865  0016CA  D7E5               	goto	l437
  7866  0016CC                     __end_of_servoRotate2:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           intcon	equ	0xFF2
  7875                           intcon3	equ	0xFF0
  7876                           postinc0	equ	0xFEE
  7877                           wreg	equ	0xFE8
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _eeprom_initialize *****************
  7886 ;; Defined at:
  7887 ;;		line 73 in file "eeprom.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        0 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    3
  7908 ;; This function calls:
  7909 ;;		_eeprom_WriteByte
  7910 ;;		_newestAddress
  7911 ;; This function is called by:
  7912 ;;		_main
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text42
  7917  0018B4                     __ptext42:
  7918                           	opt stack 0
  7919  0018B4                     _eeprom_initialize:
  7920                           	opt stack 27
  7921                           
  7922                           ;eeprom.c: 74: if(newestAddress() == 0b11111111){
  7923                           
  7924                           ;incstack = 0
  7925  0018B4  ECB8  F00C         	call	_newestAddress	;wreg free
  7926  0018B8  0AFF               	xorlw	255
  7927  0018BA  A4D8               	btfss	status,2,c
  7928  0018BC  0012               	return	
  7929                           
  7930                           ;eeprom.c: 75: eeprom_WriteByte(0x0000, 0x00);
  7931  0018BE  0E00               	movlw	0
  7932  0018C0  6E11               	movwf	eeprom_WriteByte@address+1,c
  7933  0018C2  0E00               	movlw	0
  7934  0018C4  6E10               	movwf	eeprom_WriteByte@address,c
  7935  0018C6  0E00               	movlw	0
  7936  0018C8  6E12               	movwf	eeprom_WriteByte@data,c
  7937  0018CA  EC38  F00C         	call	_eeprom_WriteByte	;wreg free
  7938  0018CE  0012               	return	
  7939  0018D0                     __end_of_eeprom_initialize:
  7940                           	opt stack 0
  7941                           tblptru	equ	0xFF8
  7942                           tblptrh	equ	0xFF7
  7943                           tblptrl	equ	0xFF6
  7944                           tablat	equ	0xFF5
  7945                           prodh	equ	0xFF4
  7946                           prodl	equ	0xFF3
  7947                           intcon	equ	0xFF2
  7948                           intcon3	equ	0xFF0
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           indf2	equ	0xFDF
  7952                           postinc2	equ	0xFDE
  7953                           postdec2	equ	0xFDD
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           
  7958 ;; *************** function _newestAddress *****************
  7959 ;; Defined at:
  7960 ;;		line 69 in file "eeprom.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;		None
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;		None
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      unsigned char 
  7967 ;; Registers used:
  7968 ;;		wreg, status,2, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;Total ram usage:        0 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    2
  7981 ;; This function calls:
  7982 ;;		_eeprom_ReadByte
  7983 ;; This function is called by:
  7984 ;;		_eeprom_initialize
  7985 ;;		_eeprom_LogResult
  7986 ;;		_eeprom_GetLog
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text43
  7991  001970                     __ptext43:
  7992                           	opt stack 0
  7993  001970                     _newestAddress:
  7994                           	opt stack 26
  7995                           
  7996                           ;eeprom.c: 70: return eeprom_ReadByte(0x0000);
  7997                           
  7998                           ;incstack = 0
  7999  001970  0E00               	movlw	0
  8000  001972  6E11               	movwf	eeprom_ReadByte@address+1,c
  8001  001974  0E00               	movlw	0
  8002  001976  6E10               	movwf	eeprom_ReadByte@address,c
  8003  001978  ECA4  F00C         	call	_eeprom_ReadByte	;wreg free
  8004  00197C  0012               	return	
  8005  00197E                     __end_of_newestAddress:
  8006                           	opt stack 0
  8007                           tblptru	equ	0xFF8
  8008                           tblptrh	equ	0xFF7
  8009                           tblptrl	equ	0xFF6
  8010                           tablat	equ	0xFF5
  8011                           prodh	equ	0xFF4
  8012                           prodl	equ	0xFF3
  8013                           intcon	equ	0xFF2
  8014                           intcon3	equ	0xFF0
  8015                           postinc0	equ	0xFEE
  8016                           wreg	equ	0xFE8
  8017                           indf2	equ	0xFDF
  8018                           postinc2	equ	0xFDE
  8019                           postdec2	equ	0xFDD
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function _eeprom_ReadByte *****************
  8025 ;; Defined at:
  8026 ;;		line 14 in file "eeprom.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  address         2   15[COMRAM] unsigned int 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;		None
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      unsigned char 
  8033 ;; Registers used:
  8034 ;;		wreg, status,2
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8040 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;Total ram usage:        2 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    1
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_newestAddress
  8051 ;;		_eeprom_GetLog
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text44
  8056  001948                     __ptext44:
  8057                           	opt stack 0
  8058  001948                     _eeprom_ReadByte:
  8059                           	opt stack 26
  8060                           
  8061                           ;eeprom.c: 18: EEADRH = (uint8_t)(address >> 8);
  8062                           
  8063                           ;incstack = 0
  8064  001948  5011               	movf	eeprom_ReadByte@address+1,w,c
  8065  00194A  6EAA               	movwf	4010,c	;volatile
  8066                           
  8067                           ;eeprom.c: 19: EEADR = (uint8_t)address;
  8068  00194C  C010  FFA9         	movff	eeprom_ReadByte@address,4009	;volatile
  8069                           
  8070                           ;eeprom.c: 21: EECON1bits.EEPGD = 0;
  8071  001950  9EA6               	bcf	4006,7,c	;volatile
  8072                           
  8073                           ;eeprom.c: 22: EECON1bits.CFGS = 0;
  8074  001952  9CA6               	bcf	4006,6,c	;volatile
  8075                           
  8076                           ;eeprom.c: 23: EECON1bits.RD = 1;
  8077  001954  80A6               	bsf	4006,0,c	;volatile
  8078  001956                     l335:
  8079  001956  B0A6               	btfsc	4006,0,c	;volatile
  8080  001958  D7FE               	goto	l335
  8081                           
  8082                           ;eeprom.c: 29: return EEDATA;
  8083  00195A  50A8               	movf	4008,w,c	;volatile
  8084  00195C  0012               	return	
  8085  00195E                     __end_of_eeprom_ReadByte:
  8086                           	opt stack 0
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           intcon3	equ	0xFF0
  8095                           postinc0	equ	0xFEE
  8096                           wreg	equ	0xFE8
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function _eeprom_WriteByte *****************
  8105 ;; Defined at:
  8106 ;;		line 37 in file "eeprom.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  address         2   15[COMRAM] unsigned int 
  8109 ;;  data            1   17[COMRAM] unsigned char 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;Total ram usage:        3 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    1
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_eeprom_initialize
  8132 ;;		_eeprom_LogResult
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text45
  8137  001870                     __ptext45:
  8138                           	opt stack 0
  8139  001870                     _eeprom_WriteByte:
  8140                           	opt stack 27
  8141                           
  8142                           ;eeprom.c: 40: EEADRH = (uint8_t)(address >> 8);
  8143                           
  8144                           ;incstack = 0
  8145  001870  5011               	movf	eeprom_WriteByte@address+1,w,c
  8146  001872  6EAA               	movwf	4010,c	;volatile
  8147                           
  8148                           ;eeprom.c: 41: EEADR = (uint8_t)address;
  8149  001874  C010  FFA9         	movff	eeprom_WriteByte@address,4009	;volatile
  8150                           
  8151                           ;eeprom.c: 43: EEDATA = data;
  8152  001878  C012  FFA8         	movff	eeprom_WriteByte@data,4008	;volatile
  8153                           
  8154                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  8155  00187C  9EA6               	bcf	4006,7,c	;volatile
  8156                           
  8157                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  8158  00187E  9CA6               	bcf	4006,6,c	;volatile
  8159                           
  8160                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  8161  001880  84A6               	bsf	4006,2,c	;volatile
  8162                           
  8163                           ;eeprom.c: 50: EECON2 = 0x55;
  8164  001882  0E55               	movlw	85
  8165  001884  6EA7               	movwf	4007,c	;volatile
  8166                           
  8167                           ;eeprom.c: 51: EECON2 = 0xAA;
  8168  001886  0EAA               	movlw	170
  8169  001888  6EA7               	movwf	4007,c	;volatile
  8170                           
  8171                           ;eeprom.c: 52: EECON1bits.WR = 1;
  8172  00188A  82A6               	bsf	4006,1,c	;volatile
  8173  00188C                     l341:
  8174  00188C  A8A1               	btfss	4001,4,c	;volatile
  8175  00188E  D7FE               	goto	l341
  8176                           
  8177                           ;eeprom.c: 58: }
  8178                           ;eeprom.c: 60: PIR2bits.EEIF = 0;
  8179  001890  98A1               	bcf	4001,4,c	;volatile
  8180                           
  8181                           ;eeprom.c: 61: EECON1bits.WREN = 0;
  8182  001892  94A6               	bcf	4006,2,c	;volatile
  8183  001894  0012               	return		;funcret
  8184  001896                     __end_of_eeprom_WriteByte:
  8185                           	opt stack 0
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           prodh	equ	0xFF4
  8191                           prodl	equ	0xFF3
  8192                           intcon	equ	0xFF2
  8193                           intcon3	equ	0xFF0
  8194                           postinc0	equ	0xFEE
  8195                           wreg	equ	0xFE8
  8196                           indf2	equ	0xFDF
  8197                           postinc2	equ	0xFDE
  8198                           postdec2	equ	0xFDD
  8199                           fsr2h	equ	0xFDA
  8200                           fsr2l	equ	0xFD9
  8201                           status	equ	0xFD8
  8202                           
  8203 ;; *************** function _debugState *****************
  8204 ;; Defined at:
  8205 ;;		line 376 in file "main.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;		None
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;		None
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      void 
  8212 ;; Registers used:
  8213 ;;		wreg, status,2
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;Total ram usage:        0 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    1
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_main
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text46
  8234  0019B0                     __ptext46:
  8235                           	opt stack 0
  8236  0019B0                     _debugState:
  8237                           	opt stack 29
  8238                           
  8239                           ;main.c: 377: state = MAIN;
  8240                           
  8241                           ;incstack = 0
  8242  0019B0  0E00               	movlw	0
  8243  0019B2  6E4B               	movwf	_state,c
  8244  0019B4  0012               	return		;funcret
  8245  0019B6                     __end_of_debugState:
  8246                           	opt stack 0
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodh	equ	0xFF4
  8252                           prodl	equ	0xFF3
  8253                           intcon	equ	0xFF2
  8254                           intcon3	equ	0xFF0
  8255                           postinc0	equ	0xFEE
  8256                           wreg	equ	0xFE8
  8257                           indf2	equ	0xFDF
  8258                           postinc2	equ	0xFDE
  8259                           postdec2	equ	0xFDD
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264 ;; *************** function _keypressed *****************
  8265 ;; Defined at:
  8266 ;;		line 519 in file "main.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;		None
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  keypress        1   14[COMRAM] unsigned char 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      void 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;Total ram usage:       15 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		Interrupt level 2
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	intcode
  8294  000008                     __pintcode:
  8295                           	opt stack 0
  8296  000008                     _keypressed:
  8297                           	opt stack 25
  8298                           
  8299                           ;incstack = 0
  8300  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8301  00000A  ED89  F008         	call	int_func,f	;refresh shadow registers
  8302                           tblptru	equ	0xFF8
  8303                           tblptrh	equ	0xFF7
  8304                           tblptrl	equ	0xFF6
  8305                           tablat	equ	0xFF5
  8306                           prodh	equ	0xFF4
  8307                           prodl	equ	0xFF3
  8308                           intcon	equ	0xFF2
  8309                           intcon3	equ	0xFF0
  8310                           postinc0	equ	0xFEE
  8311                           wreg	equ	0xFE8
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           fsr2h	equ	0xFDA
  8316                           fsr2l	equ	0xFD9
  8317                           status	equ	0xFD8
  8318                           
  8319                           	psect	intcode_body
  8320  001112                     __pintcode_body:
  8321                           	opt stack 25
  8322  001112                     int_func:
  8323                           	opt stack 25
  8324  001112  0006               	pop		; remove dummy address from shadow register refresh
  8325  001114  CFFA F001          	movff	pclath,??_keypressed
  8326  001118  CFFB F002          	movff	pclatu,??_keypressed+1
  8327  00111C  CFE9 F003          	movff	fsr0l,??_keypressed+2
  8328  001120  CFEA F004          	movff	fsr0h,??_keypressed+3
  8329  001124  CFE1 F005          	movff	fsr1l,??_keypressed+4
  8330  001128  CFE2 F006          	movff	fsr1h,??_keypressed+5
  8331  00112C  CFD9 F007          	movff	fsr2l,??_keypressed+6
  8332  001130  CFDA F008          	movff	fsr2h,??_keypressed+7
  8333  001134  CFF3 F009          	movff	prodl,??_keypressed+8
  8334  001138  CFF4 F00A          	movff	prodh,??_keypressed+9
  8335  00113C  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  8336  001140  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  8337  001144  CFF8 F00D          	movff	tblptru,??_keypressed+12
  8338  001148  CFF5 F00E          	movff	tablat,??_keypressed+13
  8339                           
  8340                           ;main.c: 521: if (INT1IF)
  8341  00114C  A0F0               	btfss	intcon3,0,c	;volatile
  8342  00114E  D01C               	goto	i2l320
  8343  001150                     i2l2322:
  8344                           
  8345                           ;main.c: 524: {
  8346                           ;main.c: 525: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8347  001150  3881               	swapf	3969,w,c	;volatile
  8348  001152  0B0F               	andlw	15
  8349  001154  0B0F               	andlw	15
  8350  001156  6E0F               	movwf	keypressed@keypress,c
  8351                           
  8352                           ;main.c: 526: if (keypress == 0b1101)
  8353  001158  0E0D               	movlw	13
  8354  00115A  180F               	xorwf	keypressed@keypress,w,c
  8355  00115C  A4D8               	btfss	status,2,c
  8356  00115E  D7F8               	goto	i2l2322
  8357                           
  8358                           ;main.c: 527: {
  8359                           ;main.c: 528: LATA = 0x00;
  8360  001160  0E00               	movlw	0
  8361  001162  6E89               	movwf	3977,c	;volatile
  8362                           
  8363                           ;main.c: 529: LATB = 0x00;
  8364  001164  0E00               	movlw	0
  8365  001166  6E8A               	movwf	3978,c	;volatile
  8366                           
  8367                           ;main.c: 530: LATC = 0x00;
  8368  001168  0E00               	movlw	0
  8369  00116A  6E8B               	movwf	3979,c	;volatile
  8370                           
  8371                           ;main.c: 531: LATD = 0x00;
  8372  00116C  0E00               	movlw	0
  8373  00116E  6E8C               	movwf	3980,c	;volatile
  8374                           
  8375                           ;main.c: 532: LATE = 0x00;
  8376  001170  0E00               	movlw	0
  8377  001172  6E8D               	movwf	3981,c	;volatile
  8378                           
  8379                           ;main.c: 533: LATCbits.LATC6 = 0;
  8380  001174  9C8B               	bcf	3979,6,c	;volatile
  8381                           
  8382                           ;main.c: 534: LATBbits.LATB0 = 0;
  8383  001176  908A               	bcf	3978,0,c	;volatile
  8384                           
  8385                           ;main.c: 535: state = FINISH;
  8386  001178  0E02               	movlw	2
  8387  00117A  6E4B               	movwf	_state,c
  8388                           
  8389                           ;main.c: 536: runResult = 0;
  8390  00117C  0E00               	movlw	0
  8391  00117E  6E46               	movwf	_runResult+1,c
  8392  001180  0E00               	movlw	0
  8393  001182  6E45               	movwf	_runResult,c
  8394                           
  8395                           ;main.c: 537: (INTCONbits.GIE = 0);
  8396  001184  9EF2               	bcf	intcon,7,c	;volatile
  8397                           
  8398                           ;main.c: 539: }
  8399                           ;main.c: 540: }
  8400                           ;main.c: 541: INT1IF = 0;
  8401                           
  8402                           ;main.c: 538: break;
  8403  001186  90F0               	bcf	intcon3,0,c	;volatile
  8404  001188                     i2l320:
  8405  001188  C00E  FFF5         	movff	??_keypressed+13,tablat
  8406  00118C  C00D  FFF8         	movff	??_keypressed+12,tblptru
  8407  001190  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  8408  001194  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  8409  001198  C00A  FFF4         	movff	??_keypressed+9,prodh
  8410  00119C  C009  FFF3         	movff	??_keypressed+8,prodl
  8411  0011A0  C008  FFDA         	movff	??_keypressed+7,fsr2h
  8412  0011A4  C007  FFD9         	movff	??_keypressed+6,fsr2l
  8413  0011A8  C006  FFE2         	movff	??_keypressed+5,fsr1h
  8414  0011AC  C005  FFE1         	movff	??_keypressed+4,fsr1l
  8415  0011B0  C004  FFEA         	movff	??_keypressed+3,fsr0h
  8416  0011B4  C003  FFE9         	movff	??_keypressed+2,fsr0l
  8417  0011B8  C002  FFFB         	movff	??_keypressed+1,pclatu
  8418  0011BC  C001  FFFA         	movff	??_keypressed,pclath
  8419  0011C0  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8420  0011C2  0011               	retfie		f
  8421  0011C4                     __end_of_keypressed:
  8422                           	opt stack 0
  8423                           pclatu	equ	0xFFB
  8424                           pclath	equ	0xFFA
  8425                           tblptru	equ	0xFF8
  8426                           tblptrh	equ	0xFF7
  8427                           tblptrl	equ	0xFF6
  8428                           tablat	equ	0xFF5
  8429                           prodh	equ	0xFF4
  8430                           prodl	equ	0xFF3
  8431                           intcon	equ	0xFF2
  8432                           intcon3	equ	0xFF0
  8433                           postinc0	equ	0xFEE
  8434                           fsr0h	equ	0xFEA
  8435                           fsr0l	equ	0xFE9
  8436                           wreg	equ	0xFE8
  8437                           fsr1h	equ	0xFE2
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           pclatu	equ	0xFFB
  8446                           pclath	equ	0xFFA
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           intcon	equ	0xFF2
  8454                           intcon3	equ	0xFF0
  8455                           postinc0	equ	0xFEE
  8456                           fsr0h	equ	0xFEA
  8457                           fsr0l	equ	0xFE9
  8458                           wreg	equ	0xFE8
  8459                           fsr1h	equ	0xFE2
  8460                           fsr1l	equ	0xFE1
  8461                           indf2	equ	0xFDF
  8462                           postinc2	equ	0xFDE
  8463                           postdec2	equ	0xFDD
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468                           	psect	rparam
  8469  0000                     pclatu	equ	0xFFB
  8470                           pclath	equ	0xFFA
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           intcon3	equ	0xFF0
  8479                           postinc0	equ	0xFEE
  8480                           fsr0h	equ	0xFEA
  8481                           fsr0l	equ	0xFE9
  8482                           wreg	equ	0xFE8
  8483                           fsr1h	equ	0xFE2
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           postdec2	equ	0xFDD
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492                           	psect	temp
  8493  000052                     btemp:
  8494                           	opt stack 0
  8495  000052                     	ds	1
  8496  0000                     int$flags	set	btemp
  8497                           pclatu	equ	0xFFB
  8498                           pclath	equ	0xFFA
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           intcon3	equ	0xFF0
  8507                           postinc0	equ	0xFEE
  8508                           fsr0h	equ	0xFEA
  8509                           fsr0l	equ	0xFE9
  8510                           wreg	equ	0xFE8
  8511                           fsr1h	equ	0xFE2
  8512                           fsr1l	equ	0xFE1
  8513                           indf2	equ	0xFDF
  8514                           postinc2	equ	0xFDE
  8515                           postdec2	equ	0xFDD
  8516                           fsr2h	equ	0xFDA
  8517                           fsr2l	equ	0xFD9
  8518                           status	equ	0xFD8


Data Sizes:
    Strings     244
    Constant    42
    Data        2
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      81
    BANK0           128     46      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[15]), STR_18(CODE[15]), 
		 -> STR_17(CODE[15]), STR_16(CODE[15]), STR_15(CODE[3]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[6]), STR_10(CODE[17]), 
		 -> STR_9(CODE[16]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[17]), 
		 -> STR_5(CODE[17]), STR_4(CODE[21]), STR_3(CODE[17]), STR_2(CODE[15]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@time	PTR int  size(2) Largest target is 14
		 -> starttime(BANK0[14]), time(BANK0[14]), 

    eeprom_GetLog@res	PTR unsigned char  size(2) Largest target is 4
		 -> logdata(COMRAM[4]), 

    eeprom_LogResult@data	PTR unsigned char  size(2) Largest target is 4
		 -> executingState@res(BANK0[4]), 


Critical Paths under _main in COMRAM

    _main->_fixLCD
    _eeprom_GetLog->_eeprom_ReadByte
    _fixLCD->_printf
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _executingState->_printf
    _update_lcd->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _get_timeDif->_get_time
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _eeprom_LogResult->_eeprom_WriteByte
    _dispenseSnCan->_servoRotate90
    _dispenseAlCan->_servoRotate90
    _eeprom_initialize->_eeprom_WriteByte
    _newestAddress->_eeprom_ReadByte

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executingState

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   63340
                    _I2C_Master_Init
                         _debugState
                  _eeprom_initialize
                     _executingState
                        _finishState
                             _fixLCD
                            _initLCD
                            _lcdInst
                           _logState
                          _mainState
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mainState                                            2     2      0    7764
                                             51 COMRAM     2     2      0
                           _get_time
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _logState                                             4     4      0    7842
                                             51 COMRAM     4     4      0
                      _eeprom_GetLog
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _eeprom_GetLog                                        7     3      4    1188
                                             17 COMRAM     7     3      4
                    _eeprom_ReadByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (1) _fixLCD                                              13    13      0    8256
                                             51 COMRAM    13    13      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             28 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _finishState                                          4     4      0    6521
                                             51 COMRAM     4     4      0
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _readKey                                              5     3      2      69
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _executingState                                      49    49      0   25133
                                             51 COMRAM     3     3      0
                                              0 BANK0     46    46      0
                             ___wmul
                      _dispenseAlCan
                      _dispenseSnCan
                   _eeprom_LogResult
                           _get_time
                        _get_timeDif
                            _lcdInst
                             _printf
                          _readAlBot
                          _readAlTop
                          _readSnBot
                       _readSnSensor
                          _readSnTop
                       _servoRotate0
                       _servoRotate1
                       _servoRotate2
                       _servoRotate4
                      _servoRotate90
                     _servoRotate90n
                     _servoRotateArm
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _update_lcd                                           0     0      0    6418
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              33    23     10    6223
                                             27 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _servoRotateArm                                      11     9      2      77
                                             15 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate90n                                       6     4      2     407
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate4                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         6     4      2     484
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _readSnTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnSensor                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_timeDif                                         23    21      2    3598
                                             23 COMRAM    23    21      2
                             ___wmul
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1181
                                             18 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                             16 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             16 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1926
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _eeprom_LogResult                                     5     3      2    1074
                                             18 COMRAM     5     3      2
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (2) _dispenseSnCan                                        2     2      0     598
                                             21 COMRAM     2     2      0
                       _servoRotate1
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate1                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _dispenseAlCan                                        2     2      0     598
                                             21 COMRAM     2     2      0
                       _servoRotate2
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        6     4      2     407
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate2                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _eeprom_initialize                                    0     0      0     771
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (3) _newestAddress                                        0     0      0     216
                    _eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (4) _eeprom_ReadByte                                      2     0      2     216
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_WriteByte                                     3     0      3     555
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _debugState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _debugState
   _eeprom_initialize
     _eeprom_WriteByte
     _newestAddress
       _eeprom_ReadByte
   _executingState
     ___wmul
     _dispenseAlCan
       _servoRotate2
       _servoRotate90
     _dispenseSnCan
       _servoRotate1
       _servoRotate90
     _eeprom_LogResult
       _eeprom_WriteByte
       _newestAddress
         _eeprom_ReadByte
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _get_timeDif
       ___wmul
       _get_time
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readAlBot
     _readAlTop
     _readSnBot
     _readSnSensor
     _readSnTop
     _servoRotate0
     _servoRotate1
     _servoRotate2
     _servoRotate4
     _servoRotate90
     _servoRotate90n
     _servoRotateArm
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _finishState
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _fixLCD
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logState
     _eeprom_GetLog
       _eeprom_ReadByte
       _newestAddress
         _eeprom_ReadByte
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _mainState
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2E      4A       5       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      51       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B      34        0.0%
DATA                 0      0      9B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 01:01:30 2017

              ?_get_timeDif 0018                          l34 195E                ?_finishState 0001  
           readKey@keypress 0012         ___wmul@multiplicand 0012                 __CFG_BORV$3 000000  
             servoRotate0@i 0014               servoRotate1@i 0013               servoRotate2@i 0013  
             servoRotate4@i 0013                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000  
                       l220 15E0                         l217 15D4                         l218 15FE  
                       l341 188C                         l430 17B6                         l502 105C  
                       l335 1956                         l431 1790                         l511 10B2  
                       l512 10B6                         l504 1060                         l520 135C  
                       l513 10BA                         l505 1064                         l514 10BE  
                       l506 1068                         l362 1418                         l507 106C  
                       l267 0626                         l436 16BE                         l356 14CA  
                       l437 1696                         l509 10AE                         l462 0ED4  
                       l471 0F2C                         l447 1778                         l359 13DC  
                       l472 0F30                         l464 0ED8                         l448 1752  
                       l473 0F34                         l465 0EDC                         l482 0F98  
                       l474 0F38                         l466 0EE0                         l491 0FF0  
                       l467 0EE4                         l459 0F80                         l299 0B44  
                       l492 0FF4                         l484 0F9C                         l493 0FF8  
                       l485 0FA0                         l469 0F28                         l494 0FFC  
                       l486 0FA4                         l487 0FA8                         l479 1044  
                       l489 0FEC                         l578 0774                         l499 1104  
                       l970 133C                __CFG_CPB$OFF 000000                         _PEN 007E2A  
              __CFG_CPD$OFF 000000                         _SEN 007E28              ?_dispenseAlCan 0001  
                       prod 000FF3                         wreg 000FE8              ?_dispenseSnCan 0001  
            servoRotate90@i 0014                __CFG_LVP$OFF 000000       __end_of_newestAddress 197E  
              __CFG_WDT$OFF 000000                        l1023 156A                        l1033 1682  
                      l4020 10C2                        l4102 193E                        l4022 10F2  
                      l4014 1070                        l4040 0F18                        l4016 10A0  
                      l4202 15AE                        l4124 18F6                        l4044 0F3C  
                      l4140 138A                        l4046 0F6C                        l4038 0EE8  
                      l4072 18DE                        l4144 1396                        l4312 0330  
                      l4154 14A4                        l4082 1926                        l4092 190E  
                      l4404 0560                        l4340 03E8                        l4332 039E  
                      l4500 0A08                        l4172 13F4                        l4180 1578  
                      l3702 1560                        l3710 1658                        l4430 0622  
                      l4422 05D2                        l4414 0596                        l4350 0410  
                      l4326 0380                        l2742 12EE                        l3712 1660  
                      l4416 059C                        l4344 03FA                        l4336 03D2  
                      l2744 12FA                        l4504 0A3C                        l4168 13E4  
                      l3642 1844                        l3714 1664                        l3810 0846  
                      l3802 081C                        l4426 05F6                        l4354 0430  
                      l4290 02B4                        l4450 172C                        l2754 132E  
                      l2746 12FE                        l4514 0A60                        l4194 15A2  
                      l4610 0E9E                        l3900 1000                        l3804 082C  
                      l3732 06A2                        l4372 04AA                        l4364 0478  
                      l4428 060C                        l2828 15F0                        l4508 0A44  
                      l4612 0EA4                        l4604 0E8C                        l3902 1030  
                      l3718 1678                        l3830 08A6                        l3822 0888  
                      l3814 086A                        l3734 06B0                        l4294 02CA  
                      l4286 029E                        l4278 026A                        l4542 0B32  
                      l4606 0E92                        l3840 08D2                        l3816 0872  
                      l3752 0742                        l3744 06E4                        l3728 0692  
                      l4480 12BC                        l4464 126A                        l4608 0E98  
                      l4616 0EA8                        l3690 1538                        l3674 18AC  
                      l3842 0916                        l3850 096C                        l3834 08BA  
                      l3738 06B6                        l4378 04CC                        l4298 02E0  
                      l3860 11F8                        l3692 1540                        l3852 0972  
                      l3828 089E                        l3772 07BC                        l3756 0746  
                      l4396 053A                        l3870 1226                        l3694 1544  
                      l3838 08CC                        l3774 07C0                        l3854 097A  
                      l4478 12B6                        l3864 1200                        l3848 095C  
                      l3768 07A2                        l3960 0BE2                        l3786 07EC  
                      l3954 0BAA                        l3788 07F0                        l3948 0B4E  
          _eeprom_LogResult 1474                        l3894 0FAC                        l3974 0C6A  
                      l3966 0C22                        l3982 0C8C                        l3896 0FDC  
                      l3976 0C76                        l3984 0CA8                        l3978 0C7E  
                      STR_1 FFA9                        STR_2 FFE7                        STR_3 FF87  
                      STR_4 FF0B                        STR_5 FF76                        STR_6 FF54  
                      STR_7 FF0B                        STR_8 FF0B                        STR_9 FFB9  
            eeprom_GetLog@i 0017                        _LATA 000F89                        _LATB 000F8A  
                      _LATC 000F8B                        _LATD 000F8C                        _LATE 000F8D  
                      u3300 0426                        u2510 1842                        u3135 0042  
                      u1800 15FE                        u3145 0076                        u3155 00A6  
                      u3500 0AF2                        u3520 0B0A                        u1755 1448  
                      u3380 05C6                        u3540 0B20                        u3390 05E8  
                      u3518 0AF4                        u3607 160A                        u3480 0ADC  
                      u3617 163E                        u3538 0B0C                        u3707 14E4  
                      u3627 1716                        u2925 0CD2                        u3717 14EE  
                      u3637 01B2                        u3558 0B22                        u2935 0CFE  
                      u3807 0F1E                        u3727 1510                        u3647 030C  
                      u2945 0D26                        u3817 0F72                        u3737 151A  
                      u3657 035C                        u3498 0ADE                        u3827 17DA  
                      u3747 1364                        u3667 0400                        _RCEN 007E2B  
                      u3837 1798                        u3757 1376                        u3677 04EC  
                      u3847 17A8                        u3767 10A2                        u3687 0600  
                      u3857 180A                        u3777 10F8                        u3697 0674  
                      u3867 0FE2                        u3787 175A                        u3877 1036  
                      u3797 176A                        u3887 169E                        u3897 16B0  
                      _RSEN 007E29                        _main 0E00                        _keys FEE1  
                      _time 00BC                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 0052  
                      prodh 000FF4                        prodl 000FF3                        start 000E  
             __CFG_IESO$OFF 000000             ??_servoRotate90 0012             ??_eeprom_GetLog 0016  
             __CFG_MCLRE$ON 000000             servoRotate90n@i 0014                ___param_bank 000000  
          ?_I2C_Master_Init 001D            ?_I2C_Master_Read 0001            ?_I2C_Master_Wait 0001  
          ?_I2C_Master_Stop 0001                       ?_main 0001                       _ACKEN 007E2C  
                     _ACKDT 007E2D                       _EEADR 000FA9                       STR_10 FF98  
      eeprom_WriteByte@data 0012                       STR_11 FFF6                       STR_20 FF43  
                     STR_12 FF65                       STR_21 FF43                       STR_13 FF43  
                     STR_22 FF32                       STR_14 FF20                       STR_15 FFFC  
                     STR_16 FFC9                       STR_17 FFD8                       STR_18 FFE7  
                     STR_19 FF45                       _CMCON 000FB4             __end_of___lldiv 134E  
              get_time@time 0013             __end_of___lwdiv 1574             __end_of___lwmod 168C  
                     i2l320 1188                       _PORTB 000F81                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96         servoRotate90n@servo 0010               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000             __end_of_lcdInst 1996              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000                       _alTab 0043             __end_of_initLCD 164A  
            __CFG_EBTRB$OFF 000000             __end_of_dpowers FEFC             __end_of_readKey 1604  
           __end_of_isdigit 18B4                       _state 004B                       _putch 197E  
          _eeprom_WriteByte 1870                       pclath 000FFA                       tablat 000FF5  
                     status 000FD8            ??_servoRotate90n 0012    __size_of_eeprom_ReadByte 0016  
            __CFG_PBADEN$ON 000000            ??_servoRotateArm 0012             __initialization 16CC  
              __end_of_main 0ECA                __end_of_keys FEF2             ??_dispenseAlCan 0016  
                    ??_main 0041               __activetblptr 000002             ??_dispenseSnCan 0016  
         ?_I2C_Master_Start 0001           ?_I2C_Master_Write 0011           executingState@res 009A  
             ?_readSnSensor 0010          ??_I2C_Master_Start 0011                      _ADCON0 000FC2  
                    _ADCON1 000FC1          ??_I2C_Master_Write 0013                      _EEADRH 000FAA  
                    _EEDATA 000FA8                      _EECON2 000FA7                      ?_putch 0001  
          eeprom_GetLog@res 0014                      _INT1IE 007F83                      _INT1IF 007F80  
                    i2l2322 1150                      _OSCCON 000FD3                      _SSPADD 000FC8  
                    _TRISC3 007CA3                      _TRISC4 007CA4                      _SSPBUF 000FC9  
            __CFG_XINST$OFF 000000            __end_of_get_time 124A                      ___wmul 184A  
            __CFG_STVREN$ON 000000                      _fixLCD 0994                   ??___lldiv 0018  
    executingState@alLoaded 00A2                   ??___lwdiv 0014                   ??___lwmod 001B  
      __size_of_get_timeDif 014A            __end_of_logState 12CC                      clear_0 16EA  
                    clear_1 16F6                 logState@log 0036                   ??_lcdInst 0012  
                    _printf 0688        __size_of_finishState 003E                   ??_initLCD 0013  
    executingState@hasLabel 00AC                   ??_readKey 0012                __pdataCOMRAM 0050  
                 ??_isdigit 0010                __mediumconst FEE0              ??_readSnSensor 0012  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
    executingState@snLoaded 00A0                  __accesstop 0080     __end_of__initialization 16FC  
             ___rparam_used 000001      executingState@runCanAl 0082      executingState@runCanSn 0080  
            __pcstackCOMRAM 0001           servoRotate1@angle 0010           servoRotate2@angle 0010  
         ??_eeprom_ReadByte 0012    __end_of_eeprom_LogResult 14CC           servoRotate4@angle 0010  
         servoRotate0@servo 0010               __end_of_putch 198A          __size_of_lcdNibble 0056  
           executingState@i 0098        executingState@hasTab 00A8          __size_of_mainState 0048  
                   ??_putch 0012                  __pbssBANK0 00AE           servoRotateArm@res 0017  
        __size_of_readAlBot 0018                  _debugState 19B0          __size_of_readAlTop 0018  
        __size_of_readSnBot 0018          __size_of_readSnTop 0018                     ?___wmul 0010  
                   ?_fixLCD 0001    __end_of_eeprom_WriteByte 1896                     ?_printf 001C  
   __size_of_executingState 0676           eeprom_GetLog@back 0012           _eeprom_initialize 18B4  
        ?_eeprom_initialize 0001                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                   ?_get_time 0013                   ?_logState 0001  
       ??_eeprom_initialize 0013           __end_of_lcdNibble 1522            get_timeDif@h_one 001F  
          get_timeDif@h_ten 001D            get_timeDif@m_one 0023            get_timeDif@m_ten 0021  
                   __Hparam 0000            get_timeDif@s_one 0027            get_timeDif@s_ten 0025  
                   __Lparam 0000            get_timeDif@start 0018        __end_of_readSnSensor 1900  
     __end_of_servoRotate90 1052       __end_of_eeprom_GetLog 141A                     _alNoTab 0041  
                   ___lldiv 12CC             __size_of___wmul 0026                     ___lwdiv 1522  
                   ___lwmod 164A             __size_of_fixLCD 01B2           __end_of_mainState 15BC  
    __size_of_newestAddress 000E                     __pcinit 16CC                     __ramtop 1000  
                   _lcdInst 198A                     __ptext0 0E00                     __ptext1 1574  
                   __ptext2 124A                     __ptext3 13C0                     __ptext4 0994  
                   __ptext5 1604                     __ptext6 141A                     __ptext7 12CC  
                   __ptext8 170A                     __ptext9 15BC           __end_of_readAlBot 1948  
         __end_of_readAlTop 1930             __size_of_printf 030C   __end_of_eeprom_initialize 18D0  
                   _initLCD 1604           __end_of_hexpowers FF04           __end_of_readSnBot 1918  
                   _dpowers FEF2           __end_of_readSnTop 18E8                     _readKey 15BC  
                   _snLabel 0047                     _isdigit 1896                     _logdata 004C  
                   fixLCD@i 0035                     fixLCD@j 003E                  _keypressed 0008  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026    __size_of_I2C_Master_Wait 0012  
  __size_of_I2C_Master_Stop 0008                  fixLCD@time 0037                  ??_get_time 0015  
            __pintcode_body 1112        end_of_initialization 16FC                 ?_debugState 0001  
             __Lmediumconst FEE0                  ??_logState 0034                     int_func 1112  
 __size_of_I2C_Master_Start 0008   __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0014  
           ___lldiv@counter 001C               ?_servoRotate0 0010               ?_servoRotate1 0010  
             ?_servoRotate2 0010               ?_servoRotate4 0010                     printf@c 0033  
                   printf@f 001C            I2C_Master_Init@c 001D            I2C_Master_Read@a 0011  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTAbits 000F80                   _PORTBbits 000F81                   _PORTCbits 000F82  
     __end_of_dispenseAlCan 1824           eeprom_LogResult@i 0016       __end_of_dispenseSnCan 17F4  
                _update_lcd 0B46               _newestAddress 1970                  _statictime FF04  
      servoRotateArm@i_1049 0015         finishState@keypress 0036             _eeprom_ReadByte 1948  
               printf@width 0031              ??_servoRotate0 0012              ??_servoRotate1 0012  
            ??_servoRotate2 0012              ??_servoRotate4 0012               ??_get_timeDif 001A  
        servoRotate90@servo 0010               ??_finishState 0034              __end_of___wmul 1870  
         ?_eeprom_LogResult 0013              __end_of_fixLCD 0B46               __pidataCOMRAM 19B6  
   __size_of_servoRotate90n 00C0      eeprom_ReadByte@address 0010     __size_of_servoRotateArm 0072  
            _executingState 0012          ??_eeprom_LogResult 0015  __size_of_eeprom_initialize 001C  
       __size_of_debugState 0006              __end_of_printf 0994         start_initialization 16CC  
               ?_keypressed 0001              ?_newestAddress 0001           ??_I2C_Master_Init 0021  
         ??_I2C_Master_Read 0011           ??_I2C_Master_Wait 0010           ??_I2C_Master_Stop 0011  
     __size_of_readSnSensor 0018     eeprom_LogResult@address 0015            _get_timeDif$1738 002B  
          _get_timeDif$1739 002D          get_timeDif@start_s 0029                    ??___wmul 0014  
                  ??_fixLCD 0034      __end_of_executingState 0688            __CFG_LPT1OSC$OFF 000000  
         ?_eeprom_WriteByte 0010                    ??_printf 0026         __end_of_get_timeDif 0E00  
        ??_eeprom_WriteByte 0013                 __pbssCOMRAM 0041         __end_of_finishState 1748  
     executingState@timedif 00AA               __pcstackBANK0 0080                 ?_update_lcd 0001  
     executingState@start_s 0096                _readSnSensor 18E8     __end_of_eeprom_ReadByte 195E  
              _isdigit$1353 0011           __size_of_get_time 0086         executingState@h_one 0086  
       executingState@h_ten 0084         executingState@m_one 008A         executingState@count 0094  
       executingState@m_ten 0088         executingState@s_one 008E         executingState@s_ten 008C  
          _I2C_Master_Start 19A8            _I2C_Master_Write 1996           __size_of_logState 0082  
       _executingState$1740 0090         _executingState$1741 0092            ___lwdiv@dividend 0010  
         __CFG_CCP2MX$PORTC 000000         __size_of_keypressed 11BC                   __pintcode 0008  
             __pmediumconst FEE0                   _lcdNibble 14CC                    ?___lldiv 0010  
                  ?___lwdiv 0010                    ?___lwmod 0017             ?_executingState 0001  
                  ?_lcdInst 0001                    ?_initLCD 0001                   _mainState 1574  
                  ?_readKey 0010                    ?_isdigit 0001     eeprom_WriteByte@address 0010  
                 _readAlBot 1930                   _readAlTop 1918             ??_newestAddress 0012  
      __end_of_servoRotate0 0F8E        __end_of_servoRotate1 17C4        __end_of_servoRotate2 16CC  
      __end_of_servoRotate4 1786                   _hexpowers FEFC                   _readSnBot 1900  
          ___lwdiv@quotient 0015                   _readSnTop 18D0              __size_of_putch 000C  
                 _snNoLabel 0049                ??_debugState 0010              ___wmul@product 0014  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _LATCbits 000F8B  
                  _LATDbits 000F8C                    _LATEbits 000F8D                   _loopcount 0050  
                  _PIR2bits 000FA1            __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001  
               _get_timeDif 0CB6         __size_of_update_lcd 0170                 _finishState 170A  
            _servoRotate90n 1052              _servoRotateArm 134E                   _runResult 0045  
         ___wmul@multiplier 0010               lcdNibble@data 0011                  ?_mainState 0001  
                printf@flag 0030                   _starttime 00AE               lcdNibble@temp 0010  
        __end_of_debugState 19B6                  printf@prec 002D                   get_time@i 0017  
                ?_readAlBot 0010                  ?_readAlTop 0010                  ?_readSnBot 0010  
                ?_readSnTop 0010            ?_eeprom_ReadByte 0010         I2C_Master_Read@temp 0012  
    __size_of_servoRotate90 00C4      __size_of_eeprom_GetLog 005A                  _EECON1bits 000FA6  
        keypressed@keypress 000F                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate90n 1112      __end_of_servoRotateArm 13C0  
          __size_of___lldiv 0082            __size_of___lwdiv 0052            __size_of___lwmod 0042  
          __size_of_lcdInst 000C    executingState@alInSensor 00A6             _I2C_Master_Init 141A  
           _I2C_Master_Read 1824            __size_of_initLCD 0046             _I2C_Master_Wait 195E  
           _I2C_Master_Stop 19A0            __size_of_readKey 0048                ??_keypressed 0001  
          __size_of_isdigit 001E             ___lwdiv@divisor 0012             ___lwdiv@counter 0014  
                  __ptext10 0012                    __ptext11 0B46                    __ptext20 1052  
                  __ptext12 0688                    __ptext21 1748                    __ptext13 197E  
                  __ptext30 1996                    __ptext22 0ECA                    __ptext14 1896  
                  __ptext31 19A0                    __ptext23 18D0                    __ptext15 164A  
                  __ptext40 0F8E                    __ptext32 19A8                    __ptext24 18E8  
                  __ptext16 1522                    __ptext41 168C                    __ptext33 1824  
                  __ptext25 1900                    __ptext17 198A                    __ptext42 18B4  
                  __ptext34 195E                    __ptext26 1918                    __ptext18 14CC  
                  __ptext43 1970                    __ptext35 184A                    __ptext27 1930  
                  __ptext19 134E                    __ptext44 1948                    __ptext36 1474  
                  __ptext28 0CB6                    __ptext45 1870                    __ptext37 17C4  
                  __ptext29 11C4                    __ptext46 19B0                    __ptext38 1786  
                  __ptext39 17F4                    _get_time 11C4   __size_of_eeprom_LogResult 0058  
      eeprom_GetLog@address 0016           mainState@keypress 0034                    _logState 124A  
             __size_of_main 00CA                 fixLCD@i_599 0040      __size_of_dispenseAlCan 0030  
    __size_of_dispenseSnCan 0030                 ??_lcdNibble 0010             ?_servoRotate90n 0010  
        __end_of_keypressed 11C4                    int$flags 0052               _servoRotate90 0F8E  
           ?_servoRotateArm 0010               _eeprom_GetLog 13C0                   printf@idx 002A  
                 printf@val 002E       __size_of_servoRotate0 00C4       __size_of_servoRotate1 003E  
     __size_of_servoRotate2 0040       __size_of_servoRotate4 003E                 ??_mainState 0034  
                 putch@data 0012    __end_of_I2C_Master_Start 19B0    __end_of_I2C_Master_Write 19A0  
                _INTCONbits 000FF2                 ??_readAlBot 0012                    readKey@i 0013  
               ??_readAlTop 0012                ??_update_lcd 0034                 ??_readSnBot 0012  
                  isdigit@c 0012                 ??_readSnTop 0012   __size_of_eeprom_WriteByte 0026  
                  intlevel2 0000            ___lwmod@dividend 0017            ___lldiv@dividend 0010  
          ??_executingState 0034              ?_servoRotate90 0010                _servoRotate0 0ECA  
              _servoRotate1 1786                _servoRotate2 168C                _servoRotate4 1748  
            ?_eeprom_GetLog 0012                    printf@ap 002B          __end_of_update_lcd 0CB6  
   __end_of_I2C_Master_Init 1474     __end_of_I2C_Master_Read 184A     __end_of_I2C_Master_Wait 1970  
   __end_of_I2C_Master_Stop 19A8                 lcdInst@data 0012        eeprom_LogResult@data 0013  
          logState@keypress 0034          __end_of_statictime FF0B            ___lldiv@quotient 0018  
         I2C_Master_Write@d 0011             ___lwmod@divisor 0019             ___lwmod@counter 001B  
             _dispenseAlCan 17F4    executingState@emptyCount 009E               _dispenseSnCan 17C4  
  executingState@snInSensor 00A4  
