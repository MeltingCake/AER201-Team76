

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 20:59:58 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.40
    67                           ; Generated 01/12/2016 GMT
    68                           ; 
    69                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4620 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	idataCOMRAM
   102  001878                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _loopcount
   106  001878  001E               	dw	30
   107                           
   108                           	psect	mediumconst
   109  00FEC4                     __pmediumconst:
   110                           	opt stack 0
   111  00FEC4  00                 	db	0
   112  00FEC5                     _keys:
   113                           	opt stack 0
   114  00FEC5  31                 	db	49
   115  00FEC6  32                 	db	50
   116  00FEC7  33                 	db	51
   117  00FEC8  41                 	db	65
   118  00FEC9  34                 	db	52
   119  00FECA  35                 	db	53
   120  00FECB  36                 	db	54
   121  00FECC  42                 	db	66
   122  00FECD  37                 	db	55
   123  00FECE  38                 	db	56
   124  00FECF  39                 	db	57
   125  00FED0  43                 	db	67
   126  00FED1  2A                 	db	42
   127  00FED2  30                 	db	48
   128  00FED3  23                 	db	35
   129  00FED4  44                 	db	68
   130  00FED5  00                 	db	0
   131  00FED6                     __end_of_keys:
   132                           	opt stack 0
   133  00FED6                     _dpowers:
   134                           	opt stack 0
   135  00FED6  0001               	dw	1
   136  00FED8  000A               	dw	10
   137  00FEDA  0064               	dw	100
   138  00FEDC  03E8               	dw	1000
   139  00FEDE  2710               	dw	10000
   140  00FEE0                     __end_of_dpowers:
   141                           	opt stack 0
   142  00FEE0                     _hexpowers:
   143                           	opt stack 0
   144  00FEE0  0001               	dw	1
   145  00FEE2  0010               	dw	16
   146  00FEE4  0100               	dw	256
   147  00FEE6  1000               	dw	4096
   148  00FEE8                     __end_of_hexpowers:
   149                           	opt stack 0
   150  00FEE8                     _statictime:
   151                           	opt stack 0
   152  00FEE8  00                 	db	0
   153  00FEE9  59                 	db	89
   154  00FEEA  20                 	db	32
   155  00FEEB  02                 	db	2
   156  00FEEC  27                 	db	39
   157  00FEED  03                 	db	3
   158  00FEEE  17                 	db	23
   159  00FEEF                     __end_of_statictime:
   160                           	opt stack 0
   161  0000                     _ADCON0	set	4034
   162  0000                     _ADCON1	set	4033
   163  0000                     _CMCON	set	4020
   164  0000                     _EEADR	set	4009
   165  0000                     _EEADRH	set	4010
   166  0000                     _EECON1bits	set	4006
   167  0000                     _EECON2	set	4007
   168  0000                     _EEDATA	set	4008
   169  0000                     _INTCONbits	set	4082
   170  0000                     _LATA	set	3977
   171  0000                     _LATAbits	set	3977
   172  0000                     _LATB	set	3978
   173  0000                     _LATBbits	set	3978
   174  0000                     _LATC	set	3979
   175  0000                     _LATCbits	set	3979
   176  0000                     _LATD	set	3980
   177  0000                     _LATDbits	set	3980
   178  0000                     _LATE	set	3981
   179  0000                     _LATEbits	set	3981
   180  0000                     _OSCCON	set	4051
   181  0000                     _PIR2bits	set	4001
   182  0000                     _PORTAbits	set	3968
   183  0000                     _PORTB	set	3969
   184  0000                     _PORTBbits	set	3969
   185  0000                     _PORTCbits	set	3970
   186  0000                     _SSPADD	set	4040
   187  0000                     _SSPBUF	set	4041
   188  0000                     _SSPCON1	set	4038
   189  0000                     _SSPCON2	set	4037
   190  0000                     _SSPSTAT	set	4039
   191  0000                     _TRISA	set	3986
   192  0000                     _TRISB	set	3987
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISE	set	3990
   196  0000                     _ACKDT	set	32301
   197  0000                     _ACKEN	set	32300
   198  0000                     _INT1IE	set	32643
   199  0000                     _INT1IF	set	32640
   200  0000                     _PEN	set	32298
   201  0000                     _RCEN	set	32299
   202  0000                     _RSEN	set	32297
   203  0000                     _SEN	set	32296
   204  0000                     _TRISC3	set	31907
   205  0000                     _TRISC4	set	31908
   206  00FEEF                     STR_4:
   207  00FEEF  25                 	db	37
   208  00FEF0  30                 	db	48	;'0'
   209  00FEF1  33                 	db	51	;'3'
   210  00FEF2  64                 	db	100	;'d'
   211  00FEF3  20                 	db	32
   212  00FEF4  20                 	db	32
   213  00FEF5  20                 	db	32
   214  00FEF6  20                 	db	32
   215  00FEF7  20                 	db	32
   216  00FEF8  20                 	db	32
   217  00FEF9  20                 	db	32
   218  00FEFA  20                 	db	32
   219  00FEFB  20                 	db	32
   220  00FEFC  20                 	db	32
   221  00FEFD  20                 	db	32
   222  00FEFE  20                 	db	32
   223  00FEFF  20                 	db	32
   224  00FF00  20                 	db	32
   225  00FF01  00                 	db	0
   226  00FF02                     STR_7:
   227  00FF02  61                 	db	97	;'a'
   228  00FF03  4E                 	db	78	;'N'
   229  00FF04  25                 	db	37
   230  00FF05  64                 	db	100	;'d'
   231  00FF06  2F                 	db	47
   232  00FF07  61                 	db	97	;'a'
   233  00FF08  25                 	db	37
   234  00FF09  64                 	db	100	;'d'
   235  00FF0A  2F                 	db	47
   236  00FF0B  73                 	db	115	;'s'
   237  00FF0C  4E                 	db	78	;'N'
   238  00FF0D  25                 	db	37
   239  00FF0E  64                 	db	100	;'d'
   240  00FF0F  2F                 	db	47
   241  00FF10  53                 	db	83	;'S'
   242  00FF11  25                 	db	37
   243  00FF12  64                 	db	100	;'d'
   244  00FF13  00                 	db	0
   245  00FF14                     STR_14:
   246  00FF14  45                 	db	69	;'E'
   247  00FF15  78                 	db	120	;'x'
   248  00FF16  65                 	db	101	;'e'
   249  00FF17  63                 	db	99	;'c'
   250  00FF18  75                 	db	117	;'u'
   251  00FF19  74                 	db	116	;'t'
   252  00FF1A  69                 	db	105	;'i'
   253  00FF1B  6E                 	db	110	;'n'
   254  00FF1C  67                 	db	103	;'g'
   255  00FF1D  20                 	db	32
   256  00FF1E  20                 	db	32
   257  00FF1F  20                 	db	32
   258  00FF20  20                 	db	32
   259  00FF21  25                 	db	37
   260  00FF22  30                 	db	48	;'0'
   261  00FF23  33                 	db	51	;'3'
   262  00FF24  64                 	db	100	;'d'
   263  00FF25  00                 	db	0
   264  00FF26                     STR_19:
   265  00FF26  30                 	db	48	;'0'
   266  00FF27  31                 	db	49	;'1'
   267  00FF28  32                 	db	50	;'2'
   268  00FF29  33                 	db	51	;'3'
   269  00FF2A  34                 	db	52	;'4'
   270  00FF2B  35                 	db	53	;'5'
   271  00FF2C  36                 	db	54	;'6'
   272  00FF2D  37                 	db	55	;'7'
   273  00FF2E  38                 	db	56	;'8'
   274  00FF2F  39                 	db	57	;'9'
   275  00FF30  61                 	db	97	;'a'
   276  00FF31  62                 	db	98	;'b'
   277  00FF32  63                 	db	99	;'c'
   278  00FF33  64                 	db	100	;'d'
   279  00FF34  65                 	db	101	;'e'
   280  00FF35  66                 	db	102	;'f'
   281  00FF36  00                 	db	0
   282  00FF37                     STR_13:
   283  00FF37  20                 	db	32
   284  00FF38  20                 	db	32
   285  00FF39  20                 	db	32
   286  00FF3A  20                 	db	32
   287  00FF3B  20                 	db	32
   288  00FF3C  20                 	db	32
   289  00FF3D  20                 	db	32
   290  00FF3E  20                 	db	32
   291  00FF3F  20                 	db	32
   292  00FF40  20                 	db	32
   293  00FF41  20                 	db	32
   294  00FF42  20                 	db	32
   295  00FF43  20                 	db	32
   296  00FF44  20                 	db	32
   297  00FF45  20                 	db	32
   298  00FF46  20                 	db	32
   299  00FF47  00                 	db	0
   300  00FF48                     STR_10:
   301  00FF48  30                 	db	48	;'0'
   302  00FF49  3A                 	db	58	;':'
   303  00FF4A  4D                 	db	77	;'M'
   304  00FF4B  65                 	db	101	;'e'
   305  00FF4C  6E                 	db	110	;'n'
   306  00FF4D  75                 	db	117	;'u'
   307  00FF4E  20                 	db	32
   308  00FF4F  20                 	db	32
   309  00FF50  20                 	db	32
   310  00FF51  20                 	db	32
   311  00FF52  20                 	db	32
   312  00FF53  20                 	db	32
   313  00FF54  20                 	db	32
   314  00FF55  20                 	db	32
   315  00FF56  20                 	db	32
   316  00FF57  20                 	db	32
   317  00FF58  00                 	db	0
   318  00FF59                     STR_8:
   319  00FF59  46                 	db	70	;'F'
   320  00FF5A  69                 	db	105	;'i'
   321  00FF5B  6E                 	db	110	;'n'
   322  00FF5C  69                 	db	105	;'i'
   323  00FF5D  73                 	db	115	;'s'
   324  00FF5E  68                 	db	104	;'h'
   325  00FF5F  65                 	db	101	;'e'
   326  00FF60  64                 	db	100	;'d'
   327  00FF61  20                 	db	32
   328  00FF62  20                 	db	32
   329  00FF63  20                 	db	32
   330  00FF64  20                 	db	32
   331  00FF65  20                 	db	32
   332  00FF66  20                 	db	32
   333  00FF67  20                 	db	32
   334  00FF68  20                 	db	32
   335  00FF69  00                 	db	0
   336  00FF6A                     STR_9:
   337  00FF6A  54                 	db	84	;'T'
   338  00FF6B  65                 	db	101	;'e'
   339  00FF6C  72                 	db	114	;'r'
   340  00FF6D  6D                 	db	109	;'m'
   341  00FF6E  69                 	db	105	;'i'
   342  00FF6F  6E                 	db	110	;'n'
   343  00FF70  61                 	db	97	;'a'
   344  00FF71  74                 	db	116	;'t'
   345  00FF72  65                 	db	101	;'e'
   346  00FF73  64                 	db	100	;'d'
   347  00FF74  20                 	db	32
   348  00FF75  20                 	db	32
   349  00FF76  20                 	db	32
   350  00FF77  20                 	db	32
   351  00FF78  20                 	db	32
   352  00FF79  20                 	db	32
   353  00FF7A  00                 	db	0
   354  00FF7B                     STR_6:
   355  00FF7B  45                 	db	69	;'E'
   356  00FF7C  78                 	db	120	;'x'
   357  00FF7D  65                 	db	101	;'e'
   358  00FF7E  63                 	db	99	;'c'
   359  00FF7F  75                 	db	117	;'u'
   360  00FF80  74                 	db	116	;'t'
   361  00FF81  69                 	db	105	;'i'
   362  00FF82  6E                 	db	110	;'n'
   363  00FF83  67                 	db	103	;'g'
   364  00FF84  2E                 	db	46
   365  00FF85  2E                 	db	46
   366  00FF86  2E                 	db	46
   367  00FF87  20                 	db	32
   368  00FF88  20                 	db	32
   369  00FF89  20                 	db	32
   370  00FF8A  20                 	db	32
   371  00FF8B  00                 	db	0
   372  00FF8C                     STR_12:
   373  00FF8C  69                 	db	105	;'i'
   374  00FF8D  6E                 	db	110	;'n'
   375  00FF8E  69                 	db	105	;'i'
   376  00FF8F  74                 	db	116	;'t'
   377  00FF90  69                 	db	105	;'i'
   378  00FF91  61                 	db	97	;'a'
   379  00FF92  6C                 	db	108	;'l'
   380  00FF93  69                 	db	105	;'i'
   381  00FF94  7A                 	db	122	;'z'
   382  00FF95  69                 	db	105	;'i'
   383  00FF96  6E                 	db	110	;'n'
   384  00FF97  67                 	db	103	;'g'
   385  00FF98  20                 	db	32
   386  00FF99  20                 	db	32
   387  00FF9A  20                 	db	32
   388  00FF9B  20                 	db	32
   389  00FF9C  00                 	db	0
   390  00FF9D                     STR_5:
   391  00FF9D  31                 	db	49	;'1'
   392  00FF9E  3A                 	db	58	;':'
   393  00FF9F  50                 	db	80	;'P'
   394  00FFA0  72                 	db	114	;'r'
   395  00FFA1  65                 	db	101	;'e'
   396  00FFA2  76                 	db	118	;'v'
   397  00FFA3  20                 	db	32
   398  00FFA4  30                 	db	48	;'0'
   399  00FFA5  3A                 	db	58	;':'
   400  00FFA6  45                 	db	69	;'E'
   401  00FFA7  78                 	db	120	;'x'
   402  00FFA8  69                 	db	105	;'i'
   403  00FFA9  74                 	db	116	;'t'
   404  00FFAA  20                 	db	32
   405  00FFAB  20                 	db	32
   406  00FFAC  20                 	db	32
   407  00FFAD  00                 	db	0
   408  00FFAE                     STR_3:
   409  00FFAE  31                 	db	49	;'1'
   410  00FFAF  3A                 	db	58	;':'
   411  00FFB0  53                 	db	83	;'S'
   412  00FFB1  74                 	db	116	;'t'
   413  00FFB2  61                 	db	97	;'a'
   414  00FFB3  72                 	db	114	;'r'
   415  00FFB4  74                 	db	116	;'t'
   416  00FFB5  20                 	db	32
   417  00FFB6  32                 	db	50	;'2'
   418  00FFB7  3A                 	db	58	;':'
   419  00FFB8  4C                 	db	76	;'L'
   420  00FFB9  6F                 	db	111	;'o'
   421  00FFBA  67                 	db	103	;'g'
   422  00FFBB  73                 	db	115	;'s'
   423  00FFBC  20                 	db	32
   424  00FFBD  20                 	db	32
   425  00FFBE  00                 	db	0
   426  00FFBF                     STR_1:
   427  00FFBF  25                 	db	37
   428  00FFC0  30                 	db	48	;'0'
   429  00FFC1  32                 	db	50	;'2'
   430  00FFC2  78                 	db	120	;'x'
   431  00FFC3  2F                 	db	47
   432  00FFC4  25                 	db	37
   433  00FFC5  30                 	db	48	;'0'
   434  00FFC6  31                 	db	49	;'1'
   435  00FFC7  78                 	db	120	;'x'
   436  00FFC8  2F                 	db	47
   437  00FFC9  25                 	db	37
   438  00FFCA  30                 	db	48	;'0'
   439  00FFCB  32                 	db	50	;'2'
   440  00FFCC  78                 	db	120	;'x'
   441  00FFCD  20                 	db	32
   442  00FFCE  00                 	db	0
   443  00FFCF                     STR_16:
   444  00FFCF  25                 	db	37
   445  00FFD0  30                 	db	48	;'0'
   446  00FFD1  32                 	db	50	;'2'
   447  00FFD2  78                 	db	120	;'x'
   448  00FFD3  25                 	db	37
   449  00FFD4  30                 	db	48	;'0'
   450  00FFD5  32                 	db	50	;'2'
   451  00FFD6  78                 	db	120	;'x'
   452  00FFD7  2F                 	db	47
   453  00FFD8  25                 	db	37
   454  00FFD9  30                 	db	48	;'0'
   455  00FFDA  32                 	db	50	;'2'
   456  00FFDB  78                 	db	120	;'x'
   457  00FFDC  20                 	db	32
   458  00FFDD  00                 	db	0
   459  00FFDE                     STR_2:
   460  00FFDE  25                 	db	37
   461  00FFDF  30                 	db	48	;'0'
   462  00FFE0  32                 	db	50	;'2'
   463  00FFE1  78                 	db	120	;'x'
   464  00FFE2  3A                 	db	58	;':'
   465  00FFE3  25                 	db	37
   466  00FFE4  30                 	db	48	;'0'
   467  00FFE5  32                 	db	50	;'2'
   468  00FFE6  78                 	db	120	;'x'
   469  00FFE7  3A                 	db	58	;':'
   470  00FFE8  25                 	db	37
   471  00FFE9  30                 	db	48	;'0'
   472  00FFEA  32                 	db	50	;'2'
   473  00FFEB  78                 	db	120	;'x'
   474  00FFEC  00                 	db	0
   475  00FFED                     STR_15:
   476  00FFED  67                 	db	103	;'g'
   477  00FFEE  6F                 	db	111	;'o'
   478  00FFEF  69                 	db	105	;'i'
   479  00FFF0  6E                 	db	110	;'n'
   480  00FFF1  67                 	db	103	;'g'
   481  00FFF2  20                 	db	32
   482  00FFF3  64                 	db	100	;'d'
   483  00FFF4  65                 	db	101	;'e'
   484  00FFF5  62                 	db	98	;'b'
   485  00FFF6  75                 	db	117	;'u'
   486  00FFF7  67                 	db	103	;'g'
   487  00FFF8  00                 	db	0
   488  00FFF9                     STR_11:
   489  00FFF9  65                 	db	101	;'e'
   490  00FFFA  72                 	db	114	;'r'
   491  00FFFB  72                 	db	114	;'r'
   492  00FFFC  6F                 	db	111	;'o'
   493  00FFFD  72                 	db	114	;'r'
   494  00FFFE  00                 	db	0
   495  0000                     
   496                           ; #config settings
   497  00FFFF  00                 	db	0	; dummy byte at the end
   498  0000                     
   499                           	psect	cinit
   500  001594                     __pcinit:
   501                           	opt stack 0
   502  001594                     start_initialization:
   503                           	opt stack 0
   504  001594                     __initialization:
   505                           	opt stack 0
   506                           
   507                           ; Initialize objects allocated to COMRAM (2 bytes)
   508                           ; load TBLPTR registers with __pidataCOMRAM
   509  001594  0E78               	movlw	low __pidataCOMRAM
   510  001596  6EF6               	movwf	tblptrl,c
   511  001598  0E18               	movlw	high __pidataCOMRAM
   512  00159A  6EF7               	movwf	tblptrh,c
   513  00159C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   514  00159E  6EF8               	movwf	tblptru,c
   515  0015A0  0009               	tblrd		*+	;fetch initializer
   516  0015A2  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   517  0015A6  0009               	tblrd		*+	;fetch initializer
   518  0015A8  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
   519                           
   520                           ; Clear objects allocated to BANK0 (28 bytes)
   521  0015AC  EE00  F0AE         	lfsr	0,__pbssBANK0
   522  0015B0  0E1C               	movlw	28
   523  0015B2                     clear_0:
   524  0015B2  6AEE               	clrf	postinc0,c
   525  0015B4  06E8               	decf	wreg,f,c
   526  0015B6  E1FD               	bnz	clear_0
   527                           
   528                           ; Clear objects allocated to COMRAM (12 bytes)
   529  0015B8  EE00  F041         	lfsr	0,__pbssCOMRAM
   530  0015BC  0E0C               	movlw	12
   531  0015BE                     clear_1:
   532  0015BE  6AEE               	clrf	postinc0,c
   533  0015C0  06E8               	decf	wreg,f,c
   534  0015C2  E1FD               	bnz	clear_1
   535  0015C4                     end_of_initialization:
   536                           	opt stack 0
   537  0015C4                     __end_of__initialization:
   538                           	opt stack 0
   539  0015C4  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   540  0015C6  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   541  0015C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   542  0015CA  6EF8               	movwf	tblptru,c
   543  0015CC  0100               	movlb	0
   544  0015CE  EFED  F007         	goto	_main	;jump to C main() function
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           
   552                           	psect	bssCOMRAM
   553  000041                     __pbssCOMRAM:
   554                           	opt stack 0
   555  000041                     _alNoTab:
   556                           	opt stack 0
   557  000041                     	ds	2
   558  000043                     _alTab:
   559                           	opt stack 0
   560  000043                     	ds	2
   561  000045                     _runResult:
   562                           	opt stack 0
   563  000045                     	ds	2
   564  000047                     _snLabel:
   565                           	opt stack 0
   566  000047                     	ds	2
   567  000049                     _snNoLabel:
   568                           	opt stack 0
   569  000049                     	ds	2
   570  00004B                     _state:
   571                           	opt stack 0
   572  00004B                     	ds	1
   573  00004C                     _logdata:
   574                           	opt stack 0
   575  00004C                     	ds	1
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           
   583                           	psect	dataCOMRAM
   584  00004D                     __pdataCOMRAM:
   585                           	opt stack 0
   586  00004D                     _loopcount:
   587                           	opt stack 0
   588  00004D                     	ds	2
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           
   596                           	psect	bssBANK0
   597  0000AE                     __pbssBANK0:
   598                           	opt stack 0
   599  0000AE                     _starttime:
   600                           	opt stack 0
   601  0000AE                     	ds	14
   602  0000BC                     _time:
   603                           	opt stack 0
   604  0000BC                     	ds	14
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           
   612                           	psect	cstackBANK0
   613  000080                     __pcstackBANK0:
   614                           	opt stack 0
   615  000080                     executingState@runCanSn:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x0
   619  000080                     	ds	2
   620  000082                     executingState@runCanAl:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x2
   624  000082                     	ds	2
   625  000084                     executingState@h_ten:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x4
   629  000084                     	ds	2
   630  000086                     executingState@h_one:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x6
   634  000086                     	ds	2
   635  000088                     executingState@m_ten:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x8
   639  000088                     	ds	2
   640  00008A                     executingState@m_one:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0xA
   644  00008A                     	ds	2
   645  00008C                     executingState@s_ten:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0xC
   649  00008C                     	ds	2
   650  00008E                     executingState@s_one:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0xE
   654  00008E                     	ds	2
   655  000090                     _executingState$1736:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x10
   659  000090                     	ds	2
   660  000092                     _executingState$1737:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x12
   664  000092                     	ds	2
   665  000094                     executingState@res:
   666                           	opt stack 0
   667                           
   668                           ; 8 bytes @ 0x14
   669  000094                     	ds	8
   670  00009C                     executingState@start_s:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x1C
   674  00009C                     	ds	2
   675  00009E                     executingState@hasTab:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x1E
   679  00009E                     	ds	2
   680  0000A0                     executingState@timedif:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x20
   684  0000A0                     	ds	2
   685  0000A2                     executingState@hasLabel:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x22
   689  0000A2                     	ds	2
   690  0000A4                     executingState@snLoaded:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x24
   694  0000A4                     	ds	2
   695  0000A6                     executingState@alLoaded:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x26
   699  0000A6                     	ds	2
   700  0000A8                     executingState@snInSensor:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x28
   704  0000A8                     	ds	2
   705  0000AA                     executingState@alInSensor:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x2A
   709  0000AA                     	ds	2
   710  0000AC                     executingState@emptyCount:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x2C
   714  0000AC                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           
   722                           	psect	cstackCOMRAM
   723  000001                     __pcstackCOMRAM:
   724                           	opt stack 0
   725  000001                     ??_keypressed:
   726  000001                     
   727                           ; 1 bytes @ 0x0
   728  000001                     	ds	14
   729  00000F                     keypressed@keypress:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0xE
   733  00000F                     	ds	1
   734  000010                     ??_isdigit:
   735  000010                     ??_I2C_Master_Wait:
   736  000010                     ?_readSnTop:
   737                           	opt stack 0
   738  000010                     ?_readAlTop:
   739                           	opt stack 0
   740  000010                     ?_readSnBot:
   741                           	opt stack 0
   742  000010                     ?_readAlBot:
   743                           	opt stack 0
   744  000010                     ?_readSnSensor:
   745                           	opt stack 0
   746  000010                     ?_servoRotateArm:
   747                           	opt stack 0
   748  000010                     ?_readKey:
   749                           	opt stack 0
   750  000010                     ?___wmul:
   751                           	opt stack 0
   752  000010                     ?___lwdiv:
   753                           	opt stack 0
   754  000010                     ?___lldiv:
   755                           	opt stack 0
   756  000010                     lcdNibble@temp:
   757                           	opt stack 0
   758  000010                     eeprom_ReadByte@address:
   759                           	opt stack 0
   760  000010                     eeprom_WriteByte@address:
   761                           	opt stack 0
   762  000010                     servoRotate1@angle:
   763                           	opt stack 0
   764  000010                     servoRotate2@angle:
   765                           	opt stack 0
   766  000010                     servoRotate4@angle:
   767                           	opt stack 0
   768  000010                     servoRotate0@servo:
   769                           	opt stack 0
   770  000010                     servoRotate90@servo:
   771                           	opt stack 0
   772  000010                     servoRotate90n@servo:
   773                           	opt stack 0
   774  000010                     ___wmul@multiplier:
   775                           	opt stack 0
   776  000010                     ___lwdiv@dividend:
   777                           	opt stack 0
   778  000010                     ___lldiv@dividend:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0xF
   782  000010                     	ds	1
   783  000011                     I2C_Master_Read@a:
   784                           	opt stack 0
   785  000011                     lcdNibble@data:
   786                           	opt stack 0
   787  000011                     _isdigit$1349:
   788                           	opt stack 0
   789  000011                     I2C_Master_Write@d:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x10
   793  000011                     	ds	1
   794  000012                     ??_servoRotate90n:
   795  000012                     ??_servoRotate2:
   796  000012                     ??_servoRotate0:
   797  000012                     ??_servoRotate1:
   798  000012                     ??_servoRotate4:
   799  000012                     ??_servoRotate90:
   800  000012                     ??_servoRotateArm:
   801  000012                     I2C_Master_Read@temp:
   802                           	opt stack 0
   803  000012                     lcdInst@data:
   804                           	opt stack 0
   805  000012                     putch@data:
   806                           	opt stack 0
   807  000012                     readKey@keypress:
   808                           	opt stack 0
   809  000012                     eeprom_WriteByte@data:
   810                           	opt stack 0
   811  000012                     isdigit@c:
   812                           	opt stack 0
   813  000012                     eeprom_GetLog@back:
   814                           	opt stack 0
   815  000012                     ___wmul@multiplicand:
   816                           	opt stack 0
   817  000012                     ___lwdiv@divisor:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x11
   821  000012                     	ds	1
   822  000013                     ??_initLCD:
   823  000013                     readKey@i:
   824                           	opt stack 0
   825  000013                     eeprom_LogResult@data:
   826                           	opt stack 0
   827  000013                     get_time@time:
   828                           	opt stack 0
   829  000013                     servoRotate1@i:
   830                           	opt stack 0
   831  000013                     servoRotate2@i:
   832                           	opt stack 0
   833  000013                     servoRotate4@i:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x12
   837  000013                     	ds	1
   838  000014                     ___lwdiv@counter:
   839                           	opt stack 0
   840  000014                     eeprom_GetLog@res:
   841                           	opt stack 0
   842  000014                     servoRotate0@i:
   843                           	opt stack 0
   844  000014                     servoRotate90@i:
   845                           	opt stack 0
   846  000014                     servoRotate90n@i:
   847                           	opt stack 0
   848  000014                     ___wmul@product:
   849                           	opt stack 0
   850  000014                     ___lldiv@divisor:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x13
   854  000014                     	ds	1
   855  000015                     ??_get_time:
   856  000015                     eeprom_LogResult@address:
   857                           	opt stack 0
   858  000015                     servoRotateArm@i_1045:
   859                           	opt stack 0
   860  000015                     ___lwdiv@quotient:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x14
   864  000015                     	ds	1
   865  000016                     ??_dispenseSnCan:
   866  000016                     ??_dispenseAlCan:
   867  000016                     ??_eeprom_GetLog:
   868  000016                     eeprom_LogResult@i:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x15
   872  000016                     	ds	1
   873  000017                     ?___lwmod:
   874                           	opt stack 0
   875  000017                     get_time@i:
   876                           	opt stack 0
   877  000017                     servoRotateArm@res:
   878                           	opt stack 0
   879  000017                     ___lwmod@dividend:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x16
   883  000017                     	ds	1
   884  000018                     ?_get_timeDif:
   885                           	opt stack 0
   886  000018                     eeprom_GetLog@address:
   887                           	opt stack 0
   888  000018                     get_timeDif@start:
   889                           	opt stack 0
   890  000018                     ___lldiv@quotient:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x17
   894  000018                     	ds	1
   895  000019                     eeprom_GetLog@i:
   896                           	opt stack 0
   897  000019                     ___lwmod@divisor:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x18
   901  000019                     	ds	1
   902  00001A                     ??_get_timeDif:
   903                           
   904                           ; 1 bytes @ 0x19
   905  00001A                     	ds	1
   906  00001B                     ___lwmod@counter:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x1A
   910  00001B                     	ds	1
   911  00001C                     ?_printf:
   912                           	opt stack 0
   913  00001C                     ___lldiv@counter:
   914                           	opt stack 0
   915  00001C                     printf@f:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x1B
   919  00001C                     	ds	1
   920  00001D                     get_timeDif@h_ten:
   921                           	opt stack 0
   922  00001D                     I2C_Master_Init@c:
   923                           	opt stack 0
   924                           
   925                           ; 4 bytes @ 0x1C
   926  00001D                     	ds	2
   927  00001F                     get_timeDif@h_one:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x1E
   931  00001F                     	ds	2
   932  000021                     ??_I2C_Master_Init:
   933  000021                     get_timeDif@m_ten:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x20
   937  000021                     	ds	2
   938  000023                     get_timeDif@m_one:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x22
   942  000023                     	ds	2
   943  000025                     get_timeDif@s_ten:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x24
   947  000025                     	ds	1
   948  000026                     ??_printf:
   949                           
   950                           ; 1 bytes @ 0x25
   951  000026                     	ds	1
   952  000027                     get_timeDif@s_one:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x26
   956  000027                     	ds	2
   957  000029                     get_timeDif@start_s:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x28
   961  000029                     	ds	1
   962  00002A                     printf@idx:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x29
   966  00002A                     	ds	1
   967  00002B                     printf@ap:
   968                           	opt stack 0
   969  00002B                     _get_timeDif$1734:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x2A
   973  00002B                     	ds	2
   974  00002D                     printf@prec:
   975                           	opt stack 0
   976  00002D                     _get_timeDif$1735:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x2C
   980  00002D                     	ds	1
   981  00002E                     printf@val:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x2D
   985  00002E                     	ds	2
   986  000030                     printf@flag:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x2F
   990  000030                     	ds	1
   991  000031                     printf@width:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x30
   995  000031                     	ds	2
   996  000033                     printf@c:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x32
  1000  000033                     	ds	1
  1001  000034                     ??_executingState:
  1002  000034                     ??_finishState:
  1003  000034                     ??_debugState:
  1004  000034                     ??_fixLCD:
  1005  000034                     mainState@keypress:
  1006                           	opt stack 0
  1007  000034                     logState@log:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x33
  1011  000034                     	ds	1
  1012  000035                     fixLCD@i:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x34
  1016  000035                     	ds	1
  1017  000036                     finishState@keypress:
  1018                           	opt stack 0
  1019  000036                     logState@keypress:
  1020                           	opt stack 0
  1021  000036                     debugState@keypress:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x35
  1025  000036                     	ds	1
  1026  000037                     fixLCD@time:
  1027                           	opt stack 0
  1028                           
  1029                           ; 7 bytes @ 0x36
  1030  000037                     	ds	7
  1031  00003E                     fixLCD@j:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x3D
  1035  00003E                     	ds	2
  1036  000040                     fixLCD@i_597:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x3F
  1040  000040                     	ds	1
  1041  000041                     tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           
  1048                           ; 1 bytes @ 0x40
  1049 ;;
  1050 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1051 ;;
  1052 ;; *************** function _main *****************
  1053 ;; Defined at:
  1054 ;;		line 434 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels required when called:    6
  1074 ;; This function calls:
  1075 ;;		_I2C_Master_Init
  1076 ;;		_debugState
  1077 ;;		_eeprom_initialize
  1078 ;;		_executingState
  1079 ;;		_finishState
  1080 ;;		_fixLCD
  1081 ;;		_initLCD
  1082 ;;		_logState
  1083 ;;		_mainState
  1084 ;; This function is called by:
  1085 ;;		Startup code after reset
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text0
  1090  000FDA                     __ptext0:
  1091                           	opt stack 0
  1092  000FDA                     _main:
  1093                           	opt stack 25
  1094                           
  1095                           ;main.c: 437: fixLCD();
  1096                           
  1097                           ;incstack = 0
  1098  000FDA  EC56  F004         	call	_fixLCD	;wreg free
  1099                           
  1100                           ;main.c: 439: OSCCON = 0xF0;
  1101  000FDE  0EF0               	movlw	240
  1102  000FE0  6ED3               	movwf	4051,c	;volatile
  1103                           
  1104                           ;main.c: 445: TRISA = 0b00001111;
  1105  000FE2  0E0F               	movlw	15
  1106  000FE4  6E92               	movwf	3986,c	;volatile
  1107                           
  1108                           ;main.c: 446: TRISB = 0b11110010;
  1109  000FE6  0EF2               	movlw	242
  1110  000FE8  6E93               	movwf	3987,c	;volatile
  1111                           
  1112                           ;main.c: 447: TRISC = 0b00011011;
  1113  000FEA  0E1B               	movlw	27
  1114  000FEC  6E94               	movwf	3988,c	;volatile
  1115                           
  1116                           ;main.c: 448: TRISD = 0x00;
  1117  000FEE  0E00               	movlw	0
  1118  000FF0  6E95               	movwf	3989,c	;volatile
  1119                           
  1120                           ;main.c: 449: TRISE = 0x00;
  1121  000FF2  0E00               	movlw	0
  1122  000FF4  6E96               	movwf	3990,c	;volatile
  1123                           
  1124                           ;main.c: 451: LATA = 0x00;
  1125  000FF6  0E00               	movlw	0
  1126  000FF8  6E89               	movwf	3977,c	;volatile
  1127                           
  1128                           ;main.c: 452: LATB = 0x00;
  1129  000FFA  0E00               	movlw	0
  1130  000FFC  6E8A               	movwf	3978,c	;volatile
  1131                           
  1132                           ;main.c: 453: LATC = 0x00;
  1133  000FFE  0E00               	movlw	0
  1134  001000  6E8B               	movwf	3979,c	;volatile
  1135                           
  1136                           ;main.c: 454: LATD = 0x00;
  1137  001002  0E00               	movlw	0
  1138  001004  6E8C               	movwf	3980,c	;volatile
  1139                           
  1140                           ;main.c: 455: LATE = 0x00;
  1141  001006  0E00               	movlw	0
  1142  001008  6E8D               	movwf	3981,c	;volatile
  1143                           
  1144                           ;main.c: 457: ADCON0 = 0x00;
  1145  00100A  0E00               	movlw	0
  1146  00100C  6EC2               	movwf	4034,c	;volatile
  1147                           
  1148                           ;main.c: 458: ADCON1 = 0x0F;
  1149  00100E  0E0F               	movlw	15
  1150  001010  6EC1               	movwf	4033,c	;volatile
  1151                           
  1152                           ;main.c: 459: CMCON = 0x07;
  1153  001012  0E07               	movlw	7
  1154  001014  6EB4               	movwf	4020,c	;volatile
  1155                           
  1156                           ;main.c: 462: initLCD();
  1157  001016  EC66  F00A         	call	_initLCD	;wreg free
  1158                           
  1159                           ;main.c: 463: eeprom_initialize();
  1160  00101A  ECBE  F00B         	call	_eeprom_initialize	;wreg free
  1161                           
  1162                           ;main.c: 464: I2C_Master_Init(10000);
  1163  00101E  0E10               	movlw	16
  1164  001020  6E1D               	movwf	I2C_Master_Init@c,c
  1165  001022  0E27               	movlw	39
  1166  001024  6E1E               	movwf	I2C_Master_Init@c+1,c
  1167  001026  0E00               	movlw	0
  1168  001028  6E1F               	movwf	I2C_Master_Init@c+2,c
  1169  00102A  0E00               	movlw	0
  1170  00102C  6E20               	movwf	I2C_Master_Init@c+3,c
  1171  00102E  EC2A  F009         	call	_I2C_Master_Init	;wreg free
  1172                           
  1173                           ;main.c: 466: INT1IE = 1;
  1174  001032  86F0               	bsf	intcon3,3,c	;volatile
  1175                           
  1176                           ;main.c: 467: (INTCONbits.GIE = 0);
  1177  001034  9EF2               	bcf	intcon,7,c	;volatile
  1178                           
  1179                           ;main.c: 469: state = MAIN;
  1180  001036  0E00               	movlw	0
  1181  001038  6E4B               	movwf	_state,c
  1182                           
  1183                           ;main.c: 476: {
  1184                           ;main.c: 477: switch (state)
  1185                           
  1186                           ;main.c: 475: while (1)
  1187  00103A  D00E               	goto	l4519
  1188  00103C                     l4507:
  1189                           
  1190                           ;main.c: 480: mainState();
  1191  00103C  EC1E  F00A         	call	_mainState	;wreg free
  1192                           
  1193                           ;main.c: 481: break;
  1194  001040  D00B               	goto	l4519
  1195  001042                     l4509:
  1196                           
  1197                           ;main.c: 483: executingState();
  1198  001042  EC09  F000         	call	_executingState	;wreg free
  1199                           
  1200                           ;main.c: 484: break;
  1201  001046  D008               	goto	l4519
  1202  001048                     l4511:
  1203                           
  1204                           ;main.c: 486: finishState();
  1205  001048  ECE9  F00A         	call	_finishState	;wreg free
  1206                           
  1207                           ;main.c: 487: break;
  1208  00104C  D005               	goto	l4519
  1209  00104E                     l4513:
  1210                           
  1211                           ;main.c: 489: logState();
  1212  00104E  ECAB  F009         	call	_logState	;wreg free
  1213                           
  1214                           ;main.c: 490: break;
  1215  001052  D002               	goto	l4519
  1216  001054                     l4515:
  1217                           
  1218                           ;main.c: 492: debugState();
  1219  001054  ECF8  F009         	call	_debugState	;wreg free
  1220  001058                     l4519:
  1221  001058  504B               	movf	_state,w,c
  1222                           
  1223                           ; Switch size 1, requested type "space"
  1224                           ; Number of cases is 5, Range of values is 0 to 5
  1225                           ; switch strategies available:
  1226                           ; Name         Instructions Cycles
  1227                           ; simple_byte           16     9 (average)
  1228                           ;	Chosen strategy is simple_byte
  1229  00105A  0A00               	xorlw	0	; case 0
  1230  00105C  B4D8               	btfsc	status,2,c
  1231  00105E  D7EE               	goto	l4507
  1232  001060  0A01               	xorlw	1	; case 1
  1233  001062  B4D8               	btfsc	status,2,c
  1234  001064  D7EE               	goto	l4509
  1235  001066  0A03               	xorlw	3	; case 2
  1236  001068  B4D8               	btfsc	status,2,c
  1237  00106A  D7EE               	goto	l4511
  1238  00106C  0A01               	xorlw	1	; case 3
  1239  00106E  B4D8               	btfsc	status,2,c
  1240  001070  D7EE               	goto	l4513
  1241  001072  0A06               	xorlw	6	; case 5
  1242  001074  B4D8               	btfsc	status,2,c
  1243  001076  D7EE               	goto	l4515
  1244  001078  D7EF               	goto	l4519
  1245  00107A                     __end_of_main:
  1246                           	opt stack 0
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           intcon	equ	0xFF2
  1252                           intcon3	equ	0xFF0
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           status	equ	0xFD8
  1256                           
  1257 ;; *************** function _mainState *****************
  1258 ;; Defined at:
  1259 ;;		line 121 in file "main.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  keypress        2   51[COMRAM] int 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;Total ram usage:        2 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    5
  1280 ;; This function calls:
  1281 ;;		_get_time
  1282 ;;		_readKey
  1283 ;;		_update_lcd
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text1
  1290  00143C                     __ptext1:
  1291                           	opt stack 0
  1292  00143C                     _mainState:
  1293                           	opt stack 25
  1294                           
  1295                           ;main.c: 123: LATBbits.LATB0 = 0;
  1296                           
  1297                           ;incstack = 0
  1298  00143C  908A               	bcf	3978,0,c	;volatile
  1299                           
  1300                           ;main.c: 124: LATCbits.LATC6 = 0;
  1301  00143E  9C8B               	bcf	3979,6,c	;volatile
  1302  001440                     l4109:
  1303                           
  1304                           ;main.c: 126: {
  1305                           ;main.c: 128: get_time(time);
  1306  001440  0EBC               	movlw	low _time
  1307  001442  6E13               	movwf	get_time@time,c
  1308  001444  0E00               	movlw	high _time
  1309  001446  6E14               	movwf	get_time@time+1,c
  1310  001448  EC3D  F008         	call	_get_time	;wreg free
  1311                           
  1312                           ;main.c: 129: update_lcd();
  1313  00144C  ECD4  F005         	call	_update_lcd	;wreg free
  1314                           
  1315                           ;main.c: 131: int keypress = readKey();
  1316  001450  EC42  F00A         	call	_readKey	;wreg free
  1317  001454  C010  F034         	movff	?_readKey,mainState@keypress
  1318  001458  C011  F035         	movff	?_readKey+1,mainState@keypress+1
  1319                           
  1320                           ;main.c: 132: if(keypress == 0b0000){
  1321  00145C  5034               	movf	mainState@keypress,w,c
  1322  00145E  1035               	iorwf	mainState@keypress+1,w,c
  1323  001460  A4D8               	btfss	status,2,c
  1324  001462  D003               	goto	l4123
  1325                           
  1326                           ;main.c: 138: state = EXECUTING;
  1327  001464  0E01               	movlw	1
  1328  001466                     L1:
  1329  001466  6E4B               	movwf	_state,c
  1330                           
  1331                           ;main.c: 139: return;
  1332  001468  0012               	return	
  1333  00146A                     l4123:
  1334  00146A  0434               	decf	mainState@keypress,w,c
  1335  00146C  1035               	iorwf	mainState@keypress+1,w,c
  1336  00146E  A4D8               	btfss	status,2,c
  1337  001470  D002               	goto	l4131
  1338                           
  1339                           ;main.c: 142: state = LOG;
  1340  001472  0E03               	movlw	3
  1341  001474  D7F8               	goto	L1
  1342  001476                     l4131:
  1343  001476  0E03               	movlw	3
  1344  001478  1834               	xorwf	mainState@keypress,w,c
  1345  00147A  1035               	iorwf	mainState@keypress+1,w,c
  1346  00147C  A4D8               	btfss	status,2,c
  1347  00147E  D7E0               	goto	l4109
  1348                           
  1349                           ;main.c: 145: state = DEBUG;
  1350  001480  0E05               	movlw	5
  1351  001482  D7F1               	goto	L1
  1352  001484                     __end_of_mainState:
  1353                           	opt stack 0
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           intcon	equ	0xFF2
  1359                           intcon3	equ	0xFF0
  1360                           postinc0	equ	0xFEE
  1361                           wreg	equ	0xFE8
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _logState *****************
  1365 ;; Defined at:
  1366 ;;		line 327 in file "main.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  keypress        2   53[COMRAM] int 
  1371 ;;  log             2   51[COMRAM] int 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;Total ram usage:        4 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    5
  1388 ;; This function calls:
  1389 ;;		_eeprom_GetLog
  1390 ;;		_readKey
  1391 ;;		_update_lcd
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text2
  1398  001356                     __ptext2:
  1399                           	opt stack 0
  1400  001356                     _logState:
  1401                           	opt stack 25
  1402                           
  1403                           ;main.c: 329: update_lcd();
  1404                           
  1405                           ;incstack = 0
  1406  001356  ECD4  F005         	call	_update_lcd	;wreg free
  1407                           
  1408                           ;main.c: 330: int log = 0;
  1409  00135A  0E00               	movlw	0
  1410  00135C  6E35               	movwf	logState@log+1,c
  1411  00135E  0E00               	movlw	0
  1412  001360  6E34               	movwf	logState@log,c
  1413  001362                     l4361:
  1414                           
  1415                           ;main.c: 332: int keypress = readKey();
  1416  001362  EC42  F00A         	call	_readKey	;wreg free
  1417  001366  C010  F036         	movff	?_readKey,logState@keypress
  1418  00136A  C011  F037         	movff	?_readKey+1,logState@keypress+1
  1419                           
  1420                           ;main.c: 333: if(keypress == 0b0001){
  1421  00136E  0436               	decf	logState@keypress,w,c
  1422  001370  1037               	iorwf	logState@keypress+1,w,c
  1423  001372  A4D8               	btfss	status,2,c
  1424  001374  D00F               	goto	l4375
  1425                           
  1426                           ;main.c: 334: log++;
  1427  001376  4A34               	infsnz	logState@log,f,c
  1428  001378  2A35               	incf	logState@log+1,f,c
  1429                           
  1430                           ;main.c: 335: eeprom_GetLog(log, &logdata);
  1431  00137A  C034  F012         	movff	logState@log,eeprom_GetLog@back
  1432  00137E  C035  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1433  001382  0E4C               	movlw	low _logdata
  1434  001384  6E14               	movwf	eeprom_GetLog@res,c
  1435  001386  0E00               	movlw	high _logdata
  1436  001388  6E15               	movwf	eeprom_GetLog@res+1,c
  1437  00138A  ECFA  F008         	call	_eeprom_GetLog	;wreg free
  1438                           
  1439                           ;main.c: 336: update_lcd();
  1440  00138E  ECD4  F005         	call	_update_lcd	;wreg free
  1441                           
  1442                           ;main.c: 337: return;
  1443  001392  0012               	return	
  1444  001394                     l4375:
  1445  001394  0E0D               	movlw	13
  1446  001396  1836               	xorwf	logState@keypress,w,c
  1447  001398  1037               	iorwf	logState@keypress+1,w,c
  1448  00139A  A4D8               	btfss	status,2,c
  1449  00139C  D7E2               	goto	l4361
  1450                           
  1451                           ;main.c: 339: state = MAIN;
  1452  00139E  0E00               	movlw	0
  1453  0013A0  6E4B               	movwf	_state,c
  1454                           
  1455                           ;main.c: 340: return;
  1456  0013A2  0012               	return	
  1457  0013A4                     __end_of_logState:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           intcon	equ	0xFF2
  1464                           intcon3	equ	0xFF0
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _eeprom_GetLog *****************
  1470 ;; Defined at:
  1471 ;;		line 90 in file "eeprom.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  back            2   17[COMRAM] int 
  1474 ;;  res             2   19[COMRAM] PTR int 
  1475 ;;		 -> logdata(1), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  i               2   24[COMRAM] int 
  1478 ;;  address         1   23[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;Total ram usage:        9 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    3
  1495 ;; This function calls:
  1496 ;;		_eeprom_ReadByte
  1497 ;;		_newestAddress
  1498 ;; This function is called by:
  1499 ;;		_logState
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text3
  1504  0011F4                     __ptext3:
  1505                           	opt stack 0
  1506  0011F4                     _eeprom_GetLog:
  1507                           	opt stack 26
  1508                           
  1509                           ;eeprom.c: 91: uint8_t address = newestAddress();
  1510                           
  1511                           ;incstack = 0
  1512  0011F4  EC1C  F00C         	call	_newestAddress	;wreg free
  1513  0011F8  6E18               	movwf	eeprom_GetLog@address,c
  1514                           
  1515                           ;eeprom.c: 92: address = address - back*5;
  1516  0011FA  5012               	movf	eeprom_GetLog@back,w,c
  1517  0011FC  0D05               	mullw	5
  1518  0011FE  50F3               	movf	prodl,w,c
  1519  001200  0800               	sublw	0
  1520  001202  2418               	addwf	eeprom_GetLog@address,w,c
  1521  001204  6E18               	movwf	eeprom_GetLog@address,c
  1522                           
  1523                           ;eeprom.c: 93: for(int i = 0; i < 5; i++){
  1524  001206  0E00               	movlw	0
  1525  001208  6E1A               	movwf	eeprom_GetLog@i+1,c
  1526  00120A  0E00               	movlw	0
  1527  00120C  6E19               	movwf	eeprom_GetLog@i,c
  1528  00120E                     l4097:
  1529  00120E  BE1A               	btfsc	eeprom_GetLog@i+1,7,c
  1530  001210  D006               	goto	l4101
  1531  001212  501A               	movf	eeprom_GetLog@i+1,w,c
  1532  001214  E11E               	bnz	l357
  1533  001216  0E05               	movlw	5
  1534  001218  5C19               	subwf	eeprom_GetLog@i,w,c
  1535  00121A  B0D8               	btfsc	status,0,c
  1536  00121C  0012               	return	
  1537  00121E                     l4101:
  1538                           
  1539                           ;eeprom.c: 94: res[i] = eeprom_ReadByte(address + i);
  1540  00121E  5018               	movf	eeprom_GetLog@address,w,c
  1541  001220  2419               	addwf	eeprom_GetLog@i,w,c
  1542  001222  6E10               	movwf	eeprom_ReadByte@address,c
  1543  001224  0E00               	movlw	0
  1544  001226  201A               	addwfc	eeprom_GetLog@i+1,w,c
  1545  001228  6E11               	movwf	eeprom_ReadByte@address+1,c
  1546  00122A  EC08  F00C         	call	_eeprom_ReadByte	;wreg free
  1547  00122E  6E16               	movwf	??_eeprom_GetLog& (0+255),c
  1548  001230  6A17               	clrf	(??_eeprom_GetLog+1)& (0+255),c
  1549  001232  90D8               	bcf	status,0,c
  1550  001234  3419               	rlcf	eeprom_GetLog@i,w,c
  1551  001236  6ED9               	movwf	fsr2l,c
  1552  001238  341A               	rlcf	eeprom_GetLog@i+1,w,c
  1553  00123A  6EDA               	movwf	fsr2h,c
  1554  00123C  5014               	movf	eeprom_GetLog@res,w,c
  1555  00123E  26D9               	addwf	fsr2l,f,c
  1556  001240  5015               	movf	eeprom_GetLog@res+1,w,c
  1557  001242  22DA               	addwfc	fsr2h,f,c
  1558  001244  C016  FFDE         	movff	??_eeprom_GetLog,postinc2
  1559  001248  C017  FFDD         	movff	??_eeprom_GetLog+1,postdec2
  1560  00124C  4A19               	infsnz	eeprom_GetLog@i,f,c
  1561  00124E  2A1A               	incf	eeprom_GetLog@i+1,f,c
  1562  001250  D7DE               	goto	l4097
  1563  001252                     l357:
  1564  001252  0012               	return		;funcret
  1565  001254                     __end_of_eeprom_GetLog:
  1566                           	opt stack 0
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           prodl	equ	0xFF3
  1572                           intcon	equ	0xFF2
  1573                           intcon3	equ	0xFF0
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postinc2	equ	0xFDE
  1577                           postdec2	equ	0xFDD
  1578                           fsr2h	equ	0xFDA
  1579                           fsr2l	equ	0xFD9
  1580                           status	equ	0xFD8
  1581                           
  1582 ;; *************** function _fixLCD *****************
  1583 ;; Defined at:
  1584 ;;		line 367 in file "main.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  i               1   63[COMRAM] unsigned char 
  1589 ;;  time            7   54[COMRAM] unsigned char [7]
  1590 ;;  j               2   61[COMRAM] int 
  1591 ;;  i               2   52[COMRAM] int 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;Total ram usage:       13 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    4
  1608 ;; This function calls:
  1609 ;;		_I2C_Master_Init
  1610 ;;		_I2C_Master_Read
  1611 ;;		_I2C_Master_Start
  1612 ;;		_I2C_Master_Stop
  1613 ;;		_I2C_Master_Write
  1614 ;;		_initLCD
  1615 ;;		_lcdInst
  1616 ;;		_printf
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text4
  1623  0008AC                     __ptext4:
  1624                           	opt stack 0
  1625  0008AC                     _fixLCD:
  1626                           	opt stack 26
  1627                           
  1628                           ;main.c: 369: OSCCON = 0xF0;
  1629                           
  1630                           ;incstack = 0
  1631  0008AC  0EF0               	movlw	240
  1632  0008AE  6ED3               	movwf	4051,c	;volatile
  1633                           
  1634                           ;main.c: 373: TRISA = 0x00;
  1635  0008B0  0E00               	movlw	0
  1636  0008B2  6E92               	movwf	3986,c	;volatile
  1637                           
  1638                           ;main.c: 374: TRISB = 0b11110010;
  1639  0008B4  0EF2               	movlw	242
  1640  0008B6  6E93               	movwf	3987,c	;volatile
  1641                           
  1642                           ;main.c: 375: TRISC = 0x00011000;
  1643  0008B8  0E00               	movlw	0
  1644  0008BA  6E94               	movwf	3988,c	;volatile
  1645                           
  1646                           ;main.c: 376: TRISD = 0x00;
  1647  0008BC  0E00               	movlw	0
  1648  0008BE  6E95               	movwf	3989,c	;volatile
  1649                           
  1650                           ;main.c: 377: TRISE = 0x00;
  1651  0008C0  0E00               	movlw	0
  1652  0008C2  6E96               	movwf	3990,c	;volatile
  1653                           
  1654                           ;main.c: 378: LATA = 0x00;
  1655  0008C4  0E00               	movlw	0
  1656  0008C6  6E89               	movwf	3977,c	;volatile
  1657                           
  1658                           ;main.c: 379: LATB = 0x00;
  1659  0008C8  0E00               	movlw	0
  1660  0008CA  6E8A               	movwf	3978,c	;volatile
  1661                           
  1662                           ;main.c: 380: LATC = 0x00;
  1663  0008CC  0E00               	movlw	0
  1664  0008CE  6E8B               	movwf	3979,c	;volatile
  1665                           
  1666                           ;main.c: 381: LATD = 0x00;
  1667  0008D0  0E00               	movlw	0
  1668  0008D2  6E8C               	movwf	3980,c	;volatile
  1669                           
  1670                           ;main.c: 382: LATE = 0x00;
  1671  0008D4  0E00               	movlw	0
  1672  0008D6  6E8D               	movwf	3981,c	;volatile
  1673                           
  1674                           ;main.c: 383: ADCON0 = 0x00;
  1675  0008D8  0E00               	movlw	0
  1676  0008DA  6EC2               	movwf	4034,c	;volatile
  1677                           
  1678                           ;main.c: 384: ADCON1 = 0x00;
  1679  0008DC  0E00               	movlw	0
  1680  0008DE  6EC1               	movwf	4033,c	;volatile
  1681                           
  1682                           ;main.c: 386: initLCD();
  1683  0008E0  EC66  F00A         	call	_initLCD	;wreg free
  1684                           
  1685                           ;main.c: 387: I2C_Master_Init(10000);
  1686  0008E4  0E10               	movlw	16
  1687  0008E6  6E1D               	movwf	I2C_Master_Init@c,c
  1688  0008E8  0E27               	movlw	39
  1689  0008EA  6E1E               	movwf	I2C_Master_Init@c+1,c
  1690  0008EC  0E00               	movlw	0
  1691  0008EE  6E1F               	movwf	I2C_Master_Init@c+2,c
  1692  0008F0  0E00               	movlw	0
  1693  0008F2  6E20               	movwf	I2C_Master_Init@c+3,c
  1694  0008F4  EC2A  F009         	call	_I2C_Master_Init	;wreg free
  1695                           
  1696                           ;main.c: 388: (INTCONbits.GIE = 0);
  1697  0008F8  9EF2               	bcf	intcon,7,c	;volatile
  1698                           
  1699                           ;main.c: 389: unsigned char time[7];
  1700                           ;main.c: 391: LATA = 0b01010101;
  1701  0008FA  0E55               	movlw	85
  1702  0008FC  6E89               	movwf	3977,c	;volatile
  1703                           
  1704                           ;main.c: 392: LATB = 0b01010101;
  1705  0008FE  0E55               	movlw	85
  1706  000900  6E8A               	movwf	3978,c	;volatile
  1707                           
  1708                           ;main.c: 393: LATC = 0b01010101;
  1709  000902  0E55               	movlw	85
  1710  000904  6E8B               	movwf	3979,c	;volatile
  1711                           
  1712                           ;main.c: 394: LATDbits.LATD0 = 1;
  1713  000906  808C               	bsf	3980,0,c	;volatile
  1714                           
  1715                           ;main.c: 395: LATDbits.LATD1 = 0;
  1716  000908  928C               	bcf	3980,1,c	;volatile
  1717                           
  1718                           ;main.c: 396: LATEbits.LATE0 = 1;
  1719  00090A  808D               	bsf	3981,0,c	;volatile
  1720                           
  1721                           ;main.c: 397: LATEbits.LATE1 = 0;
  1722  00090C  928D               	bcf	3981,1,c	;volatile
  1723                           
  1724                           ;main.c: 398: int i = 0;
  1725  00090E  0E00               	movlw	0
  1726  000910  6E36               	movwf	fixLCD@i+1,c
  1727  000912  0E00               	movlw	0
  1728  000914  6E35               	movwf	fixLCD@i,c
  1729                           
  1730                           ;main.c: 399: int j = 0;
  1731  000916  0E00               	movlw	0
  1732  000918  6E3F               	movwf	fixLCD@j+1,c
  1733  00091A  0E00               	movlw	0
  1734  00091C  6E3E               	movwf	fixLCD@j,c
  1735                           
  1736                           ;main.c: 400: while(j < 10){
  1737  00091E  D095               	goto	l4455
  1738  000920                     l4413:
  1739                           
  1740                           ;main.c: 402: I2C_Master_Start();
  1741  000920  EC38  F00C         	call	_I2C_Master_Start	;wreg free
  1742                           
  1743                           ;main.c: 403: I2C_Master_Write(0b11010000);
  1744  000924  0E00               	movlw	0
  1745  000926  6E12               	movwf	I2C_Master_Write@d+1,c
  1746  000928  0ED0               	movlw	208
  1747  00092A  6E11               	movwf	I2C_Master_Write@d,c
  1748  00092C  EC2F  F00C         	call	_I2C_Master_Write	;wreg free
  1749                           
  1750                           ;main.c: 404: I2C_Master_Write(0x00);
  1751  000930  0E00               	movlw	0
  1752  000932  6E12               	movwf	I2C_Master_Write@d+1,c
  1753  000934  0E00               	movlw	0
  1754  000936  6E11               	movwf	I2C_Master_Write@d,c
  1755  000938  EC2F  F00C         	call	_I2C_Master_Write	;wreg free
  1756                           
  1757                           ;main.c: 405: I2C_Master_Stop();
  1758  00093C  EC34  F00C         	call	_I2C_Master_Stop	;wreg free
  1759                           
  1760                           ;main.c: 408: I2C_Master_Start();
  1761  000940  EC38  F00C         	call	_I2C_Master_Start	;wreg free
  1762                           
  1763                           ;main.c: 409: I2C_Master_Write(0b11010001);
  1764  000944  0E00               	movlw	0
  1765  000946  6E12               	movwf	I2C_Master_Write@d+1,c
  1766  000948  0ED1               	movlw	209
  1767  00094A  6E11               	movwf	I2C_Master_Write@d,c
  1768  00094C  EC2F  F00C         	call	_I2C_Master_Write	;wreg free
  1769                           
  1770                           ;main.c: 410: for(unsigned char i=0;i<0x06;i++){
  1771  000950  0E00               	movlw	0
  1772  000952  6E40               	movwf	fixLCD@i_597,c
  1773  000954                     l4417:
  1774  000954  0E05               	movlw	5
  1775  000956  6440               	cpfsgt	fixLCD@i_597,c
  1776  000958  D001               	goto	l4421
  1777  00095A  D00E               	goto	l4427
  1778  00095C                     l4421:
  1779                           
  1780                           ;main.c: 411: time[i] = I2C_Master_Read(1);
  1781  00095C  5040               	movf	fixLCD@i_597,w,c
  1782  00095E  0D01               	mullw	1
  1783  000960  0E37               	movlw	low fixLCD@time
  1784  000962  24F3               	addwf	prodl,w,c
  1785  000964  6ED9               	movwf	fsr2l,c
  1786  000966  0E00               	movlw	high fixLCD@time
  1787  000968  20F4               	addwfc	prodh,w,c
  1788  00096A  6EDA               	movwf	fsr2h,c
  1789  00096C  0E01               	movlw	1
  1790  00096E  EC76  F00B         	call	_I2C_Master_Read
  1791  000972  6EDF               	movwf	indf2,c
  1792  000974  2A40               	incf	fixLCD@i_597,f,c
  1793  000976  D7EE               	goto	l4417
  1794  000978                     l4427:
  1795                           
  1796                           ;main.c: 412: }
  1797                           ;main.c: 413: time[6] = I2C_Master_Read(0);
  1798  000978  0E00               	movlw	0
  1799  00097A  EC76  F00B         	call	_I2C_Master_Read
  1800  00097E  6E3D               	movwf	fixLCD@time+6,c
  1801                           
  1802                           ;main.c: 414: I2C_Master_Stop();
  1803  000980  EC34  F00C         	call	_I2C_Master_Stop	;wreg free
  1804                           
  1805                           ;main.c: 415: lcdInst(0b10000000);;
  1806  000984  0E80               	movlw	128
  1807  000986  EC29  F00C         	call	_lcdInst
  1808                           
  1809                           ;main.c: 416: printf("%02x%02x/%02x ", time[6],time[5],time[4]);
  1810  00098A  0ECF               	movlw	low STR_16
  1811  00098C  6E1C               	movwf	printf@f,c
  1812  00098E  0EFF               	movlw	high STR_16
  1813  000990  6E1D               	movwf	printf@f+1,c
  1814  000992  C03D  F01E         	movff	fixLCD@time+6,?_printf+2
  1815  000996  6A1F               	clrf	?_printf+3,c
  1816  000998  C03C  F020         	movff	fixLCD@time+5,?_printf+4
  1817  00099C  6A21               	clrf	?_printf+5,c
  1818  00099E  C03B  F022         	movff	fixLCD@time+4,?_printf+6
  1819  0009A2  6A23               	clrf	?_printf+7,c
  1820  0009A4  ECD0  F002         	call	_printf	;wreg free
  1821                           
  1822                           ;main.c: 417: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1823  0009A8  0EDE               	movlw	low STR_2
  1824  0009AA  6E1C               	movwf	printf@f,c
  1825  0009AC  0EFF               	movlw	high STR_2
  1826  0009AE  6E1D               	movwf	printf@f+1,c
  1827  0009B0  C039  F01E         	movff	fixLCD@time+2,?_printf+2
  1828  0009B4  6A1F               	clrf	?_printf+3,c
  1829  0009B6  C038  F020         	movff	fixLCD@time+1,?_printf+4
  1830  0009BA  6A21               	clrf	?_printf+5,c
  1831  0009BC  C037  F022         	movff	fixLCD@time,?_printf+6
  1832  0009C0  6A23               	clrf	?_printf+7,c
  1833  0009C2  ECD0  F002         	call	_printf	;wreg free
  1834                           
  1835                           ;main.c: 418: lcdInst(0b11000000);;
  1836  0009C6  0EC0               	movlw	192
  1837  0009C8  EC29  F00C         	call	_lcdInst
  1838                           
  1839                           ;main.c: 419: printf("              ");
  1840  0009CC  0E39               	movlw	low (STR_13+2)
  1841  0009CE  6E1C               	movwf	printf@f,c
  1842  0009D0  0EFF               	movlw	high (STR_13+2)
  1843  0009D2  6E1D               	movwf	printf@f+1,c
  1844  0009D4  ECD0  F002         	call	_printf	;wreg free
  1845                           
  1846                           ;main.c: 420: lcdInst(0b10000000);;
  1847  0009D8  0E80               	movlw	128
  1848  0009DA  EC29  F00C         	call	_lcdInst
  1849                           
  1850                           ;main.c: 421: lcdInst(0b11000000);;
  1851  0009DE  0EC0               	movlw	192
  1852  0009E0  EC29  F00C         	call	_lcdInst
  1853                           
  1854                           ;main.c: 423: LATA = LATA ^ 0xFF;
  1855  0009E4  1E89               	comf	3977,f,c	;volatile
  1856                           
  1857                           ;main.c: 424: LATB = LATB ^ 0xFF;
  1858  0009E6  1E8A               	comf	3978,f,c	;volatile
  1859                           
  1860                           ;main.c: 425: LATC = LATC ^ 0xFF;
  1861  0009E8  1E8B               	comf	3979,f,c	;volatile
  1862                           
  1863                           ;main.c: 426: LATDbits.LATD0 = !LATDbits.LATD0;
  1864  0009EA  B08C               	btfsc	3980,0,c	;volatile
  1865  0009EC  D003               	goto	u3300
  1866  0009EE  6A34               	clrf	??_fixLCD& (0+255),c
  1867  0009F0  2A34               	incf	??_fixLCD& (0+255),f,c
  1868  0009F2  D001               	goto	u3318
  1869  0009F4                     u3300:
  1870  0009F4  6A34               	clrf	??_fixLCD& (0+255),c
  1871  0009F6                     u3318:
  1872  0009F6  508C               	movf	3980,w,c	;volatile
  1873  0009F8  1834               	xorwf	??_fixLCD,w,c
  1874  0009FA  0BFE               	andlw	-2
  1875  0009FC  1834               	xorwf	??_fixLCD,w,c
  1876  0009FE  6E8C               	movwf	3980,c	;volatile
  1877                           
  1878                           ;main.c: 427: LATDbits.LATD1 = !LATDbits.LATD1;
  1879  000A00  B28C               	btfsc	3980,1,c	;volatile
  1880  000A02  D003               	goto	u3320
  1881  000A04  6A34               	clrf	??_fixLCD& (0+255),c
  1882  000A06  2A34               	incf	??_fixLCD& (0+255),f,c
  1883  000A08  D001               	goto	u3338
  1884  000A0A                     u3320:
  1885  000A0A  6A34               	clrf	??_fixLCD& (0+255),c
  1886  000A0C                     u3338:
  1887  000A0C  4634               	rlncf	??_fixLCD,f,c
  1888  000A0E  508C               	movf	3980,w,c	;volatile
  1889  000A10  1834               	xorwf	??_fixLCD,w,c
  1890  000A12  0BFD               	andlw	-3
  1891  000A14  1834               	xorwf	??_fixLCD,w,c
  1892  000A16  6E8C               	movwf	3980,c	;volatile
  1893                           
  1894                           ;main.c: 428: LATEbits.LATE0 = !LATEbits.LATE0;
  1895  000A18  B08D               	btfsc	3981,0,c	;volatile
  1896  000A1A  D003               	goto	u3340
  1897  000A1C  6A34               	clrf	??_fixLCD& (0+255),c
  1898  000A1E  2A34               	incf	??_fixLCD& (0+255),f,c
  1899  000A20  D001               	goto	u3358
  1900  000A22                     u3340:
  1901  000A22  6A34               	clrf	??_fixLCD& (0+255),c
  1902  000A24                     u3358:
  1903  000A24  508D               	movf	3981,w,c	;volatile
  1904  000A26  1834               	xorwf	??_fixLCD,w,c
  1905  000A28  0BFE               	andlw	-2
  1906  000A2A  1834               	xorwf	??_fixLCD,w,c
  1907  000A2C  6E8D               	movwf	3981,c	;volatile
  1908                           
  1909                           ;main.c: 429: LATEbits.LATE1 = !LATEbits.LATE1;
  1910  000A2E  B28D               	btfsc	3981,1,c	;volatile
  1911  000A30  D003               	goto	u3360
  1912  000A32  6A34               	clrf	??_fixLCD& (0+255),c
  1913  000A34  2A34               	incf	??_fixLCD& (0+255),f,c
  1914  000A36  D001               	goto	u3378
  1915  000A38                     u3360:
  1916  000A38  6A34               	clrf	??_fixLCD& (0+255),c
  1917  000A3A                     u3378:
  1918  000A3A  4634               	rlncf	??_fixLCD,f,c
  1919  000A3C  508D               	movf	3981,w,c	;volatile
  1920  000A3E  1834               	xorwf	??_fixLCD,w,c
  1921  000A40  0BFD               	andlw	-3
  1922  000A42  1834               	xorwf	??_fixLCD,w,c
  1923  000A44  6E8D               	movwf	3981,c	;volatile
  1924                           
  1925                           ;main.c: 430: j++;
  1926  000A46  4A3E               	infsnz	fixLCD@j,f,c
  1927  000A48  2A3F               	incf	fixLCD@j+1,f,c
  1928  000A4A                     l4455:
  1929  000A4A  BE3F               	btfsc	fixLCD@j+1,7,c
  1930  000A4C  D769               	goto	l4413
  1931  000A4E  503F               	movf	fixLCD@j+1,w,c
  1932  000A50  E105               	bnz	l295
  1933  000A52  0E0A               	movlw	10
  1934  000A54  5C3E               	subwf	fixLCD@j,w,c
  1935  000A56  B0D8               	btfsc	status,0,c
  1936  000A58  0012               	return	
  1937  000A5A  D762               	goto	l4413
  1938  000A5C                     l295:
  1939  000A5C  0012               	return		;funcret
  1940  000A5E                     __end_of_fixLCD:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           intcon	equ	0xFF2
  1949                           intcon3	equ	0xFF0
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           indf2	equ	0xFDF
  1953                           postinc2	equ	0xFDE
  1954                           postdec2	equ	0xFDD
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _initLCD *****************
  1960 ;; Defined at:
  1961 ;;		line 15 in file "lcd.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, status,0, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;Total ram usage:        1 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    3
  1982 ;; This function calls:
  1983 ;;		_lcdInst
  1984 ;; This function is called by:
  1985 ;;		_fixLCD
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text5
  1991  0014CC                     __ptext5:
  1992                           	opt stack 0
  1993  0014CC                     _initLCD:
  1994                           	opt stack 27
  1995                           
  1996                           ;lcd.c: 16: _delay((unsigned long)((15)*(10000000/4000.0)));
  1997                           
  1998                           ;incstack = 0
  1999  0014CC  0E31               	movlw	49
  2000  0014CE  6E13               	movwf	??_initLCD& (0+255),c
  2001  0014D0  0EB2               	movlw	178
  2002  0014D2                     u3427:
  2003  0014D2  2EE8               	decfsz	wreg,f,c
  2004  0014D4  D7FE               	bra	u3427
  2005  0014D6  2E13               	decfsz	??_initLCD& (0+255),f,c
  2006  0014D8  D7FC               	bra	u3427
  2007  0014DA  D000               	nop2	
  2008                           
  2009                           ;lcd.c: 17: lcdInst(0b00110011);
  2010  0014DC  0E33               	movlw	51
  2011  0014DE  EC29  F00C         	call	_lcdInst
  2012                           
  2013                           ;lcd.c: 18: lcdInst(0b00110010);
  2014  0014E2  0E32               	movlw	50
  2015  0014E4  EC29  F00C         	call	_lcdInst
  2016                           
  2017                           ;lcd.c: 19: lcdInst(0b00101000);
  2018  0014E8  0E28               	movlw	40
  2019  0014EA  EC29  F00C         	call	_lcdInst
  2020                           
  2021                           ;lcd.c: 20: lcdInst(0b00001111);
  2022  0014EE  0E0F               	movlw	15
  2023  0014F0  EC29  F00C         	call	_lcdInst
  2024                           
  2025                           ;lcd.c: 21: lcdInst(0b00000110);
  2026  0014F4  0E06               	movlw	6
  2027  0014F6  EC29  F00C         	call	_lcdInst
  2028                           
  2029                           ;lcd.c: 22: lcdInst(0b00000001);
  2030  0014FA  0E01               	movlw	1
  2031  0014FC  EC29  F00C         	call	_lcdInst
  2032                           
  2033                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2034  001500  0E31               	movlw	49
  2035  001502  6E13               	movwf	??_initLCD& (0+255),c
  2036  001504  0EB2               	movlw	178
  2037  001506                     u3437:
  2038  001506  2EE8               	decfsz	wreg,f,c
  2039  001508  D7FE               	bra	u3437
  2040  00150A  2E13               	decfsz	??_initLCD& (0+255),f,c
  2041  00150C  D7FC               	bra	u3437
  2042  00150E  D000               	nop2	
  2043  001510  0012               	return		;funcret
  2044  001512                     __end_of_initLCD:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           intcon3	equ	0xFF0
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           indf2	equ	0xFDF
  2057                           postinc2	equ	0xFDE
  2058                           postdec2	equ	0xFDD
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _I2C_Master_Init *****************
  2064 ;; Defined at:
  2065 ;;		line 13 in file "I2C.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  c               4   28[COMRAM] const unsigned long 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        8 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    2
  2086 ;; This function calls:
  2087 ;;		___lldiv
  2088 ;; This function is called by:
  2089 ;;		_fixLCD
  2090 ;;		_main
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text6
  2095  001254                     __ptext6:
  2096                           	opt stack 0
  2097  001254                     _I2C_Master_Init:
  2098                           	opt stack 27
  2099                           
  2100                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  2101                           
  2102                           ;incstack = 0
  2103  001254  0E00               	movlw	0
  2104  001256  6EC7               	movwf	4039,c	;volatile
  2105                           
  2106                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  2107  001258  0E28               	movlw	40
  2108  00125A  6EC6               	movwf	4038,c	;volatile
  2109                           
  2110                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  2111  00125C  0E00               	movlw	0
  2112  00125E  6EC5               	movwf	4037,c	;volatile
  2113                           
  2114                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  2115  001260  0E80               	movlw	128
  2116  001262  6E10               	movwf	___lldiv@dividend,c
  2117  001264  0E96               	movlw	150
  2118  001266  6E11               	movwf	___lldiv@dividend+1,c
  2119  001268  0E98               	movlw	152
  2120  00126A  6E12               	movwf	___lldiv@dividend+2,c
  2121  00126C  0E00               	movlw	0
  2122  00126E  6E13               	movwf	___lldiv@dividend+3,c
  2123  001270  C01D  F021         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2124  001274  C01E  F022         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2125  001278  C01F  F023         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2126  00127C  C020  F024         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2127  001280  0E02               	movlw	2
  2128  001282                     u1695:
  2129  001282  90D8               	bcf	status,0,c
  2130  001284  3621               	rlcf	??_I2C_Master_Init,f,c
  2131  001286  3622               	rlcf	??_I2C_Master_Init+1,f,c
  2132  001288  3623               	rlcf	??_I2C_Master_Init+2,f,c
  2133  00128A  3624               	rlcf	??_I2C_Master_Init+3,f,c
  2134  00128C  2EE8               	decfsz	wreg,f,c
  2135  00128E  D7F9               	goto	u1695
  2136  001290  C021  F014         	movff	??_I2C_Master_Init,___lldiv@divisor
  2137  001294  C022  F015         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2138  001298  C023  F016         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2139  00129C  C024  F017         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2140  0012A0  EC80  F008         	call	___lldiv	;wreg free
  2141  0012A4  0410               	decf	?___lldiv,w,c
  2142  0012A6  6EC8               	movwf	4040,c	;volatile
  2143                           
  2144                           ;I2C.c: 20: TRISC3 = 1;
  2145  0012A8  8694               	bsf	3988,3,c	;volatile
  2146                           
  2147                           ;I2C.c: 21: TRISC4 = 1;
  2148  0012AA  8894               	bsf	3988,4,c	;volatile
  2149  0012AC  0012               	return		;funcret
  2150  0012AE                     __end_of_I2C_Master_Init:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           prodh	equ	0xFF4
  2157                           prodl	equ	0xFF3
  2158                           intcon	equ	0xFF2
  2159                           intcon3	equ	0xFF0
  2160                           postinc0	equ	0xFEE
  2161                           wreg	equ	0xFE8
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function ___lldiv *****************
  2170 ;; Defined at:
  2171 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  dividend        4   15[COMRAM] unsigned long 
  2174 ;;  divisor         4   19[COMRAM] unsigned long 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  quotient        4   23[COMRAM] unsigned long 
  2177 ;;  counter         1   27[COMRAM] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  4   15[COMRAM] unsigned long 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2, status,0
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2187 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;Total ram usage:       13 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    1
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_I2C_Master_Init
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text7
  2202  001100                     __ptext7:
  2203                           	opt stack 0
  2204  001100                     ___lldiv:
  2205                           	opt stack 27
  2206                           
  2207                           ;incstack = 0
  2208  001100  0E00               	movlw	0
  2209  001102  6E18               	movwf	___lldiv@quotient,c
  2210  001104  0E00               	movlw	0
  2211  001106  6E19               	movwf	___lldiv@quotient+1,c
  2212  001108  0E00               	movlw	0
  2213  00110A  6E1A               	movwf	___lldiv@quotient+2,c
  2214  00110C  0E00               	movlw	0
  2215  00110E  6E1B               	movwf	___lldiv@quotient+3,c
  2216  001110  5014               	movf	___lldiv@divisor,w,c
  2217  001112  1015               	iorwf	___lldiv@divisor+1,w,c
  2218  001114  1016               	iorwf	___lldiv@divisor+2,w,c
  2219  001116  1017               	iorwf	___lldiv@divisor+3,w,c
  2220  001118  B4D8               	btfsc	status,2,c
  2221  00111A  D02A               	goto	l965
  2222  00111C  0E01               	movlw	1
  2223  00111E  6E1C               	movwf	___lldiv@counter,c
  2224  001120  D006               	goto	l2707
  2225  001122                     l2705:
  2226  001122  90D8               	bcf	status,0,c
  2227  001124  3614               	rlcf	___lldiv@divisor,f,c
  2228  001126  3615               	rlcf	___lldiv@divisor+1,f,c
  2229  001128  3616               	rlcf	___lldiv@divisor+2,f,c
  2230  00112A  3617               	rlcf	___lldiv@divisor+3,f,c
  2231  00112C  2A1C               	incf	___lldiv@counter,f,c
  2232  00112E                     l2707:
  2233  00112E  AE17               	btfss	___lldiv@divisor+3,7,c
  2234  001130  D7F8               	goto	l2705
  2235  001132                     l2709:
  2236  001132  90D8               	bcf	status,0,c
  2237  001134  3618               	rlcf	___lldiv@quotient,f,c
  2238  001136  3619               	rlcf	___lldiv@quotient+1,f,c
  2239  001138  361A               	rlcf	___lldiv@quotient+2,f,c
  2240  00113A  361B               	rlcf	___lldiv@quotient+3,f,c
  2241  00113C  5014               	movf	___lldiv@divisor,w,c
  2242  00113E  5C10               	subwf	___lldiv@dividend,w,c
  2243  001140  5015               	movf	___lldiv@divisor+1,w,c
  2244  001142  5811               	subwfb	___lldiv@dividend+1,w,c
  2245  001144  5016               	movf	___lldiv@divisor+2,w,c
  2246  001146  5812               	subwfb	___lldiv@dividend+2,w,c
  2247  001148  5017               	movf	___lldiv@divisor+3,w,c
  2248  00114A  5813               	subwfb	___lldiv@dividend+3,w,c
  2249  00114C  A0D8               	btfss	status,0,c
  2250  00114E  D009               	goto	l2717
  2251  001150  5014               	movf	___lldiv@divisor,w,c
  2252  001152  5E10               	subwf	___lldiv@dividend,f,c
  2253  001154  5015               	movf	___lldiv@divisor+1,w,c
  2254  001156  5A11               	subwfb	___lldiv@dividend+1,f,c
  2255  001158  5016               	movf	___lldiv@divisor+2,w,c
  2256  00115A  5A12               	subwfb	___lldiv@dividend+2,f,c
  2257  00115C  5017               	movf	___lldiv@divisor+3,w,c
  2258  00115E  5A13               	subwfb	___lldiv@dividend+3,f,c
  2259  001160  8018               	bsf	___lldiv@quotient,0,c
  2260  001162                     l2717:
  2261  001162  90D8               	bcf	status,0,c
  2262  001164  3217               	rrcf	___lldiv@divisor+3,f,c
  2263  001166  3216               	rrcf	___lldiv@divisor+2,f,c
  2264  001168  3215               	rrcf	___lldiv@divisor+1,f,c
  2265  00116A  3214               	rrcf	___lldiv@divisor,f,c
  2266  00116C  2E1C               	decfsz	___lldiv@counter,f,c
  2267  00116E  D7E1               	goto	l2709
  2268  001170                     l965:
  2269  001170  C018  F010         	movff	___lldiv@quotient,?___lldiv
  2270  001174  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  2271  001178  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  2272  00117C  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  2273  001180  0012               	return		;funcret
  2274  001182                     __end_of___lldiv:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           intcon	equ	0xFF2
  2283                           intcon3	equ	0xFF0
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           indf2	equ	0xFDF
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _finishState *****************
  2294 ;; Defined at:
  2295 ;;		line 311 in file "main.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  keypress        2   53[COMRAM] int 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:        4 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		_readKey
  2318 ;;		_update_lcd
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text8
  2325  0015D2                     __ptext8:
  2326                           	opt stack 0
  2327  0015D2                     _finishState:
  2328                           	opt stack 25
  2329                           
  2330                           ;main.c: 313: (INTCONbits.GIE = 0);
  2331                           
  2332                           ;incstack = 0
  2333  0015D2  9EF2               	bcf	intcon,7,c	;volatile
  2334                           
  2335                           ;main.c: 314: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2336  0015D4  0E0D               	movlw	13
  2337  0015D6  6E35               	movwf	(??_finishState+1)& (0+255),c
  2338  0015D8  0EAF               	movlw	175
  2339  0015DA  6E34               	movwf	??_finishState& (0+255),c
  2340  0015DC  0EB6               	movlw	182
  2341  0015DE                     u3447:
  2342  0015DE  2EE8               	decfsz	wreg,f,c
  2343  0015E0  D7FE               	bra	u3447
  2344  0015E2  2E34               	decfsz	??_finishState& (0+255),f,c
  2345  0015E4  D7FC               	bra	u3447
  2346  0015E6  2E35               	decfsz	(??_finishState+1)& (0+255),f,c
  2347  0015E8  D7FA               	bra	u3447
  2348  0015EA  D000               	nop2	
  2349                           
  2350                           ;main.c: 315: update_lcd();
  2351  0015EC  ECD4  F005         	call	_update_lcd	;wreg free
  2352                           
  2353                           ;main.c: 316: LATBbits.LATB0 = 0;
  2354  0015F0  908A               	bcf	3978,0,c	;volatile
  2355                           
  2356                           ;main.c: 317: LATCbits.LATC6 = 0;
  2357  0015F2  9C8B               	bcf	3979,6,c	;volatile
  2358  0015F4                     l4349:
  2359                           
  2360                           ;main.c: 319: int keypress = readKey();
  2361  0015F4  EC42  F00A         	call	_readKey	;wreg free
  2362  0015F8  C010  F036         	movff	?_readKey,finishState@keypress
  2363  0015FC  C011  F037         	movff	?_readKey+1,finishState@keypress+1
  2364                           
  2365                           ;main.c: 320: if(keypress == 0b1101){
  2366  001600  0E0D               	movlw	13
  2367  001602  1836               	xorwf	finishState@keypress,w,c
  2368  001604  1037               	iorwf	finishState@keypress+1,w,c
  2369  001606  A4D8               	btfss	status,2,c
  2370  001608  D7F5               	goto	l4349
  2371                           
  2372                           ;main.c: 321: state = MAIN;
  2373  00160A  0E00               	movlw	0
  2374  00160C  6E4B               	movwf	_state,c
  2375                           
  2376                           ;main.c: 322: return;
  2377  00160E  0012               	return	
  2378  001610                     __end_of_finishState:
  2379                           	opt stack 0
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           intcon3	equ	0xFF0
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           indf2	equ	0xFDF
  2391                           postinc2	equ	0xFDE
  2392                           postdec2	equ	0xFDD
  2393                           fsr2h	equ	0xFDA
  2394                           fsr2l	equ	0xFD9
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _executingState *****************
  2398 ;; Defined at:
  2399 ;;		line 151 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  hasTab          2   30[BANK0 ] int 
  2404 ;;  hasLabel        2   34[BANK0 ] int 
  2405 ;;  res             8   20[BANK0 ] int [4]
  2406 ;;  emptyCount      2   44[BANK0 ] int 
  2407 ;;  alInSensor      2   42[BANK0 ] int 
  2408 ;;  snInSensor      2   40[BANK0 ] int 
  2409 ;;  alLoaded        2   38[BANK0 ] int 
  2410 ;;  snLoaded        2   36[BANK0 ] int 
  2411 ;;  timedif         2   32[BANK0 ] int 
  2412 ;;  start_s         2   28[BANK0 ] int 
  2413 ;;  s_one           2   14[BANK0 ] int 
  2414 ;;  s_ten           2   12[BANK0 ] int 
  2415 ;;  m_one           2   10[BANK0 ] int 
  2416 ;;  m_ten           2    8[BANK0 ] int 
  2417 ;;  h_one           2    6[BANK0 ] int 
  2418 ;;  h_ten           2    4[BANK0 ] int 
  2419 ;;  runCanAl        2    2[BANK0 ] int 
  2420 ;;  runCanSn        2    0[BANK0 ] int 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Locals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;      Totals:         3      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;Total ram usage:       49 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    5
  2437 ;; This function calls:
  2438 ;;		___wmul
  2439 ;;		_dispenseAlCan
  2440 ;;		_dispenseSnCan
  2441 ;;		_eeprom_LogResult
  2442 ;;		_get_time
  2443 ;;		_get_timeDif
  2444 ;;		_lcdInst
  2445 ;;		_printf
  2446 ;;		_readAlBot
  2447 ;;		_readAlTop
  2448 ;;		_readSnBot
  2449 ;;		_readSnSensor
  2450 ;;		_readSnTop
  2451 ;;		_servoRotate0
  2452 ;;		_servoRotate1
  2453 ;;		_servoRotate2
  2454 ;;		_servoRotate4
  2455 ;;		_servoRotate90
  2456 ;;		_servoRotate90n
  2457 ;;		_servoRotateArm
  2458 ;;		_update_lcd
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text9
  2465  000012                     __ptext9:
  2466                           	opt stack 0
  2467  000012                     _executingState:
  2468                           	opt stack 25
  2469                           
  2470                           ;main.c: 157: int runCanSn, runCanAl;
  2471                           ;main.c: 158: runCanSn = 0;
  2472                           
  2473                           ;incstack = 0
  2474  000012  0E00               	movlw	0
  2475  000014  0100               	movlb	0	; () banked
  2476  000016  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2477  000018  0E00               	movlw	0
  2478  00001A  6F80               	movwf	executingState@runCanSn& (0+255),b
  2479                           
  2480                           ;main.c: 159: runCanAl = 0;
  2481  00001C  0E00               	movlw	0
  2482  00001E  0100               	movlb	0	; () banked
  2483  000020  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2484  000022  0E00               	movlw	0
  2485  000024  6F82               	movwf	executingState@runCanAl& (0+255),b
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;main.c: 161: get_time(starttime);
  2489  000026  0EAE               	movlw	low _starttime
  2490  000028  6E13               	movwf	get_time@time,c
  2491  00002A  0E00               	movlw	high _starttime
  2492  00002C  6E14               	movwf	get_time@time+1,c
  2493  00002E  EC3D  F008         	call	_get_time	;wreg free
  2494                           
  2495                           ;main.c: 162: int h_ten = (starttime[2] & 0b11110000)>>4;
  2496  000032  EE20  F0B2         	lfsr	2,_starttime+4
  2497  000036  CFDE F034          	movff	postinc2,??_executingState
  2498  00003A  CFDD F035          	movff	postdec2,??_executingState+1
  2499  00003E  0E04               	movlw	4
  2500  000040  6E36               	movwf	(??_executingState+2)& (0+255),c
  2501  000042                     u3005:
  2502  000042  3435               	rlcf	??_executingState+1,w,c
  2503  000044  3235               	rrcf	??_executingState+1,f,c
  2504  000046  3234               	rrcf	??_executingState,f,c
  2505  000048  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2506  00004A  D7FB               	goto	u3005
  2507  00004C  0E0F               	movlw	15
  2508  00004E  1434               	andwf	??_executingState,w,c
  2509  000050  0100               	movlb	0	; () banked
  2510  000052  6F84               	movwf	executingState@h_ten& (0+255),b
  2511  000054  0100               	movlb	0	; () banked
  2512  000056  6B85               	clrf	(executingState@h_ten+1)& (0+255),b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;main.c: 163: int h_one = (starttime[2] & 0b00001111);
  2516  000058  0E0F               	movlw	15
  2517  00005A  0100               	movlb	0	; () banked
  2518  00005C  15B2               	andwf	(_starttime+4)& (0+255),w,b
  2519  00005E  0100               	movlb	0	; () banked
  2520  000060  6F86               	movwf	executingState@h_one& (0+255),b
  2521  000062  0100               	movlb	0	; () banked
  2522  000064  6B87               	clrf	(executingState@h_one+1)& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;main.c: 164: int m_ten = (starttime[1] & 0b11110000)>>4;
  2526  000066  EE20  F0B0         	lfsr	2,_starttime+2
  2527  00006A  CFDE F034          	movff	postinc2,??_executingState
  2528  00006E  CFDD F035          	movff	postdec2,??_executingState+1
  2529  000072  0E04               	movlw	4
  2530  000074  6E36               	movwf	(??_executingState+2)& (0+255),c
  2531  000076                     u3015:
  2532  000076  3435               	rlcf	??_executingState+1,w,c
  2533  000078  3235               	rrcf	??_executingState+1,f,c
  2534  00007A  3234               	rrcf	??_executingState,f,c
  2535  00007C  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2536  00007E  D7FB               	goto	u3015
  2537  000080  0E0F               	movlw	15
  2538  000082  1434               	andwf	??_executingState,w,c
  2539  000084  0100               	movlb	0	; () banked
  2540  000086  6F88               	movwf	executingState@m_ten& (0+255),b
  2541  000088  0100               	movlb	0	; () banked
  2542  00008A  6B89               	clrf	(executingState@m_ten+1)& (0+255),b
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 165: int m_one = (starttime[1] & 0b00001111);
  2546  00008C  0E0F               	movlw	15
  2547  00008E  0100               	movlb	0	; () banked
  2548  000090  15B0               	andwf	(_starttime+2)& (0+255),w,b
  2549  000092  0100               	movlb	0	; () banked
  2550  000094  6F8A               	movwf	executingState@m_one& (0+255),b
  2551  000096  0100               	movlb	0	; () banked
  2552  000098  6B8B               	clrf	(executingState@m_one+1)& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 166: int s_ten = (starttime[0] & 0b11110000)>>4;
  2556  00009A  C0AE  F034         	movff	_starttime,??_executingState
  2557  00009E  C0AF  F035         	movff	_starttime+1,??_executingState+1
  2558  0000A2  0E04               	movlw	4
  2559  0000A4  6E36               	movwf	(??_executingState+2)& (0+255),c
  2560  0000A6                     u3025:
  2561  0000A6  3435               	rlcf	??_executingState+1,w,c
  2562  0000A8  3235               	rrcf	??_executingState+1,f,c
  2563  0000AA  3234               	rrcf	??_executingState,f,c
  2564  0000AC  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2565  0000AE  D7FB               	goto	u3025
  2566  0000B0  0E0F               	movlw	15
  2567  0000B2  1434               	andwf	??_executingState,w,c
  2568  0000B4  0100               	movlb	0	; () banked
  2569  0000B6  6F8C               	movwf	executingState@s_ten& (0+255),b
  2570  0000B8  0100               	movlb	0	; () banked
  2571  0000BA  6B8D               	clrf	(executingState@s_ten+1)& (0+255),b
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 167: int s_one = (starttime[0] & 0b00001111);
  2575  0000BC  0E0F               	movlw	15
  2576  0000BE  0100               	movlb	0	; () banked
  2577  0000C0  15AE               	andwf	_starttime& (0+255),w,b
  2578  0000C2  0100               	movlb	0	; () banked
  2579  0000C4  6F8E               	movwf	executingState@s_one& (0+255),b
  2580  0000C6  0100               	movlb	0	; () banked
  2581  0000C8  6B8F               	clrf	(executingState@s_one+1)& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 168: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2585  0000CA  C088  F010         	movff	executingState@m_ten,___wmul@multiplier
  2586  0000CE  C089  F011         	movff	executingState@m_ten+1,___wmul@multiplier+1
  2587  0000D2  0E00               	movlw	0
  2588  0000D4  6E13               	movwf	___wmul@multiplicand+1,c
  2589  0000D6  0E0A               	movlw	10
  2590  0000D8  6E12               	movwf	___wmul@multiplicand,c
  2591  0000DA  EC9C  F00B         	call	___wmul	;wreg free
  2592  0000DE  0100               	movlb	0	; () banked
  2593  0000E0  518A               	movf	executingState@m_one& (0+255),w,b
  2594  0000E2  2410               	addwf	?___wmul,w,c
  2595  0000E4  0100               	movlb	0	; () banked
  2596  0000E6  6F90               	movwf	_executingState$1736& (0+255),b
  2597  0000E8  0100               	movlb	0	; () banked
  2598  0000EA  518B               	movf	(executingState@m_one+1)& (0+255),w,b
  2599  0000EC  2011               	addwfc	?___wmul+1,w,c
  2600  0000EE  0100               	movlb	0	; () banked
  2601  0000F0  6F91               	movwf	(_executingState$1736+1)& (0+255),b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;main.c: 168: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2605  0000F2  C084  F010         	movff	executingState@h_ten,___wmul@multiplier
  2606  0000F6  C085  F011         	movff	executingState@h_ten+1,___wmul@multiplier+1
  2607  0000FA  0E00               	movlw	0
  2608  0000FC  6E13               	movwf	___wmul@multiplicand+1,c
  2609  0000FE  0E0A               	movlw	10
  2610  000100  6E12               	movwf	___wmul@multiplicand,c
  2611  000102  EC9C  F00B         	call	___wmul	;wreg free
  2612  000106  0100               	movlb	0	; () banked
  2613  000108  5186               	movf	executingState@h_one& (0+255),w,b
  2614  00010A  2410               	addwf	?___wmul,w,c
  2615  00010C  0100               	movlb	0	; () banked
  2616  00010E  6F92               	movwf	_executingState$1737& (0+255),b
  2617  000110  0100               	movlb	0	; () banked
  2618  000112  5187               	movf	(executingState@h_one+1)& (0+255),w,b
  2619  000114  2011               	addwfc	?___wmul+1,w,c
  2620  000116  0100               	movlb	0	; () banked
  2621  000118  6F93               	movwf	(_executingState$1737+1)& (0+255),b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 168: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2625  00011A  C08C  F010         	movff	executingState@s_ten,___wmul@multiplier
  2626  00011E  C08D  F011         	movff	executingState@s_ten+1,___wmul@multiplier+1
  2627  000122  0E00               	movlw	0
  2628  000124  6E13               	movwf	___wmul@multiplicand+1,c
  2629  000126  0E0A               	movlw	10
  2630  000128  6E12               	movwf	___wmul@multiplicand,c
  2631  00012A  EC9C  F00B         	call	___wmul	;wreg free
  2632  00012E  C010  F034         	movff	?___wmul,??_executingState
  2633  000132  C011  F035         	movff	?___wmul+1,??_executingState+1
  2634  000136  C092  F010         	movff	_executingState$1737,___wmul@multiplier
  2635  00013A  C093  F011         	movff	_executingState$1737+1,___wmul@multiplier+1
  2636  00013E  0E0E               	movlw	14
  2637  000140  6E13               	movwf	___wmul@multiplicand+1,c
  2638  000142  0E10               	movlw	16
  2639  000144  6E12               	movwf	___wmul@multiplicand,c
  2640  000146  EC9C  F00B         	call	___wmul	;wreg free
  2641  00014A  5010               	movf	?___wmul,w,c
  2642  00014C  2634               	addwf	??_executingState,f,c
  2643  00014E  5011               	movf	?___wmul+1,w,c
  2644  000150  2235               	addwfc	??_executingState+1,f,c
  2645  000152  C090  F010         	movff	_executingState$1736,___wmul@multiplier
  2646  000156  C091  F011         	movff	_executingState$1736+1,___wmul@multiplier+1
  2647  00015A  0E00               	movlw	0
  2648  00015C  6E13               	movwf	___wmul@multiplicand+1,c
  2649  00015E  0E3C               	movlw	60
  2650  000160  6E12               	movwf	___wmul@multiplicand,c
  2651  000162  EC9C  F00B         	call	___wmul	;wreg free
  2652  000166  5010               	movf	?___wmul,w,c
  2653  000168  2634               	addwf	??_executingState,f,c
  2654  00016A  5011               	movf	?___wmul+1,w,c
  2655  00016C  2235               	addwfc	??_executingState+1,f,c
  2656  00016E  0100               	movlb	0	; () banked
  2657  000170  518E               	movf	executingState@s_one& (0+255),w,b
  2658  000172  2434               	addwf	??_executingState,w,c
  2659  000174  0100               	movlb	0	; () banked
  2660  000176  6F9C               	movwf	executingState@start_s& (0+255),b
  2661  000178  0100               	movlb	0	; () banked
  2662  00017A  518F               	movf	(executingState@s_one+1)& (0+255),w,b
  2663  00017C  2035               	addwfc	??_executingState+1,w,c
  2664  00017E  0100               	movlb	0	; () banked
  2665  000180  6F9D               	movwf	(executingState@start_s+1)& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;main.c: 170: lcdInst(0b10000000);;
  2669  000182  0E80               	movlw	128
  2670  000184  EC29  F00C         	call	_lcdInst
  2671                           
  2672                           ;main.c: 171: printf("initializing    ");
  2673  000188  0E8C               	movlw	low STR_12
  2674  00018A  6E1C               	movwf	printf@f,c
  2675  00018C  0EFF               	movlw	high STR_12
  2676  00018E  6E1D               	movwf	printf@f+1,c
  2677  000190  ECD0  F002         	call	_printf	;wreg free
  2678                           
  2679                           ;main.c: 172: lcdInst(0b11000000);;
  2680  000194  0EC0               	movlw	192
  2681  000196  EC29  F00C         	call	_lcdInst
  2682                           
  2683                           ;main.c: 173: printf("                ");
  2684  00019A  0E37               	movlw	low STR_13
  2685  00019C  6E1C               	movwf	printf@f,c
  2686  00019E  0EFF               	movlw	high STR_13
  2687  0001A0  6E1D               	movwf	printf@f+1,c
  2688  0001A2  ECD0  F002         	call	_printf	;wreg free
  2689                           
  2690                           ;main.c: 177: LATBbits.LATB0 = 1;
  2691  0001A6  808A               	bsf	3978,0,c	;volatile
  2692                           
  2693                           ;main.c: 178: _delay((unsigned long)((300)*(10000000/4000.0)));
  2694  0001A8  0E04               	movlw	4
  2695  0001AA  6E35               	movwf	(??_executingState+1)& (0+255),c
  2696  0001AC  0ECF               	movlw	207
  2697  0001AE  6E34               	movwf	??_executingState& (0+255),c
  2698  0001B0  0E02               	movlw	2
  2699  0001B2                     u3457:
  2700  0001B2  2EE8               	decfsz	wreg,f,c
  2701  0001B4  D7FE               	bra	u3457
  2702  0001B6  2E34               	decfsz	??_executingState& (0+255),f,c
  2703  0001B8  D7FC               	bra	u3457
  2704  0001BA  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2705  0001BC  D7FA               	bra	u3457
  2706                           
  2707                           ;main.c: 179: LATCbits.LATC6 = 1;
  2708  0001BE  8C8B               	bsf	3979,6,c	;volatile
  2709                           
  2710                           ;main.c: 181: servoRotate90n(4);
  2711  0001C0  0E00               	movlw	0
  2712  0001C2  6E11               	movwf	servoRotate90n@servo+1,c
  2713  0001C4  0E04               	movlw	4
  2714  0001C6  6E10               	movwf	servoRotate90n@servo,c
  2715  0001C8  EC34  F007         	call	_servoRotate90n	;wreg free
  2716                           
  2717                           ;main.c: 182: servoRotate2(1);
  2718  0001CC  0E00               	movlw	0
  2719  0001CE  6E11               	movwf	servoRotate2@angle+1,c
  2720  0001D0  0E01               	movlw	1
  2721  0001D2  6E10               	movwf	servoRotate2@angle,c
  2722  0001D4  ECAA  F00A         	call	_servoRotate2	;wreg free
  2723                           
  2724                           ;main.c: 183: servoRotate0(2);
  2725  0001D8  0E00               	movlw	0
  2726  0001DA  6E11               	movwf	servoRotate0@servo+1,c
  2727  0001DC  0E02               	movlw	2
  2728  0001DE  6E10               	movwf	servoRotate0@servo,c
  2729  0001E0  EC70  F006         	call	_servoRotate0	;wreg free
  2730                           
  2731                           ;main.c: 184: servoRotate1(0);
  2732  0001E4  0E00               	movlw	0
  2733  0001E6  6E11               	movwf	servoRotate1@angle+1,c
  2734  0001E8  0E00               	movlw	0
  2735  0001EA  6E10               	movwf	servoRotate1@angle,c
  2736  0001EC  EC27  F00B         	call	_servoRotate1	;wreg free
  2737                           
  2738                           ;main.c: 185: servoRotate4(3);
  2739  0001F0  0E00               	movlw	0
  2740  0001F2  6E11               	movwf	servoRotate4@angle+1,c
  2741  0001F4  0E03               	movlw	3
  2742  0001F6  6E10               	movwf	servoRotate4@angle,c
  2743  0001F8  EC08  F00B         	call	_servoRotate4	;wreg free
  2744                           
  2745                           ;main.c: 186: (INTCONbits.GIE = 0);
  2746  0001FC  9EF2               	bcf	intcon,7,c	;volatile
  2747                           
  2748                           ;main.c: 187: update_lcd();
  2749  0001FE  ECD4  F005         	call	_update_lcd	;wreg free
  2750                           
  2751                           ;main.c: 188: int timedif = get_timeDif(start_s);
  2752  000202  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  2753  000206  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  2754  00020A  EC2F  F005         	call	_get_timeDif	;wreg free
  2755  00020E  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  2756  000212  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  2757                           
  2758                           ;main.c: 191: int emptyCount;
  2759                           ;main.c: 193: int snLoaded, alLoaded, snInSensor, alInSensor;
  2760                           ;main.c: 194: snLoaded = 1;
  2761  000216  0E00               	movlw	0
  2762  000218  0100               	movlb	0	; () banked
  2763  00021A  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2764  00021C  0E01               	movlw	1
  2765  00021E  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 195: alLoaded = 1;
  2769  000220  0E00               	movlw	0
  2770  000222  0100               	movlb	0	; () banked
  2771  000224  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2772  000226  0E01               	movlw	1
  2773  000228  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 196: snInSensor = 1;
  2777  00022A  0E00               	movlw	0
  2778  00022C  0100               	movlb	0	; () banked
  2779  00022E  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2780  000230  0E01               	movlw	1
  2781  000232  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 197: alInSensor = 1;
  2785  000234  0E00               	movlw	0
  2786  000236  0100               	movlb	0	; () banked
  2787  000238  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2788  00023A  0E01               	movlw	1
  2789  00023C  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 198: emptyCount = 0;
  2793  00023E  0E00               	movlw	0
  2794  000240  0100               	movlb	0	; () banked
  2795  000242  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2796  000244  0E00               	movlw	0
  2797  000246  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2798                           
  2799                           ;main.c: 202: while(timedif < 180 && PORTBbits.RB0 == 1){
  2800  000248  D184               	goto	l4331
  2801  00024A                     l4199:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 203: update_lcd();
  2805  00024A  ECD4  F005         	call	_update_lcd	;wreg free
  2806                           
  2807                           ;main.c: 204: lcdInst(0b10000000);;
  2808  00024E  0E80               	movlw	128
  2809  000250  EC29  F00C         	call	_lcdInst
  2810                           
  2811                           ;main.c: 205: printf("Executing    %03d", emptyCount);
  2812  000254  0E14               	movlw	low STR_14
  2813  000256  6E1C               	movwf	printf@f,c
  2814  000258  0EFF               	movlw	high STR_14
  2815  00025A  6E1D               	movwf	printf@f+1,c
  2816  00025C  C0AC  F01E         	movff	executingState@emptyCount,?_printf+2
  2817  000260  C0AD  F01F         	movff	executingState@emptyCount+1,?_printf+3
  2818  000264  ECD0  F002         	call	_printf	;wreg free
  2819                           
  2820                           ;main.c: 208: if(readSnTop() == 0){
  2821  000268  ECCC  F00B         	call	_readSnTop	;wreg free
  2822  00026C  5010               	movf	?_readSnTop,w,c
  2823  00026E  1011               	iorwf	?_readSnTop+1,w,c
  2824  000270  A4D8               	btfss	status,2,c
  2825  000272  D005               	goto	l4207
  2826                           
  2827                           ;main.c: 209: snLoaded = 0;
  2828  000274  0E00               	movlw	0
  2829  000276  0100               	movlb	0	; () banked
  2830  000278  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2831  00027A  0E00               	movlw	0
  2832  00027C  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2833  00027E                     l4207:
  2834                           
  2835                           ;main.c: 210: }
  2836                           ;main.c: 211: if(readAlTop() == 0){
  2837  00027E  ECF0  F00B         	call	_readAlTop	;wreg free
  2838  000282  5010               	movf	?_readAlTop,w,c
  2839  000284  1011               	iorwf	?_readAlTop+1,w,c
  2840  000286  A4D8               	btfss	status,2,c
  2841  000288  D005               	goto	l4211
  2842                           
  2843                           ;main.c: 212: alLoaded = 0;
  2844  00028A  0E00               	movlw	0
  2845  00028C  0100               	movlb	0	; () banked
  2846  00028E  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2847  000290  0E00               	movlw	0
  2848  000292  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2849  000294                     l4211:
  2850                           
  2851                           ;main.c: 213: }
  2852                           ;main.c: 214: if(readSnBot() == 0){
  2853  000294  ECE4  F00B         	call	_readSnBot	;wreg free
  2854  000298  5010               	movf	?_readSnBot,w,c
  2855  00029A  1011               	iorwf	?_readSnBot+1,w,c
  2856  00029C  A4D8               	btfss	status,2,c
  2857  00029E  D005               	goto	l4215
  2858                           
  2859                           ;main.c: 215: snInSensor = 0;
  2860  0002A0  0E00               	movlw	0
  2861  0002A2  0100               	movlb	0	; () banked
  2862  0002A4  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2863  0002A6  0E00               	movlw	0
  2864  0002A8  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2865  0002AA                     l4215:
  2866                           
  2867                           ;main.c: 216: }
  2868                           ;main.c: 217: if(readAlBot() == 0){
  2869  0002AA  ECFC  F00B         	call	_readAlBot	;wreg free
  2870  0002AE  5010               	movf	?_readAlBot,w,c
  2871  0002B0  1011               	iorwf	?_readAlBot+1,w,c
  2872  0002B2  A4D8               	btfss	status,2,c
  2873  0002B4  D005               	goto	l4219
  2874                           
  2875                           ;main.c: 218: alInSensor = 0;
  2876  0002B6  0E00               	movlw	0
  2877  0002B8  0100               	movlb	0	; () banked
  2878  0002BA  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2879  0002BC  0E00               	movlw	0
  2880  0002BE  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2881  0002C0                     l4219:
  2882                           
  2883                           ;main.c: 219: }
  2884                           ;main.c: 221: if(snLoaded == 0){
  2885  0002C0  0100               	movlb	0	; () banked
  2886  0002C2  51A4               	movf	executingState@snLoaded& (0+255),w,b
  2887  0002C4  0100               	movlb	0	; () banked
  2888  0002C6  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2889  0002C8  A4D8               	btfss	status,2,c
  2890  0002CA  D022               	goto	l4233
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;main.c: 222: emptyCount = 0;
  2894  0002CC  0E00               	movlw	0
  2895  0002CE  0100               	movlb	0	; () banked
  2896  0002D0  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2897  0002D2  0E00               	movlw	0
  2898  0002D4  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;main.c: 223: if(snInSensor == 1){
  2902  0002D6  0100               	movlb	0	; () banked
  2903  0002D8  05A8               	decf	executingState@snInSensor& (0+255),w,b
  2904  0002DA  0100               	movlb	0	; () banked
  2905  0002DC  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  2906  0002DE  A4D8               	btfss	status,2,c
  2907  0002E0  D017               	goto	l4233
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;main.c: 224: _delay((unsigned long)((400)*(10000000/4000.0)));
  2911  0002E2  0E06               	movlw	6
  2912  0002E4  6E35               	movwf	(??_executingState+1)& (0+255),c
  2913  0002E6  0E13               	movlw	19
  2914  0002E8  6E34               	movwf	??_executingState& (0+255),c
  2915  0002EA  0EAE               	movlw	174
  2916  0002EC                     u3467:
  2917  0002EC  2EE8               	decfsz	wreg,f,c
  2918  0002EE  D7FE               	bra	u3467
  2919  0002F0  2E34               	decfsz	??_executingState& (0+255),f,c
  2920  0002F2  D7FC               	bra	u3467
  2921  0002F4  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2922  0002F6  D7FA               	bra	u3467
  2923                           
  2924                           ;main.c: 225: dispenseSnCan();
  2925  0002F8  EC46  F00B         	call	_dispenseSnCan	;wreg free
  2926                           
  2927                           ;main.c: 226: runCanSn = 1;
  2928  0002FC  0E00               	movlw	0
  2929  0002FE  0100               	movlb	0	; () banked
  2930  000300  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2931  000302  0E01               	movlw	1
  2932  000304  6F80               	movwf	executingState@runCanSn& (0+255),b
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 227: snLoaded = 1;
  2936  000306  0E00               	movlw	0
  2937  000308  0100               	movlb	0	; () banked
  2938  00030A  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2939  00030C  0E01               	movlw	1
  2940  00030E  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2941  000310                     l4233:
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;main.c: 228: }
  2945                           ;main.c: 229: }
  2946                           ;main.c: 230: if(alLoaded == 0){
  2947  000310  0100               	movlb	0	; () banked
  2948  000312  51A6               	movf	executingState@alLoaded& (0+255),w,b
  2949  000314  0100               	movlb	0	; () banked
  2950  000316  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2951  000318  A4D8               	btfss	status,2,c
  2952  00031A  D022               	goto	l4247
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 231: emptyCount = 0;
  2956  00031C  0E00               	movlw	0
  2957  00031E  0100               	movlb	0	; () banked
  2958  000320  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2959  000322  0E00               	movlw	0
  2960  000324  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 232: if(alInSensor == 1){
  2964  000326  0100               	movlb	0	; () banked
  2965  000328  05AA               	decf	executingState@alInSensor& (0+255),w,b
  2966  00032A  0100               	movlb	0	; () banked
  2967  00032C  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  2968  00032E  A4D8               	btfss	status,2,c
  2969  000330  D017               	goto	l4247
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 233: _delay((unsigned long)((400)*(10000000/4000.0)));
  2973  000332  0E06               	movlw	6
  2974  000334  6E35               	movwf	(??_executingState+1)& (0+255),c
  2975  000336  0E13               	movlw	19
  2976  000338  6E34               	movwf	??_executingState& (0+255),c
  2977  00033A  0EAE               	movlw	174
  2978  00033C                     u3477:
  2979  00033C  2EE8               	decfsz	wreg,f,c
  2980  00033E  D7FE               	bra	u3477
  2981  000340  2E34               	decfsz	??_executingState& (0+255),f,c
  2982  000342  D7FC               	bra	u3477
  2983  000344  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2984  000346  D7FA               	bra	u3477
  2985                           
  2986                           ;main.c: 234: dispenseAlCan();
  2987  000348  EC5E  F00B         	call	_dispenseAlCan	;wreg free
  2988                           
  2989                           ;main.c: 235: runCanAl = 1;
  2990  00034C  0E00               	movlw	0
  2991  00034E  0100               	movlb	0	; () banked
  2992  000350  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2993  000352  0E01               	movlw	1
  2994  000354  6F82               	movwf	executingState@runCanAl& (0+255),b
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;main.c: 236: alLoaded = 1;
  2998  000356  0E00               	movlw	0
  2999  000358  0100               	movlb	0	; () banked
  3000  00035A  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  3001  00035C  0E01               	movlw	1
  3002  00035E  6FA6               	movwf	executingState@alLoaded& (0+255),b
  3003  000360                     l4247:
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;main.c: 237: }
  3007                           ;main.c: 238: }
  3008                           ;main.c: 240: if(snLoaded == 1 && alLoaded ==1){
  3009  000360  0100               	movlb	0	; () banked
  3010  000362  05A4               	decf	executingState@snLoaded& (0+255),w,b
  3011  000364  0100               	movlb	0	; () banked
  3012  000366  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  3013  000368  A4D8               	btfss	status,2,c
  3014  00036A  D009               	goto	l4253
  3015                           
  3016                           ; BSR set to: 0
  3017  00036C  0100               	movlb	0	; () banked
  3018  00036E  05A6               	decf	executingState@alLoaded& (0+255),w,b
  3019  000370  0100               	movlb	0	; () banked
  3020  000372  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  3021  000374  A4D8               	btfss	status,2,c
  3022  000376  D003               	goto	l4253
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;main.c: 241: emptyCount++;
  3026  000378  0100               	movlb	0	; () banked
  3027  00037A  4BAC               	infsnz	executingState@emptyCount& (0+255),f,b
  3028  00037C  2BAD               	incf	(executingState@emptyCount+1)& (0+255),f,b
  3029  00037E                     l4253:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;main.c: 242: }
  3033                           ;main.c: 245: if(snInSensor == 0){
  3034  00037E  0100               	movlb	0	; () banked
  3035  000380  51A8               	movf	executingState@snInSensor& (0+255),w,b
  3036  000382  0100               	movlb	0	; () banked
  3037  000384  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  3038  000386  A4D8               	btfss	status,2,c
  3039  000388  D058               	goto	l4283
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;main.c: 246: int hasLabel;
  3043                           ;main.c: 247: _delay((unsigned long)((800)*(10000000/4000.0)));
  3044  00038A  0E0B               	movlw	11
  3045  00038C  6E35               	movwf	(??_executingState+1)& (0+255),c
  3046  00038E  0E26               	movlw	38
  3047  000390  6E34               	movwf	??_executingState& (0+255),c
  3048  000392  0E5E               	movlw	94
  3049  000394                     u3487:
  3050  000394  2EE8               	decfsz	wreg,f,c
  3051  000396  D7FE               	bra	u3487
  3052  000398  2E34               	decfsz	??_executingState& (0+255),f,c
  3053  00039A  D7FC               	bra	u3487
  3054  00039C  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3055  00039E  D7FA               	bra	u3487
  3056                           
  3057                           ;main.c: 248: emptyCount = 0;
  3058  0003A0  0E00               	movlw	0
  3059  0003A2  0100               	movlb	0	; () banked
  3060  0003A4  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3061  0003A6  0E00               	movlw	0
  3062  0003A8  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;main.c: 249: if(readSnSensor() == 1){
  3066  0003AA  ECD8  F00B         	call	_readSnSensor	;wreg free
  3067  0003AE  0410               	decf	?_readSnSensor,w,c
  3068  0003B0  1011               	iorwf	?_readSnSensor+1,w,c
  3069  0003B2  A4D8               	btfss	status,2,c
  3070  0003B4  D005               	goto	l4263
  3071                           
  3072                           ;main.c: 250: hasLabel = 0;
  3073  0003B6  0E00               	movlw	0
  3074  0003B8  0100               	movlb	0	; () banked
  3075  0003BA  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3076  0003BC  0E00               	movlw	0
  3077  0003BE  D004               	goto	L2
  3078  0003C0                     l4263:
  3079                           
  3080                           ;main.c: 252: hasLabel = 1;
  3081  0003C0  0E00               	movlw	0
  3082  0003C2  0100               	movlb	0	; () banked
  3083  0003C4  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3084  0003C6  0E01               	movlw	1
  3085  0003C8                     L2:
  3086  0003C8  6FA2               	movwf	executingState@hasLabel& (0+255),b
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;main.c: 253: }
  3090                           ;main.c: 254: if(hasLabel == 0){
  3091                           
  3092                           ; BSR set to: 0
  3093  0003CA  0100               	movlb	0	; () banked
  3094  0003CC  51A2               	movf	executingState@hasLabel& (0+255),w,b
  3095  0003CE  0100               	movlb	0	; () banked
  3096  0003D0  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3097  0003D2  A4D8               	btfss	status,2,c
  3098  0003D4  D014               	goto	l4273
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 255: servoRotate90n(2);
  3102  0003D6  0E00               	movlw	0
  3103  0003D8  6E11               	movwf	servoRotate90n@servo+1,c
  3104  0003DA  0E02               	movlw	2
  3105  0003DC  6E10               	movwf	servoRotate90n@servo,c
  3106  0003DE  EC34  F007         	call	_servoRotate90n	;wreg free
  3107                           
  3108                           ;main.c: 256: servoRotate0(2);
  3109  0003E2  0E00               	movlw	0
  3110  0003E4  6E11               	movwf	servoRotate0@servo+1,c
  3111  0003E6  0E02               	movlw	2
  3112  0003E8  6E10               	movwf	servoRotate0@servo,c
  3113  0003EA  EC70  F006         	call	_servoRotate0	;wreg free
  3114                           
  3115                           ;main.c: 257: runCanSn = 0;
  3116  0003EE  0E00               	movlw	0
  3117  0003F0  0100               	movlb	0	; () banked
  3118  0003F2  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3119  0003F4  0E00               	movlw	0
  3120  0003F6  6F80               	movwf	executingState@runCanSn& (0+255),b
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;main.c: 258: snNoLabel++;
  3124  0003F8  4A49               	infsnz	_snNoLabel,f,c
  3125  0003FA  2A4A               	incf	_snNoLabel+1,f,c
  3126                           
  3127                           ;main.c: 259: }else if(hasLabel == 1){
  3128  0003FC  D019               	goto	l4281
  3129  0003FE                     l4273:
  3130                           
  3131                           ; BSR set to: 0
  3132  0003FE  0100               	movlb	0	; () banked
  3133  000400  05A2               	decf	executingState@hasLabel& (0+255),w,b
  3134  000402  0100               	movlb	0	; () banked
  3135  000404  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3136  000406  A4D8               	btfss	status,2,c
  3137  000408  D013               	goto	l4281
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;main.c: 260: servoRotate90(2);
  3141  00040A  0E00               	movlw	0
  3142  00040C  6E11               	movwf	servoRotate90@servo+1,c
  3143  00040E  0E02               	movlw	2
  3144  000410  6E10               	movwf	servoRotate90@servo,c
  3145  000412  ECD2  F006         	call	_servoRotate90	;wreg free
  3146                           
  3147                           ;main.c: 261: servoRotate0(2);
  3148  000416  0E00               	movlw	0
  3149  000418  6E11               	movwf	servoRotate0@servo+1,c
  3150  00041A  0E02               	movlw	2
  3151  00041C  6E10               	movwf	servoRotate0@servo,c
  3152  00041E  EC70  F006         	call	_servoRotate0	;wreg free
  3153                           
  3154                           ;main.c: 262: runCanSn = 0;
  3155  000422  0E00               	movlw	0
  3156  000424  0100               	movlb	0	; () banked
  3157  000426  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3158  000428  0E00               	movlw	0
  3159  00042A  6F80               	movwf	executingState@runCanSn& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;main.c: 263: snLabel++;
  3163  00042C  4A47               	infsnz	_snLabel,f,c
  3164  00042E  2A48               	incf	_snLabel+1,f,c
  3165  000430                     l4281:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;main.c: 264: }
  3169                           ;main.c: 265: snInSensor = 1;
  3170  000430  0E00               	movlw	0
  3171  000432  0100               	movlb	0	; () banked
  3172  000434  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  3173  000436  0E01               	movlw	1
  3174  000438  6FA8               	movwf	executingState@snInSensor& (0+255),b
  3175  00043A                     l4283:
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;main.c: 266: }
  3179                           ;main.c: 268: if(alInSensor == 0){
  3180  00043A  0100               	movlb	0	; () banked
  3181  00043C  51AA               	movf	executingState@alInSensor& (0+255),w,b
  3182  00043E  0100               	movlb	0	; () banked
  3183  000440  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3184  000442  A4D8               	btfss	status,2,c
  3185  000444  D04E               	goto	l4313
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 269: emptyCount = 0;
  3189  000446  0E00               	movlw	0
  3190  000448  0100               	movlb	0	; () banked
  3191  00044A  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3192  00044C  0E00               	movlw	0
  3193  00044E  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;main.c: 270: int hasTab;
  3197                           ;main.c: 271: _delay((unsigned long)((800)*(10000000/4000.0)));
  3198  000450  0E0B               	movlw	11
  3199  000452  6E35               	movwf	(??_executingState+1)& (0+255),c
  3200  000454  0E26               	movlw	38
  3201  000456  6E34               	movwf	??_executingState& (0+255),c
  3202  000458  0E5E               	movlw	94
  3203  00045A                     u3497:
  3204  00045A  2EE8               	decfsz	wreg,f,c
  3205  00045C  D7FE               	bra	u3497
  3206  00045E  2E34               	decfsz	??_executingState& (0+255),f,c
  3207  000460  D7FC               	bra	u3497
  3208  000462  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3209  000464  D7FA               	bra	u3497
  3210                           
  3211                           ;main.c: 272: hasTab = servoRotateArm();
  3212  000466  ECC1  F008         	call	_servoRotateArm	;wreg free
  3213  00046A  C010  F09E         	movff	?_servoRotateArm,executingState@hasTab
  3214  00046E  C011  F09F         	movff	?_servoRotateArm+1,executingState@hasTab+1
  3215                           
  3216                           ;main.c: 273: servoRotate90n(4);
  3217  000472  0E00               	movlw	0
  3218  000474  6E11               	movwf	servoRotate90n@servo+1,c
  3219  000476  0E04               	movlw	4
  3220  000478  6E10               	movwf	servoRotate90n@servo,c
  3221  00047A  EC34  F007         	call	_servoRotate90n	;wreg free
  3222                           
  3223                           ;main.c: 274: if(hasTab){
  3224  00047E  0100               	movlb	0	; () banked
  3225  000480  519E               	movf	executingState@hasTab& (0+255),w,b
  3226  000482  0100               	movlb	0	; () banked
  3227  000484  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3228  000486  B4D8               	btfsc	status,2,c
  3229  000488  D00E               	goto	l4301
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 275: servoRotate90n(3);
  3233  00048A  0E00               	movlw	0
  3234  00048C  6E11               	movwf	servoRotate90n@servo+1,c
  3235  00048E  0E03               	movlw	3
  3236  000490  6E10               	movwf	servoRotate90n@servo,c
  3237  000492  EC34  F007         	call	_servoRotate90n	;wreg free
  3238                           
  3239                           ;main.c: 276: runCanAl = 0;
  3240  000496  0E00               	movlw	0
  3241  000498  0100               	movlb	0	; () banked
  3242  00049A  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3243  00049C  0E00               	movlw	0
  3244  00049E  6F82               	movwf	executingState@runCanAl& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;main.c: 277: alTab++;
  3248  0004A0  4A43               	infsnz	_alTab,f,c
  3249  0004A2  2A44               	incf	_alTab+1,f,c
  3250                           
  3251                           ;main.c: 278: }else if (hasTab == 0){
  3252  0004A4  D013               	goto	l4309
  3253  0004A6                     l4301:
  3254                           
  3255                           ; BSR set to: 0
  3256  0004A6  0100               	movlb	0	; () banked
  3257  0004A8  519E               	movf	executingState@hasTab& (0+255),w,b
  3258  0004AA  0100               	movlb	0	; () banked
  3259  0004AC  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3260  0004AE  A4D8               	btfss	status,2,c
  3261  0004B0  D00D               	goto	l4309
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 279: servoRotate90(3);
  3265  0004B2  0E00               	movlw	0
  3266  0004B4  6E11               	movwf	servoRotate90@servo+1,c
  3267  0004B6  0E03               	movlw	3
  3268  0004B8  6E10               	movwf	servoRotate90@servo,c
  3269  0004BA  ECD2  F006         	call	_servoRotate90	;wreg free
  3270                           
  3271                           ;main.c: 280: runCanAl = 0;
  3272  0004BE  0E00               	movlw	0
  3273  0004C0  0100               	movlb	0	; () banked
  3274  0004C2  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3275  0004C4  0E00               	movlw	0
  3276  0004C6  6F82               	movwf	executingState@runCanAl& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 281: alNoTab++;
  3280  0004C8  4A41               	infsnz	_alNoTab,f,c
  3281  0004CA  2A42               	incf	_alNoTab+1,f,c
  3282  0004CC                     l4309:
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;main.c: 282: }
  3286                           ;main.c: 284: servoRotate4(3);
  3287  0004CC  0E00               	movlw	0
  3288  0004CE  6E11               	movwf	servoRotate4@angle+1,c
  3289  0004D0  0E03               	movlw	3
  3290  0004D2  6E10               	movwf	servoRotate4@angle,c
  3291  0004D4  EC08  F00B         	call	_servoRotate4	;wreg free
  3292                           
  3293                           ;main.c: 285: alInSensor = 1;
  3294  0004D8  0E00               	movlw	0
  3295  0004DA  0100               	movlb	0	; () banked
  3296  0004DC  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  3297  0004DE  0E01               	movlw	1
  3298  0004E0  6FAA               	movwf	executingState@alInSensor& (0+255),b
  3299  0004E2                     l4313:
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;main.c: 286: }
  3303                           ;main.c: 288: timedif = get_timeDif(start_s);
  3304  0004E2  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  3305  0004E6  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  3306  0004EA  EC2F  F005         	call	_get_timeDif	;wreg free
  3307  0004EE  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  3308  0004F2  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  3309                           
  3310                           ;main.c: 289: if(emptyCount > 50){
  3311  0004F6  0100               	movlb	0	; () banked
  3312  0004F8  BFAD               	btfsc	(executingState@emptyCount+1)& (0+255),7,b
  3313  0004FA  D00F               	goto	l4323
  3314  0004FC  0100               	movlb	0	; () banked
  3315  0004FE  51AD               	movf	(executingState@emptyCount+1)& (0+255),w,b
  3316  000500  E105               	bnz	u3200
  3317  000502  0E33               	movlw	51
  3318  000504  0100               	movlb	0	; () banked
  3319  000506  5DAC               	subwf	executingState@emptyCount& (0+255),w,b
  3320  000508  A0D8               	btfss	status,0,c
  3321  00050A  D007               	goto	l4323
  3322  00050C                     u3200:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 290: state = FINISH;
  3326  00050C  0E02               	movlw	2
  3327  00050E  6E4B               	movwf	_state,c
  3328                           
  3329                           ;main.c: 291: runResult = 1;
  3330  000510  0E00               	movlw	0
  3331  000512  6E46               	movwf	_runResult+1,c
  3332  000514  0E01               	movlw	1
  3333  000516  6E45               	movwf	_runResult,c
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 292: return;
  3337  000518  0012               	return	
  3338  00051A                     l4323:
  3339                           
  3340                           ; BSR set to: 0
  3341  00051A  0100               	movlb	0	; () banked
  3342  00051C  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3343  00051E  D00E               	goto	l4329
  3344  000520  0100               	movlb	0	; () banked
  3345  000522  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3346  000524  E105               	bnz	u3210
  3347  000526  0EB5               	movlw	181
  3348  000528  0100               	movlb	0	; () banked
  3349  00052A  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3350  00052C  A0D8               	btfss	status,0,c
  3351  00052E  D006               	goto	l4329
  3352  000530                     u3210:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 294: state = FINISH;
  3356  000530  0E02               	movlw	2
  3357  000532  6E4B               	movwf	_state,c
  3358                           
  3359                           ;main.c: 295: runResult = 0;
  3360  000534  0E00               	movlw	0
  3361  000536  6E46               	movwf	_runResult+1,c
  3362  000538  0E00               	movlw	0
  3363  00053A  D7ED               	goto	L3
  3364  00053C                     l4329:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;main.c: 297: }
  3368                           ;main.c: 298: _delay((unsigned long)((300)*(10000000/4000.0)));
  3369  00053C  0E04               	movlw	4
  3370  00053E  6E35               	movwf	(??_executingState+1)& (0+255),c
  3371  000540  0ECF               	movlw	207
  3372  000542  6E34               	movwf	??_executingState& (0+255),c
  3373  000544  0E02               	movlw	2
  3374  000546                     u3507:
  3375  000546  2EE8               	decfsz	wreg,f,c
  3376  000548  D7FE               	bra	u3507
  3377  00054A  2E34               	decfsz	??_executingState& (0+255),f,c
  3378  00054C  D7FC               	bra	u3507
  3379  00054E  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3380  000550  D7FA               	bra	u3507
  3381  000552                     l4331:
  3382  000552  0100               	movlb	0	; () banked
  3383  000554  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3384  000556  D008               	goto	l4333
  3385  000558  0100               	movlb	0	; () banked
  3386  00055A  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3387  00055C  E107               	bnz	l267
  3388  00055E  0EB4               	movlw	180
  3389  000560  0100               	movlb	0	; () banked
  3390  000562  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3391  000564  B0D8               	btfsc	status,0,c
  3392  000566  D002               	goto	l267
  3393  000568                     l4333:
  3394                           
  3395                           ; BSR set to: 0
  3396  000568  B081               	btfsc	3969,0,c	;volatile
  3397  00056A  D66F               	goto	l4199
  3398  00056C                     l267:
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 299: }
  3402                           ;main.c: 301: LATCbits.LATC6 = 0;
  3403  00056C  9C8B               	bcf	3979,6,c	;volatile
  3404                           
  3405                           ;main.c: 302: int res[4];
  3406                           ;main.c: 303: res[0] = alTab;
  3407  00056E  C043  F094         	movff	_alTab,executingState@res
  3408  000572  C044  F095         	movff	_alTab+1,executingState@res+1
  3409                           
  3410                           ;main.c: 304: res[1] = alNoTab;
  3411  000576  C041  F096         	movff	_alNoTab,executingState@res+2
  3412  00057A  C042  F097         	movff	_alNoTab+1,executingState@res+3
  3413                           
  3414                           ;main.c: 305: res[2] = snLabel;
  3415  00057E  C047  F098         	movff	_snLabel,executingState@res+4
  3416  000582  C048  F099         	movff	_snLabel+1,executingState@res+5
  3417                           
  3418                           ;main.c: 306: res[3] = snNoLabel;
  3419  000586  C049  F09A         	movff	_snNoLabel,executingState@res+6
  3420  00058A  C04A  F09B         	movff	_snNoLabel+1,executingState@res+7
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 307: eeprom_LogResult(res);
  3424  00058E  0E94               	movlw	low executingState@res
  3425  000590  6E13               	movwf	eeprom_LogResult@data,c
  3426  000592  0E00               	movlw	high executingState@res
  3427  000594  6E14               	movwf	eeprom_LogResult@data+1,c
  3428  000596  ECD2  F009         	call	_eeprom_LogResult	;wreg free
  3429                           
  3430                           ;main.c: 308: state = FINISH;
  3431  00059A  0E02               	movlw	2
  3432  00059C  6E4B               	movwf	_state,c
  3433  00059E  0012               	return		;funcret
  3434  0005A0                     __end_of_executingState:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           intcon	equ	0xFF2
  3443                           intcon3	equ	0xFF0
  3444                           postinc0	equ	0xFEE
  3445                           wreg	equ	0xFE8
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _update_lcd *****************
  3454 ;; Defined at:
  3455 ;;		line 44 in file "main.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;Total ram usage:        0 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    4
  3476 ;; This function calls:
  3477 ;;		_lcdInst
  3478 ;;		_printf
  3479 ;; This function is called by:
  3480 ;;		_mainState
  3481 ;;		_executingState
  3482 ;;		_finishState
  3483 ;;		_logState
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text10
  3488  000BA8                     __ptext10:
  3489                           	opt stack 0
  3490  000BA8                     _update_lcd:
  3491                           	opt stack 25
  3492                           
  3493                           ;main.c: 46: lcdInst(0b10000000);;
  3494                           
  3495                           ;incstack = 0
  3496  000BA8  0E80               	movlw	128
  3497  000BAA  EC29  F00C         	call	_lcdInst
  3498                           
  3499                           ;main.c: 48: switch (state)
  3500  000BAE  D083               	goto	l3913
  3501  000BB0                     l3881:
  3502                           
  3503                           ;main.c: 51: printf("%02x/%01x/%02x ", time[6], time[5], time[4]);
  3504  000BB0  0EBF               	movlw	low STR_1
  3505  000BB2  6E1C               	movwf	printf@f,c
  3506  000BB4  0EFF               	movlw	high STR_1
  3507  000BB6  6E1D               	movwf	printf@f+1,c
  3508  000BB8  C0C8  F01E         	movff	_time+12,?_printf+2
  3509  000BBC  C0C9  F01F         	movff	_time+13,?_printf+3
  3510  000BC0  C0C6  F020         	movff	_time+10,?_printf+4
  3511  000BC4  C0C7  F021         	movff	_time+11,?_printf+5
  3512  000BC8  C0C4  F022         	movff	_time+8,?_printf+6
  3513  000BCC  C0C5  F023         	movff	_time+9,?_printf+7
  3514  000BD0  ECD0  F002         	call	_printf	;wreg free
  3515                           
  3516                           ;main.c: 52: printf("%02x:%02x:%02x", time[2], time[1], time[0]);
  3517  000BD4  0EDE               	movlw	low STR_2
  3518  000BD6  6E1C               	movwf	printf@f,c
  3519  000BD8  0EFF               	movlw	high STR_2
  3520  000BDA  6E1D               	movwf	printf@f+1,c
  3521  000BDC  C0C0  F01E         	movff	_time+4,?_printf+2
  3522  000BE0  C0C1  F01F         	movff	_time+5,?_printf+3
  3523  000BE4  C0BE  F020         	movff	_time+2,?_printf+4
  3524  000BE8  C0BF  F021         	movff	_time+3,?_printf+5
  3525  000BEC  C0BC  F022         	movff	_time,?_printf+6
  3526  000BF0  C0BD  F023         	movff	_time+1,?_printf+7
  3527  000BF4  ECD0  F002         	call	_printf	;wreg free
  3528                           
  3529                           ;main.c: 54: lcdInst(0b11000000);;
  3530  000BF8  0EC0               	movlw	192
  3531  000BFA  EC29  F00C         	call	_lcdInst
  3532                           
  3533                           ;main.c: 55: printf("1:Start 2:Logs  ");
  3534  000BFE  0EAE               	movlw	low STR_3
  3535  000C00  6E1C               	movwf	printf@f,c
  3536  000C02  0EFF               	movlw	high STR_3
  3537  000C04  6E1D               	movwf	printf@f+1,c
  3538  000C06  ECD0  F002         	call	_printf	;wreg free
  3539                           
  3540                           ;main.c: 56: break;
  3541  000C0A  D063               	goto	l3915
  3542  000C0C                     l3887:
  3543                           
  3544                           ;main.c: 59: printf("%03d              ", logdata);
  3545  000C0C  0EEF               	movlw	low STR_4
  3546  000C0E  6E1C               	movwf	printf@f,c
  3547  000C10  0EFE               	movlw	high STR_4
  3548  000C12  6E1D               	movwf	printf@f+1,c
  3549  000C14  C04C  F01E         	movff	_logdata,?_printf+2
  3550  000C18  6A1F               	clrf	?_printf+3,c
  3551  000C1A  ECD0  F002         	call	_printf	;wreg free
  3552                           
  3553                           ;main.c: 60: lcdInst(0b11000000);
  3554  000C1E  0EC0               	movlw	192
  3555  000C20  EC29  F00C         	call	_lcdInst
  3556                           
  3557                           ;main.c: 61: printf("1:Prev 0:Exit   ");
  3558  000C24  0E9D               	movlw	low STR_5
  3559  000C26  6E1C               	movwf	printf@f,c
  3560  000C28  0EFF               	movlw	high STR_5
  3561  000C2A  6E1D               	movwf	printf@f+1,c
  3562  000C2C  ECD0  F002         	call	_printf	;wreg free
  3563                           
  3564                           ;main.c: 62: break;
  3565  000C30  D050               	goto	l3915
  3566  000C32                     l3893:
  3567                           
  3568                           ;main.c: 64: printf("Executing...    ");
  3569  000C32  0E7B               	movlw	low STR_6
  3570  000C34  6E1C               	movwf	printf@f,c
  3571  000C36  0EFF               	movlw	high STR_6
  3572  000C38  6E1D               	movwf	printf@f+1,c
  3573  000C3A  ECD0  F002         	call	_printf	;wreg free
  3574                           
  3575                           ;main.c: 65: lcdInst(0b11000000);;
  3576  000C3E  0EC0               	movlw	192
  3577  000C40  EC29  F00C         	call	_lcdInst
  3578                           
  3579                           ;main.c: 66: printf("aN%d/a%d/sN%d/S%d",alNoTab, alTab, snNoLabel, snLabel);
  3580  000C44  0E02               	movlw	low STR_7
  3581  000C46  6E1C               	movwf	printf@f,c
  3582  000C48  0EFF               	movlw	high STR_7
  3583  000C4A  6E1D               	movwf	printf@f+1,c
  3584  000C4C  C041  F01E         	movff	_alNoTab,?_printf+2
  3585  000C50  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3586  000C54  C043  F020         	movff	_alTab,?_printf+4
  3587  000C58  C044  F021         	movff	_alTab+1,?_printf+5
  3588  000C5C  C049  F022         	movff	_snNoLabel,?_printf+6
  3589  000C60  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3590  000C64  C047  F024         	movff	_snLabel,?_printf+8
  3591  000C68  C048  F025         	movff	_snLabel+1,?_printf+9
  3592  000C6C  ECD0  F002         	call	_printf	;wreg free
  3593                           
  3594                           ;main.c: 68: break;
  3595  000C70  D030               	goto	l3915
  3596  000C72                     l3899:
  3597                           
  3598                           ;main.c: 71: if(runResult == 1){
  3599  000C72  0445               	decf	_runResult,w,c
  3600  000C74  1046               	iorwf	_runResult+1,w,c
  3601  000C76  A4D8               	btfss	status,2,c
  3602  000C78  D007               	goto	l3903
  3603                           
  3604                           ;main.c: 72: printf("Finished        ");
  3605  000C7A  0E59               	movlw	low STR_8
  3606  000C7C  6E1C               	movwf	printf@f,c
  3607  000C7E  0EFF               	movlw	high STR_8
  3608  000C80  6E1D               	movwf	printf@f+1,c
  3609  000C82  ECD0  F002         	call	_printf	;wreg free
  3610                           
  3611                           ;main.c: 73: }
  3612  000C86  D006               	goto	l3905
  3613  000C88                     l3903:
  3614                           
  3615                           ;main.c: 74: else
  3616                           ;main.c: 75: {
  3617                           ;main.c: 76: printf("Terminated      ");
  3618  000C88  0E6A               	movlw	low STR_9
  3619  000C8A  6E1C               	movwf	printf@f,c
  3620  000C8C  0EFF               	movlw	high STR_9
  3621  000C8E  6E1D               	movwf	printf@f+1,c
  3622  000C90  ECD0  F002         	call	_printf	;wreg free
  3623  000C94                     l3905:
  3624                           
  3625                           ;main.c: 77: }
  3626                           ;main.c: 78: lcdInst(0b11000000);;
  3627  000C94  0EC0               	movlw	192
  3628  000C96  EC29  F00C         	call	_lcdInst
  3629                           
  3630                           ;main.c: 79: printf("0:Menu          ");
  3631  000C9A  0E48               	movlw	low STR_10
  3632  000C9C  6E1C               	movwf	printf@f,c
  3633  000C9E  0EFF               	movlw	high STR_10
  3634  000CA0  6E1D               	movwf	printf@f+1,c
  3635  000CA2  ECD0  F002         	call	_printf	;wreg free
  3636                           
  3637                           ;main.c: 80: break;
  3638  000CA6  D015               	goto	l3915
  3639  000CA8                     l3909:
  3640                           
  3641                           ;main.c: 82: printf("error");
  3642  000CA8  0EF9               	movlw	low STR_11
  3643  000CAA  6E1C               	movwf	printf@f,c
  3644  000CAC  0EFF               	movlw	high STR_11
  3645  000CAE  6E1D               	movwf	printf@f+1,c
  3646  000CB0  ECD0  F002         	call	_printf	;wreg free
  3647                           
  3648                           ;main.c: 84: }
  3649                           
  3650                           ;main.c: 83: break;
  3651  000CB4  D00E               	goto	l3915
  3652  000CB6                     l3913:
  3653  000CB6  504B               	movf	_state,w,c
  3654                           
  3655                           ; Switch size 1, requested type "space"
  3656                           ; Number of cases is 4, Range of values is 0 to 3
  3657                           ; switch strategies available:
  3658                           ; Name         Instructions Cycles
  3659                           ; simple_byte           13     7 (average)
  3660                           ;	Chosen strategy is simple_byte
  3661  000CB8  0A00               	xorlw	0	; case 0
  3662  000CBA  B4D8               	btfsc	status,2,c
  3663  000CBC  D779               	goto	l3881
  3664  000CBE  0A01               	xorlw	1	; case 1
  3665  000CC0  B4D8               	btfsc	status,2,c
  3666  000CC2  D7B7               	goto	l3893
  3667  000CC4  0A03               	xorlw	3	; case 2
  3668  000CC6  B4D8               	btfsc	status,2,c
  3669  000CC8  D7D4               	goto	l3899
  3670  000CCA  0A01               	xorlw	1	; case 3
  3671  000CCC  B4D8               	btfsc	status,2,c
  3672  000CCE  D79E               	goto	l3887
  3673  000CD0  D7EB               	goto	l3909
  3674  000CD2                     l3915:
  3675                           
  3676                           ;main.c: 86: lcdInst(0b10000000);;
  3677  000CD2  0E80               	movlw	128
  3678  000CD4  EC29  F00C         	call	_lcdInst
  3679                           
  3680                           ;main.c: 87: lcdInst(0b11000000);;
  3681  000CD8  0EC0               	movlw	192
  3682  000CDA  EC29  F00C         	call	_lcdInst
  3683  000CDE  0012               	return		;funcret
  3684  000CE0                     __end_of_update_lcd:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           intcon3	equ	0xFF0
  3694                           postinc0	equ	0xFEE
  3695                           wreg	equ	0xFE8
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           fsr2h	equ	0xFDA
  3700                           fsr2l	equ	0xFD9
  3701                           status	equ	0xFD8
  3702                           
  3703 ;; *************** function _servoRotateArm *****************
  3704 ;; Defined at:
  3705 ;;		line 208 in file "servos.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  i               2   20[COMRAM] int 
  3710 ;;  res             2   22[COMRAM] int 
  3711 ;;  i               2    0        unsigned int 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  2   15[COMRAM] int 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;Total ram usage:        9 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    1
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_executingState
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text11
  3736  001182                     __ptext11:
  3737                           	opt stack 0
  3738  001182                     _servoRotateArm:
  3739                           	opt stack 28
  3740                           
  3741                           ;servos.c: 209: unsigned int i;
  3742                           ;servos.c: 210: int res = -1;
  3743                           
  3744                           ;incstack = 0
  3745  001182  6817               	setf	servoRotateArm@res,c
  3746  001184  6818               	setf	servoRotateArm@res+1,c
  3747                           
  3748                           ;servos.c: 211: for(int i = 0; i < loopcount+50; i++){
  3749  001186  0E00               	movlw	0
  3750  001188  6E16               	movwf	servoRotateArm@i_1045+1,c
  3751  00118A  0E00               	movlw	0
  3752  00118C  6E15               	movwf	servoRotateArm@i_1045,c
  3753  00118E  D01D               	goto	l4075
  3754  001190                     l515:
  3755                           
  3756                           ;servos.c: 212: LATBbits.LATB2 = 1;
  3757  001190  848A               	bsf	3978,2,c	;volatile
  3758                           
  3759                           ;servos.c: 213: _delay((unsigned long)((1740)*(10000000/4000000.0)));
  3760  001192  0E06               	movlw	6
  3761  001194  6E12               	movwf	??_servoRotateArm& (0+255),c
  3762  001196  0EA5               	movlw	165
  3763  001198                     u3517:
  3764  001198  2EE8               	decfsz	wreg,f,c
  3765  00119A  D7FE               	bra	u3517
  3766  00119C  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  3767  00119E  D7FC               	bra	u3517
  3768  0011A0  F000               	nop	
  3769                           
  3770                           ;servos.c: 214: LATBbits.LATB2 = 0;
  3771  0011A2  948A               	bcf	3978,2,c	;volatile
  3772                           
  3773                           ;servos.c: 215: _delay((unsigned long)((18260)*(10000000/4000000.0)));
  3774  0011A4  0E3C               	movlw	60
  3775  0011A6  6E12               	movwf	??_servoRotateArm& (0+255),c
  3776  0011A8  0E48               	movlw	72
  3777  0011AA                     u3527:
  3778  0011AA  2EE8               	decfsz	wreg,f,c
  3779  0011AC  D7FE               	bra	u3527
  3780  0011AE  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  3781  0011B0  D7FC               	bra	u3527
  3782                           
  3783                           ;servos.c: 216: if(PORTCbits.RC1 == 1){
  3784  0011B2  A282               	btfss	3970,1,c	;volatile
  3785  0011B4  D004               	goto	l4071
  3786                           
  3787                           ;servos.c: 217: res = 1;
  3788  0011B6  0E00               	movlw	0
  3789  0011B8  6E18               	movwf	servoRotateArm@res+1,c
  3790  0011BA  0E01               	movlw	1
  3791  0011BC  D003               	goto	L4
  3792  0011BE                     l4071:
  3793                           
  3794                           ;servos.c: 219: res = 0;
  3795  0011BE  0E00               	movlw	0
  3796  0011C0  6E18               	movwf	servoRotateArm@res+1,c
  3797  0011C2  0E00               	movlw	0
  3798  0011C4                     L4:
  3799  0011C4  6E17               	movwf	servoRotateArm@res,c
  3800  0011C6  4A15               	infsnz	servoRotateArm@i_1045,f,c
  3801  0011C8  2A16               	incf	servoRotateArm@i_1045+1,f,c
  3802  0011CA                     l4075:
  3803  0011CA  0E32               	movlw	50
  3804  0011CC  244D               	addwf	_loopcount,w,c
  3805  0011CE  6E12               	movwf	??_servoRotateArm& (0+255),c
  3806  0011D0  0E00               	movlw	0
  3807  0011D2  204E               	addwfc	_loopcount+1,w,c
  3808  0011D4  6E13               	movwf	(??_servoRotateArm+1)& (0+255),c
  3809  0011D6  5012               	movf	??_servoRotateArm,w,c
  3810  0011D8  5C15               	subwf	servoRotateArm@i_1045,w,c
  3811  0011DA  5016               	movf	servoRotateArm@i_1045+1,w,c
  3812  0011DC  0A80               	xorlw	128
  3813  0011DE  6E14               	movwf	(??_servoRotateArm+2)& (0+255),c
  3814  0011E0  5013               	movf	??_servoRotateArm+1,w,c
  3815  0011E2  0A80               	xorlw	128
  3816  0011E4  5814               	subwfb	(??_servoRotateArm+2)& (0+255),w,c
  3817  0011E6  A0D8               	btfss	status,0,c
  3818  0011E8  D7D3               	goto	l515
  3819                           
  3820                           ;servos.c: 220: }
  3821                           ;servos.c: 221: }
  3822                           ;servos.c: 222: return res;
  3823  0011EA  C017  F010         	movff	servoRotateArm@res,?_servoRotateArm
  3824  0011EE  C018  F011         	movff	servoRotateArm@res+1,?_servoRotateArm+1
  3825  0011F2  0012               	return		;funcret
  3826  0011F4                     __end_of_servoRotateArm:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           intcon3	equ	0xFF0
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           indf2	equ	0xFDF
  3839                           postinc2	equ	0xFDE
  3840                           postdec2	equ	0xFDD
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _servoRotate90n *****************
  3846 ;; Defined at:
  3847 ;;		line 165 in file "servos.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  servo           2   15[COMRAM] int 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  i               2   19[COMRAM] unsigned int 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;Total ram usage:        6 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    1
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_executingState
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text12
  3876  000E68                     __ptext12:
  3877                           	opt stack 0
  3878  000E68                     _servoRotate90n:
  3879                           	opt stack 28
  3880                           
  3881                           ;servos.c: 167: unsigned int i;
  3882                           ;servos.c: 168: for (i = 0; i < loopcount; i++) {
  3883                           
  3884                           ;incstack = 0
  3885  000E68  0E00               	movlw	0
  3886  000E6A  6E15               	movwf	servoRotate90n@i+1,c
  3887  000E6C  0E00               	movlw	0
  3888  000E6E  6E14               	movwf	servoRotate90n@i,c
  3889  000E70  D054               	goto	l494
  3890  000E72                     l497:
  3891                           
  3892                           ;servos.c: 171: LATAbits.LATA4 = 1;
  3893  000E72  8889               	bsf	3977,4,c	;volatile
  3894                           
  3895                           ;servos.c: 172: break;
  3896  000E74  D020               	goto	l3947
  3897  000E76                     l499:
  3898                           
  3899                           ;servos.c: 174: LATAbits.LATA5 = 1;
  3900  000E76  8A89               	bsf	3977,5,c	;volatile
  3901                           
  3902                           ;servos.c: 175: break;
  3903  000E78  D01E               	goto	l3947
  3904  000E7A                     l500:
  3905                           
  3906                           ;servos.c: 177: LATEbits.LATE0 = 1;
  3907  000E7A  808D               	bsf	3981,0,c	;volatile
  3908                           
  3909                           ;servos.c: 178: break;
  3910  000E7C  D01C               	goto	l3947
  3911  000E7E                     l501:
  3912                           
  3913                           ;servos.c: 180: LATEbits.LATE1 = 1;
  3914  000E7E  828D               	bsf	3981,1,c	;volatile
  3915                           
  3916                           ;servos.c: 181: break;
  3917  000E80  D01A               	goto	l3947
  3918  000E82                     l502:
  3919                           
  3920                           ;servos.c: 183: LATBbits.LATB2 = 1;
  3921  000E82  848A               	bsf	3978,2,c	;volatile
  3922                           
  3923                           ;servos.c: 185: }
  3924                           
  3925                           ;servos.c: 184: break;
  3926  000E84  D018               	goto	l3947
  3927  000E86                     l3945:
  3928  000E86  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  3929  000E8A  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  3930                           
  3931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3932                           ; Switch size 1, requested type "space"
  3933                           ; Number of cases is 1, Range of values is 0 to 0
  3934                           ; switch strategies available:
  3935                           ; Name         Instructions Cycles
  3936                           ; simple_byte            4     3 (average)
  3937                           ;	Chosen strategy is simple_byte
  3938  000E8E  5013               	movf	??_servoRotate90n+1,w,c
  3939  000E90  0A00               	xorlw	0	; case 0
  3940  000E92  A4D8               	btfss	status,2,c
  3941  000E94  D010               	goto	l3947
  3942                           
  3943                           ; Switch size 1, requested type "space"
  3944                           ; Number of cases is 5, Range of values is 0 to 4
  3945                           ; switch strategies available:
  3946                           ; Name         Instructions Cycles
  3947                           ; simple_byte           16     9 (average)
  3948                           ;	Chosen strategy is simple_byte
  3949  000E96  5012               	movf	??_servoRotate90n,w,c
  3950  000E98  0A00               	xorlw	0	; case 0
  3951  000E9A  B4D8               	btfsc	status,2,c
  3952  000E9C  D7EA               	goto	l497
  3953  000E9E  0A01               	xorlw	1	; case 1
  3954  000EA0  B4D8               	btfsc	status,2,c
  3955  000EA2  D7E9               	goto	l499
  3956  000EA4  0A03               	xorlw	3	; case 2
  3957  000EA6  B4D8               	btfsc	status,2,c
  3958  000EA8  D7E8               	goto	l500
  3959  000EAA  0A01               	xorlw	1	; case 3
  3960  000EAC  B4D8               	btfsc	status,2,c
  3961  000EAE  D7E7               	goto	l501
  3962  000EB0  0A07               	xorlw	7	; case 4
  3963  000EB2  B4D8               	btfsc	status,2,c
  3964  000EB4  D7E6               	goto	l502
  3965  000EB6                     l3947:
  3966                           
  3967                           ;servos.c: 186: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3968  000EB6  0ED6               	movlw	214
  3969  000EB8                     u3537:
  3970  000EB8  D000               	nop2	
  3971  000EBA  D000               	nop2	
  3972  000EBC  2EE8               	decfsz	wreg,f,c
  3973  000EBE  D7FC               	bra	u3537
  3974  000EC0  D000               	nop2	
  3975                           
  3976                           ;servos.c: 187: switch (servo) {
  3977  000EC2  D00A               	goto	l3951
  3978  000EC4                     l504:
  3979                           
  3980                           ;servos.c: 189: LATAbits.LATA4 = 0;
  3981  000EC4  9889               	bcf	3977,4,c	;volatile
  3982                           
  3983                           ;servos.c: 190: break;
  3984  000EC6  D020               	goto	l3953
  3985  000EC8                     l506:
  3986                           
  3987                           ;servos.c: 192: LATAbits.LATA5 = 0;
  3988  000EC8  9A89               	bcf	3977,5,c	;volatile
  3989                           
  3990                           ;servos.c: 193: break;
  3991  000ECA  D01E               	goto	l3953
  3992  000ECC                     l507:
  3993                           
  3994                           ;servos.c: 195: LATEbits.LATE0 = 0;
  3995  000ECC  908D               	bcf	3981,0,c	;volatile
  3996                           
  3997                           ;servos.c: 196: break;
  3998  000ECE  D01C               	goto	l3953
  3999  000ED0                     l508:
  4000                           
  4001                           ;servos.c: 198: LATEbits.LATE1 = 0;
  4002  000ED0  928D               	bcf	3981,1,c	;volatile
  4003                           
  4004                           ;servos.c: 199: break;
  4005  000ED2  D01A               	goto	l3953
  4006  000ED4                     l509:
  4007                           
  4008                           ;servos.c: 201: LATBbits.LATB2 = 0;
  4009  000ED4  948A               	bcf	3978,2,c	;volatile
  4010                           
  4011                           ;servos.c: 203: }
  4012                           
  4013                           ;servos.c: 202: break;
  4014  000ED6  D018               	goto	l3953
  4015  000ED8                     l3951:
  4016  000ED8  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  4017  000EDC  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  4018                           
  4019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4020                           ; Switch size 1, requested type "space"
  4021                           ; Number of cases is 1, Range of values is 0 to 0
  4022                           ; switch strategies available:
  4023                           ; Name         Instructions Cycles
  4024                           ; simple_byte            4     3 (average)
  4025                           ;	Chosen strategy is simple_byte
  4026  000EE0  5013               	movf	??_servoRotate90n+1,w,c
  4027  000EE2  0A00               	xorlw	0	; case 0
  4028  000EE4  A4D8               	btfss	status,2,c
  4029  000EE6  D010               	goto	l3953
  4030                           
  4031                           ; Switch size 1, requested type "space"
  4032                           ; Number of cases is 5, Range of values is 0 to 4
  4033                           ; switch strategies available:
  4034                           ; Name         Instructions Cycles
  4035                           ; simple_byte           16     9 (average)
  4036                           ;	Chosen strategy is simple_byte
  4037  000EE8  5012               	movf	??_servoRotate90n,w,c
  4038  000EEA  0A00               	xorlw	0	; case 0
  4039  000EEC  B4D8               	btfsc	status,2,c
  4040  000EEE  D7EA               	goto	l504
  4041  000EF0  0A01               	xorlw	1	; case 1
  4042  000EF2  B4D8               	btfsc	status,2,c
  4043  000EF4  D7E9               	goto	l506
  4044  000EF6  0A03               	xorlw	3	; case 2
  4045  000EF8  B4D8               	btfsc	status,2,c
  4046  000EFA  D7E8               	goto	l507
  4047  000EFC  0A01               	xorlw	1	; case 3
  4048  000EFE  B4D8               	btfsc	status,2,c
  4049  000F00  D7E7               	goto	l508
  4050  000F02  0A07               	xorlw	7	; case 4
  4051  000F04  B4D8               	btfsc	status,2,c
  4052  000F06  D7E6               	goto	l509
  4053  000F08                     l3953:
  4054                           
  4055                           ;servos.c: 204: _delay((unsigned long)((19400)*(10000000/4000000.0)));
  4056  000F08  0E3F               	movlw	63
  4057  000F0A  6E12               	movwf	??_servoRotate90n& (0+255),c
  4058  000F0C  0EFC               	movlw	252
  4059  000F0E                     u3547:
  4060  000F0E  2EE8               	decfsz	wreg,f,c
  4061  000F10  D7FE               	bra	u3547
  4062  000F12  2E12               	decfsz	??_servoRotate90n& (0+255),f,c
  4063  000F14  D7FC               	bra	u3547
  4064  000F16  4A14               	infsnz	servoRotate90n@i,f,c
  4065  000F18  2A15               	incf	servoRotate90n@i+1,f,c
  4066  000F1A                     l494:
  4067  000F1A  504D               	movf	_loopcount,w,c
  4068  000F1C  5C14               	subwf	servoRotate90n@i,w,c
  4069  000F1E  504E               	movf	_loopcount+1,w,c
  4070  000F20  5815               	subwfb	servoRotate90n@i+1,w,c
  4071  000F22  B0D8               	btfsc	status,0,c
  4072  000F24  0012               	return	
  4073  000F26  D7AF               	goto	l3945
  4074  000F28                     __end_of_servoRotate90n:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           intcon3	equ	0xFF0
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf2	equ	0xFDF
  4087                           postinc2	equ	0xFDE
  4088                           postdec2	equ	0xFDD
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8
  4092                           
  4093 ;; *************** function _servoRotate4 *****************
  4094 ;; Defined at:
  4095 ;;		line 56 in file "servos.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  angle           2   15[COMRAM] int 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  i               2   18[COMRAM] unsigned int 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, status,2, status,0
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;Total ram usage:        5 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    1
  4116 ;; This function calls:
  4117 ;;		Nothing
  4118 ;; This function is called by:
  4119 ;;		_executingState
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text13
  4124  001610                     __ptext13:
  4125                           	opt stack 0
  4126  001610                     _servoRotate4:
  4127                           	opt stack 28
  4128                           
  4129                           ;servos.c: 57: unsigned int i;
  4130                           ;servos.c: 58: for (i = 0; i < loopcount; i++) {
  4131                           
  4132                           ;incstack = 0
  4133  001610  0E00               	movlw	0
  4134  001612  6E14               	movwf	servoRotate4@i+1,c
  4135  001614  0E00               	movlw	0
  4136  001616  6E13               	movwf	servoRotate4@i,c
  4137  001618  D013               	goto	l442
  4138  00161A                     l443:
  4139                           
  4140                           ;servos.c: 59: LATEbits.LATE1 = 1;
  4141  00161A  828D               	bsf	3981,1,c	;volatile
  4142                           
  4143                           ;servos.c: 60: _delay((unsigned long)((1550)*(10000000/4000000.0)));
  4144  00161C  0E06               	movlw	6
  4145  00161E  6E12               	movwf	??_servoRotate4& (0+255),c
  4146  001620  0E07               	movlw	7
  4147  001622                     u3557:
  4148  001622  2EE8               	decfsz	wreg,f,c
  4149  001624  D7FE               	bra	u3557
  4150  001626  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  4151  001628  D7FC               	bra	u3557
  4152                           
  4153                           ;servos.c: 61: LATEbits.LATE1 = 0;
  4154  00162A  928D               	bcf	3981,1,c	;volatile
  4155                           
  4156                           ;servos.c: 62: _delay((unsigned long)((18450)*(10000000/4000000.0)));
  4157  00162C  0E3C               	movlw	60
  4158  00162E  6E12               	movwf	??_servoRotate4& (0+255),c
  4159  001630  0EE6               	movlw	230
  4160  001632                     u3567:
  4161  001632  2EE8               	decfsz	wreg,f,c
  4162  001634  D7FE               	bra	u3567
  4163  001636  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  4164  001638  D7FC               	bra	u3567
  4165  00163A  F000               	nop	
  4166  00163C  4A13               	infsnz	servoRotate4@i,f,c
  4167  00163E  2A14               	incf	servoRotate4@i+1,f,c
  4168  001640                     l442:
  4169  001640  504D               	movf	_loopcount,w,c
  4170  001642  5C13               	subwf	servoRotate4@i,w,c
  4171  001644  504E               	movf	_loopcount+1,w,c
  4172  001646  5814               	subwfb	servoRotate4@i+1,w,c
  4173  001648  B0D8               	btfsc	status,0,c
  4174  00164A  0012               	return	
  4175  00164C  D7E6               	goto	l443
  4176  00164E                     __end_of_servoRotate4:
  4177                           	opt stack 0
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           intcon	equ	0xFF2
  4185                           intcon3	equ	0xFF0
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           indf2	equ	0xFDF
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function _servoRotate0 *****************
  4196 ;; Defined at:
  4197 ;;		line 79 in file "servos.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  servo           2   15[COMRAM] int 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  i               2   19[COMRAM] unsigned int 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      void 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4211 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;Total ram usage:        6 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    1
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_executingState
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text14
  4226  000CE0                     __ptext14:
  4227                           	opt stack 0
  4228  000CE0                     _servoRotate0:
  4229                           	opt stack 28
  4230                           
  4231                           ;servos.c: 81: unsigned int i;
  4232                           ;servos.c: 82: for (i = 0; i < loopcount; i++) {
  4233                           
  4234                           ;incstack = 0
  4235  000CE0  0E00               	movlw	0
  4236  000CE2  6E15               	movwf	servoRotate0@i+1,c
  4237  000CE4  0E00               	movlw	0
  4238  000CE6  6E14               	movwf	servoRotate0@i,c
  4239  000CE8  D056               	goto	l454
  4240  000CEA                     l457:
  4241                           
  4242                           ;servos.c: 85: LATAbits.LATA4 = 1;
  4243  000CEA  8889               	bsf	3977,4,c	;volatile
  4244                           
  4245                           ;servos.c: 86: break;
  4246  000CEC  D020               	goto	l3971
  4247  000CEE                     l459:
  4248                           
  4249                           ;servos.c: 88: LATAbits.LATA5 = 1;
  4250  000CEE  8A89               	bsf	3977,5,c	;volatile
  4251                           
  4252                           ;servos.c: 89: break;
  4253  000CF0  D01E               	goto	l3971
  4254  000CF2                     l460:
  4255                           
  4256                           ;servos.c: 91: LATEbits.LATE0 = 1;
  4257  000CF2  808D               	bsf	3981,0,c	;volatile
  4258                           
  4259                           ;servos.c: 92: break;
  4260  000CF4  D01C               	goto	l3971
  4261  000CF6                     l461:
  4262                           
  4263                           ;servos.c: 94: LATEbits.LATE1 = 1;
  4264  000CF6  828D               	bsf	3981,1,c	;volatile
  4265                           
  4266                           ;servos.c: 95: break;
  4267  000CF8  D01A               	goto	l3971
  4268  000CFA                     l462:
  4269                           
  4270                           ;servos.c: 97: LATBbits.LATB2 = 1;
  4271  000CFA  848A               	bsf	3978,2,c	;volatile
  4272                           
  4273                           ;servos.c: 99: }
  4274                           
  4275                           ;servos.c: 98: break;
  4276  000CFC  D018               	goto	l3971
  4277  000CFE                     l3969:
  4278  000CFE  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  4279  000D02  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  4280                           
  4281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4282                           ; Switch size 1, requested type "space"
  4283                           ; Number of cases is 1, Range of values is 0 to 0
  4284                           ; switch strategies available:
  4285                           ; Name         Instructions Cycles
  4286                           ; simple_byte            4     3 (average)
  4287                           ;	Chosen strategy is simple_byte
  4288  000D06  5013               	movf	??_servoRotate0+1,w,c
  4289  000D08  0A00               	xorlw	0	; case 0
  4290  000D0A  A4D8               	btfss	status,2,c
  4291  000D0C  D010               	goto	l3971
  4292                           
  4293                           ; Switch size 1, requested type "space"
  4294                           ; Number of cases is 5, Range of values is 0 to 4
  4295                           ; switch strategies available:
  4296                           ; Name         Instructions Cycles
  4297                           ; simple_byte           16     9 (average)
  4298                           ;	Chosen strategy is simple_byte
  4299  000D0E  5012               	movf	??_servoRotate0,w,c
  4300  000D10  0A00               	xorlw	0	; case 0
  4301  000D12  B4D8               	btfsc	status,2,c
  4302  000D14  D7EA               	goto	l457
  4303  000D16  0A01               	xorlw	1	; case 1
  4304  000D18  B4D8               	btfsc	status,2,c
  4305  000D1A  D7E9               	goto	l459
  4306  000D1C  0A03               	xorlw	3	; case 2
  4307  000D1E  B4D8               	btfsc	status,2,c
  4308  000D20  D7E8               	goto	l460
  4309  000D22  0A01               	xorlw	1	; case 3
  4310  000D24  B4D8               	btfsc	status,2,c
  4311  000D26  D7E7               	goto	l461
  4312  000D28  0A07               	xorlw	7	; case 4
  4313  000D2A  B4D8               	btfsc	status,2,c
  4314  000D2C  D7E6               	goto	l462
  4315  000D2E                     l3971:
  4316                           
  4317                           ;servos.c: 100: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  4318  000D2E  0E05               	movlw	5
  4319  000D30  6E12               	movwf	??_servoRotate0& (0+255),c
  4320  000D32  0EDE               	movlw	222
  4321  000D34                     u3577:
  4322  000D34  2EE8               	decfsz	wreg,f,c
  4323  000D36  D7FE               	bra	u3577
  4324  000D38  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  4325  000D3A  D7FC               	bra	u3577
  4326                           
  4327                           ;servos.c: 101: switch (servo) {
  4328  000D3C  D00A               	goto	l3975
  4329  000D3E                     l464:
  4330                           
  4331                           ;servos.c: 103: LATAbits.LATA4 = 0;
  4332  000D3E  9889               	bcf	3977,4,c	;volatile
  4333                           
  4334                           ;servos.c: 104: break;
  4335  000D40  D020               	goto	l3977
  4336  000D42                     l466:
  4337                           
  4338                           ;servos.c: 106: LATAbits.LATA5 = 0;
  4339  000D42  9A89               	bcf	3977,5,c	;volatile
  4340                           
  4341                           ;servos.c: 107: break;
  4342  000D44  D01E               	goto	l3977
  4343  000D46                     l467:
  4344                           
  4345                           ;servos.c: 109: LATEbits.LATE0 = 0;
  4346  000D46  908D               	bcf	3981,0,c	;volatile
  4347                           
  4348                           ;servos.c: 110: break;
  4349  000D48  D01C               	goto	l3977
  4350  000D4A                     l468:
  4351                           
  4352                           ;servos.c: 112: LATEbits.LATE1 = 0;
  4353  000D4A  928D               	bcf	3981,1,c	;volatile
  4354                           
  4355                           ;servos.c: 113: break;
  4356  000D4C  D01A               	goto	l3977
  4357  000D4E                     l469:
  4358                           
  4359                           ;servos.c: 115: LATBbits.LATB2 = 0;
  4360  000D4E  948A               	bcf	3978,2,c	;volatile
  4361                           
  4362                           ;servos.c: 117: }
  4363                           
  4364                           ;servos.c: 116: break;
  4365  000D50  D018               	goto	l3977
  4366  000D52                     l3975:
  4367  000D52  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  4368  000D56  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  4369                           
  4370                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4371                           ; Switch size 1, requested type "space"
  4372                           ; Number of cases is 1, Range of values is 0 to 0
  4373                           ; switch strategies available:
  4374                           ; Name         Instructions Cycles
  4375                           ; simple_byte            4     3 (average)
  4376                           ;	Chosen strategy is simple_byte
  4377  000D5A  5013               	movf	??_servoRotate0+1,w,c
  4378  000D5C  0A00               	xorlw	0	; case 0
  4379  000D5E  A4D8               	btfss	status,2,c
  4380  000D60  D010               	goto	l3977
  4381                           
  4382                           ; Switch size 1, requested type "space"
  4383                           ; Number of cases is 5, Range of values is 0 to 4
  4384                           ; switch strategies available:
  4385                           ; Name         Instructions Cycles
  4386                           ; simple_byte           16     9 (average)
  4387                           ;	Chosen strategy is simple_byte
  4388  000D62  5012               	movf	??_servoRotate0,w,c
  4389  000D64  0A00               	xorlw	0	; case 0
  4390  000D66  B4D8               	btfsc	status,2,c
  4391  000D68  D7EA               	goto	l464
  4392  000D6A  0A01               	xorlw	1	; case 1
  4393  000D6C  B4D8               	btfsc	status,2,c
  4394  000D6E  D7E9               	goto	l466
  4395  000D70  0A03               	xorlw	3	; case 2
  4396  000D72  B4D8               	btfsc	status,2,c
  4397  000D74  D7E8               	goto	l467
  4398  000D76  0A01               	xorlw	1	; case 3
  4399  000D78  B4D8               	btfsc	status,2,c
  4400  000D7A  D7E7               	goto	l468
  4401  000D7C  0A07               	xorlw	7	; case 4
  4402  000D7E  B4D8               	btfsc	status,2,c
  4403  000D80  D7E6               	goto	l469
  4404  000D82                     l3977:
  4405                           
  4406                           ;servos.c: 118: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  4407  000D82  0E3D               	movlw	61
  4408  000D84  6E12               	movwf	??_servoRotate0& (0+255),c
  4409  000D86  0E0F               	movlw	15
  4410  000D88                     u3587:
  4411  000D88  2EE8               	decfsz	wreg,f,c
  4412  000D8A  D7FE               	bra	u3587
  4413  000D8C  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  4414  000D8E  D7FC               	bra	u3587
  4415  000D90  F000               	nop	
  4416  000D92  4A14               	infsnz	servoRotate0@i,f,c
  4417  000D94  2A15               	incf	servoRotate0@i+1,f,c
  4418  000D96                     l454:
  4419  000D96  504D               	movf	_loopcount,w,c
  4420  000D98  5C14               	subwf	servoRotate0@i,w,c
  4421  000D9A  504E               	movf	_loopcount+1,w,c
  4422  000D9C  5815               	subwfb	servoRotate0@i+1,w,c
  4423  000D9E  B0D8               	btfsc	status,0,c
  4424  000DA0  0012               	return	
  4425  000DA2  D7AD               	goto	l3969
  4426  000DA4                     __end_of_servoRotate0:
  4427                           	opt stack 0
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           intcon3	equ	0xFF0
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           indf2	equ	0xFDF
  4439                           postinc2	equ	0xFDE
  4440                           postdec2	equ	0xFDD
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function _readSnTop *****************
  4446 ;; Defined at:
  4447 ;;		line 25 in file "sensors.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  2   15[COMRAM] int 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4461 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;Total ram usage:        2 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    1
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_executingState
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text15
  4476  001798                     __ptext15:
  4477                           	opt stack 0
  4478  001798                     _readSnTop:
  4479                           	opt stack 28
  4480                           
  4481                           ;sensors.c: 26: if(PORTAbits.RA2 == 1){
  4482                           
  4483                           ;incstack = 0
  4484  001798  A480               	btfss	3968,2,c	;volatile
  4485  00179A  D005               	goto	l4003
  4486                           
  4487                           ;sensors.c: 27: return 1;
  4488  00179C  0E00               	movlw	0
  4489  00179E  6E11               	movwf	?_readSnTop+1,c
  4490  0017A0  0E01               	movlw	1
  4491  0017A2  6E10               	movwf	?_readSnTop,c
  4492  0017A4  0012               	return	
  4493  0017A6                     l4003:
  4494                           
  4495                           ;sensors.c: 28: }
  4496                           ;sensors.c: 29: return 0;
  4497  0017A6  0E00               	movlw	0
  4498  0017A8  6E11               	movwf	?_readSnTop+1,c
  4499  0017AA  0E00               	movlw	0
  4500  0017AC  6E10               	movwf	?_readSnTop,c
  4501  0017AE  0012               	return	
  4502  0017B0                     __end_of_readSnTop:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           intcon3	equ	0xFF0
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           indf2	equ	0xFDF
  4515                           postinc2	equ	0xFDE
  4516                           postdec2	equ	0xFDD
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8
  4520                           
  4521 ;; *************** function _readSnSensor *****************
  4522 ;; Defined at:
  4523 ;;		line 39 in file "sensors.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;		None
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;		None
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  2   15[COMRAM] int 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;Total ram usage:        2 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    1
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_executingState
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text16
  4552  0017B0                     __ptext16:
  4553                           	opt stack 0
  4554  0017B0                     _readSnSensor:
  4555                           	opt stack 28
  4556                           
  4557                           ;sensors.c: 40: if(PORTCbits.RC0 == 1){
  4558                           
  4559                           ;incstack = 0
  4560  0017B0  A082               	btfss	3970,0,c	;volatile
  4561  0017B2  D005               	goto	l4055
  4562                           
  4563                           ;sensors.c: 41: return 1;
  4564  0017B4  0E00               	movlw	0
  4565  0017B6  6E11               	movwf	?_readSnSensor+1,c
  4566  0017B8  0E01               	movlw	1
  4567  0017BA  6E10               	movwf	?_readSnSensor,c
  4568  0017BC  0012               	return	
  4569  0017BE                     l4055:
  4570                           
  4571                           ;sensors.c: 42: }
  4572                           ;sensors.c: 43: return 0;
  4573  0017BE  0E00               	movlw	0
  4574  0017C0  6E11               	movwf	?_readSnSensor+1,c
  4575  0017C2  0E00               	movlw	0
  4576  0017C4  6E10               	movwf	?_readSnSensor,c
  4577  0017C6  0012               	return	
  4578  0017C8                     __end_of_readSnSensor:
  4579                           	opt stack 0
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           intcon3	equ	0xFF0
  4588                           postinc0	equ	0xFEE
  4589                           wreg	equ	0xFE8
  4590                           indf2	equ	0xFDF
  4591                           postinc2	equ	0xFDE
  4592                           postdec2	equ	0xFDD
  4593                           fsr2h	equ	0xFDA
  4594                           fsr2l	equ	0xFD9
  4595                           status	equ	0xFD8
  4596                           
  4597 ;; *************** function _readSnBot *****************
  4598 ;; Defined at:
  4599 ;;		line 11 in file "sensors.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;		None
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;		None
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  2   15[COMRAM] int 
  4606 ;; Registers used:
  4607 ;;		wreg, status,2
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;Total ram usage:        2 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:    1
  4620 ;; This function calls:
  4621 ;;		Nothing
  4622 ;; This function is called by:
  4623 ;;		_executingState
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text17
  4628  0017C8                     __ptext17:
  4629                           	opt stack 0
  4630  0017C8                     _readSnBot:
  4631                           	opt stack 28
  4632                           
  4633                           ;sensors.c: 12: if(PORTAbits.RA0 == 1){
  4634                           
  4635                           ;incstack = 0
  4636  0017C8  A080               	btfss	3968,0,c	;volatile
  4637  0017CA  D005               	goto	l4023
  4638                           
  4639                           ;sensors.c: 13: return 1;
  4640  0017CC  0E00               	movlw	0
  4641  0017CE  6E11               	movwf	?_readSnBot+1,c
  4642  0017D0  0E01               	movlw	1
  4643  0017D2  6E10               	movwf	?_readSnBot,c
  4644  0017D4  0012               	return	
  4645  0017D6                     l4023:
  4646                           
  4647                           ;sensors.c: 14: }
  4648                           ;sensors.c: 15: return 0;
  4649  0017D6  0E00               	movlw	0
  4650  0017D8  6E11               	movwf	?_readSnBot+1,c
  4651  0017DA  0E00               	movlw	0
  4652  0017DC  6E10               	movwf	?_readSnBot,c
  4653  0017DE  0012               	return	
  4654  0017E0                     __end_of_readSnBot:
  4655                           	opt stack 0
  4656                           tblptru	equ	0xFF8
  4657                           tblptrh	equ	0xFF7
  4658                           tblptrl	equ	0xFF6
  4659                           tablat	equ	0xFF5
  4660                           prodh	equ	0xFF4
  4661                           prodl	equ	0xFF3
  4662                           intcon	equ	0xFF2
  4663                           intcon3	equ	0xFF0
  4664                           postinc0	equ	0xFEE
  4665                           wreg	equ	0xFE8
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _readAlTop *****************
  4674 ;; Defined at:
  4675 ;;		line 32 in file "sensors.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  2   15[COMRAM] int 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:        2 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    1
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_executingState
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text18
  4704  0017E0                     __ptext18:
  4705                           	opt stack 0
  4706  0017E0                     _readAlTop:
  4707                           	opt stack 28
  4708                           
  4709                           ;sensors.c: 33: if(PORTAbits.RA3 == 1){
  4710                           
  4711                           ;incstack = 0
  4712  0017E0  A680               	btfss	3968,3,c	;volatile
  4713  0017E2  D005               	goto	l4013
  4714                           
  4715                           ;sensors.c: 34: return 1;
  4716  0017E4  0E00               	movlw	0
  4717  0017E6  6E11               	movwf	?_readAlTop+1,c
  4718  0017E8  0E01               	movlw	1
  4719  0017EA  6E10               	movwf	?_readAlTop,c
  4720  0017EC  0012               	return	
  4721  0017EE                     l4013:
  4722                           
  4723                           ;sensors.c: 35: }
  4724                           ;sensors.c: 36: return 0;
  4725  0017EE  0E00               	movlw	0
  4726  0017F0  6E11               	movwf	?_readAlTop+1,c
  4727  0017F2  0E00               	movlw	0
  4728  0017F4  6E10               	movwf	?_readAlTop,c
  4729  0017F6  0012               	return	
  4730  0017F8                     __end_of_readAlTop:
  4731                           	opt stack 0
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           prodh	equ	0xFF4
  4737                           prodl	equ	0xFF3
  4738                           intcon	equ	0xFF2
  4739                           intcon3	equ	0xFF0
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _readAlBot *****************
  4750 ;; Defined at:
  4751 ;;		line 18 in file "sensors.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  2   15[COMRAM] int 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;Total ram usage:        2 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    1
  4772 ;; This function calls:
  4773 ;;		Nothing
  4774 ;; This function is called by:
  4775 ;;		_executingState
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text19
  4780  0017F8                     __ptext19:
  4781                           	opt stack 0
  4782  0017F8                     _readAlBot:
  4783                           	opt stack 28
  4784                           
  4785                           ;sensors.c: 19: if(PORTAbits.RA1 == 1){
  4786                           
  4787                           ;incstack = 0
  4788  0017F8  A280               	btfss	3968,1,c	;volatile
  4789  0017FA  D005               	goto	l4033
  4790                           
  4791                           ;sensors.c: 20: return 1;
  4792  0017FC  0E00               	movlw	0
  4793  0017FE  6E11               	movwf	?_readAlBot+1,c
  4794  001800  0E01               	movlw	1
  4795  001802  6E10               	movwf	?_readAlBot,c
  4796  001804  0012               	return	
  4797  001806                     l4033:
  4798                           
  4799                           ;sensors.c: 21: }
  4800                           ;sensors.c: 22: return 0;
  4801  001806  0E00               	movlw	0
  4802  001808  6E11               	movwf	?_readAlBot+1,c
  4803  00180A  0E00               	movlw	0
  4804  00180C  6E10               	movwf	?_readAlBot,c
  4805  00180E  0012               	return	
  4806  001810                     __end_of_readAlBot:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           intcon	equ	0xFF2
  4815                           intcon3	equ	0xFF0
  4816                           postinc0	equ	0xFEE
  4817                           wreg	equ	0xFE8
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _get_timeDif *****************
  4826 ;; Defined at:
  4827 ;;		line 108 in file "main.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  start           2   23[COMRAM] int 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  start_s         2   40[COMRAM] int 
  4832 ;;  s_one           2   38[COMRAM] int 
  4833 ;;  s_ten           2   36[COMRAM] int 
  4834 ;;  m_one           2   34[COMRAM] int 
  4835 ;;  m_ten           2   32[COMRAM] int 
  4836 ;;  h_one           2   30[COMRAM] int 
  4837 ;;  h_ten           2   28[COMRAM] int 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  2   23[COMRAM] int 
  4840 ;; Registers used:
  4841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:       23 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    4
  4854 ;; This function calls:
  4855 ;;		___wmul
  4856 ;;		_get_time
  4857 ;; This function is called by:
  4858 ;;		_executingState
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text20
  4863  000A5E                     __ptext20:
  4864                           	opt stack 0
  4865  000A5E                     _get_timeDif:
  4866                           	opt stack 25
  4867                           
  4868                           ;main.c: 109: get_time(time);
  4869                           
  4870                           ;incstack = 0
  4871  000A5E  0EBC               	movlw	low _time
  4872  000A60  6E13               	movwf	get_time@time,c
  4873  000A62  0E00               	movlw	high _time
  4874  000A64  6E14               	movwf	get_time@time+1,c
  4875  000A66  EC3D  F008         	call	_get_time	;wreg free
  4876                           
  4877                           ;main.c: 110: int h_ten = (time[2] & 0b11110000)>>4;
  4878  000A6A  EE20  F0C0         	lfsr	2,_time+4
  4879  000A6E  CFDE F01A          	movff	postinc2,??_get_timeDif
  4880  000A72  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4881  000A76  0E04               	movlw	4
  4882  000A78  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4883  000A7A                     u2805:
  4884  000A7A  341B               	rlcf	??_get_timeDif+1,w,c
  4885  000A7C  321B               	rrcf	??_get_timeDif+1,f,c
  4886  000A7E  321A               	rrcf	??_get_timeDif,f,c
  4887  000A80  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4888  000A82  D7FB               	goto	u2805
  4889  000A84  0E0F               	movlw	15
  4890  000A86  141A               	andwf	??_get_timeDif,w,c
  4891  000A88  6E1D               	movwf	get_timeDif@h_ten,c
  4892  000A8A  6A1E               	clrf	get_timeDif@h_ten+1,c
  4893                           
  4894                           ;main.c: 111: int h_one = (time[2] & 0b00001111);
  4895  000A8C  0E0F               	movlw	15
  4896  000A8E  0100               	movlb	0	; () banked
  4897  000A90  15C0               	andwf	(_time+4)& (0+255),w,b
  4898  000A92  6E1F               	movwf	get_timeDif@h_one,c
  4899  000A94  6A20               	clrf	get_timeDif@h_one+1,c
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;main.c: 112: int m_ten = (time[1] & 0b11110000)>>4;
  4903  000A96  EE20  F0BE         	lfsr	2,_time+2
  4904  000A9A  CFDE F01A          	movff	postinc2,??_get_timeDif
  4905  000A9E  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4906  000AA2  0E04               	movlw	4
  4907  000AA4  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4908  000AA6                     u2815:
  4909  000AA6  341B               	rlcf	??_get_timeDif+1,w,c
  4910  000AA8  321B               	rrcf	??_get_timeDif+1,f,c
  4911  000AAA  321A               	rrcf	??_get_timeDif,f,c
  4912  000AAC  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4913  000AAE  D7FB               	goto	u2815
  4914  000AB0  0E0F               	movlw	15
  4915  000AB2  141A               	andwf	??_get_timeDif,w,c
  4916  000AB4  6E21               	movwf	get_timeDif@m_ten,c
  4917  000AB6  6A22               	clrf	get_timeDif@m_ten+1,c
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;main.c: 113: int m_one = (time[1] & 0b00001111);
  4921  000AB8  0E0F               	movlw	15
  4922  000ABA  0100               	movlb	0	; () banked
  4923  000ABC  15BE               	andwf	(_time+2)& (0+255),w,b
  4924  000ABE  6E23               	movwf	get_timeDif@m_one,c
  4925  000AC0  6A24               	clrf	get_timeDif@m_one+1,c
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;main.c: 114: int s_ten = (time[0] & 0b11110000)>>4;
  4929  000AC2  C0BC  F01A         	movff	_time,??_get_timeDif
  4930  000AC6  C0BD  F01B         	movff	_time+1,??_get_timeDif+1
  4931  000ACA  0E04               	movlw	4
  4932  000ACC  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4933  000ACE                     u2825:
  4934  000ACE  341B               	rlcf	??_get_timeDif+1,w,c
  4935  000AD0  321B               	rrcf	??_get_timeDif+1,f,c
  4936  000AD2  321A               	rrcf	??_get_timeDif,f,c
  4937  000AD4  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4938  000AD6  D7FB               	goto	u2825
  4939  000AD8  0E0F               	movlw	15
  4940  000ADA  141A               	andwf	??_get_timeDif,w,c
  4941  000ADC  6E25               	movwf	get_timeDif@s_ten,c
  4942  000ADE  6A26               	clrf	get_timeDif@s_ten+1,c
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;main.c: 115: int s_one = (time[0] & 0b00001111);
  4946  000AE0  0E0F               	movlw	15
  4947  000AE2  0100               	movlb	0	; () banked
  4948  000AE4  15BC               	andwf	_time& (0+255),w,b
  4949  000AE6  6E27               	movwf	get_timeDif@s_one,c
  4950  000AE8  6A28               	clrf	get_timeDif@s_one+1,c
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4954  000AEA  C021  F010         	movff	get_timeDif@m_ten,___wmul@multiplier
  4955  000AEE  C022  F011         	movff	get_timeDif@m_ten+1,___wmul@multiplier+1
  4956  000AF2  0E00               	movlw	0
  4957  000AF4  6E13               	movwf	___wmul@multiplicand+1,c
  4958  000AF6  0E0A               	movlw	10
  4959  000AF8  6E12               	movwf	___wmul@multiplicand,c
  4960  000AFA  EC9C  F00B         	call	___wmul	;wreg free
  4961  000AFE  5023               	movf	get_timeDif@m_one,w,c
  4962  000B00  2410               	addwf	?___wmul,w,c
  4963  000B02  6E2B               	movwf	_get_timeDif$1734,c
  4964  000B04  5024               	movf	get_timeDif@m_one+1,w,c
  4965  000B06  2011               	addwfc	?___wmul+1,w,c
  4966  000B08  6E2C               	movwf	_get_timeDif$1734+1,c
  4967                           
  4968                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4969  000B0A  C01D  F010         	movff	get_timeDif@h_ten,___wmul@multiplier
  4970  000B0E  C01E  F011         	movff	get_timeDif@h_ten+1,___wmul@multiplier+1
  4971  000B12  0E00               	movlw	0
  4972  000B14  6E13               	movwf	___wmul@multiplicand+1,c
  4973  000B16  0E0A               	movlw	10
  4974  000B18  6E12               	movwf	___wmul@multiplicand,c
  4975  000B1A  EC9C  F00B         	call	___wmul	;wreg free
  4976  000B1E  501F               	movf	get_timeDif@h_one,w,c
  4977  000B20  2410               	addwf	?___wmul,w,c
  4978  000B22  6E2D               	movwf	_get_timeDif$1735,c
  4979  000B24  5020               	movf	get_timeDif@h_one+1,w,c
  4980  000B26  2011               	addwfc	?___wmul+1,w,c
  4981  000B28  6E2E               	movwf	_get_timeDif$1735+1,c
  4982                           
  4983                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4984  000B2A  C025  F010         	movff	get_timeDif@s_ten,___wmul@multiplier
  4985  000B2E  C026  F011         	movff	get_timeDif@s_ten+1,___wmul@multiplier+1
  4986  000B32  0E00               	movlw	0
  4987  000B34  6E13               	movwf	___wmul@multiplicand+1,c
  4988  000B36  0E0A               	movlw	10
  4989  000B38  6E12               	movwf	___wmul@multiplicand,c
  4990  000B3A  EC9C  F00B         	call	___wmul	;wreg free
  4991  000B3E  C010  F01A         	movff	?___wmul,??_get_timeDif
  4992  000B42  C011  F01B         	movff	?___wmul+1,??_get_timeDif+1
  4993  000B46  C02D  F010         	movff	_get_timeDif$1735,___wmul@multiplier
  4994  000B4A  C02E  F011         	movff	_get_timeDif$1735+1,___wmul@multiplier+1
  4995  000B4E  0E0E               	movlw	14
  4996  000B50  6E13               	movwf	___wmul@multiplicand+1,c
  4997  000B52  0E10               	movlw	16
  4998  000B54  6E12               	movwf	___wmul@multiplicand,c
  4999  000B56  EC9C  F00B         	call	___wmul	;wreg free
  5000  000B5A  5010               	movf	?___wmul,w,c
  5001  000B5C  261A               	addwf	??_get_timeDif,f,c
  5002  000B5E  5011               	movf	?___wmul+1,w,c
  5003  000B60  221B               	addwfc	??_get_timeDif+1,f,c
  5004  000B62  C02B  F010         	movff	_get_timeDif$1734,___wmul@multiplier
  5005  000B66  C02C  F011         	movff	_get_timeDif$1734+1,___wmul@multiplier+1
  5006  000B6A  0E00               	movlw	0
  5007  000B6C  6E13               	movwf	___wmul@multiplicand+1,c
  5008  000B6E  0E3C               	movlw	60
  5009  000B70  6E12               	movwf	___wmul@multiplicand,c
  5010  000B72  EC9C  F00B         	call	___wmul	;wreg free
  5011  000B76  5010               	movf	?___wmul,w,c
  5012  000B78  261A               	addwf	??_get_timeDif,f,c
  5013  000B7A  5011               	movf	?___wmul+1,w,c
  5014  000B7C  221B               	addwfc	??_get_timeDif+1,f,c
  5015  000B7E  5027               	movf	get_timeDif@s_one,w,c
  5016  000B80  241A               	addwf	??_get_timeDif,w,c
  5017  000B82  6E29               	movwf	get_timeDif@start_s,c
  5018  000B84  5028               	movf	get_timeDif@s_one+1,w,c
  5019  000B86  201B               	addwfc	??_get_timeDif+1,w,c
  5020  000B88  6E2A               	movwf	get_timeDif@start_s+1,c
  5021                           
  5022                           ;main.c: 118: return start_s - start;
  5023  000B8A  C018  F01A         	movff	get_timeDif@start,??_get_timeDif
  5024  000B8E  C019  F01B         	movff	get_timeDif@start+1,??_get_timeDif+1
  5025  000B92  1E1A               	comf	??_get_timeDif,f,c
  5026  000B94  1E1B               	comf	??_get_timeDif+1,f,c
  5027  000B96  4A1A               	infsnz	??_get_timeDif,f,c
  5028  000B98  2A1B               	incf	??_get_timeDif+1,f,c
  5029  000B9A  5029               	movf	get_timeDif@start_s,w,c
  5030  000B9C  241A               	addwf	??_get_timeDif,w,c
  5031  000B9E  6E18               	movwf	?_get_timeDif,c
  5032  000BA0  502A               	movf	get_timeDif@start_s+1,w,c
  5033  000BA2  201B               	addwfc	??_get_timeDif+1,w,c
  5034  000BA4  6E19               	movwf	?_get_timeDif+1,c
  5035  000BA6  0012               	return	
  5036  000BA8                     __end_of_get_timeDif:
  5037                           	opt stack 0
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           intcon	equ	0xFF2
  5045                           intcon3	equ	0xFF0
  5046                           postinc0	equ	0xFEE
  5047                           wreg	equ	0xFE8
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           postdec2	equ	0xFDD
  5051                           fsr2h	equ	0xFDA
  5052                           fsr2l	equ	0xFD9
  5053                           status	equ	0xFD8
  5054                           
  5055 ;; *************** function _get_time *****************
  5056 ;; Defined at:
  5057 ;;		line 23 in file "RTC.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  time            2   18[COMRAM] PTR int 
  5060 ;;		 -> starttime(14), time(14), 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  i               1   22[COMRAM] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      void 
  5065 ;; Registers used:
  5066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5072 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;Total ram usage:        5 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    3
  5079 ;; This function calls:
  5080 ;;		_I2C_Master_Read
  5081 ;;		_I2C_Master_Start
  5082 ;;		_I2C_Master_Stop
  5083 ;;		_I2C_Master_Write
  5084 ;; This function is called by:
  5085 ;;		_get_timeDif
  5086 ;;		_mainState
  5087 ;;		_executingState
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text21
  5092  00107A                     __ptext21:
  5093                           	opt stack 0
  5094  00107A                     _get_time:
  5095                           	opt stack 26
  5096                           
  5097                           ;RTC.c: 25: I2C_Master_Start();
  5098                           
  5099                           ;incstack = 0
  5100  00107A  EC38  F00C         	call	_I2C_Master_Start	;wreg free
  5101                           
  5102                           ;RTC.c: 26: I2C_Master_Write(0b11010000);
  5103  00107E  0E00               	movlw	0
  5104  001080  6E12               	movwf	I2C_Master_Write@d+1,c
  5105  001082  0ED0               	movlw	208
  5106  001084  6E11               	movwf	I2C_Master_Write@d,c
  5107  001086  EC2F  F00C         	call	_I2C_Master_Write	;wreg free
  5108                           
  5109                           ;RTC.c: 27: I2C_Master_Write(0x00);
  5110  00108A  0E00               	movlw	0
  5111  00108C  6E12               	movwf	I2C_Master_Write@d+1,c
  5112  00108E  0E00               	movlw	0
  5113  001090  6E11               	movwf	I2C_Master_Write@d,c
  5114  001092  EC2F  F00C         	call	_I2C_Master_Write	;wreg free
  5115                           
  5116                           ;RTC.c: 28: I2C_Master_Stop();
  5117  001096  EC34  F00C         	call	_I2C_Master_Stop	;wreg free
  5118                           
  5119                           ;RTC.c: 31: I2C_Master_Start();
  5120  00109A  EC38  F00C         	call	_I2C_Master_Start	;wreg free
  5121                           
  5122                           ;RTC.c: 32: I2C_Master_Write(0b11010001);
  5123  00109E  0E00               	movlw	0
  5124  0010A0  6E12               	movwf	I2C_Master_Write@d+1,c
  5125  0010A2  0ED1               	movlw	209
  5126  0010A4  6E11               	movwf	I2C_Master_Write@d,c
  5127  0010A6  EC2F  F00C         	call	_I2C_Master_Write	;wreg free
  5128                           
  5129                           ;RTC.c: 33: for (unsigned char i = 0; i < 0x06; i++) {
  5130  0010AA  0E00               	movlw	0
  5131  0010AC  6E17               	movwf	get_time@i,c
  5132  0010AE                     l3793:
  5133  0010AE  0E05               	movlw	5
  5134  0010B0  6417               	cpfsgt	get_time@i,c
  5135  0010B2  D001               	goto	l3797
  5136  0010B4  D013               	goto	l3803
  5137  0010B6                     l3797:
  5138                           
  5139                           ;RTC.c: 34: time[i] = I2C_Master_Read(1);
  5140  0010B6  0E01               	movlw	1
  5141  0010B8  EC76  F00B         	call	_I2C_Master_Read
  5142  0010BC  6E15               	movwf	??_get_time& (0+255),c
  5143  0010BE  6A16               	clrf	(??_get_time+1)& (0+255),c
  5144  0010C0  5017               	movf	get_time@i,w,c
  5145  0010C2  0D02               	mullw	2
  5146  0010C4  50F3               	movf	prodl,w,c
  5147  0010C6  2413               	addwf	get_time@time,w,c
  5148  0010C8  6ED9               	movwf	fsr2l,c
  5149  0010CA  50F4               	movf	prodh,w,c
  5150  0010CC  2014               	addwfc	get_time@time+1,w,c
  5151  0010CE  6EDA               	movwf	fsr2h,c
  5152  0010D0  C015  FFDE         	movff	??_get_time,postinc2
  5153  0010D4  C016  FFDD         	movff	??_get_time+1,postdec2
  5154  0010D8  2A17               	incf	get_time@i,f,c
  5155  0010DA  D7E9               	goto	l3793
  5156  0010DC                     l3803:
  5157                           
  5158                           ;RTC.c: 35: }
  5159                           ;RTC.c: 36: time[6] = I2C_Master_Read(0);
  5160  0010DC  0E00               	movlw	0
  5161  0010DE  EC76  F00B         	call	_I2C_Master_Read
  5162  0010E2  6E15               	movwf	??_get_time& (0+255),c
  5163  0010E4  6A16               	clrf	(??_get_time+1)& (0+255),c
  5164  0010E6  EE20 F00C          	lfsr	2,12
  5165  0010EA  5013               	movf	get_time@time,w,c
  5166  0010EC  26D9               	addwf	fsr2l,f,c
  5167  0010EE  5014               	movf	get_time@time+1,w,c
  5168  0010F0  22DA               	addwfc	fsr2h,f,c
  5169  0010F2  C015  FFDE         	movff	??_get_time,postinc2
  5170  0010F6  C016  FFDD         	movff	??_get_time+1,postdec2
  5171                           
  5172                           ;RTC.c: 37: I2C_Master_Stop();
  5173  0010FA  EC34  F00C         	call	_I2C_Master_Stop	;wreg free
  5174  0010FE  0012               	return		;funcret
  5175  001100                     __end_of_get_time:
  5176                           	opt stack 0
  5177                           tblptru	equ	0xFF8
  5178                           tblptrh	equ	0xFF7
  5179                           tblptrl	equ	0xFF6
  5180                           tablat	equ	0xFF5
  5181                           prodh	equ	0xFF4
  5182                           prodl	equ	0xFF3
  5183                           intcon	equ	0xFF2
  5184                           intcon3	equ	0xFF0
  5185                           postinc0	equ	0xFEE
  5186                           wreg	equ	0xFE8
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function _I2C_Master_Write *****************
  5195 ;; Defined at:
  5196 ;;		line 47 in file "I2C.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  d               2   16[COMRAM] unsigned int 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;		None
  5201 ;; Return value:  Size  Location     Type
  5202 ;;                  1    wreg      void 
  5203 ;; Registers used:
  5204 ;;		wreg, status,2, status,0, cstack
  5205 ;; Tracked objects:
  5206 ;;		On entry : 0/0
  5207 ;;		On exit  : 0/0
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;Total ram usage:        2 bytes
  5215 ;; Hardware stack levels used:    1
  5216 ;; Hardware stack levels required when called:    2
  5217 ;; This function calls:
  5218 ;;		_I2C_Master_Wait
  5219 ;; This function is called by:
  5220 ;;		_fixLCD
  5221 ;;		_get_time
  5222 ;;		_set_time
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text22
  5227  00185E                     __ptext22:
  5228                           	opt stack 0
  5229  00185E                     _I2C_Master_Write:
  5230                           	opt stack 26
  5231                           
  5232                           ;I2C.c: 49: I2C_Master_Wait();
  5233                           
  5234                           ;incstack = 0
  5235  00185E  EC13  F00C         	call	_I2C_Master_Wait	;wreg free
  5236                           
  5237                           ;I2C.c: 50: SSPBUF = d;
  5238  001862  C011  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5239  001866  0012               	return		;funcret
  5240  001868                     __end_of_I2C_Master_Write:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon3	equ	0xFF0
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _I2C_Master_Stop *****************
  5260 ;; Defined at:
  5261 ;;		line 41 in file "I2C.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;Total ram usage:        0 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    2
  5282 ;; This function calls:
  5283 ;;		_I2C_Master_Wait
  5284 ;; This function is called by:
  5285 ;;		_fixLCD
  5286 ;;		_get_time
  5287 ;;		_set_time
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           	psect	text23
  5292  001868                     __ptext23:
  5293                           	opt stack 0
  5294  001868                     _I2C_Master_Stop:
  5295                           	opt stack 26
  5296                           
  5297                           ;I2C.c: 43: I2C_Master_Wait();
  5298                           
  5299                           ;incstack = 0
  5300  001868  EC13  F00C         	call	_I2C_Master_Wait	;wreg free
  5301                           
  5302                           ;I2C.c: 44: PEN = 1;
  5303  00186C  84C5               	bsf	4037,2,c	;volatile
  5304  00186E  0012               	return		;funcret
  5305  001870                     __end_of_I2C_Master_Stop:
  5306                           	opt stack 0
  5307                           tblptru	equ	0xFF8
  5308                           tblptrh	equ	0xFF7
  5309                           tblptrl	equ	0xFF6
  5310                           tablat	equ	0xFF5
  5311                           prodh	equ	0xFF4
  5312                           prodl	equ	0xFF3
  5313                           intcon	equ	0xFF2
  5314                           intcon3	equ	0xFF0
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           postdec2	equ	0xFDD
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _I2C_Master_Start *****************
  5325 ;; Defined at:
  5326 ;;		line 29 in file "I2C.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;Total ram usage:        0 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    2
  5347 ;; This function calls:
  5348 ;;		_I2C_Master_Wait
  5349 ;; This function is called by:
  5350 ;;		_fixLCD
  5351 ;;		_get_time
  5352 ;;		_set_time
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text24
  5357  001870                     __ptext24:
  5358                           	opt stack 0
  5359  001870                     _I2C_Master_Start:
  5360                           	opt stack 26
  5361                           
  5362                           ;I2C.c: 31: I2C_Master_Wait();
  5363                           
  5364                           ;incstack = 0
  5365  001870  EC13  F00C         	call	_I2C_Master_Wait	;wreg free
  5366                           
  5367                           ;I2C.c: 32: SEN = 1;
  5368  001874  80C5               	bsf	4037,0,c	;volatile
  5369  001876  0012               	return		;funcret
  5370  001878                     __end_of_I2C_Master_Start:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           intcon	equ	0xFF2
  5379                           intcon3	equ	0xFF0
  5380                           postinc0	equ	0xFEE
  5381                           wreg	equ	0xFE8
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _I2C_Master_Read *****************
  5390 ;; Defined at:
  5391 ;;		line 53 in file "I2C.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  a               1    wreg     unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  a               1   16[COMRAM] unsigned char 
  5396 ;;  temp            1   17[COMRAM] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      unsigned char 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;Total ram usage:        2 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    2
  5413 ;; This function calls:
  5414 ;;		_I2C_Master_Wait
  5415 ;; This function is called by:
  5416 ;;		_fixLCD
  5417 ;;		_get_time
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text25
  5422  0016EC                     __ptext25:
  5423                           	opt stack 0
  5424  0016EC                     _I2C_Master_Read:
  5425                           	opt stack 26
  5426                           
  5427                           ;incstack = 0
  5428                           ;I2C_Master_Read@a stored from wreg
  5429  0016EC  6E11               	movwf	I2C_Master_Read@a,c
  5430                           
  5431                           ;I2C.c: 55: unsigned char temp;
  5432                           ;I2C.c: 56: I2C_Master_Wait();
  5433  0016EE  EC13  F00C         	call	_I2C_Master_Wait	;wreg free
  5434                           
  5435                           ;I2C.c: 57: RCEN = 1;
  5436  0016F2  86C5               	bsf	4037,3,c	;volatile
  5437                           
  5438                           ;I2C.c: 58: I2C_Master_Wait();
  5439  0016F4  EC13  F00C         	call	_I2C_Master_Wait	;wreg free
  5440                           
  5441                           ;I2C.c: 59: temp = SSPBUF;
  5442  0016F8  CFC9 F012          	movff	4041,I2C_Master_Read@temp	;volatile
  5443                           
  5444                           ;I2C.c: 60: I2C_Master_Wait();
  5445  0016FC  EC13  F00C         	call	_I2C_Master_Wait	;wreg free
  5446                           
  5447                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5448  001700  5011               	movf	I2C_Master_Read@a,w,c
  5449  001702  A4D8               	btfss	status,2,c
  5450  001704  D002               	goto	u2390
  5451  001706  8AC5               	bsf	4037,5,c	;volatile
  5452  001708  D001               	goto	l3575
  5453  00170A                     u2390:
  5454  00170A  9AC5               	bcf	4037,5,c	;volatile
  5455  00170C                     l3575:
  5456                           
  5457                           ;I2C.c: 62: ACKEN = 1;
  5458  00170C  88C5               	bsf	4037,4,c	;volatile
  5459                           
  5460                           ;I2C.c: 63: return temp;
  5461  00170E  5012               	movf	I2C_Master_Read@temp,w,c
  5462  001710  0012               	return	
  5463  001712                     __end_of_I2C_Master_Read:
  5464                           	opt stack 0
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           intcon	equ	0xFF2
  5472                           intcon3	equ	0xFF0
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           indf2	equ	0xFDF
  5476                           postinc2	equ	0xFDE
  5477                           postdec2	equ	0xFDD
  5478                           fsr2h	equ	0xFDA
  5479                           fsr2l	equ	0xFD9
  5480                           status	equ	0xFD8
  5481                           
  5482 ;; *************** function _I2C_Master_Wait *****************
  5483 ;; Defined at:
  5484 ;;		line 24 in file "I2C.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      void 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;Total ram usage:        1 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    1
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_I2C_Master_Start
  5509 ;;		_I2C_Master_Stop
  5510 ;;		_I2C_Master_Write
  5511 ;;		_I2C_Master_Read
  5512 ;;		_I2C_Master_RepeatedStart
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text26
  5517  001826                     __ptext26:
  5518                           	opt stack 0
  5519  001826                     _I2C_Master_Wait:
  5520                           	opt stack 26
  5521  001826                     l34:
  5522  001826  B4C7               	btfsc	4039,2,c	;volatile
  5523  001828  D7FE               	goto	l34
  5524  00182A  CFC5 F010          	movff	4037,??_I2C_Master_Wait	;volatile
  5525  00182E  0E1F               	movlw	31
  5526  001830  1610               	andwf	??_I2C_Master_Wait,f,c
  5527  001832  B4D8               	btfsc	status,2,c
  5528  001834  0012               	return	
  5529  001836  D7F7               	goto	l34
  5530  001838                     __end_of_I2C_Master_Wait:
  5531                           	opt stack 0
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           intcon	equ	0xFF2
  5539                           intcon3	equ	0xFF0
  5540                           postinc0	equ	0xFEE
  5541                           wreg	equ	0xFE8
  5542                           indf2	equ	0xFDF
  5543                           postinc2	equ	0xFDE
  5544                           postdec2	equ	0xFDD
  5545                           fsr2h	equ	0xFDA
  5546                           fsr2l	equ	0xFD9
  5547                           status	equ	0xFD8
  5548                           
  5549 ;; *************** function _eeprom_LogResult *****************
  5550 ;; Defined at:
  5551 ;;		line 82 in file "eeprom.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  data            2   18[COMRAM] PTR unsigned char 
  5554 ;;		 -> executingState@res(8), 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  i               2   21[COMRAM] int 
  5557 ;;  address         1   20[COMRAM] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;Total ram usage:        5 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    3
  5574 ;; This function calls:
  5575 ;;		_eeprom_WriteByte
  5576 ;;		_newestAddress
  5577 ;; This function is called by:
  5578 ;;		_executingState
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text27
  5583  0013A4                     __ptext27:
  5584                           	opt stack 0
  5585  0013A4                     _eeprom_LogResult:
  5586                           	opt stack 26
  5587                           
  5588                           ;eeprom.c: 83: uint8_t address = newestAddress() + 5;
  5589                           
  5590                           ;incstack = 0
  5591  0013A4  EC1C  F00C         	call	_newestAddress	;wreg free
  5592  0013A8  0F05               	addlw	5
  5593  0013AA  6E15               	movwf	eeprom_LogResult@address,c
  5594                           
  5595                           ;eeprom.c: 84: eeprom_WriteByte(0x0000, address);
  5596  0013AC  0E00               	movlw	0
  5597  0013AE  6E11               	movwf	eeprom_WriteByte@address+1,c
  5598  0013B0  0E00               	movlw	0
  5599  0013B2  6E10               	movwf	eeprom_WriteByte@address,c
  5600  0013B4  C015  F012         	movff	eeprom_LogResult@address,eeprom_WriteByte@data
  5601  0013B8  EC89  F00B         	call	_eeprom_WriteByte	;wreg free
  5602                           
  5603                           ;eeprom.c: 85: for(int i = 0; i < 5; i++){
  5604  0013BC  0E00               	movlw	0
  5605  0013BE  6E17               	movwf	eeprom_LogResult@i+1,c
  5606  0013C0  0E00               	movlw	0
  5607  0013C2  6E16               	movwf	eeprom_LogResult@i,c
  5608  0013C4  BE17               	btfsc	eeprom_LogResult@i+1,7,c
  5609  0013C6  D006               	goto	l4085
  5610  0013C8  5017               	movf	eeprom_LogResult@i+1,w,c
  5611  0013CA  E111               	bnz	l352
  5612  0013CC  0E05               	movlw	5
  5613  0013CE  5C16               	subwf	eeprom_LogResult@i,w,c
  5614  0013D0  B0D8               	btfsc	status,0,c
  5615  0013D2  0012               	return	
  5616  0013D4                     l4085:
  5617                           
  5618                           ;eeprom.c: 86: eeprom_WriteByte(address + i, 0xFF);
  5619  0013D4  5015               	movf	eeprom_LogResult@address,w,c
  5620  0013D6  2416               	addwf	eeprom_LogResult@i,w,c
  5621  0013D8  6E10               	movwf	eeprom_WriteByte@address,c
  5622  0013DA  0E00               	movlw	0
  5623  0013DC  2017               	addwfc	eeprom_LogResult@i+1,w,c
  5624  0013DE  6E11               	movwf	eeprom_WriteByte@address+1,c
  5625  0013E0  0EFF               	movlw	255
  5626  0013E2  6E12               	movwf	eeprom_WriteByte@data,c
  5627  0013E4  EC89  F00B         	call	_eeprom_WriteByte	;wreg free
  5628  0013E8  4A16               	infsnz	eeprom_LogResult@i,f,c
  5629  0013EA  2A17               	incf	eeprom_LogResult@i+1,f,c
  5630  0013EC  D7EB               	goto	L5
  5631  0013EE                     l352:
  5632  0013EE  0012               	return		;funcret
  5633  0013F0                     __end_of_eeprom_LogResult:
  5634                           	opt stack 0
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon3	equ	0xFF0
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           indf2	equ	0xFDF
  5646                           postinc2	equ	0xFDE
  5647                           postdec2	equ	0xFDD
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _dispenseSnCan *****************
  5653 ;; Defined at:
  5654 ;;		line 231 in file "servos.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    2
  5675 ;; This function calls:
  5676 ;;		_servoRotate1
  5677 ;;		_servoRotate90
  5678 ;; This function is called by:
  5679 ;;		_executingState
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text28
  5684  00168C                     __ptext28:
  5685                           	opt stack 0
  5686  00168C                     _dispenseSnCan:
  5687                           	opt stack 27
  5688                           
  5689                           ;servos.c: 232: servoRotate90(0);
  5690                           
  5691                           ;incstack = 0
  5692  00168C  0E00               	movlw	0
  5693  00168E  6E11               	movwf	servoRotate90@servo+1,c
  5694  001690  0E00               	movlw	0
  5695  001692  6E10               	movwf	servoRotate90@servo,c
  5696  001694  ECD2  F006         	call	_servoRotate90	;wreg free
  5697                           
  5698                           ;servos.c: 233: _delay((unsigned long)((800)*(10000000/4000.0)));
  5699  001698  0E0B               	movlw	11
  5700  00169A  6E17               	movwf	(??_dispenseSnCan+1)& (0+255),c
  5701  00169C  0E26               	movlw	38
  5702  00169E  6E16               	movwf	??_dispenseSnCan& (0+255),c
  5703  0016A0  0E5E               	movlw	94
  5704  0016A2                     u3597:
  5705  0016A2  2EE8               	decfsz	wreg,f,c
  5706  0016A4  D7FE               	bra	u3597
  5707  0016A6  2E16               	decfsz	??_dispenseSnCan& (0+255),f,c
  5708  0016A8  D7FC               	bra	u3597
  5709  0016AA  2E17               	decfsz	(??_dispenseSnCan+1)& (0+255),f,c
  5710  0016AC  D7FA               	bra	u3597
  5711                           
  5712                           ;servos.c: 234: servoRotate1(0);
  5713  0016AE  0E00               	movlw	0
  5714  0016B0  6E11               	movwf	servoRotate1@angle+1,c
  5715  0016B2  0E00               	movlw	0
  5716  0016B4  6E10               	movwf	servoRotate1@angle,c
  5717  0016B6  EC27  F00B         	call	_servoRotate1	;wreg free
  5718  0016BA  0012               	return		;funcret
  5719  0016BC                     __end_of_dispenseSnCan:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           prodh	equ	0xFF4
  5726                           prodl	equ	0xFF3
  5727                           intcon	equ	0xFF2
  5728                           intcon3	equ	0xFF0
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _servoRotate1 *****************
  5739 ;; Defined at:
  5740 ;;		line 21 in file "servos.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  angle           2   15[COMRAM] int 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  i               2   18[COMRAM] unsigned int 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;Total ram usage:        5 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    1
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_executingState
  5765 ;;		_dispenseSnCan
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text29
  5770  00164E                     __ptext29:
  5771                           	opt stack 0
  5772  00164E                     _servoRotate1:
  5773                           	opt stack 28
  5774                           
  5775                           ;servos.c: 22: unsigned int i;
  5776                           ;servos.c: 23: for (i = 0; i < loopcount; i++) {
  5777                           
  5778                           ;incstack = 0
  5779  00164E  0E00               	movlw	0
  5780  001650  6E14               	movwf	servoRotate1@i+1,c
  5781  001652  0E00               	movlw	0
  5782  001654  6E13               	movwf	servoRotate1@i,c
  5783  001656  D013               	goto	l425
  5784  001658                     l426:
  5785                           
  5786                           ;servos.c: 24: LATAbits.LATA4 = 1;
  5787  001658  8889               	bsf	3977,4,c	;volatile
  5788                           
  5789                           ;servos.c: 25: _delay((unsigned long)((1550)*(10000000/4000000.0)));
  5790  00165A  0E06               	movlw	6
  5791  00165C  6E12               	movwf	??_servoRotate1& (0+255),c
  5792  00165E  0E07               	movlw	7
  5793  001660                     u3607:
  5794  001660  2EE8               	decfsz	wreg,f,c
  5795  001662  D7FE               	bra	u3607
  5796  001664  2E12               	decfsz	??_servoRotate1& (0+255),f,c
  5797  001666  D7FC               	bra	u3607
  5798                           
  5799                           ;servos.c: 26: LATAbits.LATA4 = 0;
  5800  001668  9889               	bcf	3977,4,c	;volatile
  5801                           
  5802                           ;servos.c: 27: _delay((unsigned long)((14450)*(10000000/4000000.0)));
  5803  00166A  0E2F               	movlw	47
  5804  00166C  6E12               	movwf	??_servoRotate1& (0+255),c
  5805  00166E  0EE9               	movlw	233
  5806  001670                     u3617:
  5807  001670  2EE8               	decfsz	wreg,f,c
  5808  001672  D7FE               	bra	u3617
  5809  001674  2E12               	decfsz	??_servoRotate1& (0+255),f,c
  5810  001676  D7FC               	bra	u3617
  5811  001678  D000               	nop2	
  5812  00167A  4A13               	infsnz	servoRotate1@i,f,c
  5813  00167C  2A14               	incf	servoRotate1@i+1,f,c
  5814  00167E                     l425:
  5815  00167E  504D               	movf	_loopcount,w,c
  5816  001680  5C13               	subwf	servoRotate1@i,w,c
  5817  001682  504E               	movf	_loopcount+1,w,c
  5818  001684  5814               	subwfb	servoRotate1@i+1,w,c
  5819  001686  B0D8               	btfsc	status,0,c
  5820  001688  0012               	return	
  5821  00168A  D7E6               	goto	l426
  5822  00168C                     __end_of_servoRotate1:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           intcon3	equ	0xFF0
  5832                           postinc0	equ	0xFEE
  5833                           wreg	equ	0xFE8
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _dispenseAlCan *****************
  5842 ;; Defined at:
  5843 ;;		line 225 in file "servos.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      void 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;Total ram usage:        2 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    2
  5864 ;; This function calls:
  5865 ;;		_servoRotate2
  5866 ;;		_servoRotate90
  5867 ;; This function is called by:
  5868 ;;		_executingState
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text30
  5873  0016BC                     __ptext30:
  5874                           	opt stack 0
  5875  0016BC                     _dispenseAlCan:
  5876                           	opt stack 27
  5877                           
  5878                           ;servos.c: 226: servoRotate90(1);
  5879                           
  5880                           ;incstack = 0
  5881  0016BC  0E00               	movlw	0
  5882  0016BE  6E11               	movwf	servoRotate90@servo+1,c
  5883  0016C0  0E01               	movlw	1
  5884  0016C2  6E10               	movwf	servoRotate90@servo,c
  5885  0016C4  ECD2  F006         	call	_servoRotate90	;wreg free
  5886                           
  5887                           ;servos.c: 227: _delay((unsigned long)((800)*(10000000/4000.0)));
  5888  0016C8  0E0B               	movlw	11
  5889  0016CA  6E17               	movwf	(??_dispenseAlCan+1)& (0+255),c
  5890  0016CC  0E26               	movlw	38
  5891  0016CE  6E16               	movwf	??_dispenseAlCan& (0+255),c
  5892  0016D0  0E5E               	movlw	94
  5893  0016D2                     u3627:
  5894  0016D2  2EE8               	decfsz	wreg,f,c
  5895  0016D4  D7FE               	bra	u3627
  5896  0016D6  2E16               	decfsz	??_dispenseAlCan& (0+255),f,c
  5897  0016D8  D7FC               	bra	u3627
  5898  0016DA  2E17               	decfsz	(??_dispenseAlCan+1)& (0+255),f,c
  5899  0016DC  D7FA               	bra	u3627
  5900                           
  5901                           ;servos.c: 228: servoRotate2(1);
  5902  0016DE  0E00               	movlw	0
  5903  0016E0  6E11               	movwf	servoRotate2@angle+1,c
  5904  0016E2  0E01               	movlw	1
  5905  0016E4  6E10               	movwf	servoRotate2@angle,c
  5906  0016E6  ECAA  F00A         	call	_servoRotate2	;wreg free
  5907  0016EA  0012               	return		;funcret
  5908  0016EC                     __end_of_dispenseAlCan:
  5909                           	opt stack 0
  5910                           tblptru	equ	0xFF8
  5911                           tblptrh	equ	0xFF7
  5912                           tblptrl	equ	0xFF6
  5913                           tablat	equ	0xFF5
  5914                           prodh	equ	0xFF4
  5915                           prodl	equ	0xFF3
  5916                           intcon	equ	0xFF2
  5917                           intcon3	equ	0xFF0
  5918                           postinc0	equ	0xFEE
  5919                           wreg	equ	0xFE8
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8
  5926                           
  5927 ;; *************** function _servoRotate90 *****************
  5928 ;; Defined at:
  5929 ;;		line 122 in file "servos.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  servo           2   15[COMRAM] int 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  i               2   19[COMRAM] unsigned int 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      void 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5943 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;Total ram usage:        6 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    1
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_executingState
  5954 ;;		_dispenseAlCan
  5955 ;;		_dispenseSnCan
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text31
  5960  000DA4                     __ptext31:
  5961                           	opt stack 0
  5962  000DA4                     _servoRotate90:
  5963                           	opt stack 28
  5964                           
  5965                           ;servos.c: 124: unsigned int i;
  5966                           ;servos.c: 125: for (i = 0; i < loopcount; i++) {
  5967                           
  5968                           ;incstack = 0
  5969  000DA4  0E00               	movlw	0
  5970  000DA6  6E15               	movwf	servoRotate90@i+1,c
  5971  000DA8  0E00               	movlw	0
  5972  000DAA  6E14               	movwf	servoRotate90@i,c
  5973  000DAC  D056               	goto	l474
  5974  000DAE                     l477:
  5975                           
  5976                           ;servos.c: 128: LATAbits.LATA4 = 1;
  5977  000DAE  8889               	bsf	3977,4,c	;volatile
  5978                           
  5979                           ;servos.c: 129: break;
  5980  000DB0  D020               	goto	l3829
  5981  000DB2                     l479:
  5982                           
  5983                           ;servos.c: 131: LATAbits.LATA5 = 1;
  5984  000DB2  8A89               	bsf	3977,5,c	;volatile
  5985                           
  5986                           ;servos.c: 132: break;
  5987  000DB4  D01E               	goto	l3829
  5988  000DB6                     l480:
  5989                           
  5990                           ;servos.c: 134: LATEbits.LATE0 = 1;
  5991  000DB6  808D               	bsf	3981,0,c	;volatile
  5992                           
  5993                           ;servos.c: 135: break;
  5994  000DB8  D01C               	goto	l3829
  5995  000DBA                     l481:
  5996                           
  5997                           ;servos.c: 137: LATEbits.LATE1 = 1;
  5998  000DBA  828D               	bsf	3981,1,c	;volatile
  5999                           
  6000                           ;servos.c: 138: break;
  6001  000DBC  D01A               	goto	l3829
  6002  000DBE                     l482:
  6003                           
  6004                           ;servos.c: 140: LATBbits.LATB2 = 1;
  6005  000DBE  848A               	bsf	3978,2,c	;volatile
  6006                           
  6007                           ;servos.c: 142: }
  6008                           
  6009                           ;servos.c: 141: break;
  6010  000DC0  D018               	goto	l3829
  6011  000DC2                     l3827:
  6012  000DC2  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  6013  000DC6  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  6014                           
  6015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6016                           ; Switch size 1, requested type "space"
  6017                           ; Number of cases is 1, Range of values is 0 to 0
  6018                           ; switch strategies available:
  6019                           ; Name         Instructions Cycles
  6020                           ; simple_byte            4     3 (average)
  6021                           ;	Chosen strategy is simple_byte
  6022  000DCA  5013               	movf	??_servoRotate90+1,w,c
  6023  000DCC  0A00               	xorlw	0	; case 0
  6024  000DCE  A4D8               	btfss	status,2,c
  6025  000DD0  D010               	goto	l3829
  6026                           
  6027                           ; Switch size 1, requested type "space"
  6028                           ; Number of cases is 5, Range of values is 0 to 4
  6029                           ; switch strategies available:
  6030                           ; Name         Instructions Cycles
  6031                           ; simple_byte           16     9 (average)
  6032                           ;	Chosen strategy is simple_byte
  6033  000DD2  5012               	movf	??_servoRotate90,w,c
  6034  000DD4  0A00               	xorlw	0	; case 0
  6035  000DD6  B4D8               	btfsc	status,2,c
  6036  000DD8  D7EA               	goto	l477
  6037  000DDA  0A01               	xorlw	1	; case 1
  6038  000DDC  B4D8               	btfsc	status,2,c
  6039  000DDE  D7E9               	goto	l479
  6040  000DE0  0A03               	xorlw	3	; case 2
  6041  000DE2  B4D8               	btfsc	status,2,c
  6042  000DE4  D7E8               	goto	l480
  6043  000DE6  0A01               	xorlw	1	; case 3
  6044  000DE8  B4D8               	btfsc	status,2,c
  6045  000DEA  D7E7               	goto	l481
  6046  000DEC  0A07               	xorlw	7	; case 4
  6047  000DEE  B4D8               	btfsc	status,2,c
  6048  000DF0  D7E6               	goto	l482
  6049  000DF2                     l3829:
  6050                           
  6051                           ;servos.c: 143: _delay((unsigned long)((2400)*(10000000/4000000.0)));
  6052  000DF2  0E08               	movlw	8
  6053  000DF4  6E12               	movwf	??_servoRotate90& (0+255),c
  6054  000DF6  0ECA               	movlw	202
  6055  000DF8                     u3637:
  6056  000DF8  2EE8               	decfsz	wreg,f,c
  6057  000DFA  D7FE               	bra	u3637
  6058  000DFC  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  6059  000DFE  D7FC               	bra	u3637
  6060                           
  6061                           ;servos.c: 144: switch (servo) {
  6062  000E00  D00A               	goto	l3833
  6063  000E02                     l484:
  6064                           
  6065                           ;servos.c: 146: LATAbits.LATA4 = 0;
  6066  000E02  9889               	bcf	3977,4,c	;volatile
  6067                           
  6068                           ;servos.c: 147: break;
  6069  000E04  D020               	goto	l3835
  6070  000E06                     l486:
  6071                           
  6072                           ;servos.c: 149: LATAbits.LATA5 = 0;
  6073  000E06  9A89               	bcf	3977,5,c	;volatile
  6074                           
  6075                           ;servos.c: 150: break;
  6076  000E08  D01E               	goto	l3835
  6077  000E0A                     l487:
  6078                           
  6079                           ;servos.c: 152: LATEbits.LATE0 = 0;
  6080  000E0A  908D               	bcf	3981,0,c	;volatile
  6081                           
  6082                           ;servos.c: 153: break;
  6083  000E0C  D01C               	goto	l3835
  6084  000E0E                     l488:
  6085                           
  6086                           ;servos.c: 155: LATEbits.LATE1 = 0;
  6087  000E0E  928D               	bcf	3981,1,c	;volatile
  6088                           
  6089                           ;servos.c: 156: break;
  6090  000E10  D01A               	goto	l3835
  6091  000E12                     l489:
  6092                           
  6093                           ;servos.c: 158: LATBbits.LATB2 = 0;
  6094  000E12  948A               	bcf	3978,2,c	;volatile
  6095                           
  6096                           ;servos.c: 160: }
  6097                           
  6098                           ;servos.c: 159: break;
  6099  000E14  D018               	goto	l3835
  6100  000E16                     l3833:
  6101  000E16  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  6102  000E1A  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  6103                           
  6104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6105                           ; Switch size 1, requested type "space"
  6106                           ; Number of cases is 1, Range of values is 0 to 0
  6107                           ; switch strategies available:
  6108                           ; Name         Instructions Cycles
  6109                           ; simple_byte            4     3 (average)
  6110                           ;	Chosen strategy is simple_byte
  6111  000E1E  5013               	movf	??_servoRotate90+1,w,c
  6112  000E20  0A00               	xorlw	0	; case 0
  6113  000E22  A4D8               	btfss	status,2,c
  6114  000E24  D010               	goto	l3835
  6115                           
  6116                           ; Switch size 1, requested type "space"
  6117                           ; Number of cases is 5, Range of values is 0 to 4
  6118                           ; switch strategies available:
  6119                           ; Name         Instructions Cycles
  6120                           ; simple_byte           16     9 (average)
  6121                           ;	Chosen strategy is simple_byte
  6122  000E26  5012               	movf	??_servoRotate90,w,c
  6123  000E28  0A00               	xorlw	0	; case 0
  6124  000E2A  B4D8               	btfsc	status,2,c
  6125  000E2C  D7EA               	goto	l484
  6126  000E2E  0A01               	xorlw	1	; case 1
  6127  000E30  B4D8               	btfsc	status,2,c
  6128  000E32  D7E9               	goto	l486
  6129  000E34  0A03               	xorlw	3	; case 2
  6130  000E36  B4D8               	btfsc	status,2,c
  6131  000E38  D7E8               	goto	l487
  6132  000E3A  0A01               	xorlw	1	; case 3
  6133  000E3C  B4D8               	btfsc	status,2,c
  6134  000E3E  D7E7               	goto	l488
  6135  000E40  0A07               	xorlw	7	; case 4
  6136  000E42  B4D8               	btfsc	status,2,c
  6137  000E44  D7E6               	goto	l489
  6138  000E46                     l3835:
  6139                           
  6140                           ;servos.c: 161: _delay((unsigned long)((17600)*(10000000/4000000.0)));
  6141  000E46  0E3A               	movlw	58
  6142  000E48  6E12               	movwf	??_servoRotate90& (0+255),c
  6143  000E4A  0E23               	movlw	35
  6144  000E4C                     u3647:
  6145  000E4C  2EE8               	decfsz	wreg,f,c
  6146  000E4E  D7FE               	bra	u3647
  6147  000E50  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  6148  000E52  D7FC               	bra	u3647
  6149  000E54  F000               	nop	
  6150  000E56  4A14               	infsnz	servoRotate90@i,f,c
  6151  000E58  2A15               	incf	servoRotate90@i+1,f,c
  6152  000E5A                     l474:
  6153  000E5A  504D               	movf	_loopcount,w,c
  6154  000E5C  5C14               	subwf	servoRotate90@i,w,c
  6155  000E5E  504E               	movf	_loopcount+1,w,c
  6156  000E60  5815               	subwfb	servoRotate90@i+1,w,c
  6157  000E62  B0D8               	btfsc	status,0,c
  6158  000E64  0012               	return	
  6159  000E66  D7AD               	goto	l3827
  6160  000E68                     __end_of_servoRotate90:
  6161                           	opt stack 0
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           intcon3	equ	0xFF0
  6170                           postinc0	equ	0xFEE
  6171                           wreg	equ	0xFE8
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _servoRotate2 *****************
  6180 ;; Defined at:
  6181 ;;		line 32 in file "servos.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  angle           2   15[COMRAM] int 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  i               2   18[COMRAM] unsigned int 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;Total ram usage:        5 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    1
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_executingState
  6206 ;;		_dispenseAlCan
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text32
  6211  001554                     __ptext32:
  6212                           	opt stack 0
  6213  001554                     _servoRotate2:
  6214                           	opt stack 28
  6215                           
  6216                           ;servos.c: 33: unsigned int i;
  6217                           ;servos.c: 34: for (i = 0; i < loopcount; i++) {
  6218                           
  6219                           ;incstack = 0
  6220  001554  0E00               	movlw	0
  6221  001556  6E14               	movwf	servoRotate2@i+1,c
  6222  001558  0E00               	movlw	0
  6223  00155A  6E13               	movwf	servoRotate2@i,c
  6224  00155C  D014               	goto	l431
  6225  00155E                     l432:
  6226                           
  6227                           ;servos.c: 35: LATAbits.LATA5 = 1;
  6228  00155E  8A89               	bsf	3977,5,c	;volatile
  6229                           
  6230                           ;servos.c: 36: _delay((unsigned long)((1665)*(10000000/4000000.0)));
  6231  001560  0E06               	movlw	6
  6232  001562  6E12               	movwf	??_servoRotate2& (0+255),c
  6233  001564  0E66               	movlw	102
  6234  001566                     u3657:
  6235  001566  2EE8               	decfsz	wreg,f,c
  6236  001568  D7FE               	bra	u3657
  6237  00156A  2E12               	decfsz	??_servoRotate2& (0+255),f,c
  6238  00156C  D7FC               	bra	u3657
  6239  00156E  D000               	nop2	
  6240                           
  6241                           ;servos.c: 37: LATAbits.LATA5 = 0;
  6242  001570  9A89               	bcf	3977,5,c	;volatile
  6243                           
  6244                           ;servos.c: 38: _delay((unsigned long)((18335)*(10000000/4000000.0)));
  6245  001572  0E3C               	movlw	60
  6246  001574  6E12               	movwf	??_servoRotate2& (0+255),c
  6247  001576  0E86               	movlw	134
  6248  001578                     u3667:
  6249  001578  2EE8               	decfsz	wreg,f,c
  6250  00157A  D7FE               	bra	u3667
  6251  00157C  2E12               	decfsz	??_servoRotate2& (0+255),f,c
  6252  00157E  D7FC               	bra	u3667
  6253  001580  F000               	nop	
  6254  001582  4A13               	infsnz	servoRotate2@i,f,c
  6255  001584  2A14               	incf	servoRotate2@i+1,f,c
  6256  001586                     l431:
  6257  001586  504D               	movf	_loopcount,w,c
  6258  001588  5C13               	subwf	servoRotate2@i,w,c
  6259  00158A  504E               	movf	_loopcount+1,w,c
  6260  00158C  5814               	subwfb	servoRotate2@i+1,w,c
  6261  00158E  B0D8               	btfsc	status,0,c
  6262  001590  0012               	return	
  6263  001592  D7E5               	goto	l432
  6264  001594                     __end_of_servoRotate2:
  6265                           	opt stack 0
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           intcon3	equ	0xFF0
  6274                           postinc0	equ	0xFEE
  6275                           wreg	equ	0xFE8
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           fsr2h	equ	0xFDA
  6280                           fsr2l	equ	0xFD9
  6281                           status	equ	0xFD8
  6282                           
  6283 ;; *************** function _eeprom_initialize *****************
  6284 ;; Defined at:
  6285 ;;		line 73 in file "eeprom.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;		None
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;		None
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      void 
  6292 ;; Registers used:
  6293 ;;		wreg, status,2, cstack
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;Total ram usage:        0 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    3
  6306 ;; This function calls:
  6307 ;;		_eeprom_WriteByte
  6308 ;;		_newestAddress
  6309 ;; This function is called by:
  6310 ;;		_main
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text33
  6315  00177C                     __ptext33:
  6316                           	opt stack 0
  6317  00177C                     _eeprom_initialize:
  6318                           	opt stack 27
  6319                           
  6320                           ;eeprom.c: 74: if(newestAddress() == 0b11111111){
  6321                           
  6322                           ;incstack = 0
  6323  00177C  EC1C  F00C         	call	_newestAddress	;wreg free
  6324  001780  0AFF               	xorlw	255
  6325  001782  A4D8               	btfss	status,2,c
  6326  001784  0012               	return	
  6327                           
  6328                           ;eeprom.c: 75: eeprom_WriteByte(0x0000, 0x00);
  6329  001786  0E00               	movlw	0
  6330  001788  6E11               	movwf	eeprom_WriteByte@address+1,c
  6331  00178A  0E00               	movlw	0
  6332  00178C  6E10               	movwf	eeprom_WriteByte@address,c
  6333  00178E  0E00               	movlw	0
  6334  001790  6E12               	movwf	eeprom_WriteByte@data,c
  6335  001792  EC89  F00B         	call	_eeprom_WriteByte	;wreg free
  6336  001796  0012               	return	
  6337  001798                     __end_of_eeprom_initialize:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           intcon	equ	0xFF2
  6346                           intcon3	equ	0xFF0
  6347                           postinc0	equ	0xFEE
  6348                           wreg	equ	0xFE8
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _newestAddress *****************
  6357 ;; Defined at:
  6358 ;;		line 69 in file "eeprom.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      unsigned char 
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    2
  6379 ;; This function calls:
  6380 ;;		_eeprom_ReadByte
  6381 ;; This function is called by:
  6382 ;;		_eeprom_initialize
  6383 ;;		_eeprom_LogResult
  6384 ;;		_eeprom_GetLog
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text34
  6389  001838                     __ptext34:
  6390                           	opt stack 0
  6391  001838                     _newestAddress:
  6392                           	opt stack 26
  6393                           
  6394                           ;eeprom.c: 70: return eeprom_ReadByte(0x0000);
  6395                           
  6396                           ;incstack = 0
  6397  001838  0E00               	movlw	0
  6398  00183A  6E11               	movwf	eeprom_ReadByte@address+1,c
  6399  00183C  0E00               	movlw	0
  6400  00183E  6E10               	movwf	eeprom_ReadByte@address,c
  6401  001840  EC08  F00C         	call	_eeprom_ReadByte	;wreg free
  6402  001844  0012               	return	
  6403  001846                     __end_of_newestAddress:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           intcon	equ	0xFF2
  6412                           intcon3	equ	0xFF0
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           postdec2	equ	0xFDD
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _eeprom_ReadByte *****************
  6423 ;; Defined at:
  6424 ;;		line 14 in file "eeprom.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  address         2   15[COMRAM] unsigned int 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      unsigned char 
  6431 ;; Registers used:
  6432 ;;		wreg, status,2
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;Total ram usage:        2 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    1
  6445 ;; This function calls:
  6446 ;;		Nothing
  6447 ;; This function is called by:
  6448 ;;		_newestAddress
  6449 ;;		_eeprom_GetLog
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text35
  6454  001810                     __ptext35:
  6455                           	opt stack 0
  6456  001810                     _eeprom_ReadByte:
  6457                           	opt stack 26
  6458                           
  6459                           ;eeprom.c: 18: EEADRH = (uint8_t)(address >> 8);
  6460                           
  6461                           ;incstack = 0
  6462  001810  5011               	movf	eeprom_ReadByte@address+1,w,c
  6463  001812  6EAA               	movwf	4010,c	;volatile
  6464                           
  6465                           ;eeprom.c: 19: EEADR = (uint8_t)address;
  6466  001814  C010  FFA9         	movff	eeprom_ReadByte@address,4009	;volatile
  6467                           
  6468                           ;eeprom.c: 21: EECON1bits.EEPGD = 0;
  6469  001818  9EA6               	bcf	4006,7,c	;volatile
  6470                           
  6471                           ;eeprom.c: 22: EECON1bits.CFGS = 0;
  6472  00181A  9CA6               	bcf	4006,6,c	;volatile
  6473                           
  6474                           ;eeprom.c: 23: EECON1bits.RD = 1;
  6475  00181C  80A6               	bsf	4006,0,c	;volatile
  6476  00181E                     l331:
  6477  00181E  B0A6               	btfsc	4006,0,c	;volatile
  6478  001820  D7FE               	goto	l331
  6479                           
  6480                           ;eeprom.c: 29: return EEDATA;
  6481  001822  50A8               	movf	4008,w,c	;volatile
  6482  001824  0012               	return	
  6483  001826                     __end_of_eeprom_ReadByte:
  6484                           	opt stack 0
  6485                           tblptru	equ	0xFF8
  6486                           tblptrh	equ	0xFF7
  6487                           tblptrl	equ	0xFF6
  6488                           tablat	equ	0xFF5
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           intcon	equ	0xFF2
  6492                           intcon3	equ	0xFF0
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _eeprom_WriteByte *****************
  6503 ;; Defined at:
  6504 ;;		line 37 in file "eeprom.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  address         2   15[COMRAM] unsigned int 
  6507 ;;  data            1   17[COMRAM] unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;		None
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6519 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;Total ram usage:        3 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    1
  6526 ;; This function calls:
  6527 ;;		Nothing
  6528 ;; This function is called by:
  6529 ;;		_eeprom_initialize
  6530 ;;		_eeprom_LogResult
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text36
  6535  001712                     __ptext36:
  6536                           	opt stack 0
  6537  001712                     _eeprom_WriteByte:
  6538                           	opt stack 27
  6539                           
  6540                           ;eeprom.c: 40: EEADRH = (uint8_t)(address >> 8);
  6541                           
  6542                           ;incstack = 0
  6543  001712  5011               	movf	eeprom_WriteByte@address+1,w,c
  6544  001714  6EAA               	movwf	4010,c	;volatile
  6545                           
  6546                           ;eeprom.c: 41: EEADR = (uint8_t)address;
  6547  001716  C010  FFA9         	movff	eeprom_WriteByte@address,4009	;volatile
  6548                           
  6549                           ;eeprom.c: 43: EEDATA = data;
  6550  00171A  C012  FFA8         	movff	eeprom_WriteByte@data,4008	;volatile
  6551                           
  6552                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  6553  00171E  9EA6               	bcf	4006,7,c	;volatile
  6554                           
  6555                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  6556  001720  9CA6               	bcf	4006,6,c	;volatile
  6557                           
  6558                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  6559  001722  84A6               	bsf	4006,2,c	;volatile
  6560                           
  6561                           ;eeprom.c: 50: EECON2 = 0x55;
  6562  001724  0E55               	movlw	85
  6563  001726  6EA7               	movwf	4007,c	;volatile
  6564                           
  6565                           ;eeprom.c: 51: EECON2 = 0xAA;
  6566  001728  0EAA               	movlw	170
  6567  00172A  6EA7               	movwf	4007,c	;volatile
  6568                           
  6569                           ;eeprom.c: 52: EECON1bits.WR = 1;
  6570  00172C  82A6               	bsf	4006,1,c	;volatile
  6571  00172E                     l337:
  6572  00172E  A8A1               	btfss	4001,4,c	;volatile
  6573  001730  D7FE               	goto	l337
  6574                           
  6575                           ;eeprom.c: 58: }
  6576                           ;eeprom.c: 60: PIR2bits.EEIF = 0;
  6577  001732  98A1               	bcf	4001,4,c	;volatile
  6578                           
  6579                           ;eeprom.c: 61: EECON1bits.WREN = 0;
  6580  001734  94A6               	bcf	4006,2,c	;volatile
  6581  001736  0012               	return		;funcret
  6582  001738                     __end_of_eeprom_WriteByte:
  6583                           	opt stack 0
  6584                           tblptru	equ	0xFF8
  6585                           tblptrh	equ	0xFF7
  6586                           tblptrl	equ	0xFF6
  6587                           tablat	equ	0xFF5
  6588                           prodh	equ	0xFF4
  6589                           prodl	equ	0xFF3
  6590                           intcon	equ	0xFF2
  6591                           intcon3	equ	0xFF0
  6592                           postinc0	equ	0xFEE
  6593                           wreg	equ	0xFE8
  6594                           indf2	equ	0xFDF
  6595                           postinc2	equ	0xFDE
  6596                           postdec2	equ	0xFDD
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _debugState *****************
  6602 ;; Defined at:
  6603 ;;		line 345 in file "main.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  keypress        2   53[COMRAM] int 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      void 
  6610 ;; Registers used:
  6611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;Total ram usage:        4 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    4
  6624 ;; This function calls:
  6625 ;;		_lcdInst
  6626 ;;		_printf
  6627 ;;		_readKey
  6628 ;; This function is called by:
  6629 ;;		_main
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text37
  6634  0013F0                     __ptext37:
  6635                           	opt stack 0
  6636  0013F0                     _debugState:
  6637                           	opt stack 26
  6638                           
  6639                           ;main.c: 346: LATBbits.LATB0 = 1;
  6640                           
  6641                           ;incstack = 0
  6642  0013F0  808A               	bsf	3978,0,c	;volatile
  6643                           
  6644                           ;main.c: 347: _delay((unsigned long)((300)*(10000000/4000.0)));
  6645  0013F2  0E04               	movlw	4
  6646  0013F4  6E35               	movwf	(??_debugState+1)& (0+255),c
  6647  0013F6  0ECF               	movlw	207
  6648  0013F8  6E34               	movwf	??_debugState& (0+255),c
  6649  0013FA  0E02               	movlw	2
  6650  0013FC                     u3677:
  6651  0013FC  2EE8               	decfsz	wreg,f,c
  6652  0013FE  D7FE               	bra	u3677
  6653  001400  2E34               	decfsz	??_debugState& (0+255),f,c
  6654  001402  D7FC               	bra	u3677
  6655  001404  2E35               	decfsz	(??_debugState+1)& (0+255),f,c
  6656  001406  D7FA               	bra	u3677
  6657                           
  6658                           ;main.c: 350: lcdInst(0b10000000);;
  6659  001408  0E80               	movlw	128
  6660  00140A  EC29  F00C         	call	_lcdInst
  6661                           
  6662                           ;main.c: 351: printf("going debug");
  6663  00140E  0EED               	movlw	low STR_15
  6664  001410  6E1C               	movwf	printf@f,c
  6665  001412  0EFF               	movlw	high STR_15
  6666  001414  6E1D               	movwf	printf@f+1,c
  6667  001416  ECD0  F002         	call	_printf	;wreg free
  6668                           
  6669                           ;main.c: 352: lcdInst(0b11000000);;
  6670  00141A  0EC0               	movlw	192
  6671  00141C  EC29  F00C         	call	_lcdInst
  6672                           
  6673                           ;main.c: 361: int keypress = readKey();
  6674  001420  EC42  F00A         	call	_readKey	;wreg free
  6675  001424  C010  F036         	movff	?_readKey,debugState@keypress
  6676  001428  C011  F037         	movff	?_readKey+1,debugState@keypress+1
  6677                           
  6678                           ;main.c: 362: if(keypress == 0b1101){
  6679  00142C  0E0D               	movlw	13
  6680  00142E  1836               	xorwf	debugState@keypress,w,c
  6681  001430  1037               	iorwf	debugState@keypress+1,w,c
  6682  001432  A4D8               	btfss	status,2,c
  6683  001434  0012               	return	
  6684                           
  6685                           ;main.c: 363: state = MAIN;
  6686  001436  0E00               	movlw	0
  6687  001438  6E4B               	movwf	_state,c
  6688  00143A  0012               	return	
  6689  00143C                     __end_of_debugState:
  6690                           	opt stack 0
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           intcon	equ	0xFF2
  6698                           intcon3	equ	0xFF0
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           indf2	equ	0xFDF
  6702                           postinc2	equ	0xFDE
  6703                           postdec2	equ	0xFDD
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function _readKey *****************
  6709 ;; Defined at:
  6710 ;;		line 90 in file "main.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;		None
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;  keypress        1   17[COMRAM] unsigned char 
  6715 ;;  i               2   18[COMRAM] int 
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  2   15[COMRAM] int 
  6718 ;; Registers used:
  6719 ;;		wreg, status,2, status,0
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;Total ram usage:        5 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    1
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_mainState
  6736 ;;		_finishState
  6737 ;;		_logState
  6738 ;;		_debugState
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           	psect	text38
  6743  001484                     __ptext38:
  6744                           	opt stack 0
  6745  001484                     _readKey:
  6746                           	opt stack 28
  6747                           
  6748                           ;main.c: 92: for (int i = 0; i < 200; i++)
  6749                           
  6750                           ;incstack = 0
  6751  001484  0E00               	movlw	0
  6752  001486  6E14               	movwf	readKey@i+1,c
  6753  001488  0E00               	movlw	0
  6754  00148A  6E13               	movwf	readKey@i,c
  6755  00148C  BE14               	btfsc	readKey@i+1,7,c
  6756  00148E  D006               	goto	l217
  6757  001490  5014               	movf	readKey@i+1,w,c
  6758  001492  E119               	bnz	l218
  6759  001494  0EC8               	movlw	200
  6760  001496  5C13               	subwf	readKey@i,w,c
  6761  001498  B0D8               	btfsc	status,0,c
  6762  00149A  D015               	goto	l218
  6763  00149C                     l217:
  6764                           
  6765                           ;main.c: 93: {
  6766                           ;main.c: 94: if (PORTBbits.RB1 != 0)
  6767  00149C  A281               	btfss	3969,1,c	;volatile
  6768  00149E  D00C               	goto	l2789
  6769                           
  6770                           ;main.c: 95: {
  6771                           ;main.c: 96: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6772  0014A0  3881               	swapf	3969,w,c	;volatile
  6773  0014A2  0B0F               	andlw	15
  6774  0014A4  0B0F               	andlw	15
  6775  0014A6  6E12               	movwf	readKey@keypress,c
  6776  0014A8                     l220:
  6777  0014A8  B281               	btfsc	3969,1,c	;volatile
  6778  0014AA  D7FE               	goto	l220
  6779                           
  6780                           ;main.c: 99: }
  6781                           ;main.c: 100: __nop();
  6782  0014AC  F000               	nop	
  6783                           
  6784                           ;main.c: 101: __nop();
  6785  0014AE  F000               	nop	
  6786                           
  6787                           ;main.c: 102: return keypress;
  6788  0014B0  C012  F010         	movff	readKey@keypress,?_readKey
  6789  0014B4  6A11               	clrf	?_readKey+1,c
  6790  0014B6  0012               	return	
  6791  0014B8                     l2789:
  6792  0014B8  4A13               	infsnz	readKey@i,f,c
  6793  0014BA  2A14               	incf	readKey@i+1,f,c
  6794  0014BC  BE14               	btfsc	readKey@i+1,7,c
  6795  0014BE  D7EE               	goto	l217
  6796  0014C0  5014               	movf	readKey@i+1,w,c
  6797  0014C2  E101               	bnz	u1740
  6798  0014C4  D7E7               	goto	L6
  6799  0014C6                     u1740:
  6800  0014C6                     l218:
  6801                           
  6802                           ;main.c: 103: }
  6803                           ;main.c: 104: }
  6804                           ;main.c: 105: return -1;
  6805  0014C6  6810               	setf	?_readKey,c
  6806  0014C8  6811               	setf	?_readKey+1,c
  6807  0014CA  0012               	return		;funcret
  6808  0014CC                     __end_of_readKey:
  6809                           	opt stack 0
  6810                           tblptru	equ	0xFF8
  6811                           tblptrh	equ	0xFF7
  6812                           tblptrl	equ	0xFF6
  6813                           tablat	equ	0xFF5
  6814                           prodh	equ	0xFF4
  6815                           prodl	equ	0xFF3
  6816                           intcon	equ	0xFF2
  6817                           intcon3	equ	0xFF0
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           indf2	equ	0xFDF
  6821                           postinc2	equ	0xFDE
  6822                           postdec2	equ	0xFDD
  6823                           fsr2h	equ	0xFDA
  6824                           fsr2l	equ	0xFD9
  6825                           status	equ	0xFD8
  6826                           
  6827 ;; *************** function _printf *****************
  6828 ;; Defined at:
  6829 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;  f               2   27[COMRAM] PTR const unsigned char 
  6832 ;;		 -> STR_18(15), STR_17(15), STR_16(15), STR_15(12), 
  6833 ;;		 -> STR_14(18), STR_13(17), STR_12(17), STR_11(6), 
  6834 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(18), 
  6835 ;;		 -> STR_6(17), STR_5(17), STR_4(19), STR_3(17), 
  6836 ;;		 -> STR_2(15), STR_1(16), 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  idx             1   41[COMRAM] unsigned char 
  6839 ;;  tmpval          4    0        struct .
  6840 ;;  cp              3    0        PTR const unsigned char 
  6841 ;;  width           2   48[COMRAM] int 
  6842 ;;  val             2   45[COMRAM] unsigned int 
  6843 ;;  ap              2   42[COMRAM] PTR void [1]
  6844 ;;		 -> ?_printf(2), 
  6845 ;;  len             2    0        unsigned int 
  6846 ;;  c               1   50[COMRAM] char 
  6847 ;;  flag            1   47[COMRAM] unsigned char 
  6848 ;;  prec            1   44[COMRAM] char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  2   27[COMRAM] int 
  6851 ;; Registers used:
  6852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6858 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;Total ram usage:       24 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    3
  6865 ;; This function calls:
  6866 ;;		___lwdiv
  6867 ;;		___lwmod
  6868 ;;		___wmul
  6869 ;;		_isdigit
  6870 ;;		_putch
  6871 ;; This function is called by:
  6872 ;;		_update_lcd
  6873 ;;		_executingState
  6874 ;;		_debugState
  6875 ;;		_fixLCD
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text39
  6880  0005A0                     __ptext39:
  6881                           	opt stack 0
  6882  0005A0                     _printf:
  6883                           	opt stack 25
  6884                           
  6885                           ;doprnt.c: 466: va_list ap;
  6886                           ;doprnt.c: 499: signed char c;
  6887                           ;doprnt.c: 501: int width;
  6888                           ;doprnt.c: 506: signed char prec;
  6889                           ;doprnt.c: 508: unsigned char flag;
  6890                           ;doprnt.c: 523: union {
  6891                           ;doprnt.c: 524: unsigned long vd;
  6892                           ;doprnt.c: 525: double integ;
  6893                           ;doprnt.c: 526: } tmpval;
  6894                           ;doprnt.c: 528: unsigned int val;
  6895                           ;doprnt.c: 529: unsigned len;
  6896                           ;doprnt.c: 530: const char * cp;
  6897                           ;doprnt.c: 533: *ap = __va_start();
  6898                           
  6899                           ;incstack = 0
  6900  0005A0  0E1E               	movlw	low (?_printf+2)
  6901  0005A2  6E2B               	movwf	printf@ap,c
  6902  0005A4  0E00               	movlw	high (?_printf+2)
  6903  0005A6  6E2C               	movwf	printf@ap+1,c
  6904                           
  6905                           ;doprnt.c: 536: while(c = *f++) {
  6906  0005A8  D174               	goto	l3787
  6907  0005AA                     l3661:
  6908                           
  6909                           ;doprnt.c: 538: if(c != '%')
  6910  0005AA  0E25               	movlw	37
  6911  0005AC  1833               	xorwf	printf@c,w,c
  6912  0005AE  B4D8               	btfsc	status,2,c
  6913  0005B0  D004               	goto	l3665
  6914                           
  6915                           ;doprnt.c: 540: {
  6916                           ;doprnt.c: 541: (putch(c) );
  6917  0005B2  5033               	movf	printf@c,w,c
  6918  0005B4  EC23  F00C         	call	_putch
  6919                           
  6920                           ;doprnt.c: 542: continue;
  6921  0005B8  D16C               	goto	l3787
  6922  0005BA                     l3665:
  6923                           
  6924                           ;doprnt.c: 543: }
  6925                           ;doprnt.c: 546: width = 0;
  6926  0005BA  0E00               	movlw	0
  6927  0005BC  6E32               	movwf	printf@width+1,c
  6928  0005BE  0E00               	movlw	0
  6929  0005C0  6E31               	movwf	printf@width,c
  6930                           
  6931                           ;doprnt.c: 548: flag = 0;
  6932  0005C2  0E00               	movlw	0
  6933  0005C4  6E30               	movwf	printf@flag,c
  6934                           
  6935                           ;doprnt.c: 551: switch(*f) {
  6936                           
  6937                           ;doprnt.c: 550: for(;;) {
  6938  0005C6  D003               	goto	l3671
  6939  0005C8                     l3667:
  6940                           
  6941                           ;doprnt.c: 580: flag |= 0x04;
  6942  0005C8  8430               	bsf	printf@flag,2,c
  6943                           
  6944                           ;doprnt.c: 581: f++;
  6945  0005CA  4A1C               	infsnz	printf@f,f,c
  6946  0005CC  2A1D               	incf	printf@f+1,f,c
  6947  0005CE                     l3671:
  6948  0005CE  C01C  FFF6         	movff	printf@f,tblptrl
  6949  0005D2  C01D  FFF7         	movff	printf@f+1,tblptrh
  6950  0005D6                     	if	0	;tblptru may be non-zero
  6951  0005D6                     	endif
  6952  0005D6                     	if	0	;tblptru may be non-zero
  6953  0005D6                     	endif
  6954  0005D6  0008               	tblrd		*
  6955  0005D8  50F5               	movf	tablat,w,c
  6956                           
  6957                           ; Switch size 1, requested type "space"
  6958                           ; Number of cases is 1, Range of values is 48 to 48
  6959                           ; switch strategies available:
  6960                           ; Name         Instructions Cycles
  6961                           ; simple_byte            4     3 (average)
  6962                           ;	Chosen strategy is simple_byte
  6963  0005DA  0A30               	xorlw	48	; case 48
  6964  0005DC  B4D8               	btfsc	status,2,c
  6965  0005DE  D7F4               	goto	l3667
  6966                           
  6967                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6968                           
  6969                           ;doprnt.c: 586: }
  6970                           
  6971                           ;doprnt.c: 585: break;
  6972  0005E0  C01C  FFF6         	movff	printf@f,tblptrl
  6973  0005E4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6974  0005E8                     	if	0	;tblptru may be non-zero
  6975  0005E8                     	endif
  6976  0005E8                     	if	0	;tblptru may be non-zero
  6977  0005E8                     	endif
  6978  0005E8  0008               	tblrd		*
  6979  0005EA  50F5               	movf	tablat,w,c
  6980  0005EC  ECAF  F00B         	call	_isdigit
  6981  0005F0  A0D8               	btfss	status,0,c
  6982  0005F2  D035               	goto	l3689
  6983                           
  6984                           ;doprnt.c: 598: width = 0;
  6985  0005F4  0E00               	movlw	0
  6986  0005F6  6E32               	movwf	printf@width+1,c
  6987  0005F8  0E00               	movlw	0
  6988  0005FA  6E31               	movwf	printf@width,c
  6989  0005FC                     l3677:
  6990                           
  6991                           ;doprnt.c: 600: width *= 10;
  6992  0005FC  C031  F010         	movff	printf@width,___wmul@multiplier
  6993  000600  C032  F011         	movff	printf@width+1,___wmul@multiplier+1
  6994  000604  0E00               	movlw	0
  6995  000606  6E13               	movwf	___wmul@multiplicand+1,c
  6996  000608  0E0A               	movlw	10
  6997  00060A  6E12               	movwf	___wmul@multiplicand,c
  6998  00060C  EC9C  F00B         	call	___wmul	;wreg free
  6999  000610  C010  F031         	movff	?___wmul,printf@width
  7000  000614  C011  F032         	movff	?___wmul+1,printf@width+1
  7001                           
  7002                           ;doprnt.c: 601: width += *f++ - '0';
  7003  000618  0ED0               	movlw	208
  7004  00061A  6E26               	movwf	??_printf& (0+255),c
  7005  00061C  0EFF               	movlw	255
  7006  00061E  6E27               	movwf	(??_printf+1)& (0+255),c
  7007  000620  C01C  FFF6         	movff	printf@f,tblptrl
  7008  000624  C01D  FFF7         	movff	printf@f+1,tblptrh
  7009  000628                     	if	0	;tblptru may be non-zero
  7010  000628                     	endif
  7011  000628                     	if	0	;tblptru may be non-zero
  7012  000628                     	endif
  7013  000628  0008               	tblrd		*
  7014  00062A  50F5               	movf	tablat,w,c
  7015  00062C  6E28               	movwf	(??_printf+2)& (0+255),c
  7016  00062E  6A29               	clrf	(??_printf+3)& (0+255),c
  7017  000630  5026               	movf	??_printf,w,c
  7018  000632  2628               	addwf	??_printf+2,f,c
  7019  000634  5027               	movf	??_printf+1,w,c
  7020  000636  2229               	addwfc	??_printf+3,f,c
  7021  000638  5028               	movf	??_printf+2,w,c
  7022  00063A  2631               	addwf	printf@width,f,c
  7023  00063C  5029               	movf	??_printf+3,w,c
  7024  00063E  2232               	addwfc	printf@width+1,f,c
  7025  000640  4A1C               	infsnz	printf@f,f,c
  7026  000642  2A1D               	incf	printf@f+1,f,c
  7027                           
  7028                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7029  000644  C01C  FFF6         	movff	printf@f,tblptrl
  7030  000648  C01D  FFF7         	movff	printf@f+1,tblptrh
  7031  00064C                     	if	0	;tblptru may be non-zero
  7032  00064C                     	endif
  7033  00064C                     	if	0	;tblptru may be non-zero
  7034  00064C                     	endif
  7035  00064C  0008               	tblrd		*
  7036  00064E  50F5               	movf	tablat,w,c
  7037  000650  ECAF  F00B         	call	_isdigit
  7038  000654  A0D8               	btfss	status,0,c
  7039  000656  D003               	goto	l3689
  7040  000658  D7D1               	goto	l3677
  7041  00065A                     l3685:
  7042                           
  7043                           ;doprnt.c: 721: flag |= 0x80;
  7044  00065A  8E30               	bsf	printf@flag,7,c
  7045                           
  7046                           ;doprnt.c: 723: break;
  7047  00065C  D017               	goto	l573
  7048  00065E                     l3689:
  7049  00065E  C01C  FFF6         	movff	printf@f,tblptrl
  7050  000662  C01D  FFF7         	movff	printf@f+1,tblptrh
  7051  000666  4A1C               	infsnz	printf@f,f,c
  7052  000668  2A1D               	incf	printf@f+1,f,c
  7053  00066A                     	if	0	;tblptru may be non-zero
  7054  00066A                     	endif
  7055  00066A                     	if	0	;tblptru may be non-zero
  7056  00066A                     	endif
  7057  00066A  0008               	tblrd		*
  7058  00066C  CFF5 F033          	movff	tablat,printf@c
  7059  000670  5033               	movf	printf@c,w,c
  7060                           
  7061                           ; Switch size 1, requested type "space"
  7062                           ; Number of cases is 4, Range of values is 0 to 120
  7063                           ; switch strategies available:
  7064                           ; Name         Instructions Cycles
  7065                           ; simple_byte           13     7 (average)
  7066                           ;	Chosen strategy is simple_byte
  7067  000672  0A00               	xorlw	0	; case 0
  7068  000674  B4D8               	btfsc	status,2,c
  7069  000676  0012               	return	
  7070  000678  0A64               	xorlw	100	; case 100
  7071  00067A  B4D8               	btfsc	status,2,c
  7072  00067C  D007               	goto	l573
  7073  00067E  0A0D               	xorlw	13	; case 105
  7074  000680  B4D8               	btfsc	status,2,c
  7075  000682  D004               	goto	l573
  7076  000684  0A11               	xorlw	17	; case 120
  7077  000686  B4D8               	btfsc	status,2,c
  7078  000688  D7E8               	goto	l3685
  7079  00068A  D103               	goto	l3787
  7080  00068C                     l573:
  7081                           
  7082                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7083  00068C  BE30               	btfsc	printf@flag,7,c
  7084  00068E  D015               	goto	l3701
  7085                           
  7086                           ;doprnt.c: 1253: {
  7087                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7088  000690  C02B  FFD9         	movff	printf@ap,fsr2l
  7089  000694  C02C  FFDA         	movff	printf@ap+1,fsr2h
  7090  000698  CFDE F02E          	movff	postinc2,printf@val
  7091  00069C  CFDD F02F          	movff	postdec2,printf@val+1
  7092  0006A0  0E02               	movlw	2
  7093  0006A2  262B               	addwf	printf@ap,f,c
  7094  0006A4  0E00               	movlw	0
  7095  0006A6  222C               	addwfc	printf@ap+1,f,c
  7096                           
  7097                           ;doprnt.c: 1261: if((int)val < 0) {
  7098  0006A8  AE2F               	btfss	printf@val+1,7,c
  7099  0006AA  D044               	goto	l3735
  7100                           
  7101                           ;doprnt.c: 1262: flag |= 0x03;
  7102  0006AC  0E03               	movlw	3
  7103  0006AE  1230               	iorwf	printf@flag,f,c
  7104                           
  7105                           ;doprnt.c: 1263: val = -val;
  7106  0006B0  6C2E               	negf	printf@val,c
  7107  0006B2  1E2F               	comf	printf@val+1,f,c
  7108  0006B4  B0D8               	btfsc	status,0,c
  7109  0006B6  2A2F               	incf	printf@val+1,f,c
  7110                           
  7111                           ;doprnt.c: 1264: }
  7112                           ;doprnt.c: 1266: }
  7113  0006B8  D03D               	goto	l3735
  7114  0006BA                     l3701:
  7115                           
  7116                           ;doprnt.c: 1268: else
  7117                           ;doprnt.c: 1273: {
  7118                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7119  0006BA  C02B  FFD9         	movff	printf@ap,fsr2l
  7120  0006BE  C02C  FFDA         	movff	printf@ap+1,fsr2h
  7121  0006C2  CFDE F02E          	movff	postinc2,printf@val
  7122  0006C6  CFDD F02F          	movff	postdec2,printf@val+1
  7123  0006CA  0E02               	movlw	2
  7124  0006CC  262B               	addwf	printf@ap,f,c
  7125  0006CE  0E00               	movlw	0
  7126  0006D0  222C               	addwfc	printf@ap+1,f,c
  7127                           
  7128                           ;doprnt.c: 1287: }
  7129                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7130  0006D2  D030               	goto	l3735
  7131  0006D4                     l3705:
  7132                           
  7133                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7134  0006D4  0E01               	movlw	1
  7135  0006D6  6E33               	movwf	printf@c,c
  7136  0006D8                     l3707:
  7137  0006D8  0E05               	movlw	5
  7138  0006DA  1833               	xorwf	printf@c,w,c
  7139  0006DC  B4D8               	btfsc	status,2,c
  7140  0006DE  D032               	goto	l3737
  7141                           
  7142                           ;doprnt.c: 1306: if(val < dpowers[c])
  7143  0006E0  5033               	movf	printf@c,w,c
  7144  0006E2  0D02               	mullw	2
  7145  0006E4  0ED6               	movlw	low _dpowers
  7146  0006E6  24F3               	addwf	prodl,w,c
  7147  0006E8  6EF6               	movwf	tblptrl,c
  7148  0006EA  0EFE               	movlw	high _dpowers
  7149  0006EC  20F4               	addwfc	prodh,w,c
  7150  0006EE  6EF7               	movwf	tblptrh,c
  7151  0006F0                     	if	0	;There are less than 3 active tblptr bytes
  7152  0006F0                     	endif
  7153  0006F0  0009               	tblrd		*+
  7154  0006F2  50F5               	movf	tablat,w,c
  7155  0006F4  5C2E               	subwf	printf@val,w,c
  7156  0006F6  0009               	tblrd		*+
  7157  0006F8  50F5               	movf	tablat,w,c
  7158  0006FA  582F               	subwfb	printf@val+1,w,c
  7159  0006FC  A0D8               	btfss	status,0,c
  7160  0006FE  D022               	goto	l3737
  7161                           
  7162                           ;doprnt.c: 1307: break;
  7163  000700  2A33               	incf	printf@c,f,c
  7164  000702  D7EA               	goto	l3707
  7165  000704                     l3719:
  7166                           
  7167                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7168  000704  0E01               	movlw	1
  7169  000706  6E33               	movwf	printf@c,c
  7170  000708                     l3721:
  7171  000708  0E04               	movlw	4
  7172  00070A  1833               	xorwf	printf@c,w,c
  7173  00070C  B4D8               	btfsc	status,2,c
  7174  00070E  D01A               	goto	l3737
  7175                           
  7176                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7177  000710  5033               	movf	printf@c,w,c
  7178  000712  0D02               	mullw	2
  7179  000714  0EE0               	movlw	low _hexpowers
  7180  000716  24F3               	addwf	prodl,w,c
  7181  000718  6EF6               	movwf	tblptrl,c
  7182  00071A  0EFE               	movlw	high _hexpowers
  7183  00071C  20F4               	addwfc	prodh,w,c
  7184  00071E  6EF7               	movwf	tblptrh,c
  7185  000720                     	if	0	;There are less than 3 active tblptr bytes
  7186  000720                     	endif
  7187  000720  0009               	tblrd		*+
  7188  000722  50F5               	movf	tablat,w,c
  7189  000724  5C2E               	subwf	printf@val,w,c
  7190  000726  0009               	tblrd		*+
  7191  000728  50F5               	movf	tablat,w,c
  7192  00072A  582F               	subwfb	printf@val+1,w,c
  7193  00072C  A0D8               	btfss	status,0,c
  7194  00072E  D00A               	goto	l3737
  7195                           
  7196                           ;doprnt.c: 1318: break;
  7197  000730  2A33               	incf	printf@c,f,c
  7198  000732  D7EA               	goto	l3721
  7199  000734                     l3735:
  7200  000734  5030               	movf	printf@flag,w,c
  7201  000736  0B80               	andlw	128
  7202                           
  7203                           ; Switch size 1, requested type "space"
  7204                           ; Number of cases is 2, Range of values is 0 to 128
  7205                           ; switch strategies available:
  7206                           ; Name         Instructions Cycles
  7207                           ; simple_byte            7     4 (average)
  7208                           ;	Chosen strategy is simple_byte
  7209  000738  0A00               	xorlw	0	; case 0
  7210  00073A  B4D8               	btfsc	status,2,c
  7211  00073C  D7CB               	goto	l3705
  7212  00073E  0A80               	xorlw	128	; case 128
  7213  000740  B4D8               	btfsc	status,2,c
  7214  000742  D7E0               	goto	l3719
  7215  000744                     l3737:
  7216                           
  7217                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7218  000744  5031               	movf	printf@width,w,c
  7219  000746  1032               	iorwf	printf@width+1,w,c
  7220  000748  B4D8               	btfsc	status,2,c
  7221  00074A  D009               	goto	l3743
  7222  00074C  C030  F026         	movff	printf@flag,??_printf
  7223  000750  0E03               	movlw	3
  7224  000752  1626               	andwf	??_printf,f,c
  7225  000754  B4D8               	btfsc	status,2,c
  7226  000756  D003               	goto	l3743
  7227                           
  7228                           ;doprnt.c: 1346: width--;
  7229  000758  0631               	decf	printf@width,f,c
  7230  00075A  A0D8               	btfss	status,0,c
  7231  00075C  0632               	decf	printf@width+1,f,c
  7232  00075E                     l3743:
  7233                           
  7234                           ;doprnt.c: 1381: if(width > c)
  7235  00075E  0E80               	movlw	128
  7236  000760  BE33               	btfsc	printf@c,7,c
  7237  000762  0E7F               	movlw	127
  7238  000764  6E26               	movwf	??_printf& (0+255),c
  7239  000766  5031               	movf	printf@width,w,c
  7240  000768  5C33               	subwf	printf@c,w,c
  7241  00076A  5032               	movf	printf@width+1,w,c
  7242  00076C  0A80               	xorlw	128
  7243  00076E  5826               	subwfb	??_printf& (0+255),w,c
  7244  000770  B0D8               	btfsc	status,0,c
  7245  000772  D007               	goto	l3747
  7246                           
  7247                           ;doprnt.c: 1382: width -= c;
  7248  000774  5033               	movf	printf@c,w,c
  7249  000776  5E31               	subwf	printf@width,f,c
  7250  000778  0E00               	movlw	0
  7251  00077A  BE33               	btfsc	printf@c,7,c
  7252  00077C  0EFF               	movlw	255
  7253  00077E  5A32               	subwfb	printf@width+1,f,c
  7254  000780  D004               	goto	l3749
  7255  000782                     l3747:
  7256                           
  7257                           ;doprnt.c: 1383: else
  7258                           ;doprnt.c: 1384: width = 0;
  7259  000782  0E00               	movlw	0
  7260  000784  6E32               	movwf	printf@width+1,c
  7261  000786  0E00               	movlw	0
  7262  000788  6E31               	movwf	printf@width,c
  7263  00078A                     l3749:
  7264                           
  7265                           ;doprnt.c: 1387: if(flag & 0x04) {
  7266  00078A  A430               	btfss	printf@flag,2,c
  7267  00078C  D014               	goto	l3761
  7268                           
  7269                           ;doprnt.c: 1392: if(flag & 0x03)
  7270  00078E  C030  F026         	movff	printf@flag,??_printf
  7271  000792  0E03               	movlw	3
  7272  000794  1626               	andwf	??_printf,f,c
  7273  000796  B4D8               	btfsc	status,2,c
  7274  000798  D003               	goto	l3755
  7275                           
  7276                           ;doprnt.c: 1393: (putch('-') );
  7277  00079A  0E2D               	movlw	45
  7278  00079C  EC23  F00C         	call	_putch
  7279  0007A0                     l3755:
  7280                           
  7281                           ;doprnt.c: 1415: if(width)
  7282  0007A0  5031               	movf	printf@width,w,c
  7283  0007A2  1032               	iorwf	printf@width+1,w,c
  7284  0007A4  B4D8               	btfsc	status,2,c
  7285  0007A6  D01E               	goto	l3771
  7286                           
  7287                           ;doprnt.c: 1417: (putch('0') );
  7288                           
  7289                           ;doprnt.c: 1416: do
  7290  0007A8  0E30               	movlw	48
  7291  0007AA  EC23  F00C         	call	_putch
  7292                           
  7293                           ;doprnt.c: 1418: while(--width);
  7294  0007AE  0631               	decf	printf@width,f,c
  7295  0007B0  A0D8               	btfss	status,0,c
  7296  0007B2  0632               	decf	printf@width+1,f,c
  7297  0007B4  D7F5               	goto	l3755
  7298  0007B6                     l3761:
  7299                           
  7300                           ;doprnt.c: 1422: {
  7301                           ;doprnt.c: 1424: if(width
  7302                           ;doprnt.c: 1428: )
  7303  0007B6  5031               	movf	printf@width,w,c
  7304  0007B8  1032               	iorwf	printf@width+1,w,c
  7305  0007BA  B4D8               	btfsc	status,2,c
  7306  0007BC  D00A               	goto	l3767
  7307  0007BE                     l3763:
  7308                           
  7309                           ;doprnt.c: 1430: (putch(' ') );
  7310  0007BE  0E20               	movlw	32
  7311  0007C0  EC23  F00C         	call	_putch
  7312                           
  7313                           ;doprnt.c: 1431: while(--width);
  7314  0007C4  0631               	decf	printf@width,f,c
  7315  0007C6  A0D8               	btfss	status,0,c
  7316  0007C8  0632               	decf	printf@width+1,f,c
  7317  0007CA  5031               	movf	printf@width,w,c
  7318  0007CC  1032               	iorwf	printf@width+1,w,c
  7319  0007CE  A4D8               	btfss	status,2,c
  7320  0007D0  D7F6               	goto	l3763
  7321  0007D2                     l3767:
  7322                           
  7323                           ;doprnt.c: 1438: if(flag & 0x03)
  7324  0007D2  C030  F026         	movff	printf@flag,??_printf
  7325  0007D6  0E03               	movlw	3
  7326  0007D8  1626               	andwf	??_printf,f,c
  7327  0007DA  B4D8               	btfsc	status,2,c
  7328  0007DC  D003               	goto	l3771
  7329                           
  7330                           ;doprnt.c: 1439: (putch('-') );
  7331  0007DE  0E2D               	movlw	45
  7332  0007E0  EC23  F00C         	call	_putch
  7333  0007E4                     l3771:
  7334                           
  7335                           ;doprnt.c: 1469: }
  7336                           ;doprnt.c: 1472: prec = c;
  7337  0007E4  C033  F02D         	movff	printf@c,printf@prec
  7338                           
  7339                           ;doprnt.c: 1474: while(prec--) {
  7340  0007E8  D050               	goto	l3785
  7341  0007EA                     l3773:
  7342                           
  7343                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7344  0007EA  502D               	movf	printf@prec,w,c
  7345  0007EC  0D02               	mullw	2
  7346  0007EE  0ED6               	movlw	low _dpowers
  7347  0007F0  24F3               	addwf	prodl,w,c
  7348  0007F2  6EF6               	movwf	tblptrl,c
  7349  0007F4  0EFE               	movlw	high _dpowers
  7350  0007F6  20F4               	addwfc	prodh,w,c
  7351  0007F8  6EF7               	movwf	tblptrh,c
  7352  0007FA                     	if	0	;There are less than 3 active tblptr bytes
  7353  0007FA                     	endif
  7354  0007FA  0009               	tblrd		*+
  7355  0007FC  CFF5 F012          	movff	tablat,___lwdiv@divisor
  7356  000800  000A               	tblrd		*-
  7357  000802  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  7358  000806  C02E  F010         	movff	printf@val,___lwdiv@dividend
  7359  00080A  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  7360  00080E  EC82  F009         	call	___lwdiv	;wreg free
  7361  000812  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  7362  000816  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  7363  00081A  0E00               	movlw	0
  7364  00081C  6E1A               	movwf	___lwmod@divisor+1,c
  7365  00081E  0E0A               	movlw	10
  7366  000820  6E19               	movwf	___lwmod@divisor,c
  7367  000822  EC89  F00A         	call	___lwmod	;wreg free
  7368  000826  5017               	movf	?___lwmod,w,c
  7369  000828  0F30               	addlw	48
  7370  00082A  6E33               	movwf	printf@c,c
  7371                           
  7372                           ;doprnt.c: 1491: break;
  7373  00082C  D02B               	goto	l3783
  7374  00082E                     l3775:
  7375                           
  7376                           ;doprnt.c: 1499: {
  7377                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7378  00082E  C02E  F010         	movff	printf@val,___lwdiv@dividend
  7379  000832  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  7380  000836  502D               	movf	printf@prec,w,c
  7381  000838  0D02               	mullw	2
  7382  00083A  0EE0               	movlw	low _hexpowers
  7383  00083C  24F3               	addwf	prodl,w,c
  7384  00083E  6EF6               	movwf	tblptrl,c
  7385  000840  0EFE               	movlw	high _hexpowers
  7386  000842  20F4               	addwfc	prodh,w,c
  7387  000844  6EF7               	movwf	tblptrh,c
  7388  000846                     	if	0	;There are less than 3 active tblptr bytes
  7389  000846                     	endif
  7390  000846  0009               	tblrd		*+
  7391  000848  CFF5 F012          	movff	tablat,___lwdiv@divisor
  7392  00084C  000A               	tblrd		*-
  7393  00084E  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  7394  000852  EC82  F009         	call	___lwdiv	;wreg free
  7395  000856  5010               	movf	?___lwdiv,w,c
  7396  000858  0B0F               	andlw	15
  7397  00085A  6E2A               	movwf	printf@idx,c
  7398                           
  7399                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7400  00085C  502A               	movf	printf@idx,w,c
  7401  00085E  0D01               	mullw	1
  7402  000860  0E26               	movlw	low STR_19
  7403  000862  24F3               	addwf	prodl,w,c
  7404  000864  6EF6               	movwf	tblptrl,c
  7405  000866  0EFF               	movlw	high STR_19
  7406  000868  20F4               	addwfc	prodh,w,c
  7407  00086A  6EF7               	movwf	tblptrh,c
  7408  00086C                     	if	0	;There are less than 3 active tblptr bytes
  7409  00086C                     	endif
  7410  00086C  0008               	tblrd		*
  7411  00086E  CFF5 F033          	movff	tablat,printf@c
  7412                           
  7413                           ;doprnt.c: 1523: }
  7414                           
  7415                           ;doprnt.c: 1508: }
  7416                           ;doprnt.c: 1510: break;
  7417  000872  D008               	goto	l3783
  7418  000874                     l3781:
  7419  000874  5030               	movf	printf@flag,w,c
  7420  000876  0B80               	andlw	128
  7421                           
  7422                           ; Switch size 1, requested type "space"
  7423                           ; Number of cases is 2, Range of values is 0 to 128
  7424                           ; switch strategies available:
  7425                           ; Name         Instructions Cycles
  7426                           ; simple_byte            7     4 (average)
  7427                           ;	Chosen strategy is simple_byte
  7428  000878  0A00               	xorlw	0	; case 0
  7429  00087A  B4D8               	btfsc	status,2,c
  7430  00087C  D7B6               	goto	l3773
  7431  00087E  0A80               	xorlw	128	; case 128
  7432  000880  B4D8               	btfsc	status,2,c
  7433  000882  D7D5               	goto	l3775
  7434  000884                     l3783:
  7435                           
  7436                           ;doprnt.c: 1524: (putch(c) );
  7437  000884  5033               	movf	printf@c,w,c
  7438  000886  EC23  F00C         	call	_putch
  7439  00088A                     l3785:
  7440  00088A  062D               	decf	printf@prec,f,c
  7441  00088C  282D               	incf	printf@prec,w,c
  7442  00088E  A4D8               	btfss	status,2,c
  7443  000890  D7F1               	goto	l3781
  7444  000892                     l3787:
  7445  000892  C01C  FFF6         	movff	printf@f,tblptrl
  7446  000896  C01D  FFF7         	movff	printf@f+1,tblptrh
  7447  00089A  4A1C               	infsnz	printf@f,f,c
  7448  00089C  2A1D               	incf	printf@f+1,f,c
  7449  00089E                     	if	0	;tblptru may be non-zero
  7450  00089E                     	endif
  7451  00089E                     	if	0	;tblptru may be non-zero
  7452  00089E                     	endif
  7453  00089E  0008               	tblrd		*
  7454  0008A0  CFF5 F033          	movff	tablat,printf@c
  7455  0008A4  5033               	movf	printf@c,w,c
  7456  0008A6  B4D8               	btfsc	status,2,c
  7457  0008A8  0012               	return	
  7458  0008AA  D67F               	goto	l3661
  7459  0008AC                     __end_of_printf:
  7460                           	opt stack 0
  7461                           tblptru	equ	0xFF8
  7462                           tblptrh	equ	0xFF7
  7463                           tblptrl	equ	0xFF6
  7464                           tablat	equ	0xFF5
  7465                           prodh	equ	0xFF4
  7466                           prodl	equ	0xFF3
  7467                           intcon	equ	0xFF2
  7468                           intcon3	equ	0xFF0
  7469                           postinc0	equ	0xFEE
  7470                           wreg	equ	0xFE8
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           fsr2h	equ	0xFDA
  7475                           fsr2l	equ	0xFD9
  7476                           status	equ	0xFD8
  7477                           
  7478 ;; *************** function _putch *****************
  7479 ;; Defined at:
  7480 ;;		line 31 in file "lcd.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  data            1    wreg     unsigned char 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  data            1   17[COMRAM] unsigned char 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;Total ram usage:        1 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    2
  7501 ;; This function calls:
  7502 ;;		_lcdNibble
  7503 ;; This function is called by:
  7504 ;;		_printf
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text40
  7509  001846                     __ptext40:
  7510                           	opt stack 0
  7511  001846                     _putch:
  7512                           	opt stack 25
  7513                           
  7514                           ;incstack = 0
  7515                           ;putch@data stored from wreg
  7516  001846  6E12               	movwf	putch@data,c
  7517                           
  7518                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7519  001848  848C               	bsf	3980,2,c	;volatile
  7520                           
  7521                           ;lcd.c: 33: lcdNibble(data);
  7522  00184A  5012               	movf	putch@data,w,c
  7523  00184C  EC57  F009         	call	_lcdNibble
  7524  001850  0012               	return		;funcret
  7525  001852                     __end_of_putch:
  7526                           	opt stack 0
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           intcon3	equ	0xFF0
  7535                           postinc0	equ	0xFEE
  7536                           wreg	equ	0xFE8
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _isdigit *****************
  7545 ;; Defined at:
  7546 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  c               1    wreg     unsigned char 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  c               1   17[COMRAM] unsigned char 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;		None               void
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;Total ram usage:        3 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    1
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_printf
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text41
  7575  00175E                     __ptext41:
  7576                           	opt stack 0
  7577  00175E                     _isdigit:
  7578                           	opt stack 26
  7579                           
  7580                           ;incstack = 0
  7581                           ;isdigit@c stored from wreg
  7582  00175E  6E12               	movwf	isdigit@c,c
  7583  001760  0E00               	movlw	0
  7584  001762  6E11               	movwf	_isdigit$1349,c
  7585  001764  0E3A               	movlw	58
  7586  001766  6012               	cpfslt	isdigit@c,c
  7587  001768  D005               	goto	l3607
  7588  00176A  0E2F               	movlw	47
  7589  00176C  6412               	cpfsgt	isdigit@c,c
  7590  00176E  D002               	goto	l3607
  7591  001770  0E01               	movlw	1
  7592  001772  6E11               	movwf	_isdigit$1349,c
  7593  001774                     l3607:
  7594  001774  C011  F010         	movff	_isdigit$1349,??_isdigit
  7595  001778  3010               	rrcf	??_isdigit,w,c
  7596  00177A  0012               	return	
  7597  00177C                     __end_of_isdigit:
  7598                           	opt stack 0
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           intcon3	equ	0xFF0
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           fsr2h	equ	0xFDA
  7613                           fsr2l	equ	0xFD9
  7614                           status	equ	0xFD8
  7615                           
  7616 ;; *************** function ___wmul *****************
  7617 ;; Defined at:
  7618 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  multiplier      2   15[COMRAM] unsigned int 
  7621 ;;  multiplicand    2   17[COMRAM] unsigned int 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  product         2   19[COMRAM] unsigned int 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  2   15[COMRAM] unsigned int 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2, status,0, prodl, prodh
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;Total ram usage:        6 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    1
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_get_timeDif
  7644 ;;		_executingState
  7645 ;;		_printf
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text42
  7650  001738                     __ptext42:
  7651                           	opt stack 0
  7652  001738                     ___wmul:
  7653                           	opt stack 26
  7654                           
  7655                           ;incstack = 0
  7656  001738  5010               	movf	___wmul@multiplier,w,c
  7657  00173A  0212               	mulwf	___wmul@multiplicand,c
  7658  00173C  CFF3 F014          	movff	prodl,___wmul@product
  7659  001740  CFF4 F015          	movff	prodh,___wmul@product+1
  7660  001744  5010               	movf	___wmul@multiplier,w,c
  7661  001746  0213               	mulwf	___wmul@multiplicand+1,c
  7662  001748  50F3               	movf	prodl,w,c
  7663  00174A  2615               	addwf	___wmul@product+1,f,c
  7664  00174C  5011               	movf	___wmul@multiplier+1,w,c
  7665  00174E  0212               	mulwf	___wmul@multiplicand,c
  7666  001750  50F3               	movf	prodl,w,c
  7667  001752  2615               	addwf	___wmul@product+1,f,c
  7668  001754  C014  F010         	movff	___wmul@product,?___wmul
  7669  001758  C015  F011         	movff	___wmul@product+1,?___wmul+1
  7670  00175C  0012               	return	
  7671  00175E                     __end_of___wmul:
  7672                           	opt stack 0
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           prodh	equ	0xFF4
  7678                           prodl	equ	0xFF3
  7679                           intcon	equ	0xFF2
  7680                           intcon3	equ	0xFF0
  7681                           postinc0	equ	0xFEE
  7682                           wreg	equ	0xFE8
  7683                           indf2	equ	0xFDF
  7684                           postinc2	equ	0xFDE
  7685                           postdec2	equ	0xFDD
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8
  7689                           
  7690 ;; *************** function ___lwmod *****************
  7691 ;; Defined at:
  7692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;  dividend        2   22[COMRAM] unsigned int 
  7695 ;;  divisor         2   24[COMRAM] unsigned int 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  counter         1   26[COMRAM] unsigned char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  2   22[COMRAM] unsigned int 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2, status,0
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7711 ;;Total ram usage:        5 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    1
  7714 ;; This function calls:
  7715 ;;		Nothing
  7716 ;; This function is called by:
  7717 ;;		_printf
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text43
  7722  001512                     __ptext43:
  7723                           	opt stack 0
  7724  001512                     ___lwmod:
  7725                           	opt stack 26
  7726                           
  7727                           ;incstack = 0
  7728  001512  5019               	movf	___lwmod@divisor,w,c
  7729  001514  101A               	iorwf	___lwmod@divisor+1,w,c
  7730  001516  B4D8               	btfsc	status,2,c
  7731  001518  D018               	goto	l1028
  7732  00151A  0E01               	movlw	1
  7733  00151C  6E1B               	movwf	___lwmod@counter,c
  7734  00151E  D004               	goto	l3645
  7735  001520                     l3643:
  7736  001520  90D8               	bcf	status,0,c
  7737  001522  3619               	rlcf	___lwmod@divisor,f,c
  7738  001524  361A               	rlcf	___lwmod@divisor+1,f,c
  7739  001526  2A1B               	incf	___lwmod@counter,f,c
  7740  001528                     l3645:
  7741  001528  AE1A               	btfss	___lwmod@divisor+1,7,c
  7742  00152A  D7FA               	goto	l3643
  7743  00152C                     l3647:
  7744  00152C  5019               	movf	___lwmod@divisor,w,c
  7745  00152E  5C17               	subwf	___lwmod@dividend,w,c
  7746  001530  501A               	movf	___lwmod@divisor+1,w,c
  7747  001532  5818               	subwfb	___lwmod@dividend+1,w,c
  7748  001534  A0D8               	btfss	status,0,c
  7749  001536  D004               	goto	l3651
  7750  001538  5019               	movf	___lwmod@divisor,w,c
  7751  00153A  5E17               	subwf	___lwmod@dividend,f,c
  7752  00153C  501A               	movf	___lwmod@divisor+1,w,c
  7753  00153E  5A18               	subwfb	___lwmod@dividend+1,f,c
  7754  001540                     l3651:
  7755  001540  90D8               	bcf	status,0,c
  7756  001542  321A               	rrcf	___lwmod@divisor+1,f,c
  7757  001544  3219               	rrcf	___lwmod@divisor,f,c
  7758  001546  2E1B               	decfsz	___lwmod@counter,f,c
  7759  001548  D7F1               	goto	l3647
  7760  00154A                     l1028:
  7761  00154A  C017  F017         	movff	___lwmod@dividend,?___lwmod
  7762  00154E  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  7763  001552  0012               	return		;funcret
  7764  001554                     __end_of___lwmod:
  7765                           	opt stack 0
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           intcon3	equ	0xFF0
  7774                           postinc0	equ	0xFEE
  7775                           wreg	equ	0xFE8
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function ___lwdiv *****************
  7784 ;; Defined at:
  7785 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  dividend        2   15[COMRAM] unsigned int 
  7788 ;;  divisor         2   17[COMRAM] unsigned int 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  quotient        2   20[COMRAM] unsigned int 
  7791 ;;  counter         1   19[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  2   15[COMRAM] unsigned int 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;Total ram usage:        7 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    1
  7808 ;; This function calls:
  7809 ;;		Nothing
  7810 ;; This function is called by:
  7811 ;;		_printf
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text44
  7816  001304                     __ptext44:
  7817                           	opt stack 0
  7818  001304                     ___lwdiv:
  7819                           	opt stack 26
  7820                           
  7821                           ;incstack = 0
  7822  001304  0E00               	movlw	0
  7823  001306  6E16               	movwf	___lwdiv@quotient+1,c
  7824  001308  0E00               	movlw	0
  7825  00130A  6E15               	movwf	___lwdiv@quotient,c
  7826  00130C  5012               	movf	___lwdiv@divisor,w,c
  7827  00130E  1013               	iorwf	___lwdiv@divisor+1,w,c
  7828  001310  B4D8               	btfsc	status,2,c
  7829  001312  D01C               	goto	l1018
  7830  001314  0E01               	movlw	1
  7831  001316  6E14               	movwf	___lwdiv@counter,c
  7832  001318  D004               	goto	l3625
  7833  00131A                     l3623:
  7834  00131A  90D8               	bcf	status,0,c
  7835  00131C  3612               	rlcf	___lwdiv@divisor,f,c
  7836  00131E  3613               	rlcf	___lwdiv@divisor+1,f,c
  7837  001320  2A14               	incf	___lwdiv@counter,f,c
  7838  001322                     l3625:
  7839  001322  AE13               	btfss	___lwdiv@divisor+1,7,c
  7840  001324  D7FA               	goto	l3623
  7841  001326                     l3627:
  7842  001326  90D8               	bcf	status,0,c
  7843  001328  3615               	rlcf	___lwdiv@quotient,f,c
  7844  00132A  3616               	rlcf	___lwdiv@quotient+1,f,c
  7845  00132C  5012               	movf	___lwdiv@divisor,w,c
  7846  00132E  5C10               	subwf	___lwdiv@dividend,w,c
  7847  001330  5013               	movf	___lwdiv@divisor+1,w,c
  7848  001332  5811               	subwfb	___lwdiv@dividend+1,w,c
  7849  001334  A0D8               	btfss	status,0,c
  7850  001336  D005               	goto	l3635
  7851  001338  5012               	movf	___lwdiv@divisor,w,c
  7852  00133A  5E10               	subwf	___lwdiv@dividend,f,c
  7853  00133C  5013               	movf	___lwdiv@divisor+1,w,c
  7854  00133E  5A11               	subwfb	___lwdiv@dividend+1,f,c
  7855  001340  8015               	bsf	___lwdiv@quotient,0,c
  7856  001342                     l3635:
  7857  001342  90D8               	bcf	status,0,c
  7858  001344  3213               	rrcf	___lwdiv@divisor+1,f,c
  7859  001346  3212               	rrcf	___lwdiv@divisor,f,c
  7860  001348  2E14               	decfsz	___lwdiv@counter,f,c
  7861  00134A  D7ED               	goto	l3627
  7862  00134C                     l1018:
  7863  00134C  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  7864  001350  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7865  001354  0012               	return		;funcret
  7866  001356                     __end_of___lwdiv:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           intcon	equ	0xFF2
  7875                           intcon3	equ	0xFF0
  7876                           postinc0	equ	0xFEE
  7877                           wreg	equ	0xFE8
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _lcdInst *****************
  7886 ;; Defined at:
  7887 ;;		line 26 in file "lcd.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  data            1    wreg     unsigned char 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  data            1   17[COMRAM] unsigned char 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        1 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    2
  7908 ;; This function calls:
  7909 ;;		_lcdNibble
  7910 ;; This function is called by:
  7911 ;;		_initLCD
  7912 ;;		_update_lcd
  7913 ;;		_executingState
  7914 ;;		_debugState
  7915 ;;		_fixLCD
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text45
  7920  001852                     __ptext45:
  7921                           	opt stack 0
  7922  001852                     _lcdInst:
  7923                           	opt stack 26
  7924                           
  7925                           ;incstack = 0
  7926                           ;lcdInst@data stored from wreg
  7927  001852  6E12               	movwf	lcdInst@data,c
  7928                           
  7929                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7930  001854  948C               	bcf	3980,2,c	;volatile
  7931                           
  7932                           ;lcd.c: 28: lcdNibble(data);
  7933  001856  5012               	movf	lcdInst@data,w,c
  7934  001858  EC57  F009         	call	_lcdNibble
  7935  00185C  0012               	return		;funcret
  7936  00185E                     __end_of_lcdInst:
  7937                           	opt stack 0
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           intcon	equ	0xFF2
  7945                           intcon3	equ	0xFF0
  7946                           postinc0	equ	0xFEE
  7947                           wreg	equ	0xFE8
  7948                           indf2	equ	0xFDF
  7949                           postinc2	equ	0xFDE
  7950                           postdec2	equ	0xFDD
  7951                           fsr2h	equ	0xFDA
  7952                           fsr2l	equ	0xFD9
  7953                           status	equ	0xFD8
  7954                           
  7955 ;; *************** function _lcdNibble *****************
  7956 ;; Defined at:
  7957 ;;		line 36 in file "lcd.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;  data            1    wreg     unsigned char 
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  data            1   16[COMRAM] unsigned char 
  7962 ;;  temp            1   15[COMRAM] unsigned char 
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		wreg, status,2, status,0
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;Total ram usage:        2 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    1
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		_lcdInst
  7983 ;;		_putch
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	text46
  7988  0012AE                     __ptext46:
  7989                           	opt stack 0
  7990  0012AE                     _lcdNibble:
  7991                           	opt stack 25
  7992                           
  7993                           ;incstack = 0
  7994                           ;lcdNibble@data stored from wreg
  7995  0012AE  6E11               	movwf	lcdNibble@data,c
  7996                           
  7997                           ;lcd.c: 38: char temp = data & 0xF0;
  7998  0012B0  5011               	movf	lcdNibble@data,w,c
  7999  0012B2  0BF0               	andlw	240
  8000  0012B4  6E10               	movwf	lcdNibble@temp,c
  8001                           
  8002                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8003  0012B6  508C               	movf	3980,w,c	;volatile
  8004  0012B8  0B0F               	andlw	15
  8005  0012BA  6E8C               	movwf	3980,c	;volatile
  8006                           
  8007                           ;lcd.c: 40: LATD = temp | LATD;
  8008  0012BC  5010               	movf	lcdNibble@temp,w,c
  8009  0012BE  108C               	iorwf	3980,w,c	;volatile
  8010  0012C0  6E8C               	movwf	3980,c	;volatile
  8011                           
  8012                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8013  0012C2  968C               	bcf	3980,3,c	;volatile
  8014                           
  8015                           ;lcd.c: 43: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8016  0012C4  0E14               	movlw	20
  8017  0012C6                     u3687:
  8018  0012C6  2EE8               	decfsz	wreg,f,c
  8019  0012C8  D7FE               	bra	u3687
  8020  0012CA  D000               	nop2	
  8021                           
  8022                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8023  0012CC  868C               	bsf	3980,3,c	;volatile
  8024                           
  8025                           ;lcd.c: 45: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8026  0012CE  0E14               	movlw	20
  8027  0012D0                     u3697:
  8028  0012D0  2EE8               	decfsz	wreg,f,c
  8029  0012D2  D7FE               	bra	u3697
  8030  0012D4  D000               	nop2	
  8031                           
  8032                           ;lcd.c: 47: data = data << 4;
  8033  0012D6  3811               	swapf	lcdNibble@data,w,c
  8034  0012D8  0BF0               	andlw	240
  8035  0012DA  6E11               	movwf	lcdNibble@data,c
  8036                           
  8037                           ;lcd.c: 49: temp = data & 0xF0;
  8038  0012DC  5011               	movf	lcdNibble@data,w,c
  8039  0012DE  0BF0               	andlw	240
  8040  0012E0  6E10               	movwf	lcdNibble@temp,c
  8041                           
  8042                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8043  0012E2  508C               	movf	3980,w,c	;volatile
  8044  0012E4  0B0F               	andlw	15
  8045  0012E6  6E8C               	movwf	3980,c	;volatile
  8046                           
  8047                           ;lcd.c: 51: LATD = temp | LATD;
  8048  0012E8  5010               	movf	lcdNibble@temp,w,c
  8049  0012EA  108C               	iorwf	3980,w,c	;volatile
  8050  0012EC  6E8C               	movwf	3980,c	;volatile
  8051                           
  8052                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8053  0012EE  968C               	bcf	3980,3,c	;volatile
  8054                           
  8055                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8056  0012F0  0E14               	movlw	20
  8057  0012F2                     u3707:
  8058  0012F2  2EE8               	decfsz	wreg,f,c
  8059  0012F4  D7FE               	bra	u3707
  8060  0012F6  D000               	nop2	
  8061                           
  8062                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8063  0012F8  868C               	bsf	3980,3,c	;volatile
  8064                           
  8065                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8066  0012FA  0E14               	movlw	20
  8067  0012FC                     u3717:
  8068  0012FC  2EE8               	decfsz	wreg,f,c
  8069  0012FE  D7FE               	bra	u3717
  8070  001300  D000               	nop2	
  8071  001302  0012               	return		;funcret
  8072  001304                     __end_of_lcdNibble:
  8073                           	opt stack 0
  8074                           tblptru	equ	0xFF8
  8075                           tblptrh	equ	0xFF7
  8076                           tblptrl	equ	0xFF6
  8077                           tablat	equ	0xFF5
  8078                           prodh	equ	0xFF4
  8079                           prodl	equ	0xFF3
  8080                           intcon	equ	0xFF2
  8081                           intcon3	equ	0xFF0
  8082                           postinc0	equ	0xFEE
  8083                           wreg	equ	0xFE8
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function _keypressed *****************
  8092 ;; Defined at:
  8093 ;;		line 501 in file "main.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;		None
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  keypress        1   14[COMRAM] unsigned char 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;Total ram usage:       15 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		Interrupt level 2
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	intcode
  8121  000008                     __pintcode:
  8122                           	opt stack 0
  8123  000008                     _keypressed:
  8124                           	opt stack 25
  8125                           
  8126                           ;incstack = 0
  8127  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8128  00000A  ED94  F007         	call	int_func,f	;refresh shadow registers
  8129                           tblptru	equ	0xFF8
  8130                           tblptrh	equ	0xFF7
  8131                           tblptrl	equ	0xFF6
  8132                           tablat	equ	0xFF5
  8133                           prodh	equ	0xFF4
  8134                           prodl	equ	0xFF3
  8135                           intcon	equ	0xFF2
  8136                           intcon3	equ	0xFF0
  8137                           postinc0	equ	0xFEE
  8138                           wreg	equ	0xFE8
  8139                           indf2	equ	0xFDF
  8140                           postinc2	equ	0xFDE
  8141                           postdec2	equ	0xFDD
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146                           	psect	intcode_body
  8147  000F28                     __pintcode_body:
  8148                           	opt stack 25
  8149  000F28                     int_func:
  8150                           	opt stack 25
  8151  000F28  0006               	pop		; remove dummy address from shadow register refresh
  8152  000F2A  CFFA F001          	movff	pclath,??_keypressed
  8153  000F2E  CFFB F002          	movff	pclatu,??_keypressed+1
  8154  000F32  CFE9 F003          	movff	fsr0l,??_keypressed+2
  8155  000F36  CFEA F004          	movff	fsr0h,??_keypressed+3
  8156  000F3A  CFE1 F005          	movff	fsr1l,??_keypressed+4
  8157  000F3E  CFE2 F006          	movff	fsr1h,??_keypressed+5
  8158  000F42  CFD9 F007          	movff	fsr2l,??_keypressed+6
  8159  000F46  CFDA F008          	movff	fsr2h,??_keypressed+7
  8160  000F4A  CFF3 F009          	movff	prodl,??_keypressed+8
  8161  000F4E  CFF4 F00A          	movff	prodh,??_keypressed+9
  8162  000F52  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  8163  000F56  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  8164  000F5A  CFF8 F00D          	movff	tblptru,??_keypressed+12
  8165  000F5E  CFF5 F00E          	movff	tablat,??_keypressed+13
  8166                           
  8167                           ;main.c: 503: if (INT1IF)
  8168  000F62  A0F0               	btfss	intcon3,0,c	;volatile
  8169  000F64  D01C               	goto	i2l316
  8170  000F66                     i2l2285:
  8171                           
  8172                           ;main.c: 506: {
  8173                           ;main.c: 507: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8174  000F66  3881               	swapf	3969,w,c	;volatile
  8175  000F68  0B0F               	andlw	15
  8176  000F6A  0B0F               	andlw	15
  8177  000F6C  6E0F               	movwf	keypressed@keypress,c
  8178                           
  8179                           ;main.c: 508: if (keypress == 0b1101)
  8180  000F6E  0E0D               	movlw	13
  8181  000F70  180F               	xorwf	keypressed@keypress,w,c
  8182  000F72  A4D8               	btfss	status,2,c
  8183  000F74  D7F8               	goto	i2l2285
  8184                           
  8185                           ;main.c: 509: {
  8186                           ;main.c: 510: LATA = 0x00;
  8187  000F76  0E00               	movlw	0
  8188  000F78  6E89               	movwf	3977,c	;volatile
  8189                           
  8190                           ;main.c: 511: LATB = 0x00;
  8191  000F7A  0E00               	movlw	0
  8192  000F7C  6E8A               	movwf	3978,c	;volatile
  8193                           
  8194                           ;main.c: 512: LATC = 0x00;
  8195  000F7E  0E00               	movlw	0
  8196  000F80  6E8B               	movwf	3979,c	;volatile
  8197                           
  8198                           ;main.c: 513: LATD = 0x00;
  8199  000F82  0E00               	movlw	0
  8200  000F84  6E8C               	movwf	3980,c	;volatile
  8201                           
  8202                           ;main.c: 514: LATE = 0x00;
  8203  000F86  0E00               	movlw	0
  8204  000F88  6E8D               	movwf	3981,c	;volatile
  8205                           
  8206                           ;main.c: 515: LATCbits.LATC6 = 0;
  8207  000F8A  9C8B               	bcf	3979,6,c	;volatile
  8208                           
  8209                           ;main.c: 516: LATBbits.LATB0 = 0;
  8210  000F8C  908A               	bcf	3978,0,c	;volatile
  8211                           
  8212                           ;main.c: 517: state = FINISH;
  8213  000F8E  0E02               	movlw	2
  8214  000F90  6E4B               	movwf	_state,c
  8215                           
  8216                           ;main.c: 518: runResult = 0;
  8217  000F92  0E00               	movlw	0
  8218  000F94  6E46               	movwf	_runResult+1,c
  8219  000F96  0E00               	movlw	0
  8220  000F98  6E45               	movwf	_runResult,c
  8221                           
  8222                           ;main.c: 519: (INTCONbits.GIE = 0);
  8223  000F9A  9EF2               	bcf	intcon,7,c	;volatile
  8224                           
  8225                           ;main.c: 521: }
  8226                           ;main.c: 522: }
  8227                           ;main.c: 523: INT1IF = 0;
  8228                           
  8229                           ;main.c: 520: break;
  8230  000F9C  90F0               	bcf	intcon3,0,c	;volatile
  8231  000F9E                     i2l316:
  8232  000F9E  C00E  FFF5         	movff	??_keypressed+13,tablat
  8233  000FA2  C00D  FFF8         	movff	??_keypressed+12,tblptru
  8234  000FA6  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  8235  000FAA  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  8236  000FAE  C00A  FFF4         	movff	??_keypressed+9,prodh
  8237  000FB2  C009  FFF3         	movff	??_keypressed+8,prodl
  8238  000FB6  C008  FFDA         	movff	??_keypressed+7,fsr2h
  8239  000FBA  C007  FFD9         	movff	??_keypressed+6,fsr2l
  8240  000FBE  C006  FFE2         	movff	??_keypressed+5,fsr1h
  8241  000FC2  C005  FFE1         	movff	??_keypressed+4,fsr1l
  8242  000FC6  C004  FFEA         	movff	??_keypressed+3,fsr0h
  8243  000FCA  C003  FFE9         	movff	??_keypressed+2,fsr0l
  8244  000FCE  C002  FFFB         	movff	??_keypressed+1,pclatu
  8245  000FD2  C001  FFFA         	movff	??_keypressed,pclath
  8246  000FD6  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8247  000FD8  0011               	retfie		f
  8248  000FDA                     __end_of_keypressed:
  8249                           	opt stack 0
  8250                           pclatu	equ	0xFFB
  8251                           pclath	equ	0xFFA
  8252                           tblptru	equ	0xFF8
  8253                           tblptrh	equ	0xFF7
  8254                           tblptrl	equ	0xFF6
  8255                           tablat	equ	0xFF5
  8256                           prodh	equ	0xFF4
  8257                           prodl	equ	0xFF3
  8258                           intcon	equ	0xFF2
  8259                           intcon3	equ	0xFF0
  8260                           postinc0	equ	0xFEE
  8261                           fsr0h	equ	0xFEA
  8262                           fsr0l	equ	0xFE9
  8263                           wreg	equ	0xFE8
  8264                           fsr1h	equ	0xFE2
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           pclatu	equ	0xFFB
  8273                           pclath	equ	0xFFA
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           intcon3	equ	0xFF0
  8282                           postinc0	equ	0xFEE
  8283                           fsr0h	equ	0xFEA
  8284                           fsr0l	equ	0xFE9
  8285                           wreg	equ	0xFE8
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8
  8294                           
  8295                           	psect	rparam
  8296  0000                     pclatu	equ	0xFFB
  8297                           pclath	equ	0xFFA
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           intcon	equ	0xFF2
  8305                           intcon3	equ	0xFF0
  8306                           postinc0	equ	0xFEE
  8307                           fsr0h	equ	0xFEA
  8308                           fsr0l	equ	0xFE9
  8309                           wreg	equ	0xFE8
  8310                           fsr1h	equ	0xFE2
  8311                           fsr1l	equ	0xFE1
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           fsr2h	equ	0xFDA
  8316                           fsr2l	equ	0xFD9
  8317                           status	equ	0xFD8
  8318                           
  8319                           	psect	temp
  8320  00004F                     btemp:
  8321                           	opt stack 0
  8322  00004F                     	ds	1
  8323  0000                     int$flags	set	btemp
  8324                           pclatu	equ	0xFFB
  8325                           pclath	equ	0xFFA
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           prodh	equ	0xFF4
  8331                           prodl	equ	0xFF3
  8332                           intcon	equ	0xFF2
  8333                           intcon3	equ	0xFF0
  8334                           postinc0	equ	0xFEE
  8335                           fsr0h	equ	0xFEA
  8336                           fsr0l	equ	0xFE9
  8337                           wreg	equ	0xFE8
  8338                           fsr1h	equ	0xFE2
  8339                           fsr1l	equ	0xFE1
  8340                           indf2	equ	0xFDF
  8341                           postinc2	equ	0xFDE
  8342                           postdec2	equ	0xFDD
  8343                           fsr2h	equ	0xFDA
  8344                           fsr2l	equ	0xFD9
  8345                           status	equ	0xFD8


Data Sizes:
    Strings     272
    Constant    42
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      78
    BANK0           128     46      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eeprom_LogResult@data	PTR unsigned char  size(2) Largest target is 8
		 -> executingState@res(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[15]), STR_17(CODE[15]), STR_16(CODE[15]), STR_15(CODE[12]), 
		 -> STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[6]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[19]), STR_3(CODE[17]), 
		 -> STR_2(CODE[15]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@time	PTR int  size(2) Largest target is 14
		 -> starttime(BANK0[14]), time(BANK0[14]), 

    eeprom_GetLog@res	PTR int  size(2) Largest target is 1
		 -> logdata(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_fixLCD
    _eeprom_GetLog->_eeprom_ReadByte
    _fixLCD->_printf
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _executingState->_printf
    _update_lcd->_printf
    _get_timeDif->_get_time
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _eeprom_LogResult->_eeprom_WriteByte
    _dispenseSnCan->_servoRotate90
    _dispenseAlCan->_servoRotate90
    _eeprom_initialize->_eeprom_WriteByte
    _newestAddress->_eeprom_ReadByte
    _debugState->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executingState

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   60900
                    _I2C_Master_Init
                         _debugState
                  _eeprom_initialize
                     _executingState
                        _finishState
                             _fixLCD
                            _initLCD
                           _logState
                          _mainState
 ---------------------------------------------------------------------------------
 (1) _mainState                                            2     2      0    7533
                                             51 COMRAM     2     2      0
                           _get_time
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _logState                                             4     4      0    7204
                                             51 COMRAM     4     4      0
                      _eeprom_GetLog
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _eeprom_GetLog                                        9     5      4     846
                                             17 COMRAM     9     5      4
                    _eeprom_ReadByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (1) _fixLCD                                              13    13      0    8025
                                             51 COMRAM    13    13      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             28 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _finishState                                          4     4      0    6290
                                             51 COMRAM     4     4      0
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _executingState                                      49    49      0   24152
                                             51 COMRAM     3     3      0
                                              0 BANK0     46    46      0
                             ___wmul
                      _dispenseAlCan
                      _dispenseSnCan
                   _eeprom_LogResult
                           _get_time
                        _get_timeDif
                            _lcdInst
                             _printf
                          _readAlBot
                          _readAlTop
                          _readSnBot
                       _readSnSensor
                          _readSnTop
                       _servoRotate0
                       _servoRotate1
                       _servoRotate2
                       _servoRotate4
                      _servoRotate90
                     _servoRotate90n
                     _servoRotateArm
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _update_lcd                                           0     0      0    6187
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _servoRotateArm                                      11     9      2      77
                                             15 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate90n                                       6     4      2     407
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate4                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         6     4      2     330
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _readSnTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnSensor                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_timeDif                                         23    21      2    3598
                                             23 COMRAM    23    21      2
                             ___wmul
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1181
                                             18 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                             16 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             16 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_LogResult                                     5     3      2    1012
                                             18 COMRAM     5     3      2
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (2) _dispenseSnCan                                        2     2      0     598
                                             21 COMRAM     2     2      0
                       _servoRotate1
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate1                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _dispenseAlCan                                        2     2      0     598
                                             21 COMRAM     2     2      0
                       _servoRotate2
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        6     4      2     407
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate2                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _eeprom_initialize                                    0     0      0     771
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (3) _newestAddress                                        0     0      0     216
                    _eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (4) _eeprom_ReadByte                                      2     0      2     216
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_WriteByte                                     3     0      3     555
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _debugState                                           4     4      0    6290
                                             51 COMRAM     4     4      0
                            _lcdInst
                             _printf
                            _readKey
 ---------------------------------------------------------------------------------
 (2) _readKey                                              5     3      2      69
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    5992
                                             27 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1926
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _debugState
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readKey
   _eeprom_initialize
     _eeprom_WriteByte
     _newestAddress
       _eeprom_ReadByte
   _executingState
     ___wmul
     _dispenseAlCan
       _servoRotate2
       _servoRotate90
     _dispenseSnCan
       _servoRotate1
       _servoRotate90
     _eeprom_LogResult
       _eeprom_WriteByte
       _newestAddress
         _eeprom_ReadByte
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _get_timeDif
       ___wmul
       _get_time
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readAlBot
     _readAlTop
     _readSnBot
     _readSnSensor
     _readSnTop
     _servoRotate0
     _servoRotate1
     _servoRotate2
     _servoRotate4
     _servoRotate90
     _servoRotate90n
     _servoRotateArm
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _finishState
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _fixLCD
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _logState
     _eeprom_GetLog
       _eeprom_ReadByte
       _newestAddress
         _eeprom_ReadByte
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _mainState
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2E      4A       5       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      34        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 20:59:58 2017

              ?_get_timeDif 0018                          l34 1826                ?_finishState 0001  
           readKey@keypress 0012         ___wmul@multiplicand 0012                 __CFG_BORV$3 000000  
             servoRotate0@i 0014               servoRotate1@i 0013               servoRotate2@i 0013  
             servoRotate4@i 0013                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000  
                       l220 14A8                         l217 149C                         l218 14C6  
                       l331 181E                         l500 0E7A                         l501 0E7E  
                       l502 0E82                         l431 1586                         l432 155E  
                       l352 13EE                         l504 0EC4                         l337 172E  
                       l425 167E                         l426 1658                         l442 1640  
                       l506 0EC8                         l443 161A                         l507 0ECC  
                       l515 1190                         l267 056C                         l460 0CF2  
                       l508 0ED0                         l461 0CF6                         l509 0ED4  
                       l357 1252                         l462 0CFA                         l454 0D96  
                       l295 0A5C                         l480 0DB6                         l464 0D3E  
                       l481 0DBA                         l457 0CEA                         l482 0DBE  
                       l474 0E5A                         l466 0D42                         l467 0D46  
                       l459 0CEE                         l484 0E02                         l468 0D4A  
                       l573 068C                         l477 0DAE                         l469 0D4E  
                       l486 0E06                         l494 0F1A                         l487 0E0A  
                       l479 0DB2                         l488 0E0E                         l489 0E12  
                       l497 0E72                         l499 0E76                         l965 1170  
              __CFG_CPB$OFF 000000                         _PEN 007E2A                __CFG_CPD$OFF 000000  
                       _SEN 007E28              ?_dispenseAlCan 0001                         prod 000FF3  
                       wreg 000FE8              ?_dispenseSnCan 0001              servoRotate90@i 0014  
              __CFG_LVP$OFF 000000       __end_of_newestAddress 1846                __CFG_WDT$OFF 000000  
                      l1018 134C                        l1028 154A                        l4003 17A6  
                      l4013 17EE                        l4101 121E                        l4023 17D6  
                      l4033 1806                        l4211 0294                        l4131 1476  
                      l4123 146A                        l4301 04A6                        l4109 1440  
                      l4055 17BE                        l4071 11BE                        l4215 02AA  
                      l4207 027E                        l4313 04E2                        l4233 0310  
                      l2705 1122                        l4075 11CA                        l4323 051A  
                      l4219 02C0                        l4331 0552                        l2707 112E  
                      l3701 06BA                        l4085 13D4                        l4333 0568  
                      l4309 04CC                        l4253 037E                        l2717 1162  
                      l2709 1132                        l4421 095C                        l4413 0920  
                      l3623 131A                        l3607 1774                        l4263 03C0  
                      l4247 0360                        l4511 1048                        l3625 1322  
                      l3721 0708                        l3705 06D4                        l4329 053C  
                      l4281 0430                        l4273 03FE                        l4417 0954  
                      l4097 120E                        l4361 1362                        l4513 104E  
                      l3635 1342                        l3627 1326                        l3651 1540  
                      l3643 1520                        l3707 06D8                        l3803 10DC  
                      l4283 043A                        l4427 0978                        l4515 1054  
                      l4507 103C                        l3645 1528                        l3661 05AA  
                      l4349 15F4                        l4509 1042                        l3647 152C  
                      l3743 075E                        l3719 0704                        l3735 0734  
                      l3671 05CE                        l3575 170C                        l3903 0C88  
                      l4199 024A                        l4455 0A4A                        l4375 1394  
                      l4519 1058                        l3761 07B6                        l3737 0744  
                      l3665 05BA                        l3833 0E16                        l3905 0C94  
                      l3913 0CB6                        l3763 07BE                        l3771 07E4  
                      l3755 07A0                        l3747 0782                        l3667 05C8  
                      l3835 0E46                        l3827 0DC2                        l3915 0CD2  
                      l3773 07EA                        l3781 0874                        l3749 078A  
                      l3685 065A                        l3677 05FC                        l2789 14B8  
                      l3829 0DF2                        l3909 0CA8                        l3775 082E  
                      l3783 0884                        l3767 07D2                        l3951 0ED8  
                      l3785 088A                        l3689 065E                        l3793 10AE  
                      l3953 0F08                        l3945 0E86                        l3881 0BB0  
                      l3787 0892                        l3971 0D2E                        l3947 0EB6  
                      l3797 10B6                        l3893 0C32            _eeprom_LogResult 13A4  
                      l3975 0D52                        l3887 0C0C                        l3977 0D82  
                      l3969 0CFE                        l3899 0C72                        STR_1 FFBF  
                      STR_2 FFDE                        STR_3 FFAE                        STR_4 FEEF  
                      STR_5 FF9D                        STR_6 FF7B                        STR_7 FF02  
                      STR_8 FF59                        STR_9 FF6A              eeprom_GetLog@i 0019  
                      u3005 0042                        _LATA 000F89                        _LATB 000F8A  
                      u3015 0076                        _LATC 000F8B                        u3200 050C  
                      _LATD 000F8C                        u3025 00A6                        _LATE 000F8D  
                      u3210 0530                        u3300 09F4                        u3320 0A0A  
                      u1740 14C6                        u3340 0A22                        u2390 170A  
                      u3318 09F6                        u3360 0A38                        u3338 0A0C  
                      u3507 0546                        u3427 14D2                        u2805 0A7A  
                      u3517 1198                        u3437 1506                        u3358 0A24  
                      u3607 1660                        u2815 0AA6                        u3527 11AA  
                      u3447 15DE                        u1695 1282                        u3617 1670  
                      u2825 0ACE                        u3537 0EB8                        u3457 01B2  
                      u3378 0A3A                        u3707 12F2                        u3627 16D2  
                      u3547 0F0E                        u3467 02EC                        u3717 12FC  
                      u3637 0DF8                        u3557 1622                        u3477 033C  
                      u3647 0E4C                        u3567 1632                        u3487 0394  
                      u3657 1566                        u3577 0D34                        u3497 045A  
                      u3667 1578                        u3587 0D88                        _RCEN 007E2B  
                      u3677 13FC                        u3597 16A2                        u3687 12C6  
                      u3697 12D0                        _RSEN 007E29                        _main 0FDA  
                      _keys FEC5                        _time 00BC                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 004F                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000             ??_servoRotate90 0012  
           ??_eeprom_GetLog 0016               __CFG_MCLRE$ON 000000             servoRotate90n@i 0014  
              ___param_bank 000000            ?_I2C_Master_Init 001D            ?_I2C_Master_Read 0001  
          ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001                       ?_main 0001  
                     _ACKEN 007E2C                       _ACKDT 007E2D                       _EEADR 000FA9  
                     STR_10 FF48        eeprom_WriteByte@data 0012                       STR_11 FFF9  
                     STR_12 FF8C                       STR_13 FF37                       STR_14 FF14  
                     STR_15 FFED                       STR_16 FFCF                       STR_17 FFDE  
                     STR_18 FF39                       STR_19 FF26                       _CMCON 000FB4  
           __end_of___lldiv 1182                get_time@time 0013             __end_of___lwdiv 1356  
           __end_of___lwmod 1554                       i2l316 0F9E                       _PORTB 000F81  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96         servoRotate90n@servo 0010  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000             __end_of_lcdInst 185E  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000                       _alTab 0043  
           __end_of_initLCD 1512              __CFG_EBTRB$OFF 000000             __end_of_dpowers FEE0  
           __end_of_readKey 14CC             __end_of_isdigit 177C                       _state 004B  
                     _putch 1846            _eeprom_WriteByte 1712                       pclath 000FFA  
                     tablat 000FF5                       status 000FD8            ??_servoRotate90n 0012  
  __size_of_eeprom_ReadByte 0016              __CFG_PBADEN$ON 000000            ??_servoRotateArm 0012  
           __initialization 1594                __end_of_main 107A                __end_of_keys FED6  
           ??_dispenseAlCan 0016                      ??_main 0041               __activetblptr 000002  
           ??_dispenseSnCan 0016           ?_I2C_Master_Start 0001           ?_I2C_Master_Write 0011  
         executingState@res 0094               ?_readSnSensor 0010          ??_I2C_Master_Start 0011  
                    _ADCON0 000FC2                      _ADCON1 000FC1          ??_I2C_Master_Write 0013  
                    _EEADRH 000FAA                      _EEDATA 000FA8                      _EECON2 000FA7  
                    ?_putch 0001            eeprom_GetLog@res 0014                      _INT1IE 007F83  
                    _INT1IF 007F80                      i2l2285 0F66                      _OSCCON 000FD3  
                    _SSPADD 000FC8                      _TRISC3 007CA3                      _TRISC4 007CA4  
                    _SSPBUF 000FC9              __CFG_XINST$OFF 000000            __end_of_get_time 1100  
                    ___wmul 1738              __CFG_STVREN$ON 000000                      _fixLCD 08AC  
                 ??___lldiv 0018      executingState@alLoaded 00A6                   ??___lwdiv 0014  
                 ??___lwmod 001B        __size_of_get_timeDif 014A            __end_of_logState 13A4  
                    clear_0 15B2                      clear_1 15BE                 logState@log 0034  
                 ??_lcdInst 0012                      _printf 05A0        __size_of_finishState 003E  
                 ??_initLCD 0013      executingState@hasLabel 00A2                   ??_readKey 0012  
              __pdataCOMRAM 004D                   ??_isdigit 0010                __mediumconst FEC4  
            ??_readSnSensor 0012                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8      executingState@snLoaded 00A4                  __accesstop 0080  
   __end_of__initialization 15C4               ___rparam_used 000001      executingState@runCanAl 0082  
    executingState@runCanSn 0080              __pcstackCOMRAM 0001           servoRotate1@angle 0010  
         servoRotate2@angle 0010           ??_eeprom_ReadByte 0012    __end_of_eeprom_LogResult 13F0  
         servoRotate4@angle 0010           servoRotate0@servo 0010               __end_of_putch 1852  
        __size_of_lcdNibble 0056        executingState@hasTab 009E          __size_of_mainState 0048  
                   ??_putch 0012                  __pbssBANK0 00AE           servoRotateArm@res 0017  
        __size_of_readAlBot 0018                  _debugState 13F0          __size_of_readAlTop 0018  
        __size_of_readSnBot 0018          __size_of_readSnTop 0018                     ?___wmul 0010  
                   ?_fixLCD 0001    __end_of_eeprom_WriteByte 1738                     ?_printf 001C  
   __size_of_executingState 058E           eeprom_GetLog@back 0012           _eeprom_initialize 177C  
        ?_eeprom_initialize 0001                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                   ?_get_time 0013                   ?_logState 0001  
       ??_eeprom_initialize 0013           __end_of_lcdNibble 1304            get_timeDif@h_one 001F  
          get_timeDif@h_ten 001D            get_timeDif@m_one 0023            get_timeDif@m_ten 0021  
                   __Hparam 0000            get_timeDif@s_one 0027            get_timeDif@s_ten 0025  
                   __Lparam 0000            get_timeDif@start 0018        __end_of_readSnSensor 17C8  
     __end_of_servoRotate90 0E68       __end_of_eeprom_GetLog 1254                     _alNoTab 0041  
                   ___lldiv 1100             __size_of___wmul 0026                     ___lwdiv 1304  
                   ___lwmod 1512             __size_of_fixLCD 01B2           __end_of_mainState 1484  
    __size_of_newestAddress 000E                     __pcinit 1594                     __ramtop 1000  
                   _lcdInst 1852                     __ptext0 0FDA                     __ptext1 143C  
                   __ptext2 1356                     __ptext3 11F4                     __ptext4 08AC  
                   __ptext5 14CC                     __ptext6 1254                     __ptext7 1100  
                   __ptext8 15D2                     __ptext9 0012           __end_of_readAlBot 1810  
         __end_of_readAlTop 17F8             __size_of_printf 030C   __end_of_eeprom_initialize 1798  
                   _initLCD 14CC           __end_of_hexpowers FEE8           __end_of_readSnBot 17E0  
                   _dpowers FED6           __end_of_readSnTop 17B0                     _readKey 1484  
                   _snLabel 0047                     _isdigit 175E                     _logdata 004C  
                   fixLCD@i 0035                     fixLCD@j 003E                  _keypressed 0008  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026    __size_of_I2C_Master_Wait 0012  
  __size_of_I2C_Master_Stop 0008                  fixLCD@time 0037                  ??_get_time 0015  
            __pintcode_body 0F28        end_of_initialization 15C4                 ?_debugState 0001  
             __Lmediumconst FEC4                  ??_logState 0034                     int_func 0F28  
 __size_of_I2C_Master_Start 0008   __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0014  
           ___lldiv@counter 001C               ?_servoRotate0 0010               ?_servoRotate1 0010  
             ?_servoRotate2 0010               ?_servoRotate4 0010                     printf@c 0033  
                   printf@f 001C            I2C_Master_Init@c 001D            I2C_Master_Read@a 0011  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTAbits 000F80                   _PORTBbits 000F81                   _PORTCbits 000F82  
     __end_of_dispenseAlCan 16EC           eeprom_LogResult@i 0016       __end_of_dispenseSnCan 16BC  
                _update_lcd 0BA8               _newestAddress 1838                  _statictime FEE8  
      servoRotateArm@i_1045 0015         finishState@keypress 0036             _eeprom_ReadByte 1810  
               printf@width 0031              ??_servoRotate0 0012              ??_servoRotate1 0012  
            ??_servoRotate2 0012              ??_servoRotate4 0012               ??_get_timeDif 001A  
        servoRotate90@servo 0010               ??_finishState 0034              __end_of___wmul 175E  
         ?_eeprom_LogResult 0013              __end_of_fixLCD 0A5E               __pidataCOMRAM 1878  
   __size_of_servoRotate90n 00C0      eeprom_ReadByte@address 0010     __size_of_servoRotateArm 0072  
        debugState@keypress 0036              _executingState 0012          ??_eeprom_LogResult 0015  
__size_of_eeprom_initialize 001C         __size_of_debugState 004C              __end_of_printf 08AC  
       start_initialization 1594                 ?_keypressed 0001              ?_newestAddress 0001  
         ??_I2C_Master_Init 0021           ??_I2C_Master_Read 0011           ??_I2C_Master_Wait 0010  
         ??_I2C_Master_Stop 0011       __size_of_readSnSensor 0018     eeprom_LogResult@address 0015  
          _get_timeDif$1734 002B            _get_timeDif$1735 002D          get_timeDif@start_s 0029  
                  ??___wmul 0014                    ??_fixLCD 0034      __end_of_executingState 05A0  
          __CFG_LPT1OSC$OFF 000000           ?_eeprom_WriteByte 0010                    ??_printf 0026  
       __end_of_get_timeDif 0BA8          ??_eeprom_WriteByte 0013                 __pbssCOMRAM 0041  
       __end_of_finishState 1610       executingState@timedif 00A0               __pcstackBANK0 0080  
               ?_update_lcd 0001       executingState@start_s 009C                _readSnSensor 17B0  
   __end_of_eeprom_ReadByte 1826                _isdigit$1349 0011           __size_of_get_time 0086  
       executingState@h_one 0086         executingState@h_ten 0084         executingState@m_one 008A  
       executingState@m_ten 0088         executingState@s_one 008E         executingState@s_ten 008C  
          _I2C_Master_Start 1870            _I2C_Master_Write 185E           __size_of_logState 004E  
       _executingState$1736 0090         _executingState$1737 0092            ___lwdiv@dividend 0010  
         __CFG_CCP2MX$PORTC 000000         __size_of_keypressed 0FD2                   __pintcode 0008  
             __pmediumconst FEC4                   _lcdNibble 12AE                    ?___lldiv 0010  
                  ?___lwdiv 0010                    ?___lwmod 0017             ?_executingState 0001  
                  ?_lcdInst 0001                    ?_initLCD 0001                   _mainState 143C  
                  ?_readKey 0010                    ?_isdigit 0001     eeprom_WriteByte@address 0010  
                 _readAlBot 17F8                   _readAlTop 17E0             ??_newestAddress 0012  
      __end_of_servoRotate0 0DA4        __end_of_servoRotate1 168C        __end_of_servoRotate2 1594  
      __end_of_servoRotate4 164E                   _hexpowers FEE0                   _readSnBot 17C8  
          ___lwdiv@quotient 0015                   _readSnTop 1798              __size_of_putch 000C  
                 _snNoLabel 0049                ??_debugState 0034              ___wmul@product 0014  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _LATCbits 000F8B  
                  _LATDbits 000F8C                    _LATEbits 000F8D                   _loopcount 004D  
                  _PIR2bits 000FA1            __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001  
               _get_timeDif 0A5E         __size_of_update_lcd 0138                 _finishState 15D2  
            _servoRotate90n 0E68              _servoRotateArm 1182                   _runResult 0045  
         ___wmul@multiplier 0010               lcdNibble@data 0011                  ?_mainState 0001  
                printf@flag 0030                   _starttime 00AE               lcdNibble@temp 0010  
        __end_of_debugState 143C                  printf@prec 002D                   get_time@i 0017  
                ?_readAlBot 0010                  ?_readAlTop 0010                  ?_readSnBot 0010  
                ?_readSnTop 0010            ?_eeprom_ReadByte 0010         I2C_Master_Read@temp 0012  
    __size_of_servoRotate90 00C4      __size_of_eeprom_GetLog 0060                  _EECON1bits 000FA6  
        keypressed@keypress 000F                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate90n 0F28      __end_of_servoRotateArm 11F4  
          __size_of___lldiv 0082            __size_of___lwdiv 0052            __size_of___lwmod 0042  
          __size_of_lcdInst 000C    executingState@alInSensor 00AA             _I2C_Master_Init 1254  
           _I2C_Master_Read 16EC            __size_of_initLCD 0046             _I2C_Master_Wait 1826  
           _I2C_Master_Stop 1868            __size_of_readKey 0048                ??_keypressed 0001  
          __size_of_isdigit 001E             ___lwdiv@divisor 0012             ___lwdiv@counter 0014  
                  __ptext10 0BA8                    __ptext11 1182                    __ptext20 0A5E  
                  __ptext12 0E68                    __ptext21 107A                    __ptext13 1610  
                  __ptext30 16BC                    __ptext22 185E                    __ptext14 0CE0  
                  __ptext31 0DA4                    __ptext23 1868                    __ptext15 1798  
                  __ptext40 1846                    __ptext32 1554                    __ptext24 1870  
                  __ptext16 17B0                    __ptext41 175E                    __ptext33 177C  
                  __ptext25 16EC                    __ptext17 17C8                    __ptext42 1738  
                  __ptext34 1838                    __ptext26 1826                    __ptext18 17E0  
                  __ptext43 1512                    __ptext35 1810                    __ptext27 13A4  
                  __ptext19 17F8                    __ptext44 1304                    __ptext36 1712  
                  __ptext28 168C                    __ptext45 1852                    __ptext37 13F0  
                  __ptext29 164E                    __ptext46 12AE                    __ptext38 1484  
                  __ptext39 05A0                    _get_time 107A   __size_of_eeprom_LogResult 004C  
      eeprom_GetLog@address 0018           mainState@keypress 0034                    _logState 1356  
             __size_of_main 00A0                 fixLCD@i_597 0040      __size_of_dispenseAlCan 0030  
    __size_of_dispenseSnCan 0030                 ??_lcdNibble 0010             ?_servoRotate90n 0010  
        __end_of_keypressed 0FDA                    int$flags 004F               _servoRotate90 0DA4  
           ?_servoRotateArm 0010               _eeprom_GetLog 11F4                   printf@idx 002A  
                 printf@val 002E       __size_of_servoRotate0 00C4       __size_of_servoRotate1 003E  
     __size_of_servoRotate2 0040       __size_of_servoRotate4 003E                 ??_mainState 0034  
                 putch@data 0012    __end_of_I2C_Master_Start 1878    __end_of_I2C_Master_Write 1868  
                _INTCONbits 000FF2                 ??_readAlBot 0012                    readKey@i 0013  
               ??_readAlTop 0012                ??_update_lcd 0034                 ??_readSnBot 0012  
                  isdigit@c 0012                 ??_readSnTop 0012   __size_of_eeprom_WriteByte 0026  
                  intlevel2 0000            ___lwmod@dividend 0017            ___lldiv@dividend 0010  
          ??_executingState 0034              ?_servoRotate90 0010                _servoRotate0 0CE0  
              _servoRotate1 164E                _servoRotate2 1554                _servoRotate4 1610  
            ?_eeprom_GetLog 0012                    printf@ap 002B          __end_of_update_lcd 0CE0  
   __end_of_I2C_Master_Init 12AE     __end_of_I2C_Master_Read 1712     __end_of_I2C_Master_Wait 1838  
   __end_of_I2C_Master_Stop 1870                 lcdInst@data 0012        eeprom_LogResult@data 0013  
          logState@keypress 0036          __end_of_statictime FEEF            ___lldiv@quotient 0018  
         I2C_Master_Write@d 0011             ___lwmod@divisor 0019             ___lwmod@counter 001B  
             _dispenseAlCan 16BC    executingState@emptyCount 00AC               _dispenseSnCan 168C  
  executingState@snInSensor 00A8  
