

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 21 00:21:00 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           ; Version 1.40
    62                           ; Generated 01/12/2016 GMT
    63                           ; 
    64                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4620 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     
    96                           	psect	mediumconst
    97  00FEE6                     __pmediumconst:
    98                           	opt stack 0
    99  00FEE6  00                 	db	0
   100  00FEE7                     _keys:
   101                           	opt stack 0
   102  00FEE7  31                 	db	49
   103  00FEE8  32                 	db	50
   104  00FEE9  33                 	db	51
   105  00FEEA  41                 	db	65
   106  00FEEB  34                 	db	52
   107  00FEEC  35                 	db	53
   108  00FEED  36                 	db	54
   109  00FEEE  42                 	db	66
   110  00FEEF  37                 	db	55
   111  00FEF0  38                 	db	56
   112  00FEF1  39                 	db	57
   113  00FEF2  43                 	db	67
   114  00FEF3  2A                 	db	42
   115  00FEF4  30                 	db	48
   116  00FEF5  23                 	db	35
   117  00FEF6  44                 	db	68
   118  00FEF7  00                 	db	0
   119  00FEF8                     __end_of_keys:
   120                           	opt stack 0
   121  00FEF8                     _dpowers:
   122                           	opt stack 0
   123  00FEF8  0001               	dw	1
   124  00FEFA  000A               	dw	10
   125  00FEFC  0064               	dw	100
   126  00FEFE  03E8               	dw	1000
   127  00FF00  2710               	dw	10000
   128  00FF02                     __end_of_dpowers:
   129                           	opt stack 0
   130  00FF02                     _hexpowers:
   131                           	opt stack 0
   132  00FF02  0001               	dw	1
   133  00FF04  0010               	dw	16
   134  00FF06  0100               	dw	256
   135  00FF08  1000               	dw	4096
   136  00FF0A                     __end_of_hexpowers:
   137                           	opt stack 0
   138  00FF0A                     _statictime:
   139                           	opt stack 0
   140  00FF0A  00                 	db	0
   141  00FF0B  51                 	db	81
   142  00FF0C  14                 	db	20
   143  00FF0D  03                 	db	3
   144  00FF0E  28                 	db	40
   145  00FF0F  02                 	db	2
   146  00FF10  17                 	db	23
   147  00FF11                     __end_of_statictime:
   148                           	opt stack 0
   149  0000                     _ADCON0	set	4034
   150  0000                     _ADCON1	set	4033
   151  0000                     _CMCON	set	4020
   152  0000                     _EEADR	set	4009
   153  0000                     _EEADRH	set	4010
   154  0000                     _EECON1bits	set	4006
   155  0000                     _EECON2	set	4007
   156  0000                     _EEDATA	set	4008
   157  0000                     _INTCONbits	set	4082
   158  0000                     _LATA	set	3977
   159  0000                     _LATAbits	set	3977
   160  0000                     _LATB	set	3978
   161  0000                     _LATBbits	set	3978
   162  0000                     _LATC	set	3979
   163  0000                     _LATCbits	set	3979
   164  0000                     _LATD	set	3980
   165  0000                     _LATDbits	set	3980
   166  0000                     _LATE	set	3981
   167  0000                     _LATEbits	set	3981
   168  0000                     _OSCCON	set	4051
   169  0000                     _PIR2bits	set	4001
   170  0000                     _PORTAbits	set	3968
   171  0000                     _PORTB	set	3969
   172  0000                     _PORTBbits	set	3969
   173  0000                     _PORTCbits	set	3970
   174  0000                     _SSPADD	set	4040
   175  0000                     _SSPBUF	set	4041
   176  0000                     _SSPCON1	set	4038
   177  0000                     _SSPCON2	set	4037
   178  0000                     _SSPSTAT	set	4039
   179  0000                     _TRISA	set	3986
   180  0000                     _TRISB	set	3987
   181  0000                     _TRISC	set	3988
   182  0000                     _TRISD	set	3989
   183  0000                     _TRISE	set	3990
   184  0000                     _ACKDT	set	32301
   185  0000                     _ACKEN	set	32300
   186  0000                     _INT1IE	set	32643
   187  0000                     _INT1IF	set	32640
   188  0000                     _PEN	set	32298
   189  0000                     _RCEN	set	32299
   190  0000                     _RSEN	set	32297
   191  0000                     _SEN	set	32296
   192  0000                     _TRISC3	set	31907
   193  0000                     _TRISC4	set	31908
   194  00FF11                     STR_4:
   195  00FF11  25                 	db	37
   196  00FF12  30                 	db	48	;'0'
   197  00FF13  33                 	db	51	;'3'
   198  00FF14  64                 	db	100	;'d'
   199  00FF15  20                 	db	32
   200  00FF16  20                 	db	32
   201  00FF17  20                 	db	32
   202  00FF18  20                 	db	32
   203  00FF19  20                 	db	32
   204  00FF1A  20                 	db	32
   205  00FF1B  20                 	db	32
   206  00FF1C  20                 	db	32
   207  00FF1D  20                 	db	32
   208  00FF1E  20                 	db	32
   209  00FF1F  20                 	db	32
   210  00FF20  20                 	db	32
   211  00FF21  20                 	db	32
   212  00FF22  20                 	db	32
   213  00FF23  00                 	db	0
   214  00FF24                     STR_7:
   215  00FF24  61                 	db	97	;'a'
   216  00FF25  4E                 	db	78	;'N'
   217  00FF26  25                 	db	37
   218  00FF27  64                 	db	100	;'d'
   219  00FF28  2F                 	db	47
   220  00FF29  61                 	db	97	;'a'
   221  00FF2A  25                 	db	37
   222  00FF2B  64                 	db	100	;'d'
   223  00FF2C  2F                 	db	47
   224  00FF2D  73                 	db	115	;'s'
   225  00FF2E  4E                 	db	78	;'N'
   226  00FF2F  25                 	db	37
   227  00FF30  64                 	db	100	;'d'
   228  00FF31  2F                 	db	47
   229  00FF32  53                 	db	83	;'S'
   230  00FF33  25                 	db	37
   231  00FF34  64                 	db	100	;'d'
   232  00FF35  00                 	db	0
   233  00FF36                     STR_12:
   234  00FF36  45                 	db	69	;'E'
   235  00FF37  78                 	db	120	;'x'
   236  00FF38  65                 	db	101	;'e'
   237  00FF39  63                 	db	99	;'c'
   238  00FF3A  75                 	db	117	;'u'
   239  00FF3B  74                 	db	116	;'t'
   240  00FF3C  69                 	db	105	;'i'
   241  00FF3D  6E                 	db	110	;'n'
   242  00FF3E  67                 	db	103	;'g'
   243  00FF3F  20                 	db	32
   244  00FF40  20                 	db	32
   245  00FF41  20                 	db	32
   246  00FF42  20                 	db	32
   247  00FF43  25                 	db	37
   248  00FF44  30                 	db	48	;'0'
   249  00FF45  33                 	db	51	;'3'
   250  00FF46  64                 	db	100	;'d'
   251  00FF47  00                 	db	0
   252  00FF48                     STR_17:
   253  00FF48  30                 	db	48	;'0'
   254  00FF49  31                 	db	49	;'1'
   255  00FF4A  32                 	db	50	;'2'
   256  00FF4B  33                 	db	51	;'3'
   257  00FF4C  34                 	db	52	;'4'
   258  00FF4D  35                 	db	53	;'5'
   259  00FF4E  36                 	db	54	;'6'
   260  00FF4F  37                 	db	55	;'7'
   261  00FF50  38                 	db	56	;'8'
   262  00FF51  39                 	db	57	;'9'
   263  00FF52  61                 	db	97	;'a'
   264  00FF53  62                 	db	98	;'b'
   265  00FF54  63                 	db	99	;'c'
   266  00FF55  64                 	db	100	;'d'
   267  00FF56  65                 	db	101	;'e'
   268  00FF57  66                 	db	102	;'f'
   269  00FF58  00                 	db	0
   270  00FF59                     STR_10:
   271  00FF59  30                 	db	48	;'0'
   272  00FF5A  3A                 	db	58	;':'
   273  00FF5B  4D                 	db	77	;'M'
   274  00FF5C  65                 	db	101	;'e'
   275  00FF5D  6E                 	db	110	;'n'
   276  00FF5E  75                 	db	117	;'u'
   277  00FF5F  20                 	db	32
   278  00FF60  20                 	db	32
   279  00FF61  20                 	db	32
   280  00FF62  20                 	db	32
   281  00FF63  20                 	db	32
   282  00FF64  20                 	db	32
   283  00FF65  20                 	db	32
   284  00FF66  20                 	db	32
   285  00FF67  20                 	db	32
   286  00FF68  20                 	db	32
   287  00FF69  00                 	db	0
   288  00FF6A                     STR_8:
   289  00FF6A  46                 	db	70	;'F'
   290  00FF6B  69                 	db	105	;'i'
   291  00FF6C  6E                 	db	110	;'n'
   292  00FF6D  69                 	db	105	;'i'
   293  00FF6E  73                 	db	115	;'s'
   294  00FF6F  68                 	db	104	;'h'
   295  00FF70  65                 	db	101	;'e'
   296  00FF71  64                 	db	100	;'d'
   297  00FF72  20                 	db	32
   298  00FF73  20                 	db	32
   299  00FF74  20                 	db	32
   300  00FF75  20                 	db	32
   301  00FF76  20                 	db	32
   302  00FF77  20                 	db	32
   303  00FF78  20                 	db	32
   304  00FF79  20                 	db	32
   305  00FF7A  00                 	db	0
   306  00FF7B                     STR_9:
   307  00FF7B  54                 	db	84	;'T'
   308  00FF7C  65                 	db	101	;'e'
   309  00FF7D  72                 	db	114	;'r'
   310  00FF7E  6D                 	db	109	;'m'
   311  00FF7F  69                 	db	105	;'i'
   312  00FF80  6E                 	db	110	;'n'
   313  00FF81  61                 	db	97	;'a'
   314  00FF82  74                 	db	116	;'t'
   315  00FF83  65                 	db	101	;'e'
   316  00FF84  64                 	db	100	;'d'
   317  00FF85  20                 	db	32
   318  00FF86  20                 	db	32
   319  00FF87  20                 	db	32
   320  00FF88  20                 	db	32
   321  00FF89  20                 	db	32
   322  00FF8A  20                 	db	32
   323  00FF8B  00                 	db	0
   324  00FF8C                     STR_6:
   325  00FF8C  45                 	db	69	;'E'
   326  00FF8D  78                 	db	120	;'x'
   327  00FF8E  65                 	db	101	;'e'
   328  00FF8F  63                 	db	99	;'c'
   329  00FF90  75                 	db	117	;'u'
   330  00FF91  74                 	db	116	;'t'
   331  00FF92  69                 	db	105	;'i'
   332  00FF93  6E                 	db	110	;'n'
   333  00FF94  67                 	db	103	;'g'
   334  00FF95  2E                 	db	46
   335  00FF96  2E                 	db	46
   336  00FF97  2E                 	db	46
   337  00FF98  20                 	db	32
   338  00FF99  20                 	db	32
   339  00FF9A  20                 	db	32
   340  00FF9B  20                 	db	32
   341  00FF9C  00                 	db	0
   342  00FF9D                     STR_5:
   343  00FF9D  31                 	db	49	;'1'
   344  00FF9E  3A                 	db	58	;':'
   345  00FF9F  50                 	db	80	;'P'
   346  00FFA0  72                 	db	114	;'r'
   347  00FFA1  65                 	db	101	;'e'
   348  00FFA2  76                 	db	118	;'v'
   349  00FFA3  20                 	db	32
   350  00FFA4  30                 	db	48	;'0'
   351  00FFA5  3A                 	db	58	;':'
   352  00FFA6  45                 	db	69	;'E'
   353  00FFA7  78                 	db	120	;'x'
   354  00FFA8  69                 	db	105	;'i'
   355  00FFA9  74                 	db	116	;'t'
   356  00FFAA  20                 	db	32
   357  00FFAB  20                 	db	32
   358  00FFAC  20                 	db	32
   359  00FFAD  00                 	db	0
   360  00FFAE                     STR_3:
   361  00FFAE  31                 	db	49	;'1'
   362  00FFAF  3A                 	db	58	;':'
   363  00FFB0  53                 	db	83	;'S'
   364  00FFB1  74                 	db	116	;'t'
   365  00FFB2  61                 	db	97	;'a'
   366  00FFB3  72                 	db	114	;'r'
   367  00FFB4  74                 	db	116	;'t'
   368  00FFB5  20                 	db	32
   369  00FFB6  32                 	db	50	;'2'
   370  00FFB7  3A                 	db	58	;':'
   371  00FFB8  4C                 	db	76	;'L'
   372  00FFB9  6F                 	db	111	;'o'
   373  00FFBA  67                 	db	103	;'g'
   374  00FFBB  73                 	db	115	;'s'
   375  00FFBC  20                 	db	32
   376  00FFBD  20                 	db	32
   377  00FFBE  00                 	db	0
   378  00FFBF                     STR_1:
   379  00FFBF  25                 	db	37
   380  00FFC0  30                 	db	48	;'0'
   381  00FFC1  32                 	db	50	;'2'
   382  00FFC2  78                 	db	120	;'x'
   383  00FFC3  2F                 	db	47
   384  00FFC4  25                 	db	37
   385  00FFC5  30                 	db	48	;'0'
   386  00FFC6  31                 	db	49	;'1'
   387  00FFC7  78                 	db	120	;'x'
   388  00FFC8  2F                 	db	47
   389  00FFC9  25                 	db	37
   390  00FFCA  30                 	db	48	;'0'
   391  00FFCB  32                 	db	50	;'2'
   392  00FFCC  78                 	db	120	;'x'
   393  00FFCD  20                 	db	32
   394  00FFCE  00                 	db	0
   395  00FFCF                     STR_14:
   396  00FFCF  25                 	db	37
   397  00FFD0  30                 	db	48	;'0'
   398  00FFD1  32                 	db	50	;'2'
   399  00FFD2  78                 	db	120	;'x'
   400  00FFD3  25                 	db	37
   401  00FFD4  30                 	db	48	;'0'
   402  00FFD5  32                 	db	50	;'2'
   403  00FFD6  78                 	db	120	;'x'
   404  00FFD7  2F                 	db	47
   405  00FFD8  25                 	db	37
   406  00FFD9  30                 	db	48	;'0'
   407  00FFDA  32                 	db	50	;'2'
   408  00FFDB  78                 	db	120	;'x'
   409  00FFDC  20                 	db	32
   410  00FFDD  00                 	db	0
   411  00FFDE                     STR_2:
   412  00FFDE  25                 	db	37
   413  00FFDF  30                 	db	48	;'0'
   414  00FFE0  32                 	db	50	;'2'
   415  00FFE1  78                 	db	120	;'x'
   416  00FFE2  3A                 	db	58	;':'
   417  00FFE3  25                 	db	37
   418  00FFE4  30                 	db	48	;'0'
   419  00FFE5  32                 	db	50	;'2'
   420  00FFE6  78                 	db	120	;'x'
   421  00FFE7  3A                 	db	58	;':'
   422  00FFE8  25                 	db	37
   423  00FFE9  30                 	db	48	;'0'
   424  00FFEA  32                 	db	50	;'2'
   425  00FFEB  78                 	db	120	;'x'
   426  00FFEC  00                 	db	0
   427  00FFED                     STR_13:
   428  00FFED  67                 	db	103	;'g'
   429  00FFEE  6F                 	db	111	;'o'
   430  00FFEF  69                 	db	105	;'i'
   431  00FFF0  6E                 	db	110	;'n'
   432  00FFF1  67                 	db	103	;'g'
   433  00FFF2  20                 	db	32
   434  00FFF3  64                 	db	100	;'d'
   435  00FFF4  65                 	db	101	;'e'
   436  00FFF5  62                 	db	98	;'b'
   437  00FFF6  75                 	db	117	;'u'
   438  00FFF7  67                 	db	103	;'g'
   439  00FFF8  00                 	db	0
   440  00FFF9                     STR_11:
   441  00FFF9  65                 	db	101	;'e'
   442  00FFFA  72                 	db	114	;'r'
   443  00FFFB  72                 	db	114	;'r'
   444  00FFFC  6F                 	db	111	;'o'
   445  00FFFD  72                 	db	114	;'r'
   446  00FFFE  00                 	db	0
   447  0000                     
   448                           ; #config settings
   449  00FFFF  00                 	db	0	; dummy byte at the end
   450  0000                     
   451                           	psect	cinit
   452  0015A2                     __pcinit:
   453                           	opt stack 0
   454  0015A2                     start_initialization:
   455                           	opt stack 0
   456  0015A2                     __initialization:
   457                           	opt stack 0
   458                           
   459                           ; Clear objects allocated to BANK0 (14 bytes)
   460  0015A2  EE00  F0AE         	lfsr	0,__pbssBANK0
   461  0015A6  0E0E               	movlw	14
   462  0015A8                     clear_0:
   463  0015A8  6AEE               	clrf	postinc0,c
   464  0015AA  06E8               	decf	wreg,f,c
   465  0015AC  E1FD               	bnz	clear_0
   466                           
   467                           ; Clear objects allocated to COMRAM (26 bytes)
   468  0015AE  EE00  F041         	lfsr	0,__pbssCOMRAM
   469  0015B2  0E1A               	movlw	26
   470  0015B4                     clear_1:
   471  0015B4  6AEE               	clrf	postinc0,c
   472  0015B6  06E8               	decf	wreg,f,c
   473  0015B8  E1FD               	bnz	clear_1
   474  0015BA                     end_of_initialization:
   475                           	opt stack 0
   476  0015BA                     __end_of__initialization:
   477                           	opt stack 0
   478  0015BA  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   479  0015BC  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   480  0015BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   481  0015C0  6EF8               	movwf	tblptru,c
   482  0015C2  0100               	movlb	0
   483  0015C4  EFCD  F007         	goto	_main	;jump to C main() function
   484                           tblptru	equ	0xFF8
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           
   488                           	psect	bssCOMRAM
   489  000041                     __pbssCOMRAM:
   490                           	opt stack 0
   491  000041                     _alNoTab:
   492                           	opt stack 0
   493  000041                     	ds	2
   494  000043                     _alTab:
   495                           	opt stack 0
   496  000043                     	ds	2
   497  000045                     _runResult:
   498                           	opt stack 0
   499  000045                     	ds	2
   500  000047                     _snLabel:
   501                           	opt stack 0
   502  000047                     	ds	2
   503  000049                     _snNoLabel:
   504                           	opt stack 0
   505  000049                     	ds	2
   506  00004B                     _state:
   507                           	opt stack 0
   508  00004B                     	ds	1
   509  00004C                     _time:
   510                           	opt stack 0
   511  00004C                     	ds	14
   512  00005A                     _logdata:
   513                           	opt stack 0
   514  00005A                     	ds	1
   515                           tblptru	equ	0xFF8
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           
   519                           	psect	bssBANK0
   520  0000AE                     __pbssBANK0:
   521                           	opt stack 0
   522  0000AE                     _starttime:
   523                           	opt stack 0
   524  0000AE                     	ds	14
   525                           tblptru	equ	0xFF8
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           
   529                           	psect	cstackBANK0
   530  000080                     __pcstackBANK0:
   531                           	opt stack 0
   532  000080                     executingState@runCanSn:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x0
   536  000080                     	ds	2
   537  000082                     executingState@runCanAl:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x2
   541  000082                     	ds	2
   542  000084                     executingState@h_ten:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x4
   546  000084                     	ds	2
   547  000086                     executingState@h_one:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x6
   551  000086                     	ds	2
   552  000088                     executingState@m_ten:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x8
   556  000088                     	ds	2
   557  00008A                     executingState@m_one:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0xA
   561  00008A                     	ds	2
   562  00008C                     executingState@s_ten:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0xC
   566  00008C                     	ds	2
   567  00008E                     executingState@s_one:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0xE
   571  00008E                     	ds	2
   572  000090                     _executingState$1732:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x10
   576  000090                     	ds	2
   577  000092                     _executingState$1733:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x12
   581  000092                     	ds	2
   582  000094                     executingState@res:
   583                           	opt stack 0
   584                           
   585                           ; 8 bytes @ 0x14
   586  000094                     	ds	8
   587  00009C                     executingState@start_s:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x1C
   591  00009C                     	ds	2
   592  00009E                     executingState@hasTab:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x1E
   596  00009E                     	ds	2
   597  0000A0                     executingState@timedif:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x20
   601  0000A0                     	ds	2
   602  0000A2                     executingState@hasLabel:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x22
   606  0000A2                     	ds	2
   607  0000A4                     executingState@snLoaded:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x24
   611  0000A4                     	ds	2
   612  0000A6                     executingState@alLoaded:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x26
   616  0000A6                     	ds	2
   617  0000A8                     executingState@snInSensor:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x28
   621  0000A8                     	ds	2
   622  0000AA                     executingState@alInSensor:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x2A
   626  0000AA                     	ds	2
   627  0000AC                     executingState@emptyCount:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x2C
   631  0000AC                     	ds	2
   632                           tblptru	equ	0xFF8
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           
   636                           	psect	cstackCOMRAM
   637  000001                     __pcstackCOMRAM:
   638                           	opt stack 0
   639  000001                     ??_keypressed:
   640  000001                     
   641                           ; 1 bytes @ 0x0
   642  000001                     	ds	14
   643  00000F                     keypressed@keypress:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0xE
   647  00000F                     	ds	1
   648  000010                     ??_isdigit:
   649  000010                     ??_I2C_Master_Wait:
   650  000010                     ?_readSnTop:
   651                           	opt stack 0
   652  000010                     ?_readAlTop:
   653                           	opt stack 0
   654  000010                     ?_readSnBot:
   655                           	opt stack 0
   656  000010                     ?_readAlBot:
   657                           	opt stack 0
   658  000010                     ?_readSnSensor:
   659                           	opt stack 0
   660  000010                     ?_servoRotateArm:
   661                           	opt stack 0
   662  000010                     ?_readKey:
   663                           	opt stack 0
   664  000010                     ?___wmul:
   665                           	opt stack 0
   666  000010                     ?___lwdiv:
   667                           	opt stack 0
   668  000010                     ?___lldiv:
   669                           	opt stack 0
   670  000010                     lcdNibble@temp:
   671                           	opt stack 0
   672  000010                     eeprom_ReadByte@address:
   673                           	opt stack 0
   674  000010                     eeprom_WriteByte@address:
   675                           	opt stack 0
   676  000010                     servoRotate0@servo:
   677                           	opt stack 0
   678  000010                     servoRotate90@servo:
   679                           	opt stack 0
   680  000010                     servoRotate90n@servo:
   681                           	opt stack 0
   682  000010                     ___wmul@multiplier:
   683                           	opt stack 0
   684  000010                     ___lwdiv@dividend:
   685                           	opt stack 0
   686  000010                     ___lldiv@dividend:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0xF
   690  000010                     	ds	1
   691  000011                     I2C_Master_Read@a:
   692                           	opt stack 0
   693  000011                     lcdNibble@data:
   694                           	opt stack 0
   695  000011                     _isdigit$1336:
   696                           	opt stack 0
   697  000011                     I2C_Master_Write@d:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x10
   701  000011                     	ds	1
   702  000012                     ??_servoRotate0:
   703  000012                     ??_servoRotate90n:
   704  000012                     ??_servoRotate90:
   705  000012                     ??_servoRotateArm:
   706  000012                     I2C_Master_Read@temp:
   707                           	opt stack 0
   708  000012                     lcdInst@data:
   709                           	opt stack 0
   710  000012                     putch@data:
   711                           	opt stack 0
   712  000012                     readKey@keypress:
   713                           	opt stack 0
   714  000012                     eeprom_WriteByte@data:
   715                           	opt stack 0
   716  000012                     isdigit@c:
   717                           	opt stack 0
   718  000012                     eeprom_GetLog@back:
   719                           	opt stack 0
   720  000012                     ___wmul@multiplicand:
   721                           	opt stack 0
   722  000012                     ___lwdiv@divisor:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x11
   726  000012                     	ds	1
   727  000013                     ??_initLCD:
   728  000013                     readKey@i:
   729                           	opt stack 0
   730  000013                     eeprom_LogResult@data:
   731                           	opt stack 0
   732  000013                     get_time@time:
   733                           	opt stack 0
   734  000013                     servoRotateArm@res:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x12
   738  000013                     	ds	1
   739  000014                     ___lwdiv@counter:
   740                           	opt stack 0
   741  000014                     eeprom_GetLog@res:
   742                           	opt stack 0
   743  000014                     servoRotate0@i:
   744                           	opt stack 0
   745  000014                     servoRotate90@i:
   746                           	opt stack 0
   747  000014                     servoRotate90n@i:
   748                           	opt stack 0
   749  000014                     ___wmul@product:
   750                           	opt stack 0
   751  000014                     ___lldiv@divisor:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0x13
   755  000014                     	ds	1
   756  000015                     ??_get_time:
   757  000015                     eeprom_LogResult@address:
   758                           	opt stack 0
   759  000015                     servoRotateArm@i_1032:
   760                           	opt stack 0
   761  000015                     ___lwdiv@quotient:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x14
   765  000015                     	ds	1
   766  000016                     ??_dispenseSnCan:
   767  000016                     ??_dispenseAlCan:
   768  000016                     ??_eeprom_GetLog:
   769  000016                     eeprom_LogResult@i:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x15
   773  000016                     	ds	1
   774  000017                     ?___lwmod:
   775                           	opt stack 0
   776  000017                     get_time@i:
   777                           	opt stack 0
   778  000017                     ___lwmod@dividend:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x16
   782  000017                     	ds	1
   783  000018                     ?_get_timeDif:
   784                           	opt stack 0
   785  000018                     eeprom_GetLog@address:
   786                           	opt stack 0
   787  000018                     get_timeDif@start:
   788                           	opt stack 0
   789  000018                     ___lldiv@quotient:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x17
   793  000018                     	ds	1
   794  000019                     eeprom_GetLog@i:
   795                           	opt stack 0
   796  000019                     ___lwmod@divisor:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x18
   800  000019                     	ds	1
   801  00001A                     ??_get_timeDif:
   802                           
   803                           ; 1 bytes @ 0x19
   804  00001A                     	ds	1
   805  00001B                     ___lwmod@counter:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x1A
   809  00001B                     	ds	1
   810  00001C                     ?_printf:
   811                           	opt stack 0
   812  00001C                     ___lldiv@counter:
   813                           	opt stack 0
   814  00001C                     printf@f:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x1B
   818  00001C                     	ds	1
   819  00001D                     get_timeDif@h_ten:
   820                           	opt stack 0
   821  00001D                     I2C_Master_Init@c:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x1C
   825  00001D                     	ds	2
   826  00001F                     get_timeDif@h_one:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x1E
   830  00001F                     	ds	2
   831  000021                     ??_I2C_Master_Init:
   832  000021                     get_timeDif@m_ten:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x20
   836  000021                     	ds	2
   837  000023                     get_timeDif@m_one:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x22
   841  000023                     	ds	2
   842  000025                     get_timeDif@s_ten:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x24
   846  000025                     	ds	1
   847  000026                     ??_printf:
   848                           
   849                           ; 1 bytes @ 0x25
   850  000026                     	ds	1
   851  000027                     get_timeDif@s_one:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x26
   855  000027                     	ds	2
   856  000029                     get_timeDif@start_s:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x28
   860  000029                     	ds	1
   861  00002A                     printf@idx:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x29
   865  00002A                     	ds	1
   866  00002B                     printf@ap:
   867                           	opt stack 0
   868  00002B                     _get_timeDif$1730:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x2A
   872  00002B                     	ds	2
   873  00002D                     printf@prec:
   874                           	opt stack 0
   875  00002D                     _get_timeDif$1731:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x2C
   879  00002D                     	ds	1
   880  00002E                     printf@val:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x2D
   884  00002E                     	ds	2
   885  000030                     printf@flag:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x2F
   889  000030                     	ds	1
   890  000031                     printf@width:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x30
   894  000031                     	ds	2
   895  000033                     printf@c:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x32
   899  000033                     	ds	1
   900  000034                     ??_executingState:
   901  000034                     ??_finishState:
   902  000034                     ??_debugState:
   903  000034                     ??_fixLCD:
   904  000034                     mainState@keypress:
   905                           	opt stack 0
   906  000034                     logState@log:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x33
   910  000034                     	ds	1
   911  000035                     fixLCD@i:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x34
   915  000035                     	ds	1
   916  000036                     finishState@keypress:
   917                           	opt stack 0
   918  000036                     logState@keypress:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x35
   922  000036                     	ds	1
   923  000037                     fixLCD@time:
   924                           	opt stack 0
   925                           
   926                           ; 7 bytes @ 0x36
   927  000037                     	ds	7
   928  00003E                     fixLCD@j:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x3D
   932  00003E                     	ds	2
   933  000040                     fixLCD@i_579:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x3F
   937  000040                     	ds	1
   938  000041                     tblptru	equ	0xFF8
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           
   942                           ; 1 bytes @ 0x40
   943 ;;
   944 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   945 ;;
   946 ;; *************** function _main *****************
   947 ;; Defined at:
   948 ;;		line 412 in file "main.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;		None
   951 ;; Auto vars:     Size  Location     Type
   952 ;;		None
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;Total ram usage:        0 bytes
   967 ;; Hardware stack levels required when called:    6
   968 ;; This function calls:
   969 ;;		_I2C_Master_Init
   970 ;;		_debugState
   971 ;;		_eeprom_initialize
   972 ;;		_executingState
   973 ;;		_finishState
   974 ;;		_fixLCD
   975 ;;		_initLCD
   976 ;;		_logState
   977 ;;		_mainState
   978 ;; This function is called by:
   979 ;;		Startup code after reset
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text0
   984  000F9A                     __ptext0:
   985                           	opt stack 0
   986  000F9A                     _main:
   987                           	opt stack 25
   988                           
   989                           ;main.c: 415: fixLCD();
   990                           
   991                           ;incstack = 0
   992  000F9A  EC36  F004         	call	_fixLCD	;wreg free
   993                           
   994                           ;main.c: 417: OSCCON = 0xF0;
   995  000F9E  0EF0               	movlw	240
   996  000FA0  6ED3               	movwf	4051,c	;volatile
   997                           
   998                           ;main.c: 423: TRISA = 0b00001111;
   999  000FA2  0E0F               	movlw	15
  1000  000FA4  6E92               	movwf	3986,c	;volatile
  1001                           
  1002                           ;main.c: 424: TRISB = 0b11110010;
  1003  000FA6  0EF2               	movlw	242
  1004  000FA8  6E93               	movwf	3987,c	;volatile
  1005                           
  1006                           ;main.c: 425: TRISC = 0b00011011;
  1007  000FAA  0E1B               	movlw	27
  1008  000FAC  6E94               	movwf	3988,c	;volatile
  1009                           
  1010                           ;main.c: 426: TRISD = 0x00;
  1011  000FAE  0E00               	movlw	0
  1012  000FB0  6E95               	movwf	3989,c	;volatile
  1013                           
  1014                           ;main.c: 427: TRISE = 0x00;
  1015  000FB2  0E00               	movlw	0
  1016  000FB4  6E96               	movwf	3990,c	;volatile
  1017                           
  1018                           ;main.c: 429: LATA = 0x00;
  1019  000FB6  0E00               	movlw	0
  1020  000FB8  6E89               	movwf	3977,c	;volatile
  1021                           
  1022                           ;main.c: 430: LATB = 0x00;
  1023  000FBA  0E00               	movlw	0
  1024  000FBC  6E8A               	movwf	3978,c	;volatile
  1025                           
  1026                           ;main.c: 431: LATC = 0x00;
  1027  000FBE  0E00               	movlw	0
  1028  000FC0  6E8B               	movwf	3979,c	;volatile
  1029                           
  1030                           ;main.c: 432: LATD = 0x00;
  1031  000FC2  0E00               	movlw	0
  1032  000FC4  6E8C               	movwf	3980,c	;volatile
  1033                           
  1034                           ;main.c: 433: LATE = 0x00;
  1035  000FC6  0E00               	movlw	0
  1036  000FC8  6E8D               	movwf	3981,c	;volatile
  1037                           
  1038                           ;main.c: 435: ADCON0 = 0x00;
  1039  000FCA  0E00               	movlw	0
  1040  000FCC  6EC2               	movwf	4034,c	;volatile
  1041                           
  1042                           ;main.c: 436: ADCON1 = 0x0F;
  1043  000FCE  0E0F               	movlw	15
  1044  000FD0  6EC1               	movwf	4033,c	;volatile
  1045                           
  1046                           ;main.c: 437: CMCON = 0x07;
  1047  000FD2  0E07               	movlw	7
  1048  000FD4  6EB4               	movwf	4020,c	;volatile
  1049                           
  1050                           ;main.c: 440: initLCD();
  1051  000FD6  EC40  F00A         	call	_initLCD	;wreg free
  1052                           
  1053                           ;main.c: 441: eeprom_initialize();
  1054  000FDA  EC2C  F00B         	call	_eeprom_initialize	;wreg free
  1055                           
  1056                           ;main.c: 442: I2C_Master_Init(10000);
  1057  000FDE  0E10               	movlw	16
  1058  000FE0  6E1D               	movwf	I2C_Master_Init@c,c
  1059  000FE2  0E27               	movlw	39
  1060  000FE4  6E1E               	movwf	I2C_Master_Init@c+1,c
  1061  000FE6  0E00               	movlw	0
  1062  000FE8  6E1F               	movwf	I2C_Master_Init@c+2,c
  1063  000FEA  0E00               	movlw	0
  1064  000FEC  6E20               	movwf	I2C_Master_Init@c+3,c
  1065  000FEE  EC06  F009         	call	_I2C_Master_Init	;wreg free
  1066                           
  1067                           ;main.c: 444: INT1IE = 1;
  1068  000FF2  86F0               	bsf	intcon3,3,c	;volatile
  1069                           
  1070                           ;main.c: 445: (INTCONbits.GIE = 0);
  1071  000FF4  9EF2               	bcf	intcon,7,c	;volatile
  1072                           
  1073                           ;main.c: 447: state = MAIN;
  1074  000FF6  0E00               	movlw	0
  1075  000FF8  6E4B               	movwf	_state,c
  1076                           
  1077                           ;main.c: 454: {
  1078                           ;main.c: 455: switch (state)
  1079                           
  1080                           ;main.c: 453: while (1)
  1081  000FFA  D00E               	goto	l4476
  1082  000FFC                     l4464:
  1083                           
  1084                           ;main.c: 458: mainState();
  1085  000FFC  ECD4  F009         	call	_mainState	;wreg free
  1086                           
  1087                           ;main.c: 459: break;
  1088  001000  D00B               	goto	l4476
  1089  001002                     l4466:
  1090                           
  1091                           ;main.c: 461: executingState();
  1092  001002  EC09  F000         	call	_executingState	;wreg free
  1093                           
  1094                           ;main.c: 462: break;
  1095  001006  D008               	goto	l4476
  1096  001008                     l4468:
  1097                           
  1098                           ;main.c: 464: finishState();
  1099  001008  EC84  F00A         	call	_finishState	;wreg free
  1100                           
  1101                           ;main.c: 465: break;
  1102  00100C  D005               	goto	l4476
  1103  00100E                     l4470:
  1104                           
  1105                           ;main.c: 467: logState();
  1106  00100E  EC87  F009         	call	_logState	;wreg free
  1107                           
  1108                           ;main.c: 468: break;
  1109  001012  D002               	goto	l4476
  1110  001014                     l4472:
  1111                           
  1112                           ;main.c: 470: debugState();
  1113  001014  EC1C  F00A         	call	_debugState	;wreg free
  1114  001018                     l4476:
  1115  001018  504B               	movf	_state,w,c
  1116                           
  1117                           ; Switch size 1, requested type "space"
  1118                           ; Number of cases is 5, Range of values is 0 to 5
  1119                           ; switch strategies available:
  1120                           ; Name         Instructions Cycles
  1121                           ; simple_byte           16     9 (average)
  1122                           ;	Chosen strategy is simple_byte
  1123  00101A  0A00               	xorlw	0	; case 0
  1124  00101C  B4D8               	btfsc	status,2,c
  1125  00101E  D7EE               	goto	l4464
  1126  001020  0A01               	xorlw	1	; case 1
  1127  001022  B4D8               	btfsc	status,2,c
  1128  001024  D7EE               	goto	l4466
  1129  001026  0A03               	xorlw	3	; case 2
  1130  001028  B4D8               	btfsc	status,2,c
  1131  00102A  D7EE               	goto	l4468
  1132  00102C  0A01               	xorlw	1	; case 3
  1133  00102E  B4D8               	btfsc	status,2,c
  1134  001030  D7EE               	goto	l4470
  1135  001032  0A06               	xorlw	6	; case 5
  1136  001034  B4D8               	btfsc	status,2,c
  1137  001036  D7EE               	goto	l4472
  1138  001038  D7EF               	goto	l4476
  1139  00103A                     __end_of_main:
  1140                           	opt stack 0
  1141                           tblptru	equ	0xFF8
  1142                           intcon	equ	0xFF2
  1143                           intcon3	equ	0xFF0
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _mainState *****************
  1149 ;; Defined at:
  1150 ;;		line 121 in file "main.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  keypress        2   51[COMRAM] int 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;Total ram usage:        2 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    5
  1171 ;; This function calls:
  1172 ;;		_get_time
  1173 ;;		_readKey
  1174 ;;		_update_lcd
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text1
  1181  0013A8                     __ptext1:
  1182                           	opt stack 0
  1183  0013A8                     _mainState:
  1184                           	opt stack 25
  1185                           
  1186                           ;main.c: 123: LATBbits.LATB0 = 1;
  1187                           
  1188                           ;incstack = 0
  1189  0013A8  808A               	bsf	3978,0,c	;volatile
  1190                           
  1191                           ;main.c: 124: LATCbits.LATC6 = 0;
  1192  0013AA  9C8B               	bcf	3979,6,c	;volatile
  1193  0013AC                     l4084:
  1194                           
  1195                           ;main.c: 126: {
  1196                           ;main.c: 128: get_time(time);
  1197  0013AC  0E4C               	movlw	low _time
  1198  0013AE  6E13               	movwf	get_time@time,c
  1199  0013B0  0E00               	movlw	high _time
  1200  0013B2  6E14               	movwf	get_time@time+1,c
  1201  0013B4  EC1D  F008         	call	_get_time	;wreg free
  1202                           
  1203                           ;main.c: 129: update_lcd();
  1204  0013B8  ECB1  F005         	call	_update_lcd	;wreg free
  1205                           
  1206                           ;main.c: 131: int keypress = readKey();
  1207  0013BC  ECF8  F009         	call	_readKey	;wreg free
  1208  0013C0  C010  F034         	movff	?_readKey,mainState@keypress
  1209  0013C4  C011  F035         	movff	?_readKey+1,mainState@keypress+1
  1210                           
  1211                           ;main.c: 132: if(keypress == 0b0000){
  1212  0013C8  5034               	movf	mainState@keypress,w,c
  1213  0013CA  1035               	iorwf	mainState@keypress+1,w,c
  1214  0013CC  A4D8               	btfss	status,2,c
  1215  0013CE  D003               	goto	l4098
  1216                           
  1217                           ;main.c: 137: state = EXECUTING;
  1218  0013D0  0E01               	movlw	1
  1219  0013D2                     L1:
  1220  0013D2  6E4B               	movwf	_state,c
  1221                           
  1222                           ;main.c: 138: return;
  1223  0013D4  0012               	return	
  1224  0013D6                     l4098:
  1225  0013D6  0434               	decf	mainState@keypress,w,c
  1226  0013D8  1035               	iorwf	mainState@keypress+1,w,c
  1227  0013DA  A4D8               	btfss	status,2,c
  1228  0013DC  D002               	goto	l4106
  1229                           
  1230                           ;main.c: 141: state = LOG;
  1231  0013DE  0E03               	movlw	3
  1232  0013E0  D7F8               	goto	L1
  1233  0013E2                     l4106:
  1234  0013E2  0E03               	movlw	3
  1235  0013E4  1834               	xorwf	mainState@keypress,w,c
  1236  0013E6  1035               	iorwf	mainState@keypress+1,w,c
  1237  0013E8  A4D8               	btfss	status,2,c
  1238  0013EA  D7E0               	goto	l4084
  1239                           
  1240                           ;main.c: 144: state = DEBUG;
  1241  0013EC  0E05               	movlw	5
  1242  0013EE  D7F1               	goto	L1
  1243  0013F0                     __end_of_mainState:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           intcon	equ	0xFF2
  1247                           intcon3	equ	0xFF0
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _logState *****************
  1253 ;; Defined at:
  1254 ;;		line 312 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  keypress        2   53[COMRAM] int 
  1259 ;;  log             2   51[COMRAM] int 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;Total ram usage:        4 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    5
  1276 ;; This function calls:
  1277 ;;		_eeprom_GetLog
  1278 ;;		_readKey
  1279 ;;		_update_lcd
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text2
  1286  00130E                     __ptext2:
  1287                           	opt stack 0
  1288  00130E                     _logState:
  1289                           	opt stack 25
  1290                           
  1291                           ;main.c: 314: update_lcd();
  1292                           
  1293                           ;incstack = 0
  1294  00130E  ECB1  F005         	call	_update_lcd	;wreg free
  1295                           
  1296                           ;main.c: 315: int log = 0;
  1297  001312  0E00               	movlw	0
  1298  001314  6E35               	movwf	logState@log+1,c
  1299  001316  0E00               	movlw	0
  1300  001318  6E34               	movwf	logState@log,c
  1301  00131A                     l4318:
  1302                           
  1303                           ;main.c: 317: int keypress = readKey();
  1304  00131A  ECF8  F009         	call	_readKey	;wreg free
  1305  00131E  C010  F036         	movff	?_readKey,logState@keypress
  1306  001322  C011  F037         	movff	?_readKey+1,logState@keypress+1
  1307                           
  1308                           ;main.c: 318: if(keypress == 0b0001){
  1309  001326  0436               	decf	logState@keypress,w,c
  1310  001328  1037               	iorwf	logState@keypress+1,w,c
  1311  00132A  A4D8               	btfss	status,2,c
  1312  00132C  D00F               	goto	l4332
  1313                           
  1314                           ;main.c: 319: log++;
  1315  00132E  4A34               	infsnz	logState@log,f,c
  1316  001330  2A35               	incf	logState@log+1,f,c
  1317                           
  1318                           ;main.c: 320: eeprom_GetLog(log, &logdata);
  1319  001332  C034  F012         	movff	logState@log,eeprom_GetLog@back
  1320  001336  C035  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1321  00133A  0E5A               	movlw	low _logdata
  1322  00133C  6E14               	movwf	eeprom_GetLog@res,c
  1323  00133E  0E00               	movlw	high _logdata
  1324  001340  6E15               	movwf	eeprom_GetLog@res+1,c
  1325  001342  ECD6  F008         	call	_eeprom_GetLog	;wreg free
  1326                           
  1327                           ;main.c: 321: update_lcd();
  1328  001346  ECB1  F005         	call	_update_lcd	;wreg free
  1329                           
  1330                           ;main.c: 322: return;
  1331  00134A  0012               	return	
  1332  00134C                     l4332:
  1333  00134C  0E0D               	movlw	13
  1334  00134E  1836               	xorwf	logState@keypress,w,c
  1335  001350  1037               	iorwf	logState@keypress+1,w,c
  1336  001352  A4D8               	btfss	status,2,c
  1337  001354  D7E2               	goto	l4318
  1338                           
  1339                           ;main.c: 324: state = MAIN;
  1340  001356  0E00               	movlw	0
  1341  001358  6E4B               	movwf	_state,c
  1342                           
  1343                           ;main.c: 325: return;
  1344  00135A  0012               	return	
  1345  00135C                     __end_of_logState:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           intcon	equ	0xFF2
  1349                           intcon3	equ	0xFF0
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _eeprom_GetLog *****************
  1355 ;; Defined at:
  1356 ;;		line 90 in file "eeprom.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  back            2   17[COMRAM] int 
  1359 ;;  res             2   19[COMRAM] PTR int 
  1360 ;;		 -> logdata(1), 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  i               2   24[COMRAM] int 
  1363 ;;  address         1   23[COMRAM] unsigned char 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;Total ram usage:        9 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    3
  1380 ;; This function calls:
  1381 ;;		_eeprom_ReadByte
  1382 ;;		_newestAddress
  1383 ;; This function is called by:
  1384 ;;		_logState
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text3
  1389  0011AC                     __ptext3:
  1390                           	opt stack 0
  1391  0011AC                     _eeprom_GetLog:
  1392                           	opt stack 26
  1393                           
  1394                           ;eeprom.c: 91: uint8_t address = newestAddress();
  1395                           
  1396                           ;incstack = 0
  1397  0011AC  EC8A  F00B         	call	_newestAddress	;wreg free
  1398  0011B0  6E18               	movwf	eeprom_GetLog@address,c
  1399                           
  1400                           ;eeprom.c: 92: address = address - back*5;
  1401  0011B2  5012               	movf	eeprom_GetLog@back,w,c
  1402  0011B4  0D05               	mullw	5
  1403  0011B6  50F3               	movf	prodl,w,c
  1404  0011B8  0800               	sublw	0
  1405  0011BA  2418               	addwf	eeprom_GetLog@address,w,c
  1406  0011BC  6E18               	movwf	eeprom_GetLog@address,c
  1407                           
  1408                           ;eeprom.c: 93: for(int i = 0; i < 5; i++){
  1409  0011BE  0E00               	movlw	0
  1410  0011C0  6E1A               	movwf	eeprom_GetLog@i+1,c
  1411  0011C2  0E00               	movlw	0
  1412  0011C4  6E19               	movwf	eeprom_GetLog@i,c
  1413  0011C6                     l4072:
  1414  0011C6  BE1A               	btfsc	eeprom_GetLog@i+1,7,c
  1415  0011C8  D006               	goto	l4076
  1416  0011CA  501A               	movf	eeprom_GetLog@i+1,w,c
  1417  0011CC  E11E               	bnz	l350
  1418  0011CE  0E05               	movlw	5
  1419  0011D0  5C19               	subwf	eeprom_GetLog@i,w,c
  1420  0011D2  B0D8               	btfsc	status,0,c
  1421  0011D4  0012               	return	
  1422  0011D6                     l4076:
  1423                           
  1424                           ;eeprom.c: 94: res[i] = eeprom_ReadByte(address + i);
  1425  0011D6  5018               	movf	eeprom_GetLog@address,w,c
  1426  0011D8  2419               	addwf	eeprom_GetLog@i,w,c
  1427  0011DA  6E10               	movwf	eeprom_ReadByte@address,c
  1428  0011DC  0E00               	movlw	0
  1429  0011DE  201A               	addwfc	eeprom_GetLog@i+1,w,c
  1430  0011E0  6E11               	movwf	eeprom_ReadByte@address+1,c
  1431  0011E2  EC76  F00B         	call	_eeprom_ReadByte	;wreg free
  1432  0011E6  6E16               	movwf	??_eeprom_GetLog& (0+255),c
  1433  0011E8  6A17               	clrf	(??_eeprom_GetLog+1)& (0+255),c
  1434  0011EA  90D8               	bcf	status,0,c
  1435  0011EC  3419               	rlcf	eeprom_GetLog@i,w,c
  1436  0011EE  6ED9               	movwf	fsr2l,c
  1437  0011F0  341A               	rlcf	eeprom_GetLog@i+1,w,c
  1438  0011F2  6EDA               	movwf	fsr2h,c
  1439  0011F4  5014               	movf	eeprom_GetLog@res,w,c
  1440  0011F6  26D9               	addwf	fsr2l,f,c
  1441  0011F8  5015               	movf	eeprom_GetLog@res+1,w,c
  1442  0011FA  22DA               	addwfc	fsr2h,f,c
  1443  0011FC  C016  FFDE         	movff	??_eeprom_GetLog,postinc2
  1444  001200  C017  FFDD         	movff	??_eeprom_GetLog+1,postdec2
  1445  001204  4A19               	infsnz	eeprom_GetLog@i,f,c
  1446  001206  2A1A               	incf	eeprom_GetLog@i+1,f,c
  1447  001208  D7DE               	goto	l4072
  1448  00120A                     l350:
  1449  00120A  0012               	return		;funcret
  1450  00120C                     __end_of_eeprom_GetLog:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           prodl	equ	0xFF3
  1454                           intcon	equ	0xFF2
  1455                           intcon3	equ	0xFF0
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postinc2	equ	0xFDE
  1459                           postdec2	equ	0xFDD
  1460                           fsr2h	equ	0xFDA
  1461                           fsr2l	equ	0xFD9
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function _fixLCD *****************
  1465 ;; Defined at:
  1466 ;;		line 345 in file "main.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;		None
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  i               1   63[COMRAM] unsigned char 
  1471 ;;  time            7   54[COMRAM] unsigned char [7]
  1472 ;;  j               2   61[COMRAM] int 
  1473 ;;  i               2   52[COMRAM] int 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;Total ram usage:       13 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    4
  1490 ;; This function calls:
  1491 ;;		_I2C_Master_Init
  1492 ;;		_I2C_Master_Read
  1493 ;;		_I2C_Master_Start
  1494 ;;		_I2C_Master_Stop
  1495 ;;		_I2C_Master_Write
  1496 ;;		_initLCD
  1497 ;;		_lcdInst
  1498 ;;		_printf
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text4
  1505  00086C                     __ptext4:
  1506                           	opt stack 0
  1507  00086C                     _fixLCD:
  1508                           	opt stack 26
  1509                           
  1510                           ;main.c: 347: OSCCON = 0xF0;
  1511                           
  1512                           ;incstack = 0
  1513  00086C  0EF0               	movlw	240
  1514  00086E  6ED3               	movwf	4051,c	;volatile
  1515                           
  1516                           ;main.c: 351: TRISA = 0x00;
  1517  000870  0E00               	movlw	0
  1518  000872  6E92               	movwf	3986,c	;volatile
  1519                           
  1520                           ;main.c: 352: TRISB = 0b11110010;
  1521  000874  0EF2               	movlw	242
  1522  000876  6E93               	movwf	3987,c	;volatile
  1523                           
  1524                           ;main.c: 353: TRISC = 0x00011000;
  1525  000878  0E00               	movlw	0
  1526  00087A  6E94               	movwf	3988,c	;volatile
  1527                           
  1528                           ;main.c: 354: TRISD = 0x00;
  1529  00087C  0E00               	movlw	0
  1530  00087E  6E95               	movwf	3989,c	;volatile
  1531                           
  1532                           ;main.c: 355: TRISE = 0x00;
  1533  000880  0E00               	movlw	0
  1534  000882  6E96               	movwf	3990,c	;volatile
  1535                           
  1536                           ;main.c: 356: LATA = 0x00;
  1537  000884  0E00               	movlw	0
  1538  000886  6E89               	movwf	3977,c	;volatile
  1539                           
  1540                           ;main.c: 357: LATB = 0x00;
  1541  000888  0E00               	movlw	0
  1542  00088A  6E8A               	movwf	3978,c	;volatile
  1543                           
  1544                           ;main.c: 358: LATC = 0x00;
  1545  00088C  0E00               	movlw	0
  1546  00088E  6E8B               	movwf	3979,c	;volatile
  1547                           
  1548                           ;main.c: 359: LATD = 0x00;
  1549  000890  0E00               	movlw	0
  1550  000892  6E8C               	movwf	3980,c	;volatile
  1551                           
  1552                           ;main.c: 360: LATE = 0x00;
  1553  000894  0E00               	movlw	0
  1554  000896  6E8D               	movwf	3981,c	;volatile
  1555                           
  1556                           ;main.c: 361: ADCON0 = 0x00;
  1557  000898  0E00               	movlw	0
  1558  00089A  6EC2               	movwf	4034,c	;volatile
  1559                           
  1560                           ;main.c: 362: ADCON1 = 0x00;
  1561  00089C  0E00               	movlw	0
  1562  00089E  6EC1               	movwf	4033,c	;volatile
  1563                           
  1564                           ;main.c: 364: initLCD();
  1565  0008A0  EC40  F00A         	call	_initLCD	;wreg free
  1566                           
  1567                           ;main.c: 365: I2C_Master_Init(10000);
  1568  0008A4  0E10               	movlw	16
  1569  0008A6  6E1D               	movwf	I2C_Master_Init@c,c
  1570  0008A8  0E27               	movlw	39
  1571  0008AA  6E1E               	movwf	I2C_Master_Init@c+1,c
  1572  0008AC  0E00               	movlw	0
  1573  0008AE  6E1F               	movwf	I2C_Master_Init@c+2,c
  1574  0008B0  0E00               	movlw	0
  1575  0008B2  6E20               	movwf	I2C_Master_Init@c+3,c
  1576  0008B4  EC06  F009         	call	_I2C_Master_Init	;wreg free
  1577                           
  1578                           ;main.c: 366: (INTCONbits.GIE = 0);
  1579  0008B8  9EF2               	bcf	intcon,7,c	;volatile
  1580                           
  1581                           ;main.c: 367: unsigned char time[7];
  1582                           ;main.c: 369: LATA = 0b01010101;
  1583  0008BA  0E55               	movlw	85
  1584  0008BC  6E89               	movwf	3977,c	;volatile
  1585                           
  1586                           ;main.c: 370: LATB = 0b01010101;
  1587  0008BE  0E55               	movlw	85
  1588  0008C0  6E8A               	movwf	3978,c	;volatile
  1589                           
  1590                           ;main.c: 371: LATC = 0b01010101;
  1591  0008C2  0E55               	movlw	85
  1592  0008C4  6E8B               	movwf	3979,c	;volatile
  1593                           
  1594                           ;main.c: 372: LATDbits.LATD0 = 1;
  1595  0008C6  808C               	bsf	3980,0,c	;volatile
  1596                           
  1597                           ;main.c: 373: LATDbits.LATD1 = 0;
  1598  0008C8  928C               	bcf	3980,1,c	;volatile
  1599                           
  1600                           ;main.c: 374: LATEbits.LATE0 = 1;
  1601  0008CA  808D               	bsf	3981,0,c	;volatile
  1602                           
  1603                           ;main.c: 375: LATEbits.LATE1 = 0;
  1604  0008CC  928D               	bcf	3981,1,c	;volatile
  1605                           
  1606                           ;main.c: 376: int i = 0;
  1607  0008CE  0E00               	movlw	0
  1608  0008D0  6E36               	movwf	fixLCD@i+1,c
  1609  0008D2  0E00               	movlw	0
  1610  0008D4  6E35               	movwf	fixLCD@i,c
  1611                           
  1612                           ;main.c: 377: int j = 0;
  1613  0008D6  0E00               	movlw	0
  1614  0008D8  6E3F               	movwf	fixLCD@j+1,c
  1615  0008DA  0E00               	movlw	0
  1616  0008DC  6E3E               	movwf	fixLCD@j,c
  1617                           
  1618                           ;main.c: 378: while(j < 10){
  1619  0008DE  D095               	goto	l4412
  1620  0008E0                     l4370:
  1621                           
  1622                           ;main.c: 380: I2C_Master_Start();
  1623  0008E0  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  1624                           
  1625                           ;main.c: 381: I2C_Master_Write(0b11010000);
  1626  0008E4  0E00               	movlw	0
  1627  0008E6  6E12               	movwf	I2C_Master_Write@d+1,c
  1628  0008E8  0ED0               	movlw	208
  1629  0008EA  6E11               	movwf	I2C_Master_Write@d,c
  1630  0008EC  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1631                           
  1632                           ;main.c: 382: I2C_Master_Write(0x00);
  1633  0008F0  0E00               	movlw	0
  1634  0008F2  6E12               	movwf	I2C_Master_Write@d+1,c
  1635  0008F4  0E00               	movlw	0
  1636  0008F6  6E11               	movwf	I2C_Master_Write@d,c
  1637  0008F8  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1638                           
  1639                           ;main.c: 383: I2C_Master_Stop();
  1640  0008FC  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  1641                           
  1642                           ;main.c: 386: I2C_Master_Start();
  1643  000900  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  1644                           
  1645                           ;main.c: 387: I2C_Master_Write(0b11010001);
  1646  000904  0E00               	movlw	0
  1647  000906  6E12               	movwf	I2C_Master_Write@d+1,c
  1648  000908  0ED1               	movlw	209
  1649  00090A  6E11               	movwf	I2C_Master_Write@d,c
  1650  00090C  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1651                           
  1652                           ;main.c: 388: for(unsigned char i=0;i<0x06;i++){
  1653  000910  0E00               	movlw	0
  1654  000912  6E40               	movwf	fixLCD@i_579,c
  1655  000914                     l4374:
  1656  000914  0E05               	movlw	5
  1657  000916  6440               	cpfsgt	fixLCD@i_579,c
  1658  000918  D001               	goto	l4378
  1659  00091A  D00E               	goto	l4384
  1660  00091C                     l4378:
  1661                           
  1662                           ;main.c: 389: time[i] = I2C_Master_Read(1);
  1663  00091C  5040               	movf	fixLCD@i_579,w,c
  1664  00091E  0D01               	mullw	1
  1665  000920  0E37               	movlw	low fixLCD@time
  1666  000922  24F3               	addwf	prodl,w,c
  1667  000924  6ED9               	movwf	fsr2l,c
  1668  000926  0E00               	movlw	high fixLCD@time
  1669  000928  20F4               	addwfc	prodh,w,c
  1670  00092A  6EDA               	movwf	fsr2h,c
  1671  00092C  0E01               	movlw	1
  1672  00092E  ECE4  F00A         	call	_I2C_Master_Read
  1673  000932  6EDF               	movwf	indf2,c
  1674  000934  2A40               	incf	fixLCD@i_579,f,c
  1675  000936  D7EE               	goto	l4374
  1676  000938                     l4384:
  1677                           
  1678                           ;main.c: 390: }
  1679                           ;main.c: 391: time[6] = I2C_Master_Read(0);
  1680  000938  0E00               	movlw	0
  1681  00093A  ECE4  F00A         	call	_I2C_Master_Read
  1682  00093E  6E3D               	movwf	fixLCD@time+6,c
  1683                           
  1684                           ;main.c: 392: I2C_Master_Stop();
  1685  000940  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  1686                           
  1687                           ;main.c: 393: lcdInst(0b10000000);;
  1688  000944  0E80               	movlw	128
  1689  000946  EC97  F00B         	call	_lcdInst
  1690                           
  1691                           ;main.c: 394: printf("%02x%02x/%02x ", time[6],time[5],time[4]);
  1692  00094A  0ECF               	movlw	low STR_14
  1693  00094C  6E1C               	movwf	printf@f,c
  1694  00094E  0EFF               	movlw	high STR_14
  1695  000950  6E1D               	movwf	printf@f+1,c
  1696  000952  C03D  F01E         	movff	fixLCD@time+6,?_printf+2
  1697  000956  6A1F               	clrf	?_printf+3,c
  1698  000958  C03C  F020         	movff	fixLCD@time+5,?_printf+4
  1699  00095C  6A21               	clrf	?_printf+5,c
  1700  00095E  C03B  F022         	movff	fixLCD@time+4,?_printf+6
  1701  000962  6A23               	clrf	?_printf+7,c
  1702  000964  ECB0  F002         	call	_printf	;wreg free
  1703                           
  1704                           ;main.c: 395: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1705  000968  0EDE               	movlw	low STR_2
  1706  00096A  6E1C               	movwf	printf@f,c
  1707  00096C  0EFF               	movlw	high STR_2
  1708  00096E  6E1D               	movwf	printf@f+1,c
  1709  000970  C039  F01E         	movff	fixLCD@time+2,?_printf+2
  1710  000974  6A1F               	clrf	?_printf+3,c
  1711  000976  C038  F020         	movff	fixLCD@time+1,?_printf+4
  1712  00097A  6A21               	clrf	?_printf+5,c
  1713  00097C  C037  F022         	movff	fixLCD@time,?_printf+6
  1714  000980  6A23               	clrf	?_printf+7,c
  1715  000982  ECB0  F002         	call	_printf	;wreg free
  1716                           
  1717                           ;main.c: 396: lcdInst(0b11000000);;
  1718  000986  0EC0               	movlw	192
  1719  000988  EC97  F00B         	call	_lcdInst
  1720                           
  1721                           ;main.c: 397: printf("              ");
  1722  00098C  0E15               	movlw	low (STR_4+4)
  1723  00098E  6E1C               	movwf	printf@f,c
  1724  000990  0EFF               	movlw	high (STR_4+4)
  1725  000992  6E1D               	movwf	printf@f+1,c
  1726  000994  ECB0  F002         	call	_printf	;wreg free
  1727                           
  1728                           ;main.c: 398: lcdInst(0b10000000);;
  1729  000998  0E80               	movlw	128
  1730  00099A  EC97  F00B         	call	_lcdInst
  1731                           
  1732                           ;main.c: 399: lcdInst(0b11000000);;
  1733  00099E  0EC0               	movlw	192
  1734  0009A0  EC97  F00B         	call	_lcdInst
  1735                           
  1736                           ;main.c: 401: LATA = LATA ^ 0xFF;
  1737  0009A4  1E89               	comf	3977,f,c	;volatile
  1738                           
  1739                           ;main.c: 402: LATB = LATB ^ 0xFF;
  1740  0009A6  1E8A               	comf	3978,f,c	;volatile
  1741                           
  1742                           ;main.c: 403: LATC = LATC ^ 0xFF;
  1743  0009A8  1E8B               	comf	3979,f,c	;volatile
  1744                           
  1745                           ;main.c: 404: LATDbits.LATD0 = !LATDbits.LATD0;
  1746  0009AA  B08C               	btfsc	3980,0,c	;volatile
  1747  0009AC  D003               	goto	u3370
  1748  0009AE  6A34               	clrf	??_fixLCD& (0+255),c
  1749  0009B0  2A34               	incf	??_fixLCD& (0+255),f,c
  1750  0009B2  D001               	goto	u3388
  1751  0009B4                     u3370:
  1752  0009B4  6A34               	clrf	??_fixLCD& (0+255),c
  1753  0009B6                     u3388:
  1754  0009B6  508C               	movf	3980,w,c	;volatile
  1755  0009B8  1834               	xorwf	??_fixLCD,w,c
  1756  0009BA  0BFE               	andlw	-2
  1757  0009BC  1834               	xorwf	??_fixLCD,w,c
  1758  0009BE  6E8C               	movwf	3980,c	;volatile
  1759                           
  1760                           ;main.c: 405: LATDbits.LATD1 = !LATDbits.LATD1;
  1761  0009C0  B28C               	btfsc	3980,1,c	;volatile
  1762  0009C2  D003               	goto	u3390
  1763  0009C4  6A34               	clrf	??_fixLCD& (0+255),c
  1764  0009C6  2A34               	incf	??_fixLCD& (0+255),f,c
  1765  0009C8  D001               	goto	u3408
  1766  0009CA                     u3390:
  1767  0009CA  6A34               	clrf	??_fixLCD& (0+255),c
  1768  0009CC                     u3408:
  1769  0009CC  4634               	rlncf	??_fixLCD,f,c
  1770  0009CE  508C               	movf	3980,w,c	;volatile
  1771  0009D0  1834               	xorwf	??_fixLCD,w,c
  1772  0009D2  0BFD               	andlw	-3
  1773  0009D4  1834               	xorwf	??_fixLCD,w,c
  1774  0009D6  6E8C               	movwf	3980,c	;volatile
  1775                           
  1776                           ;main.c: 406: LATEbits.LATE0 = !LATEbits.LATE0;
  1777  0009D8  B08D               	btfsc	3981,0,c	;volatile
  1778  0009DA  D003               	goto	u3410
  1779  0009DC  6A34               	clrf	??_fixLCD& (0+255),c
  1780  0009DE  2A34               	incf	??_fixLCD& (0+255),f,c
  1781  0009E0  D001               	goto	u3428
  1782  0009E2                     u3410:
  1783  0009E2  6A34               	clrf	??_fixLCD& (0+255),c
  1784  0009E4                     u3428:
  1785  0009E4  508D               	movf	3981,w,c	;volatile
  1786  0009E6  1834               	xorwf	??_fixLCD,w,c
  1787  0009E8  0BFE               	andlw	-2
  1788  0009EA  1834               	xorwf	??_fixLCD,w,c
  1789  0009EC  6E8D               	movwf	3981,c	;volatile
  1790                           
  1791                           ;main.c: 407: LATEbits.LATE1 = !LATEbits.LATE1;
  1792  0009EE  B28D               	btfsc	3981,1,c	;volatile
  1793  0009F0  D003               	goto	u3430
  1794  0009F2  6A34               	clrf	??_fixLCD& (0+255),c
  1795  0009F4  2A34               	incf	??_fixLCD& (0+255),f,c
  1796  0009F6  D001               	goto	u3448
  1797  0009F8                     u3430:
  1798  0009F8  6A34               	clrf	??_fixLCD& (0+255),c
  1799  0009FA                     u3448:
  1800  0009FA  4634               	rlncf	??_fixLCD,f,c
  1801  0009FC  508D               	movf	3981,w,c	;volatile
  1802  0009FE  1834               	xorwf	??_fixLCD,w,c
  1803  000A00  0BFD               	andlw	-3
  1804  000A02  1834               	xorwf	??_fixLCD,w,c
  1805  000A04  6E8D               	movwf	3981,c	;volatile
  1806                           
  1807                           ;main.c: 408: j++;
  1808  000A06  4A3E               	infsnz	fixLCD@j,f,c
  1809  000A08  2A3F               	incf	fixLCD@j+1,f,c
  1810  000A0A                     l4412:
  1811  000A0A  BE3F               	btfsc	fixLCD@j+1,7,c
  1812  000A0C  D769               	goto	l4370
  1813  000A0E  503F               	movf	fixLCD@j+1,w,c
  1814  000A10  E105               	bnz	l288
  1815  000A12  0E0A               	movlw	10
  1816  000A14  5C3E               	subwf	fixLCD@j,w,c
  1817  000A16  B0D8               	btfsc	status,0,c
  1818  000A18  0012               	return	
  1819  000A1A  D762               	goto	l4370
  1820  000A1C                     l288:
  1821  000A1C  0012               	return		;funcret
  1822  000A1E                     __end_of_fixLCD:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           intcon3	equ	0xFF0
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           indf2	equ	0xFDF
  1832                           postinc2	equ	0xFDE
  1833                           postdec2	equ	0xFDD
  1834                           fsr2h	equ	0xFDA
  1835                           fsr2l	equ	0xFD9
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _initLCD *****************
  1839 ;; Defined at:
  1840 ;;		line 15 in file "lcd.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;		None
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      void 
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;Total ram usage:        1 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    3
  1861 ;; This function calls:
  1862 ;;		_lcdInst
  1863 ;; This function is called by:
  1864 ;;		_fixLCD
  1865 ;;		_main
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text5
  1870  001480                     __ptext5:
  1871                           	opt stack 0
  1872  001480                     _initLCD:
  1873                           	opt stack 27
  1874                           
  1875                           ;lcd.c: 16: _delay((unsigned long)((15)*(10000000/4000.0)));
  1876                           
  1877                           ;incstack = 0
  1878  001480  0E31               	movlw	49
  1879  001482  6E13               	movwf	??_initLCD& (0+255),c
  1880  001484  0EB2               	movlw	178
  1881  001486                     u3497:
  1882  001486  2EE8               	decfsz	wreg,f,c
  1883  001488  D7FE               	bra	u3497
  1884  00148A  2E13               	decfsz	??_initLCD& (0+255),f,c
  1885  00148C  D7FC               	bra	u3497
  1886  00148E  D000               	nop2	
  1887                           
  1888                           ;lcd.c: 17: lcdInst(0b00110011);
  1889  001490  0E33               	movlw	51
  1890  001492  EC97  F00B         	call	_lcdInst
  1891                           
  1892                           ;lcd.c: 18: lcdInst(0b00110010);
  1893  001496  0E32               	movlw	50
  1894  001498  EC97  F00B         	call	_lcdInst
  1895                           
  1896                           ;lcd.c: 19: lcdInst(0b00101000);
  1897  00149C  0E28               	movlw	40
  1898  00149E  EC97  F00B         	call	_lcdInst
  1899                           
  1900                           ;lcd.c: 20: lcdInst(0b00001111);
  1901  0014A2  0E0F               	movlw	15
  1902  0014A4  EC97  F00B         	call	_lcdInst
  1903                           
  1904                           ;lcd.c: 21: lcdInst(0b00000110);
  1905  0014A8  0E06               	movlw	6
  1906  0014AA  EC97  F00B         	call	_lcdInst
  1907                           
  1908                           ;lcd.c: 22: lcdInst(0b00000001);
  1909  0014AE  0E01               	movlw	1
  1910  0014B0  EC97  F00B         	call	_lcdInst
  1911                           
  1912                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  1913  0014B4  0E31               	movlw	49
  1914  0014B6  6E13               	movwf	??_initLCD& (0+255),c
  1915  0014B8  0EB2               	movlw	178
  1916  0014BA                     u3507:
  1917  0014BA  2EE8               	decfsz	wreg,f,c
  1918  0014BC  D7FE               	bra	u3507
  1919  0014BE  2E13               	decfsz	??_initLCD& (0+255),f,c
  1920  0014C0  D7FC               	bra	u3507
  1921  0014C2  D000               	nop2	
  1922  0014C4  0012               	return		;funcret
  1923  0014C6                     __end_of_initLCD:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           prodh	equ	0xFF4
  1927                           prodl	equ	0xFF3
  1928                           intcon	equ	0xFF2
  1929                           intcon3	equ	0xFF0
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           indf2	equ	0xFDF
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _I2C_Master_Init *****************
  1940 ;; Defined at:
  1941 ;;		line 13 in file "I2C.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  c               4   28[COMRAM] const unsigned long 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;Total ram usage:        8 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    2
  1962 ;; This function calls:
  1963 ;;		___lldiv
  1964 ;; This function is called by:
  1965 ;;		_fixLCD
  1966 ;;		_main
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text6
  1971  00120C                     __ptext6:
  1972                           	opt stack 0
  1973  00120C                     _I2C_Master_Init:
  1974                           	opt stack 27
  1975                           
  1976                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  1977                           
  1978                           ;incstack = 0
  1979  00120C  0E00               	movlw	0
  1980  00120E  6EC7               	movwf	4039,c	;volatile
  1981                           
  1982                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  1983  001210  0E28               	movlw	40
  1984  001212  6EC6               	movwf	4038,c	;volatile
  1985                           
  1986                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  1987  001214  0E00               	movlw	0
  1988  001216  6EC5               	movwf	4037,c	;volatile
  1989                           
  1990                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  1991  001218  0E80               	movlw	128
  1992  00121A  6E10               	movwf	___lldiv@dividend,c
  1993  00121C  0E96               	movlw	150
  1994  00121E  6E11               	movwf	___lldiv@dividend+1,c
  1995  001220  0E98               	movlw	152
  1996  001222  6E12               	movwf	___lldiv@dividend+2,c
  1997  001224  0E00               	movlw	0
  1998  001226  6E13               	movwf	___lldiv@dividend+3,c
  1999  001228  C01D  F021         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2000  00122C  C01E  F022         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2001  001230  C01F  F023         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2002  001234  C020  F024         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2003  001238  0E02               	movlw	2
  2004  00123A                     u1775:
  2005  00123A  90D8               	bcf	status,0,c
  2006  00123C  3621               	rlcf	??_I2C_Master_Init,f,c
  2007  00123E  3622               	rlcf	??_I2C_Master_Init+1,f,c
  2008  001240  3623               	rlcf	??_I2C_Master_Init+2,f,c
  2009  001242  3624               	rlcf	??_I2C_Master_Init+3,f,c
  2010  001244  2EE8               	decfsz	wreg,f,c
  2011  001246  D7F9               	goto	u1775
  2012  001248  C021  F014         	movff	??_I2C_Master_Init,___lldiv@divisor
  2013  00124C  C022  F015         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2014  001250  C023  F016         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2015  001254  C024  F017         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2016  001258  EC60  F008         	call	___lldiv	;wreg free
  2017  00125C  0410               	decf	?___lldiv,w,c
  2018  00125E  6EC8               	movwf	4040,c	;volatile
  2019                           
  2020                           ;I2C.c: 20: TRISC3 = 1;
  2021  001260  8694               	bsf	3988,3,c	;volatile
  2022                           
  2023                           ;I2C.c: 21: TRISC4 = 1;
  2024  001262  8894               	bsf	3988,4,c	;volatile
  2025  001264  0012               	return		;funcret
  2026  001266                     __end_of_I2C_Master_Init:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           intcon3	equ	0xFF0
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           indf2	equ	0xFDF
  2036                           postinc2	equ	0xFDE
  2037                           postdec2	equ	0xFDD
  2038                           fsr2h	equ	0xFDA
  2039                           fsr2l	equ	0xFD9
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function ___lldiv *****************
  2043 ;; Defined at:
  2044 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;  dividend        4   15[COMRAM] unsigned long 
  2047 ;;  divisor         4   19[COMRAM] unsigned long 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  quotient        4   23[COMRAM] unsigned long 
  2050 ;;  counter         1   27[COMRAM] unsigned char 
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  4   15[COMRAM] unsigned long 
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2060 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;Total ram usage:       13 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_I2C_Master_Init
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text7
  2075  0010C0                     __ptext7:
  2076                           	opt stack 0
  2077  0010C0                     ___lldiv:
  2078                           	opt stack 27
  2079                           
  2080                           ;incstack = 0
  2081  0010C0  0E00               	movlw	0
  2082  0010C2  6E18               	movwf	___lldiv@quotient,c
  2083  0010C4  0E00               	movlw	0
  2084  0010C6  6E19               	movwf	___lldiv@quotient+1,c
  2085  0010C8  0E00               	movlw	0
  2086  0010CA  6E1A               	movwf	___lldiv@quotient+2,c
  2087  0010CC  0E00               	movlw	0
  2088  0010CE  6E1B               	movwf	___lldiv@quotient+3,c
  2089  0010D0  5014               	movf	___lldiv@divisor,w,c
  2090  0010D2  1015               	iorwf	___lldiv@divisor+1,w,c
  2091  0010D4  1016               	iorwf	___lldiv@divisor+2,w,c
  2092  0010D6  1017               	iorwf	___lldiv@divisor+3,w,c
  2093  0010D8  B4D8               	btfsc	status,2,c
  2094  0010DA  D02A               	goto	l948
  2095  0010DC  0E01               	movlw	1
  2096  0010DE  6E1C               	movwf	___lldiv@counter,c
  2097  0010E0  D006               	goto	l2732
  2098  0010E2                     l2730:
  2099  0010E2  90D8               	bcf	status,0,c
  2100  0010E4  3614               	rlcf	___lldiv@divisor,f,c
  2101  0010E6  3615               	rlcf	___lldiv@divisor+1,f,c
  2102  0010E8  3616               	rlcf	___lldiv@divisor+2,f,c
  2103  0010EA  3617               	rlcf	___lldiv@divisor+3,f,c
  2104  0010EC  2A1C               	incf	___lldiv@counter,f,c
  2105  0010EE                     l2732:
  2106  0010EE  AE17               	btfss	___lldiv@divisor+3,7,c
  2107  0010F0  D7F8               	goto	l2730
  2108  0010F2                     l2734:
  2109  0010F2  90D8               	bcf	status,0,c
  2110  0010F4  3618               	rlcf	___lldiv@quotient,f,c
  2111  0010F6  3619               	rlcf	___lldiv@quotient+1,f,c
  2112  0010F8  361A               	rlcf	___lldiv@quotient+2,f,c
  2113  0010FA  361B               	rlcf	___lldiv@quotient+3,f,c
  2114  0010FC  5014               	movf	___lldiv@divisor,w,c
  2115  0010FE  5C10               	subwf	___lldiv@dividend,w,c
  2116  001100  5015               	movf	___lldiv@divisor+1,w,c
  2117  001102  5811               	subwfb	___lldiv@dividend+1,w,c
  2118  001104  5016               	movf	___lldiv@divisor+2,w,c
  2119  001106  5812               	subwfb	___lldiv@dividend+2,w,c
  2120  001108  5017               	movf	___lldiv@divisor+3,w,c
  2121  00110A  5813               	subwfb	___lldiv@dividend+3,w,c
  2122  00110C  A0D8               	btfss	status,0,c
  2123  00110E  D009               	goto	l2742
  2124  001110  5014               	movf	___lldiv@divisor,w,c
  2125  001112  5E10               	subwf	___lldiv@dividend,f,c
  2126  001114  5015               	movf	___lldiv@divisor+1,w,c
  2127  001116  5A11               	subwfb	___lldiv@dividend+1,f,c
  2128  001118  5016               	movf	___lldiv@divisor+2,w,c
  2129  00111A  5A12               	subwfb	___lldiv@dividend+2,f,c
  2130  00111C  5017               	movf	___lldiv@divisor+3,w,c
  2131  00111E  5A13               	subwfb	___lldiv@dividend+3,f,c
  2132  001120  8018               	bsf	___lldiv@quotient,0,c
  2133  001122                     l2742:
  2134  001122  90D8               	bcf	status,0,c
  2135  001124  3217               	rrcf	___lldiv@divisor+3,f,c
  2136  001126  3216               	rrcf	___lldiv@divisor+2,f,c
  2137  001128  3215               	rrcf	___lldiv@divisor+1,f,c
  2138  00112A  3214               	rrcf	___lldiv@divisor,f,c
  2139  00112C  2E1C               	decfsz	___lldiv@counter,f,c
  2140  00112E  D7E1               	goto	l2734
  2141  001130                     l948:
  2142  001130  C018  F010         	movff	___lldiv@quotient,?___lldiv
  2143  001134  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  2144  001138  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  2145  00113C  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  2146  001140  0012               	return		;funcret
  2147  001142                     __end_of___lldiv:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           intcon	equ	0xFF2
  2153                           intcon3	equ	0xFF0
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           indf2	equ	0xFDF
  2157                           postinc2	equ	0xFDE
  2158                           postdec2	equ	0xFDD
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _finishState *****************
  2164 ;; Defined at:
  2165 ;;		line 298 in file "main.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  keypress        2   53[COMRAM] int 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:        4 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    5
  2186 ;; This function calls:
  2187 ;;		_readKey
  2188 ;;		_update_lcd
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text8
  2195  001508                     __ptext8:
  2196                           	opt stack 0
  2197  001508                     _finishState:
  2198                           	opt stack 25
  2199                           
  2200                           ;main.c: 300: (INTCONbits.GIE = 0);
  2201                           
  2202                           ;incstack = 0
  2203  001508  9EF2               	bcf	intcon,7,c	;volatile
  2204                           
  2205                           ;main.c: 301: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2206  00150A  0E0D               	movlw	13
  2207  00150C  6E35               	movwf	(??_finishState+1)& (0+255),c
  2208  00150E  0EAF               	movlw	175
  2209  001510  6E34               	movwf	??_finishState& (0+255),c
  2210  001512  0EB6               	movlw	182
  2211  001514                     u3517:
  2212  001514  2EE8               	decfsz	wreg,f,c
  2213  001516  D7FE               	bra	u3517
  2214  001518  2E34               	decfsz	??_finishState& (0+255),f,c
  2215  00151A  D7FC               	bra	u3517
  2216  00151C  2E35               	decfsz	(??_finishState+1)& (0+255),f,c
  2217  00151E  D7FA               	bra	u3517
  2218  001520  D000               	nop2	
  2219                           
  2220                           ;main.c: 302: update_lcd();
  2221  001522  ECB1  F005         	call	_update_lcd	;wreg free
  2222  001526                     l4306:
  2223                           
  2224                           ;main.c: 304: int keypress = readKey();
  2225  001526  ECF8  F009         	call	_readKey	;wreg free
  2226  00152A  C010  F036         	movff	?_readKey,finishState@keypress
  2227  00152E  C011  F037         	movff	?_readKey+1,finishState@keypress+1
  2228                           
  2229                           ;main.c: 305: if(keypress == 0b1101){
  2230  001532  0E0D               	movlw	13
  2231  001534  1836               	xorwf	finishState@keypress,w,c
  2232  001536  1037               	iorwf	finishState@keypress+1,w,c
  2233  001538  A4D8               	btfss	status,2,c
  2234  00153A  D7F5               	goto	l4306
  2235                           
  2236                           ;main.c: 306: state = MAIN;
  2237  00153C  0E00               	movlw	0
  2238  00153E  6E4B               	movwf	_state,c
  2239                           
  2240                           ;main.c: 307: return;
  2241  001540  0012               	return	
  2242  001542                     __end_of_finishState:
  2243                           	opt stack 0
  2244                           tblptru	equ	0xFF8
  2245                           prodh	equ	0xFF4
  2246                           prodl	equ	0xFF3
  2247                           intcon	equ	0xFF2
  2248                           intcon3	equ	0xFF0
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _readKey *****************
  2259 ;; Defined at:
  2260 ;;		line 90 in file "main.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  keypress        1   17[COMRAM] unsigned char 
  2265 ;;  i               2   18[COMRAM] int 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2   15[COMRAM] int 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;Total ram usage:        5 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    1
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_mainState
  2286 ;;		_finishState
  2287 ;;		_logState
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text9
  2292  0013F0                     __ptext9:
  2293                           	opt stack 0
  2294  0013F0                     _readKey:
  2295                           	opt stack 28
  2296                           
  2297                           ;main.c: 92: for (int i = 0; i < 200; i++)
  2298                           
  2299                           ;incstack = 0
  2300  0013F0  0E00               	movlw	0
  2301  0013F2  6E14               	movwf	readKey@i+1,c
  2302  0013F4  0E00               	movlw	0
  2303  0013F6  6E13               	movwf	readKey@i,c
  2304  0013F8  BE14               	btfsc	readKey@i+1,7,c
  2305  0013FA  D006               	goto	l211
  2306  0013FC  5014               	movf	readKey@i+1,w,c
  2307  0013FE  E119               	bnz	l212
  2308  001400  0EC8               	movlw	200
  2309  001402  5C13               	subwf	readKey@i,w,c
  2310  001404  B0D8               	btfsc	status,0,c
  2311  001406  D015               	goto	l212
  2312  001408                     l211:
  2313                           
  2314                           ;main.c: 93: {
  2315                           ;main.c: 94: if (PORTBbits.RB1 != 0)
  2316  001408  A281               	btfss	3969,1,c	;volatile
  2317  00140A  D00C               	goto	l2814
  2318                           
  2319                           ;main.c: 95: {
  2320                           ;main.c: 96: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2321  00140C  3881               	swapf	3969,w,c	;volatile
  2322  00140E  0B0F               	andlw	15
  2323  001410  0B0F               	andlw	15
  2324  001412  6E12               	movwf	readKey@keypress,c
  2325  001414                     l214:
  2326  001414  B281               	btfsc	3969,1,c	;volatile
  2327  001416  D7FE               	goto	l214
  2328                           
  2329                           ;main.c: 99: }
  2330                           ;main.c: 100: __nop();
  2331  001418  F000               	nop	
  2332                           
  2333                           ;main.c: 101: __nop();
  2334  00141A  F000               	nop	
  2335                           
  2336                           ;main.c: 102: return keypress;
  2337  00141C  C012  F010         	movff	readKey@keypress,?_readKey
  2338  001420  6A11               	clrf	?_readKey+1,c
  2339  001422  0012               	return	
  2340  001424                     l2814:
  2341  001424  4A13               	infsnz	readKey@i,f,c
  2342  001426  2A14               	incf	readKey@i+1,f,c
  2343  001428  BE14               	btfsc	readKey@i+1,7,c
  2344  00142A  D7EE               	goto	l211
  2345  00142C  5014               	movf	readKey@i+1,w,c
  2346  00142E  E101               	bnz	u1820
  2347  001430  D7E7               	goto	L2
  2348  001432                     u1820:
  2349  001432                     l212:
  2350                           
  2351                           ;main.c: 103: }
  2352                           ;main.c: 104: }
  2353                           ;main.c: 105: return -1;
  2354  001432  6810               	setf	?_readKey,c
  2355  001434  6811               	setf	?_readKey+1,c
  2356  001436  0012               	return		;funcret
  2357  001438                     __end_of_readKey:
  2358                           	opt stack 0
  2359                           tblptru	equ	0xFF8
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           intcon3	equ	0xFF0
  2364                           postinc0	equ	0xFEE
  2365                           wreg	equ	0xFE8
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _executingState *****************
  2374 ;; Defined at:
  2375 ;;		line 150 in file "main.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;  hasTab          2   30[BANK0 ] int 
  2380 ;;  hasLabel        2   34[BANK0 ] int 
  2381 ;;  res             8   20[BANK0 ] int [4]
  2382 ;;  emptyCount      2   44[BANK0 ] int 
  2383 ;;  alInSensor      2   42[BANK0 ] int 
  2384 ;;  snInSensor      2   40[BANK0 ] int 
  2385 ;;  alLoaded        2   38[BANK0 ] int 
  2386 ;;  snLoaded        2   36[BANK0 ] int 
  2387 ;;  timedif         2   32[BANK0 ] int 
  2388 ;;  start_s         2   28[BANK0 ] int 
  2389 ;;  s_one           2   14[BANK0 ] int 
  2390 ;;  s_ten           2   12[BANK0 ] int 
  2391 ;;  m_one           2   10[BANK0 ] int 
  2392 ;;  m_ten           2    8[BANK0 ] int 
  2393 ;;  h_one           2    6[BANK0 ] int 
  2394 ;;  h_ten           2    4[BANK0 ] int 
  2395 ;;  runCanAl        2    2[BANK0 ] int 
  2396 ;;  runCanSn        2    0[BANK0 ] int 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         3      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:       49 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    5
  2413 ;; This function calls:
  2414 ;;		___wmul
  2415 ;;		_dispenseAlCan
  2416 ;;		_dispenseSnCan
  2417 ;;		_eeprom_LogResult
  2418 ;;		_get_time
  2419 ;;		_get_timeDif
  2420 ;;		_lcdInst
  2421 ;;		_printf
  2422 ;;		_readAlBot
  2423 ;;		_readAlTop
  2424 ;;		_readSnBot
  2425 ;;		_readSnSensor
  2426 ;;		_readSnTop
  2427 ;;		_servoRotate0
  2428 ;;		_servoRotate90
  2429 ;;		_servoRotate90n
  2430 ;;		_servoRotateArm
  2431 ;;		_update_lcd
  2432 ;; This function is called by:
  2433 ;;		_main
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text10
  2438  000012                     __ptext10:
  2439                           	opt stack 0
  2440  000012                     _executingState:
  2441                           	opt stack 25
  2442                           
  2443                           ;main.c: 156: int runCanSn, runCanAl;
  2444                           ;main.c: 157: runCanSn = 0;
  2445                           
  2446                           ;incstack = 0
  2447  000012  0E00               	movlw	0
  2448  000014  0100               	movlb	0	; () banked
  2449  000016  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2450  000018  0E00               	movlw	0
  2451  00001A  6F80               	movwf	executingState@runCanSn& (0+255),b
  2452                           
  2453                           ;main.c: 158: runCanAl = 0;
  2454  00001C  0E00               	movlw	0
  2455  00001E  0100               	movlb	0	; () banked
  2456  000020  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2457  000022  0E00               	movlw	0
  2458  000024  6F82               	movwf	executingState@runCanAl& (0+255),b
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;main.c: 160: get_time(starttime);
  2462  000026  0EAE               	movlw	low _starttime
  2463  000028  6E13               	movwf	get_time@time,c
  2464  00002A  0E00               	movlw	high _starttime
  2465  00002C  6E14               	movwf	get_time@time+1,c
  2466  00002E  EC1D  F008         	call	_get_time	;wreg free
  2467                           
  2468                           ;main.c: 161: int h_ten = (starttime[2] & 0b11110000)>>4;
  2469  000032  EE20  F0B2         	lfsr	2,_starttime+4
  2470  000036  CFDE F034          	movff	postinc2,??_executingState
  2471  00003A  CFDD F035          	movff	postdec2,??_executingState+1
  2472  00003E  0E04               	movlw	4
  2473  000040  6E36               	movwf	(??_executingState+2)& (0+255),c
  2474  000042                     u3085:
  2475  000042  3435               	rlcf	??_executingState+1,w,c
  2476  000044  3235               	rrcf	??_executingState+1,f,c
  2477  000046  3234               	rrcf	??_executingState,f,c
  2478  000048  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2479  00004A  D7FB               	goto	u3085
  2480  00004C  0E0F               	movlw	15
  2481  00004E  1434               	andwf	??_executingState,w,c
  2482  000050  0100               	movlb	0	; () banked
  2483  000052  6F84               	movwf	executingState@h_ten& (0+255),b
  2484  000054  0100               	movlb	0	; () banked
  2485  000056  6B85               	clrf	(executingState@h_ten+1)& (0+255),b
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;main.c: 162: int h_one = (starttime[2] & 0b00001111);
  2489  000058  0E0F               	movlw	15
  2490  00005A  0100               	movlb	0	; () banked
  2491  00005C  15B2               	andwf	(_starttime+4)& (0+255),w,b
  2492  00005E  0100               	movlb	0	; () banked
  2493  000060  6F86               	movwf	executingState@h_one& (0+255),b
  2494  000062  0100               	movlb	0	; () banked
  2495  000064  6B87               	clrf	(executingState@h_one+1)& (0+255),b
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;main.c: 163: int m_ten = (starttime[1] & 0b11110000)>>4;
  2499  000066  EE20  F0B0         	lfsr	2,_starttime+2
  2500  00006A  CFDE F034          	movff	postinc2,??_executingState
  2501  00006E  CFDD F035          	movff	postdec2,??_executingState+1
  2502  000072  0E04               	movlw	4
  2503  000074  6E36               	movwf	(??_executingState+2)& (0+255),c
  2504  000076                     u3095:
  2505  000076  3435               	rlcf	??_executingState+1,w,c
  2506  000078  3235               	rrcf	??_executingState+1,f,c
  2507  00007A  3234               	rrcf	??_executingState,f,c
  2508  00007C  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2509  00007E  D7FB               	goto	u3095
  2510  000080  0E0F               	movlw	15
  2511  000082  1434               	andwf	??_executingState,w,c
  2512  000084  0100               	movlb	0	; () banked
  2513  000086  6F88               	movwf	executingState@m_ten& (0+255),b
  2514  000088  0100               	movlb	0	; () banked
  2515  00008A  6B89               	clrf	(executingState@m_ten+1)& (0+255),b
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 164: int m_one = (starttime[1] & 0b00001111);
  2519  00008C  0E0F               	movlw	15
  2520  00008E  0100               	movlb	0	; () banked
  2521  000090  15B0               	andwf	(_starttime+2)& (0+255),w,b
  2522  000092  0100               	movlb	0	; () banked
  2523  000094  6F8A               	movwf	executingState@m_one& (0+255),b
  2524  000096  0100               	movlb	0	; () banked
  2525  000098  6B8B               	clrf	(executingState@m_one+1)& (0+255),b
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;main.c: 165: int s_ten = (starttime[0] & 0b11110000)>>4;
  2529  00009A  C0AE  F034         	movff	_starttime,??_executingState
  2530  00009E  C0AF  F035         	movff	_starttime+1,??_executingState+1
  2531  0000A2  0E04               	movlw	4
  2532  0000A4  6E36               	movwf	(??_executingState+2)& (0+255),c
  2533  0000A6                     u3105:
  2534  0000A6  3435               	rlcf	??_executingState+1,w,c
  2535  0000A8  3235               	rrcf	??_executingState+1,f,c
  2536  0000AA  3234               	rrcf	??_executingState,f,c
  2537  0000AC  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2538  0000AE  D7FB               	goto	u3105
  2539  0000B0  0E0F               	movlw	15
  2540  0000B2  1434               	andwf	??_executingState,w,c
  2541  0000B4  0100               	movlb	0	; () banked
  2542  0000B6  6F8C               	movwf	executingState@s_ten& (0+255),b
  2543  0000B8  0100               	movlb	0	; () banked
  2544  0000BA  6B8D               	clrf	(executingState@s_ten+1)& (0+255),b
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;main.c: 166: int s_one = (starttime[0] & 0b00001111);
  2548  0000BC  0E0F               	movlw	15
  2549  0000BE  0100               	movlb	0	; () banked
  2550  0000C0  15AE               	andwf	_starttime& (0+255),w,b
  2551  0000C2  0100               	movlb	0	; () banked
  2552  0000C4  6F8E               	movwf	executingState@s_one& (0+255),b
  2553  0000C6  0100               	movlb	0	; () banked
  2554  0000C8  6B8F               	clrf	(executingState@s_one+1)& (0+255),b
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2558  0000CA  C088  F010         	movff	executingState@m_ten,___wmul@multiplier
  2559  0000CE  C089  F011         	movff	executingState@m_ten+1,___wmul@multiplier+1
  2560  0000D2  0E00               	movlw	0
  2561  0000D4  6E13               	movwf	___wmul@multiplicand+1,c
  2562  0000D6  0E0A               	movlw	10
  2563  0000D8  6E12               	movwf	___wmul@multiplicand,c
  2564  0000DA  EC0A  F00B         	call	___wmul	;wreg free
  2565  0000DE  0100               	movlb	0	; () banked
  2566  0000E0  518A               	movf	executingState@m_one& (0+255),w,b
  2567  0000E2  2410               	addwf	?___wmul,w,c
  2568  0000E4  0100               	movlb	0	; () banked
  2569  0000E6  6F90               	movwf	_executingState$1732& (0+255),b
  2570  0000E8  0100               	movlb	0	; () banked
  2571  0000EA  518B               	movf	(executingState@m_one+1)& (0+255),w,b
  2572  0000EC  2011               	addwfc	?___wmul+1,w,c
  2573  0000EE  0100               	movlb	0	; () banked
  2574  0000F0  6F91               	movwf	(_executingState$1732+1)& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2578  0000F2  C084  F010         	movff	executingState@h_ten,___wmul@multiplier
  2579  0000F6  C085  F011         	movff	executingState@h_ten+1,___wmul@multiplier+1
  2580  0000FA  0E00               	movlw	0
  2581  0000FC  6E13               	movwf	___wmul@multiplicand+1,c
  2582  0000FE  0E0A               	movlw	10
  2583  000100  6E12               	movwf	___wmul@multiplicand,c
  2584  000102  EC0A  F00B         	call	___wmul	;wreg free
  2585  000106  0100               	movlb	0	; () banked
  2586  000108  5186               	movf	executingState@h_one& (0+255),w,b
  2587  00010A  2410               	addwf	?___wmul,w,c
  2588  00010C  0100               	movlb	0	; () banked
  2589  00010E  6F92               	movwf	_executingState$1733& (0+255),b
  2590  000110  0100               	movlb	0	; () banked
  2591  000112  5187               	movf	(executingState@h_one+1)& (0+255),w,b
  2592  000114  2011               	addwfc	?___wmul+1,w,c
  2593  000116  0100               	movlb	0	; () banked
  2594  000118  6F93               	movwf	(_executingState$1733+1)& (0+255),b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2598  00011A  C08C  F010         	movff	executingState@s_ten,___wmul@multiplier
  2599  00011E  C08D  F011         	movff	executingState@s_ten+1,___wmul@multiplier+1
  2600  000122  0E00               	movlw	0
  2601  000124  6E13               	movwf	___wmul@multiplicand+1,c
  2602  000126  0E0A               	movlw	10
  2603  000128  6E12               	movwf	___wmul@multiplicand,c
  2604  00012A  EC0A  F00B         	call	___wmul	;wreg free
  2605  00012E  C010  F034         	movff	?___wmul,??_executingState
  2606  000132  C011  F035         	movff	?___wmul+1,??_executingState+1
  2607  000136  C092  F010         	movff	_executingState$1733,___wmul@multiplier
  2608  00013A  C093  F011         	movff	_executingState$1733+1,___wmul@multiplier+1
  2609  00013E  0E0E               	movlw	14
  2610  000140  6E13               	movwf	___wmul@multiplicand+1,c
  2611  000142  0E10               	movlw	16
  2612  000144  6E12               	movwf	___wmul@multiplicand,c
  2613  000146  EC0A  F00B         	call	___wmul	;wreg free
  2614  00014A  5010               	movf	?___wmul,w,c
  2615  00014C  2634               	addwf	??_executingState,f,c
  2616  00014E  5011               	movf	?___wmul+1,w,c
  2617  000150  2235               	addwfc	??_executingState+1,f,c
  2618  000152  C090  F010         	movff	_executingState$1732,___wmul@multiplier
  2619  000156  C091  F011         	movff	_executingState$1732+1,___wmul@multiplier+1
  2620  00015A  0E00               	movlw	0
  2621  00015C  6E13               	movwf	___wmul@multiplicand+1,c
  2622  00015E  0E3C               	movlw	60
  2623  000160  6E12               	movwf	___wmul@multiplicand,c
  2624  000162  EC0A  F00B         	call	___wmul	;wreg free
  2625  000166  5010               	movf	?___wmul,w,c
  2626  000168  2634               	addwf	??_executingState,f,c
  2627  00016A  5011               	movf	?___wmul+1,w,c
  2628  00016C  2235               	addwfc	??_executingState+1,f,c
  2629  00016E  0100               	movlb	0	; () banked
  2630  000170  518E               	movf	executingState@s_one& (0+255),w,b
  2631  000172  2434               	addwf	??_executingState,w,c
  2632  000174  0100               	movlb	0	; () banked
  2633  000176  6F9C               	movwf	executingState@start_s& (0+255),b
  2634  000178  0100               	movlb	0	; () banked
  2635  00017A  518F               	movf	(executingState@s_one+1)& (0+255),w,b
  2636  00017C  2035               	addwfc	??_executingState+1,w,c
  2637  00017E  0100               	movlb	0	; () banked
  2638  000180  6F9D               	movwf	(executingState@start_s+1)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 169: LATCbits.LATC6 = 1;
  2642  000182  8C8B               	bsf	3979,6,c	;volatile
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;main.c: 170: (INTCONbits.GIE = 0);
  2646  000184  9EF2               	bcf	intcon,7,c	;volatile
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 171: update_lcd();
  2650  000186  ECB1  F005         	call	_update_lcd	;wreg free
  2651                           
  2652                           ;main.c: 172: int timedif = get_timeDif(start_s);
  2653  00018A  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  2654  00018E  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  2655  000192  EC0F  F005         	call	_get_timeDif	;wreg free
  2656  000196  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  2657  00019A  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  2658                           
  2659                           ;main.c: 175: int emptyCount;
  2660                           ;main.c: 177: int snLoaded, alLoaded, snInSensor, alInSensor;
  2661                           ;main.c: 178: snLoaded = 1;
  2662  00019E  0E00               	movlw	0
  2663  0001A0  0100               	movlb	0	; () banked
  2664  0001A2  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2665  0001A4  0E01               	movlw	1
  2666  0001A6  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 179: alLoaded = 1;
  2670  0001A8  0E00               	movlw	0
  2671  0001AA  0100               	movlb	0	; () banked
  2672  0001AC  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2673  0001AE  0E01               	movlw	1
  2674  0001B0  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 180: snInSensor = 1;
  2678  0001B2  0E00               	movlw	0
  2679  0001B4  0100               	movlb	0	; () banked
  2680  0001B6  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2681  0001B8  0E01               	movlw	1
  2682  0001BA  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 181: alInSensor = 1;
  2686  0001BC  0E00               	movlw	0
  2687  0001BE  0100               	movlb	0	; () banked
  2688  0001C0  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2689  0001C2  0E01               	movlw	1
  2690  0001C4  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;main.c: 182: emptyCount = 0;
  2694  0001C6  0E00               	movlw	0
  2695  0001C8  0100               	movlb	0	; () banked
  2696  0001CA  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2697  0001CC  0E00               	movlw	0
  2698  0001CE  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;main.c: 184: servoRotate0(1);
  2702  0001D0  0E00               	movlw	0
  2703  0001D2  6E11               	movwf	servoRotate0@servo+1,c
  2704  0001D4  0E01               	movlw	1
  2705  0001D6  6E10               	movwf	servoRotate0@servo,c
  2706  0001D8  ECB0  F006         	call	_servoRotate0	;wreg free
  2707                           
  2708                           ;main.c: 185: servoRotate0(2);
  2709  0001DC  0E00               	movlw	0
  2710  0001DE  6E11               	movwf	servoRotate0@servo+1,c
  2711  0001E0  0E02               	movlw	2
  2712  0001E2  6E10               	movwf	servoRotate0@servo,c
  2713  0001E4  ECB0  F006         	call	_servoRotate0	;wreg free
  2714                           
  2715                           ;main.c: 186: servoRotate0(3);
  2716  0001E8  0E00               	movlw	0
  2717  0001EA  6E11               	movwf	servoRotate0@servo+1,c
  2718  0001EC  0E03               	movlw	3
  2719  0001EE  6E10               	movwf	servoRotate0@servo,c
  2720  0001F0  ECB0  F006         	call	_servoRotate0	;wreg free
  2721                           
  2722                           ;main.c: 187: servoRotate0(0);
  2723  0001F4  0E00               	movlw	0
  2724  0001F6  6E11               	movwf	servoRotate0@servo+1,c
  2725  0001F8  0E00               	movlw	0
  2726  0001FA  6E10               	movwf	servoRotate0@servo,c
  2727  0001FC  ECB0  F006         	call	_servoRotate0	;wreg free
  2728                           
  2729                           ;main.c: 188: servoRotate90n(4);
  2730  000200  0E00               	movlw	0
  2731  000202  6E11               	movwf	servoRotate90n@servo+1,c
  2732  000204  0E04               	movlw	4
  2733  000206  6E10               	movwf	servoRotate90n@servo,c
  2734  000208  EC13  F007         	call	_servoRotate90n	;wreg free
  2735                           
  2736                           ;main.c: 191: while(timedif < 180 && PORTBbits.RB0 == 1){
  2737  00020C  D182               	goto	l4292
  2738  00020E                     l4162:
  2739                           
  2740                           ;main.c: 192: update_lcd();
  2741  00020E  ECB1  F005         	call	_update_lcd	;wreg free
  2742                           
  2743                           ;main.c: 193: lcdInst(0b10000000);;
  2744  000212  0E80               	movlw	128
  2745  000214  EC97  F00B         	call	_lcdInst
  2746                           
  2747                           ;main.c: 194: printf("Executing    %03d", emptyCount);
  2748  000218  0E36               	movlw	low STR_12
  2749  00021A  6E1C               	movwf	printf@f,c
  2750  00021C  0EFF               	movlw	high STR_12
  2751  00021E  6E1D               	movwf	printf@f+1,c
  2752  000220  C0AC  F01E         	movff	executingState@emptyCount,?_printf+2
  2753  000224  C0AD  F01F         	movff	executingState@emptyCount+1,?_printf+3
  2754  000228  ECB0  F002         	call	_printf	;wreg free
  2755                           
  2756                           ;main.c: 197: if(readSnTop() == 0){
  2757  00022C  EC3A  F00B         	call	_readSnTop	;wreg free
  2758  000230  5010               	movf	?_readSnTop,w,c
  2759  000232  1011               	iorwf	?_readSnTop+1,w,c
  2760  000234  A4D8               	btfss	status,2,c
  2761  000236  D005               	goto	l4170
  2762                           
  2763                           ;main.c: 198: snLoaded = 0;
  2764  000238  0E00               	movlw	0
  2765  00023A  0100               	movlb	0	; () banked
  2766  00023C  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2767  00023E  0E00               	movlw	0
  2768  000240  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2769  000242                     l4170:
  2770                           
  2771                           ;main.c: 199: }
  2772                           ;main.c: 200: if(readAlTop() == 0){
  2773  000242  EC5E  F00B         	call	_readAlTop	;wreg free
  2774  000246  5010               	movf	?_readAlTop,w,c
  2775  000248  1011               	iorwf	?_readAlTop+1,w,c
  2776  00024A  A4D8               	btfss	status,2,c
  2777  00024C  D005               	goto	l4174
  2778                           
  2779                           ;main.c: 201: alLoaded = 0;
  2780  00024E  0E00               	movlw	0
  2781  000250  0100               	movlb	0	; () banked
  2782  000252  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2783  000254  0E00               	movlw	0
  2784  000256  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2785  000258                     l4174:
  2786                           
  2787                           ;main.c: 202: }
  2788                           ;main.c: 203: if(readSnBot() == 0){
  2789  000258  EC52  F00B         	call	_readSnBot	;wreg free
  2790  00025C  5010               	movf	?_readSnBot,w,c
  2791  00025E  1011               	iorwf	?_readSnBot+1,w,c
  2792  000260  A4D8               	btfss	status,2,c
  2793  000262  D005               	goto	l4178
  2794                           
  2795                           ;main.c: 204: snInSensor = 0;
  2796  000264  0E00               	movlw	0
  2797  000266  0100               	movlb	0	; () banked
  2798  000268  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2799  00026A  0E00               	movlw	0
  2800  00026C  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2801  00026E                     l4178:
  2802                           
  2803                           ;main.c: 205: }
  2804                           ;main.c: 206: if(readAlBot() == 0){
  2805  00026E  EC6A  F00B         	call	_readAlBot	;wreg free
  2806  000272  5010               	movf	?_readAlBot,w,c
  2807  000274  1011               	iorwf	?_readAlBot+1,w,c
  2808  000276  A4D8               	btfss	status,2,c
  2809  000278  D005               	goto	l4182
  2810                           
  2811                           ;main.c: 207: alInSensor = 0;
  2812  00027A  0E00               	movlw	0
  2813  00027C  0100               	movlb	0	; () banked
  2814  00027E  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2815  000280  0E00               	movlw	0
  2816  000282  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2817  000284                     l4182:
  2818                           
  2819                           ;main.c: 208: }
  2820                           ;main.c: 210: if(snLoaded == 0){
  2821  000284  0100               	movlb	0	; () banked
  2822  000286  51A4               	movf	executingState@snLoaded& (0+255),w,b
  2823  000288  0100               	movlb	0	; () banked
  2824  00028A  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2825  00028C  A4D8               	btfss	status,2,c
  2826  00028E  D023               	goto	l4196
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 211: emptyCount = 0;
  2830  000290  0E00               	movlw	0
  2831  000292  0100               	movlb	0	; () banked
  2832  000294  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2833  000296  0E00               	movlw	0
  2834  000298  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 212: if(snInSensor == 1){
  2838  00029A  0100               	movlb	0	; () banked
  2839  00029C  05A8               	decf	executingState@snInSensor& (0+255),w,b
  2840  00029E  0100               	movlb	0	; () banked
  2841  0002A0  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  2842  0002A2  A4D8               	btfss	status,2,c
  2843  0002A4  D018               	goto	l4196
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 213: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2847  0002A6  0E0D               	movlw	13
  2848  0002A8  6E35               	movwf	(??_executingState+1)& (0+255),c
  2849  0002AA  0EAF               	movlw	175
  2850  0002AC  6E34               	movwf	??_executingState& (0+255),c
  2851  0002AE  0EB6               	movlw	182
  2852  0002B0                     u3527:
  2853  0002B0  2EE8               	decfsz	wreg,f,c
  2854  0002B2  D7FE               	bra	u3527
  2855  0002B4  2E34               	decfsz	??_executingState& (0+255),f,c
  2856  0002B6  D7FC               	bra	u3527
  2857  0002B8  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2858  0002BA  D7FA               	bra	u3527
  2859  0002BC  D000               	nop2	
  2860                           
  2861                           ;main.c: 214: dispenseSnCan();
  2862  0002BE  ECA1  F00A         	call	_dispenseSnCan	;wreg free
  2863                           
  2864                           ;main.c: 215: runCanSn = 1;
  2865  0002C2  0E00               	movlw	0
  2866  0002C4  0100               	movlb	0	; () banked
  2867  0002C6  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2868  0002C8  0E01               	movlw	1
  2869  0002CA  6F80               	movwf	executingState@runCanSn& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;main.c: 216: snLoaded = 1;
  2873  0002CC  0E00               	movlw	0
  2874  0002CE  0100               	movlb	0	; () banked
  2875  0002D0  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2876  0002D2  0E01               	movlw	1
  2877  0002D4  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2878  0002D6                     l4196:
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;main.c: 217: }
  2882                           ;main.c: 218: }
  2883                           ;main.c: 219: if(alLoaded == 0){
  2884  0002D6  0100               	movlb	0	; () banked
  2885  0002D8  51A6               	movf	executingState@alLoaded& (0+255),w,b
  2886  0002DA  0100               	movlb	0	; () banked
  2887  0002DC  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2888  0002DE  A4D8               	btfss	status,2,c
  2889  0002E0  D023               	goto	l4210
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 220: emptyCount = 0;
  2893  0002E2  0E00               	movlw	0
  2894  0002E4  0100               	movlb	0	; () banked
  2895  0002E6  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2896  0002E8  0E00               	movlw	0
  2897  0002EA  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 221: if(alInSensor == 1){
  2901  0002EC  0100               	movlb	0	; () banked
  2902  0002EE  05AA               	decf	executingState@alInSensor& (0+255),w,b
  2903  0002F0  0100               	movlb	0	; () banked
  2904  0002F2  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  2905  0002F4  A4D8               	btfss	status,2,c
  2906  0002F6  D018               	goto	l4210
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;main.c: 222: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2910  0002F8  0E0D               	movlw	13
  2911  0002FA  6E35               	movwf	(??_executingState+1)& (0+255),c
  2912  0002FC  0EAF               	movlw	175
  2913  0002FE  6E34               	movwf	??_executingState& (0+255),c
  2914  000300  0EB6               	movlw	182
  2915  000302                     u3537:
  2916  000302  2EE8               	decfsz	wreg,f,c
  2917  000304  D7FE               	bra	u3537
  2918  000306  2E34               	decfsz	??_executingState& (0+255),f,c
  2919  000308  D7FC               	bra	u3537
  2920  00030A  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2921  00030C  D7FA               	bra	u3537
  2922  00030E  D000               	nop2	
  2923                           
  2924                           ;main.c: 223: dispenseAlCan();
  2925  000310  ECB9  F00A         	call	_dispenseAlCan	;wreg free
  2926                           
  2927                           ;main.c: 224: runCanAl = 1;
  2928  000314  0E00               	movlw	0
  2929  000316  0100               	movlb	0	; () banked
  2930  000318  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2931  00031A  0E01               	movlw	1
  2932  00031C  6F82               	movwf	executingState@runCanAl& (0+255),b
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 225: alLoaded = 1;
  2936  00031E  0E00               	movlw	0
  2937  000320  0100               	movlb	0	; () banked
  2938  000322  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2939  000324  0E01               	movlw	1
  2940  000326  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2941  000328                     l4210:
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;main.c: 226: }
  2945                           ;main.c: 227: }
  2946                           ;main.c: 229: if(snLoaded == 1 && alLoaded ==1){
  2947  000328  0100               	movlb	0	; () banked
  2948  00032A  05A4               	decf	executingState@snLoaded& (0+255),w,b
  2949  00032C  0100               	movlb	0	; () banked
  2950  00032E  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2951  000330  A4D8               	btfss	status,2,c
  2952  000332  D009               	goto	l4216
  2953                           
  2954                           ; BSR set to: 0
  2955  000334  0100               	movlb	0	; () banked
  2956  000336  05A6               	decf	executingState@alLoaded& (0+255),w,b
  2957  000338  0100               	movlb	0	; () banked
  2958  00033A  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2959  00033C  A4D8               	btfss	status,2,c
  2960  00033E  D003               	goto	l4216
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 230: emptyCount++;
  2964  000340  0100               	movlb	0	; () banked
  2965  000342  4BAC               	infsnz	executingState@emptyCount& (0+255),f,b
  2966  000344  2BAD               	incf	(executingState@emptyCount+1)& (0+255),f,b
  2967  000346                     l4216:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 231: }
  2971                           ;main.c: 234: if(snInSensor == 0){
  2972  000346  0100               	movlb	0	; () banked
  2973  000348  51A8               	movf	executingState@snInSensor& (0+255),w,b
  2974  00034A  0100               	movlb	0	; () banked
  2975  00034C  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  2976  00034E  A4D8               	btfss	status,2,c
  2977  000350  D059               	goto	l4246
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;main.c: 235: int hasLabel;
  2981                           ;main.c: 236: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2982  000352  0E0D               	movlw	13
  2983  000354  6E35               	movwf	(??_executingState+1)& (0+255),c
  2984  000356  0EAF               	movlw	175
  2985  000358  6E34               	movwf	??_executingState& (0+255),c
  2986  00035A  0EB6               	movlw	182
  2987  00035C                     u3547:
  2988  00035C  2EE8               	decfsz	wreg,f,c
  2989  00035E  D7FE               	bra	u3547
  2990  000360  2E34               	decfsz	??_executingState& (0+255),f,c
  2991  000362  D7FC               	bra	u3547
  2992  000364  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2993  000366  D7FA               	bra	u3547
  2994  000368  D000               	nop2	
  2995                           
  2996                           ;main.c: 237: emptyCount = 0;
  2997  00036A  0E00               	movlw	0
  2998  00036C  0100               	movlb	0	; () banked
  2999  00036E  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3000  000370  0E00               	movlw	0
  3001  000372  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 238: if(readSnSensor() == 1){
  3005  000374  EC46  F00B         	call	_readSnSensor	;wreg free
  3006  000378  0410               	decf	?_readSnSensor,w,c
  3007  00037A  1011               	iorwf	?_readSnSensor+1,w,c
  3008  00037C  A4D8               	btfss	status,2,c
  3009  00037E  D005               	goto	l4226
  3010                           
  3011                           ;main.c: 239: hasLabel = 0;
  3012  000380  0E00               	movlw	0
  3013  000382  0100               	movlb	0	; () banked
  3014  000384  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3015  000386  0E00               	movlw	0
  3016  000388  D004               	goto	L3
  3017  00038A                     l4226:
  3018                           
  3019                           ;main.c: 241: hasLabel = 1;
  3020  00038A  0E00               	movlw	0
  3021  00038C  0100               	movlb	0	; () banked
  3022  00038E  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3023  000390  0E01               	movlw	1
  3024  000392                     L3:
  3025  000392  6FA2               	movwf	executingState@hasLabel& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 242: }
  3029                           ;main.c: 243: if(hasLabel == 0){
  3030                           
  3031                           ; BSR set to: 0
  3032  000394  0100               	movlb	0	; () banked
  3033  000396  51A2               	movf	executingState@hasLabel& (0+255),w,b
  3034  000398  0100               	movlb	0	; () banked
  3035  00039A  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3036  00039C  A4D8               	btfss	status,2,c
  3037  00039E  D014               	goto	l4236
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;main.c: 244: servoRotate90n(2);
  3041  0003A0  0E00               	movlw	0
  3042  0003A2  6E11               	movwf	servoRotate90n@servo+1,c
  3043  0003A4  0E02               	movlw	2
  3044  0003A6  6E10               	movwf	servoRotate90n@servo,c
  3045  0003A8  EC13  F007         	call	_servoRotate90n	;wreg free
  3046                           
  3047                           ;main.c: 245: servoRotate0(2);
  3048  0003AC  0E00               	movlw	0
  3049  0003AE  6E11               	movwf	servoRotate0@servo+1,c
  3050  0003B0  0E02               	movlw	2
  3051  0003B2  6E10               	movwf	servoRotate0@servo,c
  3052  0003B4  ECB0  F006         	call	_servoRotate0	;wreg free
  3053                           
  3054                           ;main.c: 246: runCanSn = 0;
  3055  0003B8  0E00               	movlw	0
  3056  0003BA  0100               	movlb	0	; () banked
  3057  0003BC  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3058  0003BE  0E00               	movlw	0
  3059  0003C0  6F80               	movwf	executingState@runCanSn& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;main.c: 247: snNoLabel++;
  3063  0003C2  4A49               	infsnz	_snNoLabel,f,c
  3064  0003C4  2A4A               	incf	_snNoLabel+1,f,c
  3065                           
  3066                           ;main.c: 248: }else if(hasLabel == 1){
  3067  0003C6  D019               	goto	l4244
  3068  0003C8                     l4236:
  3069                           
  3070                           ; BSR set to: 0
  3071  0003C8  0100               	movlb	0	; () banked
  3072  0003CA  05A2               	decf	executingState@hasLabel& (0+255),w,b
  3073  0003CC  0100               	movlb	0	; () banked
  3074  0003CE  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3075  0003D0  A4D8               	btfss	status,2,c
  3076  0003D2  D013               	goto	l4244
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 249: servoRotate90(2);
  3080  0003D4  0E00               	movlw	0
  3081  0003D6  6E11               	movwf	servoRotate90@servo+1,c
  3082  0003D8  0E02               	movlw	2
  3083  0003DA  6E10               	movwf	servoRotate90@servo,c
  3084  0003DC  EC4D  F006         	call	_servoRotate90	;wreg free
  3085                           
  3086                           ;main.c: 250: servoRotate0(2);
  3087  0003E0  0E00               	movlw	0
  3088  0003E2  6E11               	movwf	servoRotate0@servo+1,c
  3089  0003E4  0E02               	movlw	2
  3090  0003E6  6E10               	movwf	servoRotate0@servo,c
  3091  0003E8  ECB0  F006         	call	_servoRotate0	;wreg free
  3092                           
  3093                           ;main.c: 251: runCanSn = 0;
  3094  0003EC  0E00               	movlw	0
  3095  0003EE  0100               	movlb	0	; () banked
  3096  0003F0  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3097  0003F2  0E00               	movlw	0
  3098  0003F4  6F80               	movwf	executingState@runCanSn& (0+255),b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 252: snLabel++;
  3102  0003F6  4A47               	infsnz	_snLabel,f,c
  3103  0003F8  2A48               	incf	_snLabel+1,f,c
  3104  0003FA                     l4244:
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;main.c: 253: }
  3108                           ;main.c: 254: snInSensor = 1;
  3109  0003FA  0E00               	movlw	0
  3110  0003FC  0100               	movlb	0	; () banked
  3111  0003FE  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  3112  000400  0E01               	movlw	1
  3113  000402  6FA8               	movwf	executingState@snInSensor& (0+255),b
  3114  000404                     l4246:
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;main.c: 255: }
  3118                           ;main.c: 257: if(alInSensor == 0){
  3119  000404  0100               	movlb	0	; () banked
  3120  000406  51AA               	movf	executingState@alInSensor& (0+255),w,b
  3121  000408  0100               	movlb	0	; () banked
  3122  00040A  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3123  00040C  A4D8               	btfss	status,2,c
  3124  00040E  D049               	goto	l4274
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 258: emptyCount = 0;
  3128  000410  0E00               	movlw	0
  3129  000412  0100               	movlb	0	; () banked
  3130  000414  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3131  000416  0E00               	movlw	0
  3132  000418  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;main.c: 259: int hasTab;
  3136                           ;main.c: 260: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3137  00041A  0E0D               	movlw	13
  3138  00041C  6E35               	movwf	(??_executingState+1)& (0+255),c
  3139  00041E  0EAF               	movlw	175
  3140  000420  6E34               	movwf	??_executingState& (0+255),c
  3141  000422  0EB6               	movlw	182
  3142  000424                     u3557:
  3143  000424  2EE8               	decfsz	wreg,f,c
  3144  000426  D7FE               	bra	u3557
  3145  000428  2E34               	decfsz	??_executingState& (0+255),f,c
  3146  00042A  D7FC               	bra	u3557
  3147  00042C  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3148  00042E  D7FA               	bra	u3557
  3149  000430  D000               	nop2	
  3150                           
  3151                           ;main.c: 261: hasTab = servoRotateArm();
  3152  000432  ECA1  F008         	call	_servoRotateArm	;wreg free
  3153  000436  C010  F09E         	movff	?_servoRotateArm,executingState@hasTab
  3154  00043A  C011  F09F         	movff	?_servoRotateArm+1,executingState@hasTab+1
  3155                           
  3156                           ;main.c: 262: servoRotate90n(4);
  3157  00043E  0E00               	movlw	0
  3158  000440  6E11               	movwf	servoRotate90n@servo+1,c
  3159  000442  0E04               	movlw	4
  3160  000444  6E10               	movwf	servoRotate90n@servo,c
  3161  000446  EC13  F007         	call	_servoRotate90n	;wreg free
  3162                           
  3163                           ;main.c: 263: if(hasTab){
  3164  00044A  0100               	movlb	0	; () banked
  3165  00044C  519E               	movf	executingState@hasTab& (0+255),w,b
  3166  00044E  0100               	movlb	0	; () banked
  3167  000450  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3168  000452  B4D8               	btfsc	status,2,c
  3169  000454  D00E               	goto	l4264
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 264: servoRotate90n(3);
  3173  000456  0E00               	movlw	0
  3174  000458  6E11               	movwf	servoRotate90n@servo+1,c
  3175  00045A  0E03               	movlw	3
  3176  00045C  6E10               	movwf	servoRotate90n@servo,c
  3177  00045E  EC13  F007         	call	_servoRotate90n	;wreg free
  3178                           
  3179                           ;main.c: 265: runCanAl = 0;
  3180  000462  0E00               	movlw	0
  3181  000464  0100               	movlb	0	; () banked
  3182  000466  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3183  000468  0E00               	movlw	0
  3184  00046A  6F82               	movwf	executingState@runCanAl& (0+255),b
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 266: alTab++;
  3188  00046C  4A43               	infsnz	_alTab,f,c
  3189  00046E  2A44               	incf	_alTab+1,f,c
  3190                           
  3191                           ;main.c: 267: }else if (hasTab == 0){
  3192  000470  D013               	goto	l4272
  3193  000472                     l4264:
  3194                           
  3195                           ; BSR set to: 0
  3196  000472  0100               	movlb	0	; () banked
  3197  000474  519E               	movf	executingState@hasTab& (0+255),w,b
  3198  000476  0100               	movlb	0	; () banked
  3199  000478  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3200  00047A  A4D8               	btfss	status,2,c
  3201  00047C  D00D               	goto	l4272
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 268: servoRotate90(3);
  3205  00047E  0E00               	movlw	0
  3206  000480  6E11               	movwf	servoRotate90@servo+1,c
  3207  000482  0E03               	movlw	3
  3208  000484  6E10               	movwf	servoRotate90@servo,c
  3209  000486  EC4D  F006         	call	_servoRotate90	;wreg free
  3210                           
  3211                           ;main.c: 269: runCanAl = 0;
  3212  00048A  0E00               	movlw	0
  3213  00048C  0100               	movlb	0	; () banked
  3214  00048E  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3215  000490  0E00               	movlw	0
  3216  000492  6F82               	movwf	executingState@runCanAl& (0+255),b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 270: alNoTab++;
  3220  000494  4A41               	infsnz	_alNoTab,f,c
  3221  000496  2A42               	incf	_alNoTab+1,f,c
  3222  000498                     l4272:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 271: }
  3226                           ;main.c: 272: alInSensor = 1;
  3227  000498  0E00               	movlw	0
  3228  00049A  0100               	movlb	0	; () banked
  3229  00049C  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  3230  00049E  0E01               	movlw	1
  3231  0004A0  6FAA               	movwf	executingState@alInSensor& (0+255),b
  3232  0004A2                     l4274:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 273: }
  3236                           ;main.c: 275: timedif = get_timeDif(start_s);
  3237  0004A2  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  3238  0004A6  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  3239  0004AA  EC0F  F005         	call	_get_timeDif	;wreg free
  3240  0004AE  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  3241  0004B2  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  3242                           
  3243                           ;main.c: 276: if(emptyCount > 20){
  3244  0004B6  0100               	movlb	0	; () banked
  3245  0004B8  BFAD               	btfsc	(executingState@emptyCount+1)& (0+255),7,b
  3246  0004BA  D00F               	goto	l4284
  3247  0004BC  0100               	movlb	0	; () banked
  3248  0004BE  51AD               	movf	(executingState@emptyCount+1)& (0+255),w,b
  3249  0004C0  E105               	bnz	u3280
  3250  0004C2  0E15               	movlw	21
  3251  0004C4  0100               	movlb	0	; () banked
  3252  0004C6  5DAC               	subwf	executingState@emptyCount& (0+255),w,b
  3253  0004C8  A0D8               	btfss	status,0,c
  3254  0004CA  D007               	goto	l4284
  3255  0004CC                     u3280:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 277: state = FINISH;
  3259  0004CC  0E02               	movlw	2
  3260  0004CE  6E4B               	movwf	_state,c
  3261                           
  3262                           ;main.c: 278: runResult = 1;
  3263  0004D0  0E00               	movlw	0
  3264  0004D2  6E46               	movwf	_runResult+1,c
  3265  0004D4  0E01               	movlw	1
  3266  0004D6  6E45               	movwf	_runResult,c
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 279: return;
  3270  0004D8  0012               	return	
  3271  0004DA                     l4284:
  3272                           
  3273                           ; BSR set to: 0
  3274  0004DA  0100               	movlb	0	; () banked
  3275  0004DC  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3276  0004DE  D00E               	goto	l4290
  3277  0004E0  0100               	movlb	0	; () banked
  3278  0004E2  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3279  0004E4  E105               	bnz	u3290
  3280  0004E6  0EB5               	movlw	181
  3281  0004E8  0100               	movlb	0	; () banked
  3282  0004EA  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3283  0004EC  A0D8               	btfss	status,0,c
  3284  0004EE  D006               	goto	l4290
  3285  0004F0                     u3290:
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;main.c: 281: state = FINISH;
  3289  0004F0  0E02               	movlw	2
  3290  0004F2  6E4B               	movwf	_state,c
  3291                           
  3292                           ;main.c: 282: runResult = 0;
  3293  0004F4  0E00               	movlw	0
  3294  0004F6  6E46               	movwf	_runResult+1,c
  3295  0004F8  0E00               	movlw	0
  3296  0004FA  D7ED               	goto	L4
  3297  0004FC                     l4290:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;main.c: 284: }
  3301                           ;main.c: 285: _delay((unsigned long)((500)*(10000000/4000.0)));
  3302  0004FC  0E07               	movlw	7
  3303  0004FE  6E35               	movwf	(??_executingState+1)& (0+255),c
  3304  000500  0E58               	movlw	88
  3305  000502  6E34               	movwf	??_executingState& (0+255),c
  3306  000504  0E5A               	movlw	90
  3307  000506                     u3567:
  3308  000506  2EE8               	decfsz	wreg,f,c
  3309  000508  D7FE               	bra	u3567
  3310  00050A  2E34               	decfsz	??_executingState& (0+255),f,c
  3311  00050C  D7FC               	bra	u3567
  3312  00050E  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3313  000510  D7FA               	bra	u3567
  3314  000512                     l4292:
  3315  000512  0100               	movlb	0	; () banked
  3316  000514  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3317  000516  D008               	goto	l4294
  3318  000518  0100               	movlb	0	; () banked
  3319  00051A  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3320  00051C  E107               	bnz	l261
  3321  00051E  0EB4               	movlw	180
  3322  000520  0100               	movlb	0	; () banked
  3323  000522  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3324  000524  B0D8               	btfsc	status,0,c
  3325  000526  D002               	goto	l261
  3326  000528                     l4294:
  3327                           
  3328                           ; BSR set to: 0
  3329  000528  B081               	btfsc	3969,0,c	;volatile
  3330  00052A  D671               	goto	l4162
  3331  00052C                     l261:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 286: }
  3335                           ;main.c: 288: LATCbits.LATC6 = 0;
  3336  00052C  9C8B               	bcf	3979,6,c	;volatile
  3337                           
  3338                           ;main.c: 289: int res[4];
  3339                           ;main.c: 290: res[0] = alTab;
  3340  00052E  C043  F094         	movff	_alTab,executingState@res
  3341  000532  C044  F095         	movff	_alTab+1,executingState@res+1
  3342                           
  3343                           ;main.c: 291: res[1] = alNoTab;
  3344  000536  C041  F096         	movff	_alNoTab,executingState@res+2
  3345  00053A  C042  F097         	movff	_alNoTab+1,executingState@res+3
  3346                           
  3347                           ;main.c: 292: res[2] = snLabel;
  3348  00053E  C047  F098         	movff	_snLabel,executingState@res+4
  3349  000542  C048  F099         	movff	_snLabel+1,executingState@res+5
  3350                           
  3351                           ;main.c: 293: res[3] = snNoLabel;
  3352  000546  C049  F09A         	movff	_snNoLabel,executingState@res+6
  3353  00054A  C04A  F09B         	movff	_snNoLabel+1,executingState@res+7
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;main.c: 294: eeprom_LogResult(res);
  3357  00054E  0E94               	movlw	low executingState@res
  3358  000550  6E13               	movwf	eeprom_LogResult@data,c
  3359  000552  0E00               	movlw	high executingState@res
  3360  000554  6E14               	movwf	eeprom_LogResult@data+1,c
  3361  000556  ECAE  F009         	call	_eeprom_LogResult	;wreg free
  3362                           
  3363                           ;main.c: 295: state = FINISH;
  3364  00055A  0E02               	movlw	2
  3365  00055C  6E4B               	movwf	_state,c
  3366  00055E  0012               	return		;funcret
  3367  000560                     __end_of_executingState:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           prodh	equ	0xFF4
  3371                           prodl	equ	0xFF3
  3372                           intcon	equ	0xFF2
  3373                           intcon3	equ	0xFF0
  3374                           postinc0	equ	0xFEE
  3375                           wreg	equ	0xFE8
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function _update_lcd *****************
  3384 ;; Defined at:
  3385 ;;		line 44 in file "main.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;		None
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;Total ram usage:        0 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    4
  3406 ;; This function calls:
  3407 ;;		_lcdInst
  3408 ;;		_printf
  3409 ;; This function is called by:
  3410 ;;		_mainState
  3411 ;;		_executingState
  3412 ;;		_finishState
  3413 ;;		_logState
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text11
  3418  000B62                     __ptext11:
  3419                           	opt stack 0
  3420  000B62                     _update_lcd:
  3421                           	opt stack 25
  3422                           
  3423                           ;main.c: 46: lcdInst(0b10000000);;
  3424                           
  3425                           ;incstack = 0
  3426  000B62  0E80               	movlw	128
  3427  000B64  EC97  F00B         	call	_lcdInst
  3428                           
  3429                           ;main.c: 48: switch (state)
  3430  000B68  D083               	goto	l3912
  3431  000B6A                     l3880:
  3432                           
  3433                           ;main.c: 51: printf("%02x/%01x/%02x ", time[6], time[5], time[4]);
  3434  000B6A  0EBF               	movlw	low STR_1
  3435  000B6C  6E1C               	movwf	printf@f,c
  3436  000B6E  0EFF               	movlw	high STR_1
  3437  000B70  6E1D               	movwf	printf@f+1,c
  3438  000B72  C058  F01E         	movff	_time+12,?_printf+2
  3439  000B76  C059  F01F         	movff	_time+13,?_printf+3
  3440  000B7A  C056  F020         	movff	_time+10,?_printf+4
  3441  000B7E  C057  F021         	movff	_time+11,?_printf+5
  3442  000B82  C054  F022         	movff	_time+8,?_printf+6
  3443  000B86  C055  F023         	movff	_time+9,?_printf+7
  3444  000B8A  ECB0  F002         	call	_printf	;wreg free
  3445                           
  3446                           ;main.c: 52: printf("%02x:%02x:%02x", time[2], time[1], time[0]);
  3447  000B8E  0EDE               	movlw	low STR_2
  3448  000B90  6E1C               	movwf	printf@f,c
  3449  000B92  0EFF               	movlw	high STR_2
  3450  000B94  6E1D               	movwf	printf@f+1,c
  3451  000B96  C050  F01E         	movff	_time+4,?_printf+2
  3452  000B9A  C051  F01F         	movff	_time+5,?_printf+3
  3453  000B9E  C04E  F020         	movff	_time+2,?_printf+4
  3454  000BA2  C04F  F021         	movff	_time+3,?_printf+5
  3455  000BA6  C04C  F022         	movff	_time,?_printf+6
  3456  000BAA  C04D  F023         	movff	_time+1,?_printf+7
  3457  000BAE  ECB0  F002         	call	_printf	;wreg free
  3458                           
  3459                           ;main.c: 54: lcdInst(0b11000000);;
  3460  000BB2  0EC0               	movlw	192
  3461  000BB4  EC97  F00B         	call	_lcdInst
  3462                           
  3463                           ;main.c: 55: printf("1:Start 2:Logs  ");
  3464  000BB8  0EAE               	movlw	low STR_3
  3465  000BBA  6E1C               	movwf	printf@f,c
  3466  000BBC  0EFF               	movlw	high STR_3
  3467  000BBE  6E1D               	movwf	printf@f+1,c
  3468  000BC0  ECB0  F002         	call	_printf	;wreg free
  3469                           
  3470                           ;main.c: 56: break;
  3471  000BC4  D063               	goto	l3914
  3472  000BC6                     l3886:
  3473                           
  3474                           ;main.c: 59: printf("%03d              ", logdata);
  3475  000BC6  0E11               	movlw	low STR_4
  3476  000BC8  6E1C               	movwf	printf@f,c
  3477  000BCA  0EFF               	movlw	high STR_4
  3478  000BCC  6E1D               	movwf	printf@f+1,c
  3479  000BCE  C05A  F01E         	movff	_logdata,?_printf+2
  3480  000BD2  6A1F               	clrf	?_printf+3,c
  3481  000BD4  ECB0  F002         	call	_printf	;wreg free
  3482                           
  3483                           ;main.c: 60: lcdInst(0b11000000);
  3484  000BD8  0EC0               	movlw	192
  3485  000BDA  EC97  F00B         	call	_lcdInst
  3486                           
  3487                           ;main.c: 61: printf("1:Prev 0:Exit   ");
  3488  000BDE  0E9D               	movlw	low STR_5
  3489  000BE0  6E1C               	movwf	printf@f,c
  3490  000BE2  0EFF               	movlw	high STR_5
  3491  000BE4  6E1D               	movwf	printf@f+1,c
  3492  000BE6  ECB0  F002         	call	_printf	;wreg free
  3493                           
  3494                           ;main.c: 62: break;
  3495  000BEA  D050               	goto	l3914
  3496  000BEC                     l3892:
  3497                           
  3498                           ;main.c: 64: printf("Executing...    ");
  3499  000BEC  0E8C               	movlw	low STR_6
  3500  000BEE  6E1C               	movwf	printf@f,c
  3501  000BF0  0EFF               	movlw	high STR_6
  3502  000BF2  6E1D               	movwf	printf@f+1,c
  3503  000BF4  ECB0  F002         	call	_printf	;wreg free
  3504                           
  3505                           ;main.c: 65: lcdInst(0b11000000);;
  3506  000BF8  0EC0               	movlw	192
  3507  000BFA  EC97  F00B         	call	_lcdInst
  3508                           
  3509                           ;main.c: 66: printf("aN%d/a%d/sN%d/S%d",alNoTab, alTab, snNoLabel, snLabel);
  3510  000BFE  0E24               	movlw	low STR_7
  3511  000C00  6E1C               	movwf	printf@f,c
  3512  000C02  0EFF               	movlw	high STR_7
  3513  000C04  6E1D               	movwf	printf@f+1,c
  3514  000C06  C041  F01E         	movff	_alNoTab,?_printf+2
  3515  000C0A  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3516  000C0E  C043  F020         	movff	_alTab,?_printf+4
  3517  000C12  C044  F021         	movff	_alTab+1,?_printf+5
  3518  000C16  C049  F022         	movff	_snNoLabel,?_printf+6
  3519  000C1A  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3520  000C1E  C047  F024         	movff	_snLabel,?_printf+8
  3521  000C22  C048  F025         	movff	_snLabel+1,?_printf+9
  3522  000C26  ECB0  F002         	call	_printf	;wreg free
  3523                           
  3524                           ;main.c: 68: break;
  3525  000C2A  D030               	goto	l3914
  3526  000C2C                     l3898:
  3527                           
  3528                           ;main.c: 71: if(runResult == 1){
  3529  000C2C  0445               	decf	_runResult,w,c
  3530  000C2E  1046               	iorwf	_runResult+1,w,c
  3531  000C30  A4D8               	btfss	status,2,c
  3532  000C32  D007               	goto	l3902
  3533                           
  3534                           ;main.c: 72: printf("Finished        ");
  3535  000C34  0E6A               	movlw	low STR_8
  3536  000C36  6E1C               	movwf	printf@f,c
  3537  000C38  0EFF               	movlw	high STR_8
  3538  000C3A  6E1D               	movwf	printf@f+1,c
  3539  000C3C  ECB0  F002         	call	_printf	;wreg free
  3540                           
  3541                           ;main.c: 73: }
  3542  000C40  D006               	goto	l3904
  3543  000C42                     l3902:
  3544                           
  3545                           ;main.c: 74: else
  3546                           ;main.c: 75: {
  3547                           ;main.c: 76: printf("Terminated      ");
  3548  000C42  0E7B               	movlw	low STR_9
  3549  000C44  6E1C               	movwf	printf@f,c
  3550  000C46  0EFF               	movlw	high STR_9
  3551  000C48  6E1D               	movwf	printf@f+1,c
  3552  000C4A  ECB0  F002         	call	_printf	;wreg free
  3553  000C4E                     l3904:
  3554                           
  3555                           ;main.c: 77: }
  3556                           ;main.c: 78: lcdInst(0b11000000);;
  3557  000C4E  0EC0               	movlw	192
  3558  000C50  EC97  F00B         	call	_lcdInst
  3559                           
  3560                           ;main.c: 79: printf("0:Menu          ");
  3561  000C54  0E59               	movlw	low STR_10
  3562  000C56  6E1C               	movwf	printf@f,c
  3563  000C58  0EFF               	movlw	high STR_10
  3564  000C5A  6E1D               	movwf	printf@f+1,c
  3565  000C5C  ECB0  F002         	call	_printf	;wreg free
  3566                           
  3567                           ;main.c: 80: break;
  3568  000C60  D015               	goto	l3914
  3569  000C62                     l3908:
  3570                           
  3571                           ;main.c: 82: printf("error");
  3572  000C62  0EF9               	movlw	low STR_11
  3573  000C64  6E1C               	movwf	printf@f,c
  3574  000C66  0EFF               	movlw	high STR_11
  3575  000C68  6E1D               	movwf	printf@f+1,c
  3576  000C6A  ECB0  F002         	call	_printf	;wreg free
  3577                           
  3578                           ;main.c: 84: }
  3579                           
  3580                           ;main.c: 83: break;
  3581  000C6E  D00E               	goto	l3914
  3582  000C70                     l3912:
  3583  000C70  504B               	movf	_state,w,c
  3584                           
  3585                           ; Switch size 1, requested type "space"
  3586                           ; Number of cases is 4, Range of values is 0 to 3
  3587                           ; switch strategies available:
  3588                           ; Name         Instructions Cycles
  3589                           ; simple_byte           13     7 (average)
  3590                           ;	Chosen strategy is simple_byte
  3591  000C72  0A00               	xorlw	0	; case 0
  3592  000C74  B4D8               	btfsc	status,2,c
  3593  000C76  D779               	goto	l3880
  3594  000C78  0A01               	xorlw	1	; case 1
  3595  000C7A  B4D8               	btfsc	status,2,c
  3596  000C7C  D7B7               	goto	l3892
  3597  000C7E  0A03               	xorlw	3	; case 2
  3598  000C80  B4D8               	btfsc	status,2,c
  3599  000C82  D7D4               	goto	l3898
  3600  000C84  0A01               	xorlw	1	; case 3
  3601  000C86  B4D8               	btfsc	status,2,c
  3602  000C88  D79E               	goto	l3886
  3603  000C8A  D7EB               	goto	l3908
  3604  000C8C                     l3914:
  3605                           
  3606                           ;main.c: 86: lcdInst(0b10000000);;
  3607  000C8C  0E80               	movlw	128
  3608  000C8E  EC97  F00B         	call	_lcdInst
  3609                           
  3610                           ;main.c: 87: lcdInst(0b11000000);;
  3611  000C92  0EC0               	movlw	192
  3612  000C94  EC97  F00B         	call	_lcdInst
  3613  000C98  0012               	return		;funcret
  3614  000C9A                     __end_of_update_lcd:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           intcon3	equ	0xFF0
  3621                           postinc0	equ	0xFEE
  3622                           wreg	equ	0xFE8
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _readSnTop *****************
  3631 ;; Defined at:
  3632 ;;		line 25 in file "sensors.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  2   15[COMRAM] int 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        2 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    1
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_executingState
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text12
  3661  001674                     __ptext12:
  3662                           	opt stack 0
  3663  001674                     _readSnTop:
  3664                           	opt stack 28
  3665                           
  3666                           ;sensors.c: 26: if(PORTAbits.RA2 == 1){
  3667                           
  3668                           ;incstack = 0
  3669  001674  A480               	btfss	3968,2,c	;volatile
  3670  001676  D005               	goto	l3974
  3671                           
  3672                           ;sensors.c: 27: return 1;
  3673  001678  0E00               	movlw	0
  3674  00167A  6E11               	movwf	?_readSnTop+1,c
  3675  00167C  0E01               	movlw	1
  3676  00167E  6E10               	movwf	?_readSnTop,c
  3677  001680  0012               	return	
  3678  001682                     l3974:
  3679                           
  3680                           ;sensors.c: 28: }
  3681                           ;sensors.c: 29: return 0;
  3682  001682  0E00               	movlw	0
  3683  001684  6E11               	movwf	?_readSnTop+1,c
  3684  001686  0E00               	movlw	0
  3685  001688  6E10               	movwf	?_readSnTop,c
  3686  00168A  0012               	return	
  3687  00168C                     __end_of_readSnTop:
  3688                           	opt stack 0
  3689                           tblptru	equ	0xFF8
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           intcon3	equ	0xFF0
  3694                           postinc0	equ	0xFEE
  3695                           wreg	equ	0xFE8
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           fsr2h	equ	0xFDA
  3700                           fsr2l	equ	0xFD9
  3701                           status	equ	0xFD8
  3702                           
  3703 ;; *************** function _readSnSensor *****************
  3704 ;; Defined at:
  3705 ;;		line 39 in file "sensors.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  2   15[COMRAM] int 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;Total ram usage:        2 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    1
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_executingState
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text13
  3734  00168C                     __ptext13:
  3735                           	opt stack 0
  3736  00168C                     _readSnSensor:
  3737                           	opt stack 28
  3738                           
  3739                           ;sensors.c: 40: if(PORTCbits.RC0 == 1){
  3740                           
  3741                           ;incstack = 0
  3742  00168C  A082               	btfss	3970,0,c	;volatile
  3743  00168E  D005               	goto	l4026
  3744                           
  3745                           ;sensors.c: 41: return 1;
  3746  001690  0E00               	movlw	0
  3747  001692  6E11               	movwf	?_readSnSensor+1,c
  3748  001694  0E01               	movlw	1
  3749  001696  6E10               	movwf	?_readSnSensor,c
  3750  001698  0012               	return	
  3751  00169A                     l4026:
  3752                           
  3753                           ;sensors.c: 42: }
  3754                           ;sensors.c: 43: return 0;
  3755  00169A  0E00               	movlw	0
  3756  00169C  6E11               	movwf	?_readSnSensor+1,c
  3757  00169E  0E00               	movlw	0
  3758  0016A0  6E10               	movwf	?_readSnSensor,c
  3759  0016A2  0012               	return	
  3760  0016A4                     __end_of_readSnSensor:
  3761                           	opt stack 0
  3762                           tblptru	equ	0xFF8
  3763                           prodh	equ	0xFF4
  3764                           prodl	equ	0xFF3
  3765                           intcon	equ	0xFF2
  3766                           intcon3	equ	0xFF0
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function _readSnBot *****************
  3777 ;; Defined at:
  3778 ;;		line 11 in file "sensors.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  2   15[COMRAM] int 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;Total ram usage:        2 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    1
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_executingState
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text14
  3807  0016A4                     __ptext14:
  3808                           	opt stack 0
  3809  0016A4                     _readSnBot:
  3810                           	opt stack 28
  3811                           
  3812                           ;sensors.c: 12: if(PORTAbits.RA0 == 1){
  3813                           
  3814                           ;incstack = 0
  3815  0016A4  A080               	btfss	3968,0,c	;volatile
  3816  0016A6  D005               	goto	l3994
  3817                           
  3818                           ;sensors.c: 13: return 1;
  3819  0016A8  0E00               	movlw	0
  3820  0016AA  6E11               	movwf	?_readSnBot+1,c
  3821  0016AC  0E01               	movlw	1
  3822  0016AE  6E10               	movwf	?_readSnBot,c
  3823  0016B0  0012               	return	
  3824  0016B2                     l3994:
  3825                           
  3826                           ;sensors.c: 14: }
  3827                           ;sensors.c: 15: return 0;
  3828  0016B2  0E00               	movlw	0
  3829  0016B4  6E11               	movwf	?_readSnBot+1,c
  3830  0016B6  0E00               	movlw	0
  3831  0016B8  6E10               	movwf	?_readSnBot,c
  3832  0016BA  0012               	return	
  3833  0016BC                     __end_of_readSnBot:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           intcon3	equ	0xFF0
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _readAlTop *****************
  3850 ;; Defined at:
  3851 ;;		line 32 in file "sensors.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  2   15[COMRAM] int 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:        2 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_executingState
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text15
  3880  0016BC                     __ptext15:
  3881                           	opt stack 0
  3882  0016BC                     _readAlTop:
  3883                           	opt stack 28
  3884                           
  3885                           ;sensors.c: 33: if(PORTAbits.RA3 == 1){
  3886                           
  3887                           ;incstack = 0
  3888  0016BC  A680               	btfss	3968,3,c	;volatile
  3889  0016BE  D005               	goto	l3984
  3890                           
  3891                           ;sensors.c: 34: return 1;
  3892  0016C0  0E00               	movlw	0
  3893  0016C2  6E11               	movwf	?_readAlTop+1,c
  3894  0016C4  0E01               	movlw	1
  3895  0016C6  6E10               	movwf	?_readAlTop,c
  3896  0016C8  0012               	return	
  3897  0016CA                     l3984:
  3898                           
  3899                           ;sensors.c: 35: }
  3900                           ;sensors.c: 36: return 0;
  3901  0016CA  0E00               	movlw	0
  3902  0016CC  6E11               	movwf	?_readAlTop+1,c
  3903  0016CE  0E00               	movlw	0
  3904  0016D0  6E10               	movwf	?_readAlTop,c
  3905  0016D2  0012               	return	
  3906  0016D4                     __end_of_readAlTop:
  3907                           	opt stack 0
  3908                           tblptru	equ	0xFF8
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           intcon3	equ	0xFF0
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _readAlBot *****************
  3923 ;; Defined at:
  3924 ;;		line 18 in file "sensors.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2   15[COMRAM] int 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;Total ram usage:        2 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    1
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_executingState
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text16
  3953  0016D4                     __ptext16:
  3954                           	opt stack 0
  3955  0016D4                     _readAlBot:
  3956                           	opt stack 28
  3957                           
  3958                           ;sensors.c: 19: if(PORTAbits.RA1 == 1){
  3959                           
  3960                           ;incstack = 0
  3961  0016D4  A280               	btfss	3968,1,c	;volatile
  3962  0016D6  D005               	goto	l4004
  3963                           
  3964                           ;sensors.c: 20: return 1;
  3965  0016D8  0E00               	movlw	0
  3966  0016DA  6E11               	movwf	?_readAlBot+1,c
  3967  0016DC  0E01               	movlw	1
  3968  0016DE  6E10               	movwf	?_readAlBot,c
  3969  0016E0  0012               	return	
  3970  0016E2                     l4004:
  3971                           
  3972                           ;sensors.c: 21: }
  3973                           ;sensors.c: 22: return 0;
  3974  0016E2  0E00               	movlw	0
  3975  0016E4  6E11               	movwf	?_readAlBot+1,c
  3976  0016E6  0E00               	movlw	0
  3977  0016E8  6E10               	movwf	?_readAlBot,c
  3978  0016EA  0012               	return	
  3979  0016EC                     __end_of_readAlBot:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           intcon3	equ	0xFF0
  3986                           postinc0	equ	0xFEE
  3987                           wreg	equ	0xFE8
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function _get_timeDif *****************
  3996 ;; Defined at:
  3997 ;;		line 108 in file "main.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  start           2   23[COMRAM] int 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  start_s         2   40[COMRAM] int 
  4002 ;;  s_one           2   38[COMRAM] int 
  4003 ;;  s_ten           2   36[COMRAM] int 
  4004 ;;  m_one           2   34[COMRAM] int 
  4005 ;;  m_ten           2   32[COMRAM] int 
  4006 ;;  h_one           2   30[COMRAM] int 
  4007 ;;  h_ten           2   28[COMRAM] int 
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2   23[COMRAM] int 
  4010 ;; Registers used:
  4011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4017 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;Total ram usage:       23 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    4
  4024 ;; This function calls:
  4025 ;;		___wmul
  4026 ;;		_get_time
  4027 ;; This function is called by:
  4028 ;;		_executingState
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text17
  4033  000A1E                     __ptext17:
  4034                           	opt stack 0
  4035  000A1E                     _get_timeDif:
  4036                           	opt stack 25
  4037                           
  4038                           ;main.c: 109: get_time(time);
  4039                           
  4040                           ;incstack = 0
  4041  000A1E  0E4C               	movlw	low _time
  4042  000A20  6E13               	movwf	get_time@time,c
  4043  000A22  0E00               	movlw	high _time
  4044  000A24  6E14               	movwf	get_time@time+1,c
  4045  000A26  EC1D  F008         	call	_get_time	;wreg free
  4046                           
  4047                           ;main.c: 110: int h_ten = (time[2] & 0b11110000)>>4;
  4048  000A2A  EE20  F050         	lfsr	2,_time+4
  4049  000A2E  CFDE F01A          	movff	postinc2,??_get_timeDif
  4050  000A32  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4051  000A36  0E04               	movlw	4
  4052  000A38  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4053  000A3A                     u2885:
  4054  000A3A  341B               	rlcf	??_get_timeDif+1,w,c
  4055  000A3C  321B               	rrcf	??_get_timeDif+1,f,c
  4056  000A3E  321A               	rrcf	??_get_timeDif,f,c
  4057  000A40  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4058  000A42  D7FB               	goto	u2885
  4059  000A44  0E0F               	movlw	15
  4060  000A46  141A               	andwf	??_get_timeDif,w,c
  4061  000A48  6E1D               	movwf	get_timeDif@h_ten,c
  4062  000A4A  6A1E               	clrf	get_timeDif@h_ten+1,c
  4063                           
  4064                           ;main.c: 111: int h_one = (time[2] & 0b00001111);
  4065  000A4C  0E0F               	movlw	15
  4066  000A4E  1450               	andwf	_time+4,w,c
  4067  000A50  6E1F               	movwf	get_timeDif@h_one,c
  4068  000A52  6A20               	clrf	get_timeDif@h_one+1,c
  4069                           
  4070                           ;main.c: 112: int m_ten = (time[1] & 0b11110000)>>4;
  4071  000A54  EE20  F04E         	lfsr	2,_time+2
  4072  000A58  CFDE F01A          	movff	postinc2,??_get_timeDif
  4073  000A5C  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4074  000A60  0E04               	movlw	4
  4075  000A62  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4076  000A64                     u2895:
  4077  000A64  341B               	rlcf	??_get_timeDif+1,w,c
  4078  000A66  321B               	rrcf	??_get_timeDif+1,f,c
  4079  000A68  321A               	rrcf	??_get_timeDif,f,c
  4080  000A6A  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4081  000A6C  D7FB               	goto	u2895
  4082  000A6E  0E0F               	movlw	15
  4083  000A70  141A               	andwf	??_get_timeDif,w,c
  4084  000A72  6E21               	movwf	get_timeDif@m_ten,c
  4085  000A74  6A22               	clrf	get_timeDif@m_ten+1,c
  4086                           
  4087                           ;main.c: 113: int m_one = (time[1] & 0b00001111);
  4088  000A76  0E0F               	movlw	15
  4089  000A78  144E               	andwf	_time+2,w,c
  4090  000A7A  6E23               	movwf	get_timeDif@m_one,c
  4091  000A7C  6A24               	clrf	get_timeDif@m_one+1,c
  4092                           
  4093                           ;main.c: 114: int s_ten = (time[0] & 0b11110000)>>4;
  4094  000A7E  C04C  F01A         	movff	_time,??_get_timeDif
  4095  000A82  C04D  F01B         	movff	_time+1,??_get_timeDif+1
  4096  000A86  0E04               	movlw	4
  4097  000A88  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4098  000A8A                     u2905:
  4099  000A8A  341B               	rlcf	??_get_timeDif+1,w,c
  4100  000A8C  321B               	rrcf	??_get_timeDif+1,f,c
  4101  000A8E  321A               	rrcf	??_get_timeDif,f,c
  4102  000A90  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4103  000A92  D7FB               	goto	u2905
  4104  000A94  0E0F               	movlw	15
  4105  000A96  141A               	andwf	??_get_timeDif,w,c
  4106  000A98  6E25               	movwf	get_timeDif@s_ten,c
  4107  000A9A  6A26               	clrf	get_timeDif@s_ten+1,c
  4108                           
  4109                           ;main.c: 115: int s_one = (time[0] & 0b00001111);
  4110  000A9C  0E0F               	movlw	15
  4111  000A9E  144C               	andwf	_time,w,c
  4112  000AA0  6E27               	movwf	get_timeDif@s_one,c
  4113  000AA2  6A28               	clrf	get_timeDif@s_one+1,c
  4114                           
  4115                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4116  000AA4  C021  F010         	movff	get_timeDif@m_ten,___wmul@multiplier
  4117  000AA8  C022  F011         	movff	get_timeDif@m_ten+1,___wmul@multiplier+1
  4118  000AAC  0E00               	movlw	0
  4119  000AAE  6E13               	movwf	___wmul@multiplicand+1,c
  4120  000AB0  0E0A               	movlw	10
  4121  000AB2  6E12               	movwf	___wmul@multiplicand,c
  4122  000AB4  EC0A  F00B         	call	___wmul	;wreg free
  4123  000AB8  5023               	movf	get_timeDif@m_one,w,c
  4124  000ABA  2410               	addwf	?___wmul,w,c
  4125  000ABC  6E2B               	movwf	_get_timeDif$1730,c
  4126  000ABE  5024               	movf	get_timeDif@m_one+1,w,c
  4127  000AC0  2011               	addwfc	?___wmul+1,w,c
  4128  000AC2  6E2C               	movwf	_get_timeDif$1730+1,c
  4129                           
  4130                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4131  000AC4  C01D  F010         	movff	get_timeDif@h_ten,___wmul@multiplier
  4132  000AC8  C01E  F011         	movff	get_timeDif@h_ten+1,___wmul@multiplier+1
  4133  000ACC  0E00               	movlw	0
  4134  000ACE  6E13               	movwf	___wmul@multiplicand+1,c
  4135  000AD0  0E0A               	movlw	10
  4136  000AD2  6E12               	movwf	___wmul@multiplicand,c
  4137  000AD4  EC0A  F00B         	call	___wmul	;wreg free
  4138  000AD8  501F               	movf	get_timeDif@h_one,w,c
  4139  000ADA  2410               	addwf	?___wmul,w,c
  4140  000ADC  6E2D               	movwf	_get_timeDif$1731,c
  4141  000ADE  5020               	movf	get_timeDif@h_one+1,w,c
  4142  000AE0  2011               	addwfc	?___wmul+1,w,c
  4143  000AE2  6E2E               	movwf	_get_timeDif$1731+1,c
  4144                           
  4145                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4146  000AE4  C025  F010         	movff	get_timeDif@s_ten,___wmul@multiplier
  4147  000AE8  C026  F011         	movff	get_timeDif@s_ten+1,___wmul@multiplier+1
  4148  000AEC  0E00               	movlw	0
  4149  000AEE  6E13               	movwf	___wmul@multiplicand+1,c
  4150  000AF0  0E0A               	movlw	10
  4151  000AF2  6E12               	movwf	___wmul@multiplicand,c
  4152  000AF4  EC0A  F00B         	call	___wmul	;wreg free
  4153  000AF8  C010  F01A         	movff	?___wmul,??_get_timeDif
  4154  000AFC  C011  F01B         	movff	?___wmul+1,??_get_timeDif+1
  4155  000B00  C02D  F010         	movff	_get_timeDif$1731,___wmul@multiplier
  4156  000B04  C02E  F011         	movff	_get_timeDif$1731+1,___wmul@multiplier+1
  4157  000B08  0E0E               	movlw	14
  4158  000B0A  6E13               	movwf	___wmul@multiplicand+1,c
  4159  000B0C  0E10               	movlw	16
  4160  000B0E  6E12               	movwf	___wmul@multiplicand,c
  4161  000B10  EC0A  F00B         	call	___wmul	;wreg free
  4162  000B14  5010               	movf	?___wmul,w,c
  4163  000B16  261A               	addwf	??_get_timeDif,f,c
  4164  000B18  5011               	movf	?___wmul+1,w,c
  4165  000B1A  221B               	addwfc	??_get_timeDif+1,f,c
  4166  000B1C  C02B  F010         	movff	_get_timeDif$1730,___wmul@multiplier
  4167  000B20  C02C  F011         	movff	_get_timeDif$1730+1,___wmul@multiplier+1
  4168  000B24  0E00               	movlw	0
  4169  000B26  6E13               	movwf	___wmul@multiplicand+1,c
  4170  000B28  0E3C               	movlw	60
  4171  000B2A  6E12               	movwf	___wmul@multiplicand,c
  4172  000B2C  EC0A  F00B         	call	___wmul	;wreg free
  4173  000B30  5010               	movf	?___wmul,w,c
  4174  000B32  261A               	addwf	??_get_timeDif,f,c
  4175  000B34  5011               	movf	?___wmul+1,w,c
  4176  000B36  221B               	addwfc	??_get_timeDif+1,f,c
  4177  000B38  5027               	movf	get_timeDif@s_one,w,c
  4178  000B3A  241A               	addwf	??_get_timeDif,w,c
  4179  000B3C  6E29               	movwf	get_timeDif@start_s,c
  4180  000B3E  5028               	movf	get_timeDif@s_one+1,w,c
  4181  000B40  201B               	addwfc	??_get_timeDif+1,w,c
  4182  000B42  6E2A               	movwf	get_timeDif@start_s+1,c
  4183                           
  4184                           ;main.c: 118: return start_s - start;
  4185  000B44  C018  F01A         	movff	get_timeDif@start,??_get_timeDif
  4186  000B48  C019  F01B         	movff	get_timeDif@start+1,??_get_timeDif+1
  4187  000B4C  1E1A               	comf	??_get_timeDif,f,c
  4188  000B4E  1E1B               	comf	??_get_timeDif+1,f,c
  4189  000B50  4A1A               	infsnz	??_get_timeDif,f,c
  4190  000B52  2A1B               	incf	??_get_timeDif+1,f,c
  4191  000B54  5029               	movf	get_timeDif@start_s,w,c
  4192  000B56  241A               	addwf	??_get_timeDif,w,c
  4193  000B58  6E18               	movwf	?_get_timeDif,c
  4194  000B5A  502A               	movf	get_timeDif@start_s+1,w,c
  4195  000B5C  201B               	addwfc	??_get_timeDif+1,w,c
  4196  000B5E  6E19               	movwf	?_get_timeDif+1,c
  4197  000B60  0012               	return	
  4198  000B62                     __end_of_get_timeDif:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon3	equ	0xFF0
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           indf2	equ	0xFDF
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           fsr2h	equ	0xFDA
  4211                           fsr2l	equ	0xFD9
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _get_time *****************
  4215 ;; Defined at:
  4216 ;;		line 23 in file "RTC.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  time            2   18[COMRAM] PTR int 
  4219 ;;		 -> starttime(14), time(14), 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;  i               1   22[COMRAM] unsigned char 
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4231 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;Total ram usage:        5 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    3
  4238 ;; This function calls:
  4239 ;;		_I2C_Master_Read
  4240 ;;		_I2C_Master_Start
  4241 ;;		_I2C_Master_Stop
  4242 ;;		_I2C_Master_Write
  4243 ;; This function is called by:
  4244 ;;		_get_timeDif
  4245 ;;		_mainState
  4246 ;;		_executingState
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text18
  4251  00103A                     __ptext18:
  4252                           	opt stack 0
  4253  00103A                     _get_time:
  4254                           	opt stack 26
  4255                           
  4256                           ;RTC.c: 25: I2C_Master_Start();
  4257                           
  4258                           ;incstack = 0
  4259  00103A  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  4260                           
  4261                           ;RTC.c: 26: I2C_Master_Write(0b11010000);
  4262  00103E  0E00               	movlw	0
  4263  001040  6E12               	movwf	I2C_Master_Write@d+1,c
  4264  001042  0ED0               	movlw	208
  4265  001044  6E11               	movwf	I2C_Master_Write@d,c
  4266  001046  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  4267                           
  4268                           ;RTC.c: 27: I2C_Master_Write(0x00);
  4269  00104A  0E00               	movlw	0
  4270  00104C  6E12               	movwf	I2C_Master_Write@d+1,c
  4271  00104E  0E00               	movlw	0
  4272  001050  6E11               	movwf	I2C_Master_Write@d,c
  4273  001052  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  4274                           
  4275                           ;RTC.c: 28: I2C_Master_Stop();
  4276  001056  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  4277                           
  4278                           ;RTC.c: 31: I2C_Master_Start();
  4279  00105A  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  4280                           
  4281                           ;RTC.c: 32: I2C_Master_Write(0b11010001);
  4282  00105E  0E00               	movlw	0
  4283  001060  6E12               	movwf	I2C_Master_Write@d+1,c
  4284  001062  0ED1               	movlw	209
  4285  001064  6E11               	movwf	I2C_Master_Write@d,c
  4286  001066  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  4287                           
  4288                           ;RTC.c: 33: for (unsigned char i = 0; i < 0x06; i++) {
  4289  00106A  0E00               	movlw	0
  4290  00106C  6E17               	movwf	get_time@i,c
  4291  00106E                     l3776:
  4292  00106E  0E05               	movlw	5
  4293  001070  6417               	cpfsgt	get_time@i,c
  4294  001072  D001               	goto	l3780
  4295  001074  D013               	goto	l3786
  4296  001076                     l3780:
  4297                           
  4298                           ;RTC.c: 34: time[i] = I2C_Master_Read(1);
  4299  001076  0E01               	movlw	1
  4300  001078  ECE4  F00A         	call	_I2C_Master_Read
  4301  00107C  6E15               	movwf	??_get_time& (0+255),c
  4302  00107E  6A16               	clrf	(??_get_time+1)& (0+255),c
  4303  001080  5017               	movf	get_time@i,w,c
  4304  001082  0D02               	mullw	2
  4305  001084  50F3               	movf	prodl,w,c
  4306  001086  2413               	addwf	get_time@time,w,c
  4307  001088  6ED9               	movwf	fsr2l,c
  4308  00108A  50F4               	movf	prodh,w,c
  4309  00108C  2014               	addwfc	get_time@time+1,w,c
  4310  00108E  6EDA               	movwf	fsr2h,c
  4311  001090  C015  FFDE         	movff	??_get_time,postinc2
  4312  001094  C016  FFDD         	movff	??_get_time+1,postdec2
  4313  001098  2A17               	incf	get_time@i,f,c
  4314  00109A  D7E9               	goto	l3776
  4315  00109C                     l3786:
  4316                           
  4317                           ;RTC.c: 35: }
  4318                           ;RTC.c: 36: time[6] = I2C_Master_Read(0);
  4319  00109C  0E00               	movlw	0
  4320  00109E  ECE4  F00A         	call	_I2C_Master_Read
  4321  0010A2  6E15               	movwf	??_get_time& (0+255),c
  4322  0010A4  6A16               	clrf	(??_get_time+1)& (0+255),c
  4323  0010A6  EE20 F00C          	lfsr	2,12
  4324  0010AA  5013               	movf	get_time@time,w,c
  4325  0010AC  26D9               	addwf	fsr2l,f,c
  4326  0010AE  5014               	movf	get_time@time+1,w,c
  4327  0010B0  22DA               	addwfc	fsr2h,f,c
  4328  0010B2  C015  FFDE         	movff	??_get_time,postinc2
  4329  0010B6  C016  FFDD         	movff	??_get_time+1,postdec2
  4330                           
  4331                           ;RTC.c: 37: I2C_Master_Stop();
  4332  0010BA  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  4333  0010BE  0012               	return		;funcret
  4334  0010C0                     __end_of_get_time:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           intcon	equ	0xFF2
  4340                           intcon3	equ	0xFF0
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           indf2	equ	0xFDF
  4344                           postinc2	equ	0xFDE
  4345                           postdec2	equ	0xFDD
  4346                           fsr2h	equ	0xFDA
  4347                           fsr2l	equ	0xFD9
  4348                           status	equ	0xFD8
  4349                           
  4350 ;; *************** function _I2C_Master_Write *****************
  4351 ;; Defined at:
  4352 ;;		line 47 in file "I2C.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  d               2   16[COMRAM] unsigned int 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;Total ram usage:        2 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    2
  4373 ;; This function calls:
  4374 ;;		_I2C_Master_Wait
  4375 ;; This function is called by:
  4376 ;;		_fixLCD
  4377 ;;		_get_time
  4378 ;;		_set_time
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text19
  4383  00173A                     __ptext19:
  4384                           	opt stack 0
  4385  00173A                     _I2C_Master_Write:
  4386                           	opt stack 26
  4387                           
  4388                           ;I2C.c: 49: I2C_Master_Wait();
  4389                           
  4390                           ;incstack = 0
  4391  00173A  EC81  F00B         	call	_I2C_Master_Wait	;wreg free
  4392                           
  4393                           ;I2C.c: 50: SSPBUF = d;
  4394  00173E  C011  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4395  001742  0012               	return		;funcret
  4396  001744                     __end_of_I2C_Master_Write:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           intcon3	equ	0xFF0
  4403                           postinc0	equ	0xFEE
  4404                           wreg	equ	0xFE8
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _I2C_Master_Stop *****************
  4413 ;; Defined at:
  4414 ;;		line 41 in file "I2C.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      void 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, status,0, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;Total ram usage:        0 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    2
  4435 ;; This function calls:
  4436 ;;		_I2C_Master_Wait
  4437 ;; This function is called by:
  4438 ;;		_fixLCD
  4439 ;;		_get_time
  4440 ;;		_set_time
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text20
  4445  001744                     __ptext20:
  4446                           	opt stack 0
  4447  001744                     _I2C_Master_Stop:
  4448                           	opt stack 26
  4449                           
  4450                           ;I2C.c: 43: I2C_Master_Wait();
  4451                           
  4452                           ;incstack = 0
  4453  001744  EC81  F00B         	call	_I2C_Master_Wait	;wreg free
  4454                           
  4455                           ;I2C.c: 44: PEN = 1;
  4456  001748  84C5               	bsf	4037,2,c	;volatile
  4457  00174A  0012               	return		;funcret
  4458  00174C                     __end_of_I2C_Master_Stop:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           intcon	equ	0xFF2
  4464                           intcon3	equ	0xFF0
  4465                           postinc0	equ	0xFEE
  4466                           wreg	equ	0xFE8
  4467                           indf2	equ	0xFDF
  4468                           postinc2	equ	0xFDE
  4469                           postdec2	equ	0xFDD
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _I2C_Master_Start *****************
  4475 ;; Defined at:
  4476 ;;		line 29 in file "I2C.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    2
  4497 ;; This function calls:
  4498 ;;		_I2C_Master_Wait
  4499 ;; This function is called by:
  4500 ;;		_fixLCD
  4501 ;;		_get_time
  4502 ;;		_set_time
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text21
  4507  00174C                     __ptext21:
  4508                           	opt stack 0
  4509  00174C                     _I2C_Master_Start:
  4510                           	opt stack 26
  4511                           
  4512                           ;I2C.c: 31: I2C_Master_Wait();
  4513                           
  4514                           ;incstack = 0
  4515  00174C  EC81  F00B         	call	_I2C_Master_Wait	;wreg free
  4516                           
  4517                           ;I2C.c: 32: SEN = 1;
  4518  001750  80C5               	bsf	4037,0,c	;volatile
  4519  001752  0012               	return		;funcret
  4520  001754                     __end_of_I2C_Master_Start:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon	equ	0xFF2
  4526                           intcon3	equ	0xFF0
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           indf2	equ	0xFDF
  4530                           postinc2	equ	0xFDE
  4531                           postdec2	equ	0xFDD
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function _I2C_Master_Read *****************
  4537 ;; Defined at:
  4538 ;;		line 53 in file "I2C.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  a               1    wreg     unsigned char 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  a               1   16[COMRAM] unsigned char 
  4543 ;;  temp            1   17[COMRAM] unsigned char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      unsigned char 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, status,0, cstack
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;Total ram usage:        2 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    2
  4560 ;; This function calls:
  4561 ;;		_I2C_Master_Wait
  4562 ;; This function is called by:
  4563 ;;		_fixLCD
  4564 ;;		_get_time
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           	psect	text22
  4569  0015C8                     __ptext22:
  4570                           	opt stack 0
  4571  0015C8                     _I2C_Master_Read:
  4572                           	opt stack 26
  4573                           
  4574                           ;incstack = 0
  4575                           ;I2C_Master_Read@a stored from wreg
  4576  0015C8  6E11               	movwf	I2C_Master_Read@a,c
  4577                           
  4578                           ;I2C.c: 55: unsigned char temp;
  4579                           ;I2C.c: 56: I2C_Master_Wait();
  4580  0015CA  EC81  F00B         	call	_I2C_Master_Wait	;wreg free
  4581                           
  4582                           ;I2C.c: 57: RCEN = 1;
  4583  0015CE  86C5               	bsf	4037,3,c	;volatile
  4584                           
  4585                           ;I2C.c: 58: I2C_Master_Wait();
  4586  0015D0  EC81  F00B         	call	_I2C_Master_Wait	;wreg free
  4587                           
  4588                           ;I2C.c: 59: temp = SSPBUF;
  4589  0015D4  CFC9 F012          	movff	4041,I2C_Master_Read@temp	;volatile
  4590                           
  4591                           ;I2C.c: 60: I2C_Master_Wait();
  4592  0015D8  EC81  F00B         	call	_I2C_Master_Wait	;wreg free
  4593                           
  4594                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4595  0015DC  5011               	movf	I2C_Master_Read@a,w,c
  4596  0015DE  A4D8               	btfss	status,2,c
  4597  0015E0  D002               	goto	u2460
  4598  0015E2  8AC5               	bsf	4037,5,c	;volatile
  4599  0015E4  D001               	goto	l3558
  4600  0015E6                     u2460:
  4601  0015E6  9AC5               	bcf	4037,5,c	;volatile
  4602  0015E8                     l3558:
  4603                           
  4604                           ;I2C.c: 62: ACKEN = 1;
  4605  0015E8  88C5               	bsf	4037,4,c	;volatile
  4606                           
  4607                           ;I2C.c: 63: return temp;
  4608  0015EA  5012               	movf	I2C_Master_Read@temp,w,c
  4609  0015EC  0012               	return	
  4610  0015EE                     __end_of_I2C_Master_Read:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           intcon3	equ	0xFF0
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _I2C_Master_Wait *****************
  4627 ;; Defined at:
  4628 ;;		line 24 in file "I2C.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        1 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    1
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_I2C_Master_Start
  4653 ;;		_I2C_Master_Stop
  4654 ;;		_I2C_Master_Write
  4655 ;;		_I2C_Master_Read
  4656 ;;		_I2C_Master_RepeatedStart
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text23
  4661  001702                     __ptext23:
  4662                           	opt stack 0
  4663  001702                     _I2C_Master_Wait:
  4664                           	opt stack 26
  4665  001702                     l34:
  4666  001702  B4C7               	btfsc	4039,2,c	;volatile
  4667  001704  D7FE               	goto	l34
  4668  001706  CFC5 F010          	movff	4037,??_I2C_Master_Wait	;volatile
  4669  00170A  0E1F               	movlw	31
  4670  00170C  1610               	andwf	??_I2C_Master_Wait,f,c
  4671  00170E  B4D8               	btfsc	status,2,c
  4672  001710  0012               	return	
  4673  001712  D7F7               	goto	l34
  4674  001714                     __end_of_I2C_Master_Wait:
  4675                           	opt stack 0
  4676                           tblptru	equ	0xFF8
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           intcon	equ	0xFF2
  4680                           intcon3	equ	0xFF0
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           indf2	equ	0xFDF
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _eeprom_LogResult *****************
  4691 ;; Defined at:
  4692 ;;		line 82 in file "eeprom.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  data            2   18[COMRAM] PTR unsigned char 
  4695 ;;		 -> executingState@res(8), 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  i               2   21[COMRAM] int 
  4698 ;;  address         1   20[COMRAM] unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      void 
  4701 ;; Registers used:
  4702 ;;		wreg, status,2, status,0, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;Total ram usage:        5 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    3
  4715 ;; This function calls:
  4716 ;;		_eeprom_WriteByte
  4717 ;;		_newestAddress
  4718 ;; This function is called by:
  4719 ;;		_executingState
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text24
  4724  00135C                     __ptext24:
  4725                           	opt stack 0
  4726  00135C                     _eeprom_LogResult:
  4727                           	opt stack 26
  4728                           
  4729                           ;eeprom.c: 83: uint8_t address = newestAddress() + 5;
  4730                           
  4731                           ;incstack = 0
  4732  00135C  EC8A  F00B         	call	_newestAddress	;wreg free
  4733  001360  0F05               	addlw	5
  4734  001362  6E15               	movwf	eeprom_LogResult@address,c
  4735                           
  4736                           ;eeprom.c: 84: eeprom_WriteByte(0x0000, address);
  4737  001364  0E00               	movlw	0
  4738  001366  6E11               	movwf	eeprom_WriteByte@address+1,c
  4739  001368  0E00               	movlw	0
  4740  00136A  6E10               	movwf	eeprom_WriteByte@address,c
  4741  00136C  C015  F012         	movff	eeprom_LogResult@address,eeprom_WriteByte@data
  4742  001370  ECF7  F00A         	call	_eeprom_WriteByte	;wreg free
  4743                           
  4744                           ;eeprom.c: 85: for(int i = 0; i < 5; i++){
  4745  001374  0E00               	movlw	0
  4746  001376  6E17               	movwf	eeprom_LogResult@i+1,c
  4747  001378  0E00               	movlw	0
  4748  00137A  6E16               	movwf	eeprom_LogResult@i,c
  4749  00137C  BE17               	btfsc	eeprom_LogResult@i+1,7,c
  4750  00137E  D006               	goto	l4060
  4751  001380  5017               	movf	eeprom_LogResult@i+1,w,c
  4752  001382  E111               	bnz	l345
  4753  001384  0E05               	movlw	5
  4754  001386  5C16               	subwf	eeprom_LogResult@i,w,c
  4755  001388  B0D8               	btfsc	status,0,c
  4756  00138A  0012               	return	
  4757  00138C                     l4060:
  4758                           
  4759                           ;eeprom.c: 86: eeprom_WriteByte(address + i, 0xFF);
  4760  00138C  5015               	movf	eeprom_LogResult@address,w,c
  4761  00138E  2416               	addwf	eeprom_LogResult@i,w,c
  4762  001390  6E10               	movwf	eeprom_WriteByte@address,c
  4763  001392  0E00               	movlw	0
  4764  001394  2017               	addwfc	eeprom_LogResult@i+1,w,c
  4765  001396  6E11               	movwf	eeprom_WriteByte@address+1,c
  4766  001398  0EFF               	movlw	255
  4767  00139A  6E12               	movwf	eeprom_WriteByte@data,c
  4768  00139C  ECF7  F00A         	call	_eeprom_WriteByte	;wreg free
  4769  0013A0  4A16               	infsnz	eeprom_LogResult@i,f,c
  4770  0013A2  2A17               	incf	eeprom_LogResult@i+1,f,c
  4771  0013A4  D7EB               	goto	L5
  4772  0013A6                     l345:
  4773  0013A6  0012               	return		;funcret
  4774  0013A8                     __end_of_eeprom_LogResult:
  4775                           	opt stack 0
  4776                           tblptru	equ	0xFF8
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon3	equ	0xFF0
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function _dispenseSnCan *****************
  4791 ;; Defined at:
  4792 ;;		line 235 in file "servos.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;Total ram usage:        2 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    2
  4813 ;; This function calls:
  4814 ;;		_servoRotate0
  4815 ;;		_servoRotate90
  4816 ;; This function is called by:
  4817 ;;		_executingState
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text25
  4822  001542                     __ptext25:
  4823                           	opt stack 0
  4824  001542                     _dispenseSnCan:
  4825                           	opt stack 27
  4826                           
  4827                           ;servos.c: 236: servoRotate90(0);
  4828                           
  4829                           ;incstack = 0
  4830  001542  0E00               	movlw	0
  4831  001544  6E11               	movwf	servoRotate90@servo+1,c
  4832  001546  0E00               	movlw	0
  4833  001548  6E10               	movwf	servoRotate90@servo,c
  4834  00154A  EC4D  F006         	call	_servoRotate90	;wreg free
  4835                           
  4836                           ;servos.c: 237: _delay((unsigned long)((800)*(10000000/4000.0)));
  4837  00154E  0E0B               	movlw	11
  4838  001550  6E17               	movwf	(??_dispenseSnCan+1)& (0+255),c
  4839  001552  0E26               	movlw	38
  4840  001554  6E16               	movwf	??_dispenseSnCan& (0+255),c
  4841  001556  0E5E               	movlw	94
  4842  001558                     u3577:
  4843  001558  2EE8               	decfsz	wreg,f,c
  4844  00155A  D7FE               	bra	u3577
  4845  00155C  2E16               	decfsz	??_dispenseSnCan& (0+255),f,c
  4846  00155E  D7FC               	bra	u3577
  4847  001560  2E17               	decfsz	(??_dispenseSnCan+1)& (0+255),f,c
  4848  001562  D7FA               	bra	u3577
  4849                           
  4850                           ;servos.c: 238: servoRotate0(0);
  4851  001564  0E00               	movlw	0
  4852  001566  6E11               	movwf	servoRotate0@servo+1,c
  4853  001568  0E00               	movlw	0
  4854  00156A  6E10               	movwf	servoRotate0@servo,c
  4855  00156C  ECB0  F006         	call	_servoRotate0	;wreg free
  4856  001570  0012               	return		;funcret
  4857  001572                     __end_of_dispenseSnCan:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           prodh	equ	0xFF4
  4861                           prodl	equ	0xFF3
  4862                           intcon	equ	0xFF2
  4863                           intcon3	equ	0xFF0
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           indf2	equ	0xFDF
  4867                           postinc2	equ	0xFDE
  4868                           postdec2	equ	0xFDD
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _dispenseAlCan *****************
  4874 ;; Defined at:
  4875 ;;		line 229 in file "servos.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      void 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;Total ram usage:        2 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    2
  4896 ;; This function calls:
  4897 ;;		_servoRotate0
  4898 ;;		_servoRotate90
  4899 ;; This function is called by:
  4900 ;;		_executingState
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text26
  4905  001572                     __ptext26:
  4906                           	opt stack 0
  4907  001572                     _dispenseAlCan:
  4908                           	opt stack 27
  4909                           
  4910                           ;servos.c: 230: servoRotate90(1);
  4911                           
  4912                           ;incstack = 0
  4913  001572  0E00               	movlw	0
  4914  001574  6E11               	movwf	servoRotate90@servo+1,c
  4915  001576  0E01               	movlw	1
  4916  001578  6E10               	movwf	servoRotate90@servo,c
  4917  00157A  EC4D  F006         	call	_servoRotate90	;wreg free
  4918                           
  4919                           ;servos.c: 231: _delay((unsigned long)((800)*(10000000/4000.0)));
  4920  00157E  0E0B               	movlw	11
  4921  001580  6E17               	movwf	(??_dispenseAlCan+1)& (0+255),c
  4922  001582  0E26               	movlw	38
  4923  001584  6E16               	movwf	??_dispenseAlCan& (0+255),c
  4924  001586  0E5E               	movlw	94
  4925  001588                     u3587:
  4926  001588  2EE8               	decfsz	wreg,f,c
  4927  00158A  D7FE               	bra	u3587
  4928  00158C  2E16               	decfsz	??_dispenseAlCan& (0+255),f,c
  4929  00158E  D7FC               	bra	u3587
  4930  001590  2E17               	decfsz	(??_dispenseAlCan+1)& (0+255),f,c
  4931  001592  D7FA               	bra	u3587
  4932                           
  4933                           ;servos.c: 232: servoRotate0(1);
  4934  001594  0E00               	movlw	0
  4935  001596  6E11               	movwf	servoRotate0@servo+1,c
  4936  001598  0E01               	movlw	1
  4937  00159A  6E10               	movwf	servoRotate0@servo,c
  4938  00159C  ECB0  F006         	call	_servoRotate0	;wreg free
  4939  0015A0  0012               	return		;funcret
  4940  0015A2                     __end_of_dispenseAlCan:
  4941                           	opt stack 0
  4942                           tblptru	equ	0xFF8
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon	equ	0xFF2
  4946                           intcon3	equ	0xFF0
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           indf2	equ	0xFDF
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           fsr2h	equ	0xFDA
  4953                           fsr2l	equ	0xFD9
  4954                           status	equ	0xFD8
  4955                           
  4956 ;; *************** function _servoRotate90 *****************
  4957 ;; Defined at:
  4958 ;;		line 126 in file "servos.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  servo           2   15[COMRAM] int 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  i               2   19[COMRAM] unsigned int 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      void 
  4965 ;; Registers used:
  4966 ;;		wreg, status,2, status,0
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4972 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;Total ram usage:        6 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    1
  4979 ;; This function calls:
  4980 ;;		Nothing
  4981 ;; This function is called by:
  4982 ;;		_executingState
  4983 ;;		_dispenseAlCan
  4984 ;;		_dispenseSnCan
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text27
  4989  000C9A                     __ptext27:
  4990                           	opt stack 0
  4991  000C9A                     _servoRotate90:
  4992                           	opt stack 28
  4993                           
  4994                           ;servos.c: 128: unsigned int i;
  4995                           ;servos.c: 129: for (i = 0; i < 30; i++) {
  4996                           
  4997                           ;incstack = 0
  4998  000C9A  0E00               	movlw	0
  4999  000C9C  6E15               	movwf	servoRotate90@i+1,c
  5000  000C9E  0E00               	movlw	0
  5001  000CA0  6E14               	movwf	servoRotate90@i,c
  5002  000CA2                     l3820:
  5003  000CA2  5015               	movf	servoRotate90@i+1,w,c
  5004  000CA4  E15C               	bnz	l476
  5005  000CA6  0E1E               	movlw	30
  5006  000CA8  5C14               	subwf	servoRotate90@i,w,c
  5007  000CAA  B0D8               	btfsc	status,0,c
  5008  000CAC  0012               	return	
  5009  000CAE  D00A               	goto	l3826
  5010  000CB0                     l463:
  5011                           
  5012                           ;servos.c: 132: LATAbits.LATA4 = 1;
  5013  000CB0  8889               	bsf	3977,4,c	;volatile
  5014                           
  5015                           ;servos.c: 133: break;
  5016  000CB2  D020               	goto	l3828
  5017  000CB4                     l465:
  5018                           
  5019                           ;servos.c: 135: LATAbits.LATA5 = 1;
  5020  000CB4  8A89               	bsf	3977,5,c	;volatile
  5021                           
  5022                           ;servos.c: 136: break;
  5023  000CB6  D01E               	goto	l3828
  5024  000CB8                     l466:
  5025                           
  5026                           ;servos.c: 138: LATEbits.LATE0 = 1;
  5027  000CB8  808D               	bsf	3981,0,c	;volatile
  5028                           
  5029                           ;servos.c: 139: break;
  5030  000CBA  D01C               	goto	l3828
  5031  000CBC                     l467:
  5032                           
  5033                           ;servos.c: 141: LATEbits.LATE1 = 1;
  5034  000CBC  828D               	bsf	3981,1,c	;volatile
  5035                           
  5036                           ;servos.c: 142: break;
  5037  000CBE  D01A               	goto	l3828
  5038  000CC0                     l468:
  5039                           
  5040                           ;servos.c: 144: LATBbits.LATB2 = 1;
  5041  000CC0  848A               	bsf	3978,2,c	;volatile
  5042                           
  5043                           ;servos.c: 146: }
  5044                           
  5045                           ;servos.c: 145: break;
  5046  000CC2  D018               	goto	l3828
  5047  000CC4                     l3826:
  5048  000CC4  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5049  000CC8  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5050                           
  5051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5052                           ; Switch size 1, requested type "space"
  5053                           ; Number of cases is 1, Range of values is 0 to 0
  5054                           ; switch strategies available:
  5055                           ; Name         Instructions Cycles
  5056                           ; simple_byte            4     3 (average)
  5057                           ;	Chosen strategy is simple_byte
  5058  000CCC  5013               	movf	??_servoRotate90+1,w,c
  5059  000CCE  0A00               	xorlw	0	; case 0
  5060  000CD0  A4D8               	btfss	status,2,c
  5061  000CD2  D010               	goto	l3828
  5062                           
  5063                           ; Switch size 1, requested type "space"
  5064                           ; Number of cases is 5, Range of values is 0 to 4
  5065                           ; switch strategies available:
  5066                           ; Name         Instructions Cycles
  5067                           ; simple_byte           16     9 (average)
  5068                           ;	Chosen strategy is simple_byte
  5069  000CD4  5012               	movf	??_servoRotate90,w,c
  5070  000CD6  0A00               	xorlw	0	; case 0
  5071  000CD8  B4D8               	btfsc	status,2,c
  5072  000CDA  D7EA               	goto	l463
  5073  000CDC  0A01               	xorlw	1	; case 1
  5074  000CDE  B4D8               	btfsc	status,2,c
  5075  000CE0  D7E9               	goto	l465
  5076  000CE2  0A03               	xorlw	3	; case 2
  5077  000CE4  B4D8               	btfsc	status,2,c
  5078  000CE6  D7E8               	goto	l466
  5079  000CE8  0A01               	xorlw	1	; case 3
  5080  000CEA  B4D8               	btfsc	status,2,c
  5081  000CEC  D7E7               	goto	l467
  5082  000CEE  0A07               	xorlw	7	; case 4
  5083  000CF0  B4D8               	btfsc	status,2,c
  5084  000CF2  D7E6               	goto	l468
  5085  000CF4                     l3828:
  5086                           
  5087                           ;servos.c: 147: _delay((unsigned long)((2400)*(10000000/4000000.0)));
  5088  000CF4  0E08               	movlw	8
  5089  000CF6  6E12               	movwf	??_servoRotate90& (0+255),c
  5090  000CF8  0ECA               	movlw	202
  5091  000CFA                     u3597:
  5092  000CFA  2EE8               	decfsz	wreg,f,c
  5093  000CFC  D7FE               	bra	u3597
  5094  000CFE  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5095  000D00  D7FC               	bra	u3597
  5096                           
  5097                           ;servos.c: 148: switch (servo) {
  5098  000D02  D00A               	goto	l3832
  5099  000D04                     l470:
  5100                           
  5101                           ;servos.c: 150: LATAbits.LATA4 = 0;
  5102  000D04  9889               	bcf	3977,4,c	;volatile
  5103                           
  5104                           ;servos.c: 151: break;
  5105  000D06  D020               	goto	l3834
  5106  000D08                     l472:
  5107                           
  5108                           ;servos.c: 153: LATAbits.LATA5 = 0;
  5109  000D08  9A89               	bcf	3977,5,c	;volatile
  5110                           
  5111                           ;servos.c: 154: break;
  5112  000D0A  D01E               	goto	l3834
  5113  000D0C                     l473:
  5114                           
  5115                           ;servos.c: 156: LATEbits.LATE0 = 0;
  5116  000D0C  908D               	bcf	3981,0,c	;volatile
  5117                           
  5118                           ;servos.c: 157: break;
  5119  000D0E  D01C               	goto	l3834
  5120  000D10                     l474:
  5121                           
  5122                           ;servos.c: 159: LATEbits.LATE1 = 0;
  5123  000D10  928D               	bcf	3981,1,c	;volatile
  5124                           
  5125                           ;servos.c: 160: break;
  5126  000D12  D01A               	goto	l3834
  5127  000D14                     l475:
  5128                           
  5129                           ;servos.c: 162: LATBbits.LATB2 = 0;
  5130  000D14  948A               	bcf	3978,2,c	;volatile
  5131                           
  5132                           ;servos.c: 164: }
  5133                           
  5134                           ;servos.c: 163: break;
  5135  000D16  D018               	goto	l3834
  5136  000D18                     l3832:
  5137  000D18  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5138  000D1C  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5139                           
  5140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5141                           ; Switch size 1, requested type "space"
  5142                           ; Number of cases is 1, Range of values is 0 to 0
  5143                           ; switch strategies available:
  5144                           ; Name         Instructions Cycles
  5145                           ; simple_byte            4     3 (average)
  5146                           ;	Chosen strategy is simple_byte
  5147  000D20  5013               	movf	??_servoRotate90+1,w,c
  5148  000D22  0A00               	xorlw	0	; case 0
  5149  000D24  A4D8               	btfss	status,2,c
  5150  000D26  D010               	goto	l3834
  5151                           
  5152                           ; Switch size 1, requested type "space"
  5153                           ; Number of cases is 5, Range of values is 0 to 4
  5154                           ; switch strategies available:
  5155                           ; Name         Instructions Cycles
  5156                           ; simple_byte           16     9 (average)
  5157                           ;	Chosen strategy is simple_byte
  5158  000D28  5012               	movf	??_servoRotate90,w,c
  5159  000D2A  0A00               	xorlw	0	; case 0
  5160  000D2C  B4D8               	btfsc	status,2,c
  5161  000D2E  D7EA               	goto	l470
  5162  000D30  0A01               	xorlw	1	; case 1
  5163  000D32  B4D8               	btfsc	status,2,c
  5164  000D34  D7E9               	goto	l472
  5165  000D36  0A03               	xorlw	3	; case 2
  5166  000D38  B4D8               	btfsc	status,2,c
  5167  000D3A  D7E8               	goto	l473
  5168  000D3C  0A01               	xorlw	1	; case 3
  5169  000D3E  B4D8               	btfsc	status,2,c
  5170  000D40  D7E7               	goto	l474
  5171  000D42  0A07               	xorlw	7	; case 4
  5172  000D44  B4D8               	btfsc	status,2,c
  5173  000D46  D7E6               	goto	l475
  5174  000D48                     l3834:
  5175                           
  5176                           ;servos.c: 165: _delay((unsigned long)((17600)*(10000000/4000000.0)));
  5177  000D48  0E3A               	movlw	58
  5178  000D4A  6E12               	movwf	??_servoRotate90& (0+255),c
  5179  000D4C  0E23               	movlw	35
  5180  000D4E                     u3607:
  5181  000D4E  2EE8               	decfsz	wreg,f,c
  5182  000D50  D7FE               	bra	u3607
  5183  000D52  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5184  000D54  D7FC               	bra	u3607
  5185  000D56  F000               	nop	
  5186  000D58  4A14               	infsnz	servoRotate90@i,f,c
  5187  000D5A  2A15               	incf	servoRotate90@i+1,f,c
  5188  000D5C  D7A2               	goto	l3820
  5189  000D5E                     l476:
  5190  000D5E  0012               	return		;funcret
  5191  000D60                     __end_of_servoRotate90:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           intcon3	equ	0xFF0
  5198                           postinc0	equ	0xFEE
  5199                           wreg	equ	0xFE8
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _servoRotate0 *****************
  5208 ;; Defined at:
  5209 ;;		line 83 in file "servos.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  servo           2   15[COMRAM] int 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  i               2   19[COMRAM] unsigned int 
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      void 
  5216 ;; Registers used:
  5217 ;;		wreg, status,2, status,0
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;Total ram usage:        6 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    1
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_executingState
  5234 ;;		_dispenseAlCan
  5235 ;;		_dispenseSnCan
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text28
  5240  000D60                     __ptext28:
  5241                           	opt stack 0
  5242  000D60                     _servoRotate0:
  5243                           	opt stack 28
  5244                           
  5245                           ;servos.c: 85: unsigned int i;
  5246                           ;servos.c: 86: for (i = 0; i < 30; i++) {
  5247                           
  5248                           ;incstack = 0
  5249  000D60  0E00               	movlw	0
  5250  000D62  6E15               	movwf	servoRotate0@i+1,c
  5251  000D64  0E00               	movlw	0
  5252  000D66  6E14               	movwf	servoRotate0@i,c
  5253  000D68                     l3792:
  5254  000D68  5015               	movf	servoRotate0@i+1,w,c
  5255  000D6A  E15C               	bnz	l457
  5256  000D6C  0E1E               	movlw	30
  5257  000D6E  5C14               	subwf	servoRotate0@i,w,c
  5258  000D70  B0D8               	btfsc	status,0,c
  5259  000D72  0012               	return	
  5260  000D74  D00A               	goto	l3798
  5261  000D76                     l444:
  5262                           
  5263                           ;servos.c: 89: LATAbits.LATA4 = 1;
  5264  000D76  8889               	bsf	3977,4,c	;volatile
  5265                           
  5266                           ;servos.c: 90: break;
  5267  000D78  D020               	goto	l3800
  5268  000D7A                     l446:
  5269                           
  5270                           ;servos.c: 92: LATAbits.LATA5 = 1;
  5271  000D7A  8A89               	bsf	3977,5,c	;volatile
  5272                           
  5273                           ;servos.c: 93: break;
  5274  000D7C  D01E               	goto	l3800
  5275  000D7E                     l447:
  5276                           
  5277                           ;servos.c: 95: LATEbits.LATE0 = 1;
  5278  000D7E  808D               	bsf	3981,0,c	;volatile
  5279                           
  5280                           ;servos.c: 96: break;
  5281  000D80  D01C               	goto	l3800
  5282  000D82                     l448:
  5283                           
  5284                           ;servos.c: 98: LATEbits.LATE1 = 1;
  5285  000D82  828D               	bsf	3981,1,c	;volatile
  5286                           
  5287                           ;servos.c: 99: break;
  5288  000D84  D01A               	goto	l3800
  5289  000D86                     l449:
  5290                           
  5291                           ;servos.c: 101: LATBbits.LATB2 = 1;
  5292  000D86  848A               	bsf	3978,2,c	;volatile
  5293                           
  5294                           ;servos.c: 103: }
  5295                           
  5296                           ;servos.c: 102: break;
  5297  000D88  D018               	goto	l3800
  5298  000D8A                     l3798:
  5299  000D8A  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  5300  000D8E  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  5301                           
  5302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5303                           ; Switch size 1, requested type "space"
  5304                           ; Number of cases is 1, Range of values is 0 to 0
  5305                           ; switch strategies available:
  5306                           ; Name         Instructions Cycles
  5307                           ; simple_byte            4     3 (average)
  5308                           ;	Chosen strategy is simple_byte
  5309  000D92  5013               	movf	??_servoRotate0+1,w,c
  5310  000D94  0A00               	xorlw	0	; case 0
  5311  000D96  A4D8               	btfss	status,2,c
  5312  000D98  D010               	goto	l3800
  5313                           
  5314                           ; Switch size 1, requested type "space"
  5315                           ; Number of cases is 5, Range of values is 0 to 4
  5316                           ; switch strategies available:
  5317                           ; Name         Instructions Cycles
  5318                           ; simple_byte           16     9 (average)
  5319                           ;	Chosen strategy is simple_byte
  5320  000D9A  5012               	movf	??_servoRotate0,w,c
  5321  000D9C  0A00               	xorlw	0	; case 0
  5322  000D9E  B4D8               	btfsc	status,2,c
  5323  000DA0  D7EA               	goto	l444
  5324  000DA2  0A01               	xorlw	1	; case 1
  5325  000DA4  B4D8               	btfsc	status,2,c
  5326  000DA6  D7E9               	goto	l446
  5327  000DA8  0A03               	xorlw	3	; case 2
  5328  000DAA  B4D8               	btfsc	status,2,c
  5329  000DAC  D7E8               	goto	l447
  5330  000DAE  0A01               	xorlw	1	; case 3
  5331  000DB0  B4D8               	btfsc	status,2,c
  5332  000DB2  D7E7               	goto	l448
  5333  000DB4  0A07               	xorlw	7	; case 4
  5334  000DB6  B4D8               	btfsc	status,2,c
  5335  000DB8  D7E6               	goto	l449
  5336  000DBA                     l3800:
  5337                           
  5338                           ;servos.c: 104: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  5339  000DBA  0E05               	movlw	5
  5340  000DBC  6E12               	movwf	??_servoRotate0& (0+255),c
  5341  000DBE  0EDE               	movlw	222
  5342  000DC0                     u3617:
  5343  000DC0  2EE8               	decfsz	wreg,f,c
  5344  000DC2  D7FE               	bra	u3617
  5345  000DC4  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  5346  000DC6  D7FC               	bra	u3617
  5347                           
  5348                           ;servos.c: 105: switch (servo) {
  5349  000DC8  D00A               	goto	l3804
  5350  000DCA                     l451:
  5351                           
  5352                           ;servos.c: 107: LATAbits.LATA4 = 0;
  5353  000DCA  9889               	bcf	3977,4,c	;volatile
  5354                           
  5355                           ;servos.c: 108: break;
  5356  000DCC  D020               	goto	l3806
  5357  000DCE                     l453:
  5358                           
  5359                           ;servos.c: 110: LATAbits.LATA5 = 0;
  5360  000DCE  9A89               	bcf	3977,5,c	;volatile
  5361                           
  5362                           ;servos.c: 111: break;
  5363  000DD0  D01E               	goto	l3806
  5364  000DD2                     l454:
  5365                           
  5366                           ;servos.c: 113: LATEbits.LATE0 = 0;
  5367  000DD2  908D               	bcf	3981,0,c	;volatile
  5368                           
  5369                           ;servos.c: 114: break;
  5370  000DD4  D01C               	goto	l3806
  5371  000DD6                     l455:
  5372                           
  5373                           ;servos.c: 116: LATEbits.LATE1 = 0;
  5374  000DD6  928D               	bcf	3981,1,c	;volatile
  5375                           
  5376                           ;servos.c: 117: break;
  5377  000DD8  D01A               	goto	l3806
  5378  000DDA                     l456:
  5379                           
  5380                           ;servos.c: 119: LATBbits.LATB2 = 0;
  5381  000DDA  948A               	bcf	3978,2,c	;volatile
  5382                           
  5383                           ;servos.c: 121: }
  5384                           
  5385                           ;servos.c: 120: break;
  5386  000DDC  D018               	goto	l3806
  5387  000DDE                     l3804:
  5388  000DDE  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  5389  000DE2  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  5390                           
  5391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5392                           ; Switch size 1, requested type "space"
  5393                           ; Number of cases is 1, Range of values is 0 to 0
  5394                           ; switch strategies available:
  5395                           ; Name         Instructions Cycles
  5396                           ; simple_byte            4     3 (average)
  5397                           ;	Chosen strategy is simple_byte
  5398  000DE6  5013               	movf	??_servoRotate0+1,w,c
  5399  000DE8  0A00               	xorlw	0	; case 0
  5400  000DEA  A4D8               	btfss	status,2,c
  5401  000DEC  D010               	goto	l3806
  5402                           
  5403                           ; Switch size 1, requested type "space"
  5404                           ; Number of cases is 5, Range of values is 0 to 4
  5405                           ; switch strategies available:
  5406                           ; Name         Instructions Cycles
  5407                           ; simple_byte           16     9 (average)
  5408                           ;	Chosen strategy is simple_byte
  5409  000DEE  5012               	movf	??_servoRotate0,w,c
  5410  000DF0  0A00               	xorlw	0	; case 0
  5411  000DF2  B4D8               	btfsc	status,2,c
  5412  000DF4  D7EA               	goto	l451
  5413  000DF6  0A01               	xorlw	1	; case 1
  5414  000DF8  B4D8               	btfsc	status,2,c
  5415  000DFA  D7E9               	goto	l453
  5416  000DFC  0A03               	xorlw	3	; case 2
  5417  000DFE  B4D8               	btfsc	status,2,c
  5418  000E00  D7E8               	goto	l454
  5419  000E02  0A01               	xorlw	1	; case 3
  5420  000E04  B4D8               	btfsc	status,2,c
  5421  000E06  D7E7               	goto	l455
  5422  000E08  0A07               	xorlw	7	; case 4
  5423  000E0A  B4D8               	btfsc	status,2,c
  5424  000E0C  D7E6               	goto	l456
  5425  000E0E                     l3806:
  5426                           
  5427                           ;servos.c: 122: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  5428  000E0E  0E3D               	movlw	61
  5429  000E10  6E12               	movwf	??_servoRotate0& (0+255),c
  5430  000E12  0E0F               	movlw	15
  5431  000E14                     u3627:
  5432  000E14  2EE8               	decfsz	wreg,f,c
  5433  000E16  D7FE               	bra	u3627
  5434  000E18  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  5435  000E1A  D7FC               	bra	u3627
  5436  000E1C  F000               	nop	
  5437  000E1E  4A14               	infsnz	servoRotate0@i,f,c
  5438  000E20  2A15               	incf	servoRotate0@i+1,f,c
  5439  000E22  D7A2               	goto	l3792
  5440  000E24                     l457:
  5441  000E24  0012               	return		;funcret
  5442  000E26                     __end_of_servoRotate0:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           intcon	equ	0xFF2
  5448                           intcon3	equ	0xFF0
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function _eeprom_initialize *****************
  5459 ;; Defined at:
  5460 ;;		line 73 in file "eeprom.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;Total ram usage:        0 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    3
  5481 ;; This function calls:
  5482 ;;		_eeprom_WriteByte
  5483 ;;		_newestAddress
  5484 ;; This function is called by:
  5485 ;;		_main
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text29
  5490  001658                     __ptext29:
  5491                           	opt stack 0
  5492  001658                     _eeprom_initialize:
  5493                           	opt stack 27
  5494                           
  5495                           ;eeprom.c: 74: if(newestAddress() == 0b11111111){
  5496                           
  5497                           ;incstack = 0
  5498  001658  EC8A  F00B         	call	_newestAddress	;wreg free
  5499  00165C  0AFF               	xorlw	255
  5500  00165E  A4D8               	btfss	status,2,c
  5501  001660  0012               	return	
  5502                           
  5503                           ;eeprom.c: 75: eeprom_WriteByte(0x0000, 0x00);
  5504  001662  0E00               	movlw	0
  5505  001664  6E11               	movwf	eeprom_WriteByte@address+1,c
  5506  001666  0E00               	movlw	0
  5507  001668  6E10               	movwf	eeprom_WriteByte@address,c
  5508  00166A  0E00               	movlw	0
  5509  00166C  6E12               	movwf	eeprom_WriteByte@data,c
  5510  00166E  ECF7  F00A         	call	_eeprom_WriteByte	;wreg free
  5511  001672  0012               	return	
  5512  001674                     __end_of_eeprom_initialize:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           prodh	equ	0xFF4
  5516                           prodl	equ	0xFF3
  5517                           intcon	equ	0xFF2
  5518                           intcon3	equ	0xFF0
  5519                           postinc0	equ	0xFEE
  5520                           wreg	equ	0xFE8
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _newestAddress *****************
  5529 ;; Defined at:
  5530 ;;		line 69 in file "eeprom.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      unsigned char 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    2
  5551 ;; This function calls:
  5552 ;;		_eeprom_ReadByte
  5553 ;; This function is called by:
  5554 ;;		_eeprom_initialize
  5555 ;;		_eeprom_LogResult
  5556 ;;		_eeprom_GetLog
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text30
  5561  001714                     __ptext30:
  5562                           	opt stack 0
  5563  001714                     _newestAddress:
  5564                           	opt stack 26
  5565                           
  5566                           ;eeprom.c: 70: return eeprom_ReadByte(0x0000);
  5567                           
  5568                           ;incstack = 0
  5569  001714  0E00               	movlw	0
  5570  001716  6E11               	movwf	eeprom_ReadByte@address+1,c
  5571  001718  0E00               	movlw	0
  5572  00171A  6E10               	movwf	eeprom_ReadByte@address,c
  5573  00171C  EC76  F00B         	call	_eeprom_ReadByte	;wreg free
  5574  001720  0012               	return	
  5575  001722                     __end_of_newestAddress:
  5576                           	opt stack 0
  5577                           tblptru	equ	0xFF8
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           intcon3	equ	0xFF0
  5582                           postinc0	equ	0xFEE
  5583                           wreg	equ	0xFE8
  5584                           indf2	equ	0xFDF
  5585                           postinc2	equ	0xFDE
  5586                           postdec2	equ	0xFDD
  5587                           fsr2h	equ	0xFDA
  5588                           fsr2l	equ	0xFD9
  5589                           status	equ	0xFD8
  5590                           
  5591 ;; *************** function _eeprom_ReadByte *****************
  5592 ;; Defined at:
  5593 ;;		line 14 in file "eeprom.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  address         2   15[COMRAM] unsigned int 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;		None
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      unsigned char 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;Total ram usage:        2 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    1
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_newestAddress
  5618 ;;		_eeprom_GetLog
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           	psect	text31
  5623  0016EC                     __ptext31:
  5624                           	opt stack 0
  5625  0016EC                     _eeprom_ReadByte:
  5626                           	opt stack 26
  5627                           
  5628                           ;eeprom.c: 18: EEADRH = (uint8_t)(address >> 8);
  5629                           
  5630                           ;incstack = 0
  5631  0016EC  5011               	movf	eeprom_ReadByte@address+1,w,c
  5632  0016EE  6EAA               	movwf	4010,c	;volatile
  5633                           
  5634                           ;eeprom.c: 19: EEADR = (uint8_t)address;
  5635  0016F0  C010  FFA9         	movff	eeprom_ReadByte@address,4009	;volatile
  5636                           
  5637                           ;eeprom.c: 21: EECON1bits.EEPGD = 0;
  5638  0016F4  9EA6               	bcf	4006,7,c	;volatile
  5639                           
  5640                           ;eeprom.c: 22: EECON1bits.CFGS = 0;
  5641  0016F6  9CA6               	bcf	4006,6,c	;volatile
  5642                           
  5643                           ;eeprom.c: 23: EECON1bits.RD = 1;
  5644  0016F8  80A6               	bsf	4006,0,c	;volatile
  5645  0016FA                     l324:
  5646  0016FA  B0A6               	btfsc	4006,0,c	;volatile
  5647  0016FC  D7FE               	goto	l324
  5648                           
  5649                           ;eeprom.c: 29: return EEDATA;
  5650  0016FE  50A8               	movf	4008,w,c	;volatile
  5651  001700  0012               	return	
  5652  001702                     __end_of_eeprom_ReadByte:
  5653                           	opt stack 0
  5654                           tblptru	equ	0xFF8
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           intcon3	equ	0xFF0
  5659                           postinc0	equ	0xFEE
  5660                           wreg	equ	0xFE8
  5661                           indf2	equ	0xFDF
  5662                           postinc2	equ	0xFDE
  5663                           postdec2	equ	0xFDD
  5664                           fsr2h	equ	0xFDA
  5665                           fsr2l	equ	0xFD9
  5666                           status	equ	0xFD8
  5667                           
  5668 ;; *************** function _eeprom_WriteByte *****************
  5669 ;; Defined at:
  5670 ;;		line 37 in file "eeprom.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;  address         2   15[COMRAM] unsigned int 
  5673 ;;  data            1   17[COMRAM] unsigned char 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      void 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5685 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;Total ram usage:        3 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    1
  5692 ;; This function calls:
  5693 ;;		Nothing
  5694 ;; This function is called by:
  5695 ;;		_eeprom_initialize
  5696 ;;		_eeprom_LogResult
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text32
  5701  0015EE                     __ptext32:
  5702                           	opt stack 0
  5703  0015EE                     _eeprom_WriteByte:
  5704                           	opt stack 27
  5705                           
  5706                           ;eeprom.c: 40: EEADRH = (uint8_t)(address >> 8);
  5707                           
  5708                           ;incstack = 0
  5709  0015EE  5011               	movf	eeprom_WriteByte@address+1,w,c
  5710  0015F0  6EAA               	movwf	4010,c	;volatile
  5711                           
  5712                           ;eeprom.c: 41: EEADR = (uint8_t)address;
  5713  0015F2  C010  FFA9         	movff	eeprom_WriteByte@address,4009	;volatile
  5714                           
  5715                           ;eeprom.c: 43: EEDATA = data;
  5716  0015F6  C012  FFA8         	movff	eeprom_WriteByte@data,4008	;volatile
  5717                           
  5718                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  5719  0015FA  9EA6               	bcf	4006,7,c	;volatile
  5720                           
  5721                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  5722  0015FC  9CA6               	bcf	4006,6,c	;volatile
  5723                           
  5724                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  5725  0015FE  84A6               	bsf	4006,2,c	;volatile
  5726                           
  5727                           ;eeprom.c: 50: EECON2 = 0x55;
  5728  001600  0E55               	movlw	85
  5729  001602  6EA7               	movwf	4007,c	;volatile
  5730                           
  5731                           ;eeprom.c: 51: EECON2 = 0xAA;
  5732  001604  0EAA               	movlw	170
  5733  001606  6EA7               	movwf	4007,c	;volatile
  5734                           
  5735                           ;eeprom.c: 52: EECON1bits.WR = 1;
  5736  001608  82A6               	bsf	4006,1,c	;volatile
  5737  00160A                     l330:
  5738  00160A  A8A1               	btfss	4001,4,c	;volatile
  5739  00160C  D7FE               	goto	l330
  5740                           
  5741                           ;eeprom.c: 58: }
  5742                           ;eeprom.c: 60: PIR2bits.EEIF = 0;
  5743  00160E  98A1               	bcf	4001,4,c	;volatile
  5744                           
  5745                           ;eeprom.c: 61: EECON1bits.WREN = 0;
  5746  001610  94A6               	bcf	4006,2,c	;volatile
  5747  001612  0012               	return		;funcret
  5748  001614                     __end_of_eeprom_WriteByte:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           intcon	equ	0xFF2
  5754                           intcon3	equ	0xFF0
  5755                           postinc0	equ	0xFEE
  5756                           wreg	equ	0xFE8
  5757                           indf2	equ	0xFDF
  5758                           postinc2	equ	0xFDE
  5759                           postdec2	equ	0xFDD
  5760                           fsr2h	equ	0xFDA
  5761                           fsr2l	equ	0xFD9
  5762                           status	equ	0xFD8
  5763                           
  5764 ;; *************** function _debugState *****************
  5765 ;; Defined at:
  5766 ;;		line 330 in file "main.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;		None
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;		None
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  1    wreg      void 
  5773 ;; Registers used:
  5774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;Total ram usage:        2 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    4
  5787 ;; This function calls:
  5788 ;;		_lcdInst
  5789 ;;		_printf
  5790 ;;		_servoRotate90n
  5791 ;;		_servoRotateArm
  5792 ;; This function is called by:
  5793 ;;		_main
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text33
  5798  001438                     __ptext33:
  5799                           	opt stack 0
  5800  001438                     _debugState:
  5801                           	opt stack 26
  5802                           
  5803                           ;main.c: 331: LATCbits.LATC6 = 1;
  5804                           
  5805                           ;incstack = 0
  5806  001438  8C8B               	bsf	3979,6,c	;volatile
  5807                           
  5808                           ;main.c: 332: lcdInst(0b10000000);;
  5809  00143A  0E80               	movlw	128
  5810  00143C  EC97  F00B         	call	_lcdInst
  5811                           
  5812                           ;main.c: 333: printf("going debug");
  5813  001440  0EED               	movlw	low STR_13
  5814  001442  6E1C               	movwf	printf@f,c
  5815  001444  0EFF               	movlw	high STR_13
  5816  001446  6E1D               	movwf	printf@f+1,c
  5817  001448  ECB0  F002         	call	_printf	;wreg free
  5818                           
  5819                           ;main.c: 334: lcdInst(0b11000000);;
  5820  00144C  0EC0               	movlw	192
  5821  00144E  EC97  F00B         	call	_lcdInst
  5822                           
  5823                           ;main.c: 338: servoRotateArm();
  5824  001452  ECA1  F008         	call	_servoRotateArm	;wreg free
  5825                           
  5826                           ;main.c: 339: _delay((unsigned long)((1000)*(10000000/4000.0)));
  5827  001456  0E0D               	movlw	13
  5828  001458  6E35               	movwf	(??_debugState+1)& (0+255),c
  5829  00145A  0EAF               	movlw	175
  5830  00145C  6E34               	movwf	??_debugState& (0+255),c
  5831  00145E  0EB6               	movlw	182
  5832  001460                     u3637:
  5833  001460  2EE8               	decfsz	wreg,f,c
  5834  001462  D7FE               	bra	u3637
  5835  001464  2E34               	decfsz	??_debugState& (0+255),f,c
  5836  001466  D7FC               	bra	u3637
  5837  001468  2E35               	decfsz	(??_debugState+1)& (0+255),f,c
  5838  00146A  D7FA               	bra	u3637
  5839  00146C  D000               	nop2	
  5840                           
  5841                           ;main.c: 340: servoRotate90n(4);
  5842  00146E  0E00               	movlw	0
  5843  001470  6E11               	movwf	servoRotate90n@servo+1,c
  5844  001472  0E04               	movlw	4
  5845  001474  6E10               	movwf	servoRotate90n@servo,c
  5846  001476  EC13  F007         	call	_servoRotate90n	;wreg free
  5847                           
  5848                           ;main.c: 342: state = MAIN;
  5849  00147A  0E00               	movlw	0
  5850  00147C  6E4B               	movwf	_state,c
  5851  00147E  0012               	return		;funcret
  5852  001480                     __end_of_debugState:
  5853                           	opt stack 0
  5854                           tblptru	equ	0xFF8
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           intcon3	equ	0xFF0
  5859                           postinc0	equ	0xFEE
  5860                           wreg	equ	0xFE8
  5861                           indf2	equ	0xFDF
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function _servoRotateArm *****************
  5869 ;; Defined at:
  5870 ;;		line 212 in file "servos.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  i               2   20[COMRAM] int 
  5875 ;;  res             2   18[COMRAM] int 
  5876 ;;  i               2    0        unsigned int 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  2   15[COMRAM] int 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;Total ram usage:        7 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    1
  5893 ;; This function calls:
  5894 ;;		Nothing
  5895 ;; This function is called by:
  5896 ;;		_executingState
  5897 ;;		_debugState
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           	psect	text34
  5902  001142                     __ptext34:
  5903                           	opt stack 0
  5904  001142                     _servoRotateArm:
  5905                           	opt stack 28
  5906                           
  5907                           ;servos.c: 213: unsigned int i;
  5908                           ;servos.c: 214: int res = -1;
  5909                           
  5910                           ;incstack = 0
  5911  001142  6813               	setf	servoRotateArm@res,c
  5912  001144  6814               	setf	servoRotateArm@res+1,c
  5913                           
  5914                           ;servos.c: 215: for(int i = 0; i < 60; i++){
  5915  001146  0E00               	movlw	0
  5916  001148  6E16               	movwf	servoRotateArm@i_1032+1,c
  5917  00114A  0E00               	movlw	0
  5918  00114C  6E15               	movwf	servoRotateArm@i_1032,c
  5919  00114E  BE16               	btfsc	servoRotateArm@i_1032+1,7,c
  5920  001150  D006               	goto	l498
  5921  001152  5016               	movf	servoRotateArm@i_1032+1,w,c
  5922  001154  E126               	bnz	l499
  5923  001156  0E3C               	movlw	60
  5924  001158  5C15               	subwf	servoRotateArm@i_1032,w,c
  5925  00115A  B0D8               	btfsc	status,0,c
  5926  00115C  D022               	goto	l499
  5927  00115E                     l498:
  5928                           
  5929                           ;servos.c: 216: LATBbits.LATB2 = 1;
  5930  00115E  848A               	bsf	3978,2,c	;volatile
  5931                           
  5932                           ;servos.c: 217: _delay((unsigned long)((1800)*(10000000/4000000.0)));
  5933  001160  0E06               	movlw	6
  5934  001162  6E12               	movwf	??_servoRotateArm& (0+255),c
  5935  001164  0ED7               	movlw	215
  5936  001166                     u3647:
  5937  001166  2EE8               	decfsz	wreg,f,c
  5938  001168  D7FE               	bra	u3647
  5939  00116A  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  5940  00116C  D7FC               	bra	u3647
  5941  00116E  F000               	nop	
  5942                           
  5943                           ;servos.c: 218: LATBbits.LATB2 = 0;
  5944  001170  948A               	bcf	3978,2,c	;volatile
  5945                           
  5946                           ;servos.c: 219: _delay((unsigned long)((18200)*(10000000/4000000.0)));
  5947  001172  0E3C               	movlw	60
  5948  001174  6E12               	movwf	??_servoRotateArm& (0+255),c
  5949  001176  0E16               	movlw	22
  5950  001178                     u3657:
  5951  001178  2EE8               	decfsz	wreg,f,c
  5952  00117A  D7FE               	bra	u3657
  5953  00117C  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  5954  00117E  D7FC               	bra	u3657
  5955                           
  5956                           ;servos.c: 220: if(PORTCbits.RC1 == 1){
  5957  001180  A282               	btfss	3970,1,c	;volatile
  5958  001182  D004               	goto	l4046
  5959                           
  5960                           ;servos.c: 221: res = 1;
  5961  001184  0E00               	movlw	0
  5962  001186  6E14               	movwf	servoRotateArm@res+1,c
  5963  001188  0E01               	movlw	1
  5964  00118A  D003               	goto	L6
  5965  00118C                     l4046:
  5966                           
  5967                           ;servos.c: 223: res = 0;
  5968  00118C  0E00               	movlw	0
  5969  00118E  6E14               	movwf	servoRotateArm@res+1,c
  5970  001190  0E00               	movlw	0
  5971  001192                     L6:
  5972  001192  6E13               	movwf	servoRotateArm@res,c
  5973  001194  4A15               	infsnz	servoRotateArm@i_1032,f,c
  5974  001196  2A16               	incf	servoRotateArm@i_1032+1,f,c
  5975  001198  BE16               	btfsc	servoRotateArm@i_1032+1,7,c
  5976  00119A  D7E1               	goto	l498
  5977  00119C  5016               	movf	servoRotateArm@i_1032+1,w,c
  5978  00119E  E101               	bnz	u3000
  5979  0011A0  D7DA               	goto	L7
  5980  0011A2                     u3000:
  5981  0011A2                     l499:
  5982                           
  5983                           ;servos.c: 224: }
  5984                           ;servos.c: 225: }
  5985                           ;servos.c: 226: return res;
  5986  0011A2  C013  F010         	movff	servoRotateArm@res,?_servoRotateArm
  5987  0011A6  C014  F011         	movff	servoRotateArm@res+1,?_servoRotateArm+1
  5988  0011AA  0012               	return		;funcret
  5989  0011AC                     __end_of_servoRotateArm:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           intcon3	equ	0xFF0
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           indf2	equ	0xFDF
  5999                           postinc2	equ	0xFDE
  6000                           postdec2	equ	0xFDD
  6001                           fsr2h	equ	0xFDA
  6002                           fsr2l	equ	0xFD9
  6003                           status	equ	0xFD8
  6004                           
  6005 ;; *************** function _servoRotate90n *****************
  6006 ;; Defined at:
  6007 ;;		line 169 in file "servos.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  servo           2   15[COMRAM] int 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  i               2   19[COMRAM] unsigned int 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      void 
  6014 ;; Registers used:
  6015 ;;		wreg, status,2, status,0
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;Total ram usage:        6 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    1
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_executingState
  6032 ;;		_debugState
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text35
  6037  000E26                     __ptext35:
  6038                           	opt stack 0
  6039  000E26                     _servoRotate90n:
  6040                           	opt stack 28
  6041                           
  6042                           ;servos.c: 171: unsigned int i;
  6043                           ;servos.c: 172: for (i = 0; i < 30; i++) {
  6044                           
  6045                           ;incstack = 0
  6046  000E26  0E00               	movlw	0
  6047  000E28  6E15               	movwf	servoRotate90n@i+1,c
  6048  000E2A  0E00               	movlw	0
  6049  000E2C  6E14               	movwf	servoRotate90n@i,c
  6050  000E2E                     l3942:
  6051  000E2E  5015               	movf	servoRotate90n@i+1,w,c
  6052  000E30  E15A               	bnz	l495
  6053  000E32  0E1E               	movlw	30
  6054  000E34  5C14               	subwf	servoRotate90n@i,w,c
  6055  000E36  B0D8               	btfsc	status,0,c
  6056  000E38  0012               	return	
  6057  000E3A  D00A               	goto	l3948
  6058  000E3C                     l482:
  6059                           
  6060                           ;servos.c: 175: LATAbits.LATA4 = 1;
  6061  000E3C  8889               	bsf	3977,4,c	;volatile
  6062                           
  6063                           ;servos.c: 176: break;
  6064  000E3E  D020               	goto	l3950
  6065  000E40                     l484:
  6066                           
  6067                           ;servos.c: 178: LATAbits.LATA5 = 1;
  6068  000E40  8A89               	bsf	3977,5,c	;volatile
  6069                           
  6070                           ;servos.c: 179: break;
  6071  000E42  D01E               	goto	l3950
  6072  000E44                     l485:
  6073                           
  6074                           ;servos.c: 181: LATEbits.LATE0 = 1;
  6075  000E44  808D               	bsf	3981,0,c	;volatile
  6076                           
  6077                           ;servos.c: 182: break;
  6078  000E46  D01C               	goto	l3950
  6079  000E48                     l486:
  6080                           
  6081                           ;servos.c: 184: LATEbits.LATE1 = 1;
  6082  000E48  828D               	bsf	3981,1,c	;volatile
  6083                           
  6084                           ;servos.c: 185: break;
  6085  000E4A  D01A               	goto	l3950
  6086  000E4C                     l487:
  6087                           
  6088                           ;servos.c: 187: LATBbits.LATB2 = 1;
  6089  000E4C  848A               	bsf	3978,2,c	;volatile
  6090                           
  6091                           ;servos.c: 189: }
  6092                           
  6093                           ;servos.c: 188: break;
  6094  000E4E  D018               	goto	l3950
  6095  000E50                     l3948:
  6096  000E50  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  6097  000E54  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  6098                           
  6099                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6100                           ; Switch size 1, requested type "space"
  6101                           ; Number of cases is 1, Range of values is 0 to 0
  6102                           ; switch strategies available:
  6103                           ; Name         Instructions Cycles
  6104                           ; simple_byte            4     3 (average)
  6105                           ;	Chosen strategy is simple_byte
  6106  000E58  5013               	movf	??_servoRotate90n+1,w,c
  6107  000E5A  0A00               	xorlw	0	; case 0
  6108  000E5C  A4D8               	btfss	status,2,c
  6109  000E5E  D010               	goto	l3950
  6110                           
  6111                           ; Switch size 1, requested type "space"
  6112                           ; Number of cases is 5, Range of values is 0 to 4
  6113                           ; switch strategies available:
  6114                           ; Name         Instructions Cycles
  6115                           ; simple_byte           16     9 (average)
  6116                           ;	Chosen strategy is simple_byte
  6117  000E60  5012               	movf	??_servoRotate90n,w,c
  6118  000E62  0A00               	xorlw	0	; case 0
  6119  000E64  B4D8               	btfsc	status,2,c
  6120  000E66  D7EA               	goto	l482
  6121  000E68  0A01               	xorlw	1	; case 1
  6122  000E6A  B4D8               	btfsc	status,2,c
  6123  000E6C  D7E9               	goto	l484
  6124  000E6E  0A03               	xorlw	3	; case 2
  6125  000E70  B4D8               	btfsc	status,2,c
  6126  000E72  D7E8               	goto	l485
  6127  000E74  0A01               	xorlw	1	; case 3
  6128  000E76  B4D8               	btfsc	status,2,c
  6129  000E78  D7E7               	goto	l486
  6130  000E7A  0A07               	xorlw	7	; case 4
  6131  000E7C  B4D8               	btfsc	status,2,c
  6132  000E7E  D7E6               	goto	l487
  6133  000E80                     l3950:
  6134                           
  6135                           ;servos.c: 190: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6136  000E80  0ED6               	movlw	214
  6137  000E82                     u3667:
  6138  000E82  D000               	nop2	
  6139  000E84  D000               	nop2	
  6140  000E86  2EE8               	decfsz	wreg,f,c
  6141  000E88  D7FC               	bra	u3667
  6142  000E8A  D000               	nop2	
  6143                           
  6144                           ;servos.c: 191: switch (servo) {
  6145  000E8C  D00A               	goto	l3954
  6146  000E8E                     l489:
  6147                           
  6148                           ;servos.c: 193: LATAbits.LATA4 = 0;
  6149  000E8E  9889               	bcf	3977,4,c	;volatile
  6150                           
  6151                           ;servos.c: 194: break;
  6152  000E90  D020               	goto	l3956
  6153  000E92                     l491:
  6154                           
  6155                           ;servos.c: 196: LATAbits.LATA5 = 0;
  6156  000E92  9A89               	bcf	3977,5,c	;volatile
  6157                           
  6158                           ;servos.c: 197: break;
  6159  000E94  D01E               	goto	l3956
  6160  000E96                     l492:
  6161                           
  6162                           ;servos.c: 199: LATEbits.LATE0 = 0;
  6163  000E96  908D               	bcf	3981,0,c	;volatile
  6164                           
  6165                           ;servos.c: 200: break;
  6166  000E98  D01C               	goto	l3956
  6167  000E9A                     l493:
  6168                           
  6169                           ;servos.c: 202: LATEbits.LATE1 = 0;
  6170  000E9A  928D               	bcf	3981,1,c	;volatile
  6171                           
  6172                           ;servos.c: 203: break;
  6173  000E9C  D01A               	goto	l3956
  6174  000E9E                     l494:
  6175                           
  6176                           ;servos.c: 205: LATBbits.LATB2 = 0;
  6177  000E9E  948A               	bcf	3978,2,c	;volatile
  6178                           
  6179                           ;servos.c: 207: }
  6180                           
  6181                           ;servos.c: 206: break;
  6182  000EA0  D018               	goto	l3956
  6183  000EA2                     l3954:
  6184  000EA2  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  6185  000EA6  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  6186                           
  6187                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6188                           ; Switch size 1, requested type "space"
  6189                           ; Number of cases is 1, Range of values is 0 to 0
  6190                           ; switch strategies available:
  6191                           ; Name         Instructions Cycles
  6192                           ; simple_byte            4     3 (average)
  6193                           ;	Chosen strategy is simple_byte
  6194  000EAA  5013               	movf	??_servoRotate90n+1,w,c
  6195  000EAC  0A00               	xorlw	0	; case 0
  6196  000EAE  A4D8               	btfss	status,2,c
  6197  000EB0  D010               	goto	l3956
  6198                           
  6199                           ; Switch size 1, requested type "space"
  6200                           ; Number of cases is 5, Range of values is 0 to 4
  6201                           ; switch strategies available:
  6202                           ; Name         Instructions Cycles
  6203                           ; simple_byte           16     9 (average)
  6204                           ;	Chosen strategy is simple_byte
  6205  000EB2  5012               	movf	??_servoRotate90n,w,c
  6206  000EB4  0A00               	xorlw	0	; case 0
  6207  000EB6  B4D8               	btfsc	status,2,c
  6208  000EB8  D7EA               	goto	l489
  6209  000EBA  0A01               	xorlw	1	; case 1
  6210  000EBC  B4D8               	btfsc	status,2,c
  6211  000EBE  D7E9               	goto	l491
  6212  000EC0  0A03               	xorlw	3	; case 2
  6213  000EC2  B4D8               	btfsc	status,2,c
  6214  000EC4  D7E8               	goto	l492
  6215  000EC6  0A01               	xorlw	1	; case 3
  6216  000EC8  B4D8               	btfsc	status,2,c
  6217  000ECA  D7E7               	goto	l493
  6218  000ECC  0A07               	xorlw	7	; case 4
  6219  000ECE  B4D8               	btfsc	status,2,c
  6220  000ED0  D7E6               	goto	l494
  6221  000ED2                     l3956:
  6222                           
  6223                           ;servos.c: 208: _delay((unsigned long)((19400)*(10000000/4000000.0)));
  6224  000ED2  0E3F               	movlw	63
  6225  000ED4  6E12               	movwf	??_servoRotate90n& (0+255),c
  6226  000ED6  0EFC               	movlw	252
  6227  000ED8                     u3677:
  6228  000ED8  2EE8               	decfsz	wreg,f,c
  6229  000EDA  D7FE               	bra	u3677
  6230  000EDC  2E12               	decfsz	??_servoRotate90n& (0+255),f,c
  6231  000EDE  D7FC               	bra	u3677
  6232  000EE0  4A14               	infsnz	servoRotate90n@i,f,c
  6233  000EE2  2A15               	incf	servoRotate90n@i+1,f,c
  6234  000EE4  D7A4               	goto	l3942
  6235  000EE6                     l495:
  6236  000EE6  0012               	return		;funcret
  6237  000EE8                     __end_of_servoRotate90n:
  6238                           	opt stack 0
  6239                           tblptru	equ	0xFF8
  6240                           prodh	equ	0xFF4
  6241                           prodl	equ	0xFF3
  6242                           intcon	equ	0xFF2
  6243                           intcon3	equ	0xFF0
  6244                           postinc0	equ	0xFEE
  6245                           wreg	equ	0xFE8
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _printf *****************
  6254 ;; Defined at:
  6255 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  f               2   27[COMRAM] PTR const unsigned char 
  6258 ;;		 -> STR_16(15), STR_15(15), STR_14(15), STR_13(12), 
  6259 ;;		 -> STR_12(18), STR_11(6), STR_10(17), STR_9(17), 
  6260 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(17), 
  6261 ;;		 -> STR_4(19), STR_3(17), STR_2(15), STR_1(16), 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  idx             1   41[COMRAM] unsigned char 
  6264 ;;  tmpval          4    0        struct .
  6265 ;;  cp              3    0        PTR const unsigned char 
  6266 ;;  width           2   48[COMRAM] int 
  6267 ;;  val             2   45[COMRAM] unsigned int 
  6268 ;;  ap              2   42[COMRAM] PTR void [1]
  6269 ;;		 -> ?_printf(2), 
  6270 ;;  len             2    0        unsigned int 
  6271 ;;  c               1   50[COMRAM] char 
  6272 ;;  flag            1   47[COMRAM] unsigned char 
  6273 ;;  prec            1   44[COMRAM] char 
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  2   27[COMRAM] int 
  6276 ;; Registers used:
  6277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6283 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;Total ram usage:       24 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    3
  6290 ;; This function calls:
  6291 ;;		___lwdiv
  6292 ;;		___lwmod
  6293 ;;		___wmul
  6294 ;;		_isdigit
  6295 ;;		_putch
  6296 ;; This function is called by:
  6297 ;;		_update_lcd
  6298 ;;		_executingState
  6299 ;;		_debugState
  6300 ;;		_fixLCD
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text36
  6305  000560                     __ptext36:
  6306                           	opt stack 0
  6307  000560                     _printf:
  6308                           	opt stack 25
  6309                           
  6310                           ;doprnt.c: 466: va_list ap;
  6311                           ;doprnt.c: 499: signed char c;
  6312                           ;doprnt.c: 501: int width;
  6313                           ;doprnt.c: 506: signed char prec;
  6314                           ;doprnt.c: 508: unsigned char flag;
  6315                           ;doprnt.c: 523: union {
  6316                           ;doprnt.c: 524: unsigned long vd;
  6317                           ;doprnt.c: 525: double integ;
  6318                           ;doprnt.c: 526: } tmpval;
  6319                           ;doprnt.c: 528: unsigned int val;
  6320                           ;doprnt.c: 529: unsigned len;
  6321                           ;doprnt.c: 530: const char * cp;
  6322                           ;doprnt.c: 533: *ap = __va_start();
  6323                           
  6324                           ;incstack = 0
  6325  000560  0E1E               	movlw	low (?_printf+2)
  6326  000562  6E2B               	movwf	printf@ap,c
  6327  000564  0E00               	movlw	high (?_printf+2)
  6328  000566  6E2C               	movwf	printf@ap+1,c
  6329                           
  6330                           ;doprnt.c: 536: while(c = *f++) {
  6331  000568  D174               	goto	l3770
  6332  00056A                     l3644:
  6333                           
  6334                           ;doprnt.c: 538: if(c != '%')
  6335  00056A  0E25               	movlw	37
  6336  00056C  1833               	xorwf	printf@c,w,c
  6337  00056E  B4D8               	btfsc	status,2,c
  6338  000570  D004               	goto	l3648
  6339                           
  6340                           ;doprnt.c: 540: {
  6341                           ;doprnt.c: 541: (putch(c) );
  6342  000572  5033               	movf	printf@c,w,c
  6343  000574  EC91  F00B         	call	_putch
  6344                           
  6345                           ;doprnt.c: 542: continue;
  6346  000578  D16C               	goto	l3770
  6347  00057A                     l3648:
  6348                           
  6349                           ;doprnt.c: 543: }
  6350                           ;doprnt.c: 546: width = 0;
  6351  00057A  0E00               	movlw	0
  6352  00057C  6E32               	movwf	printf@width+1,c
  6353  00057E  0E00               	movlw	0
  6354  000580  6E31               	movwf	printf@width,c
  6355                           
  6356                           ;doprnt.c: 548: flag = 0;
  6357  000582  0E00               	movlw	0
  6358  000584  6E30               	movwf	printf@flag,c
  6359                           
  6360                           ;doprnt.c: 551: switch(*f) {
  6361                           
  6362                           ;doprnt.c: 550: for(;;) {
  6363  000586  D003               	goto	l3654
  6364  000588                     l3650:
  6365                           
  6366                           ;doprnt.c: 580: flag |= 0x04;
  6367  000588  8430               	bsf	printf@flag,2,c
  6368                           
  6369                           ;doprnt.c: 581: f++;
  6370  00058A  4A1C               	infsnz	printf@f,f,c
  6371  00058C  2A1D               	incf	printf@f+1,f,c
  6372  00058E                     l3654:
  6373  00058E  C01C  FFF6         	movff	printf@f,tblptrl
  6374  000592  C01D  FFF7         	movff	printf@f+1,tblptrh
  6375  000596                     	if	0	;tblptru may be non-zero
  6376  000596                     	endif
  6377  000596                     	if	0	;tblptru may be non-zero
  6378  000596                     	endif
  6379  000596  0008               	tblrd		*
  6380  000598  50F5               	movf	tablat,w,c
  6381                           
  6382                           ; Switch size 1, requested type "space"
  6383                           ; Number of cases is 1, Range of values is 48 to 48
  6384                           ; switch strategies available:
  6385                           ; Name         Instructions Cycles
  6386                           ; simple_byte            4     3 (average)
  6387                           ;	Chosen strategy is simple_byte
  6388  00059A  0A30               	xorlw	48	; case 48
  6389  00059C  B4D8               	btfsc	status,2,c
  6390  00059E  D7F4               	goto	l3650
  6391                           
  6392                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6393                           
  6394                           ;doprnt.c: 586: }
  6395                           
  6396                           ;doprnt.c: 585: break;
  6397  0005A0  C01C  FFF6         	movff	printf@f,tblptrl
  6398  0005A4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6399  0005A8                     	if	0	;tblptru may be non-zero
  6400  0005A8                     	endif
  6401  0005A8                     	if	0	;tblptru may be non-zero
  6402  0005A8                     	endif
  6403  0005A8  0008               	tblrd		*
  6404  0005AA  50F5               	movf	tablat,w,c
  6405  0005AC  EC1D  F00B         	call	_isdigit
  6406  0005B0  A0D8               	btfss	status,0,c
  6407  0005B2  D035               	goto	l3672
  6408                           
  6409                           ;doprnt.c: 598: width = 0;
  6410  0005B4  0E00               	movlw	0
  6411  0005B6  6E32               	movwf	printf@width+1,c
  6412  0005B8  0E00               	movlw	0
  6413  0005BA  6E31               	movwf	printf@width,c
  6414  0005BC                     l3660:
  6415                           
  6416                           ;doprnt.c: 600: width *= 10;
  6417  0005BC  C031  F010         	movff	printf@width,___wmul@multiplier
  6418  0005C0  C032  F011         	movff	printf@width+1,___wmul@multiplier+1
  6419  0005C4  0E00               	movlw	0
  6420  0005C6  6E13               	movwf	___wmul@multiplicand+1,c
  6421  0005C8  0E0A               	movlw	10
  6422  0005CA  6E12               	movwf	___wmul@multiplicand,c
  6423  0005CC  EC0A  F00B         	call	___wmul	;wreg free
  6424  0005D0  C010  F031         	movff	?___wmul,printf@width
  6425  0005D4  C011  F032         	movff	?___wmul+1,printf@width+1
  6426                           
  6427                           ;doprnt.c: 601: width += *f++ - '0';
  6428  0005D8  0ED0               	movlw	208
  6429  0005DA  6E26               	movwf	??_printf& (0+255),c
  6430  0005DC  0EFF               	movlw	255
  6431  0005DE  6E27               	movwf	(??_printf+1)& (0+255),c
  6432  0005E0  C01C  FFF6         	movff	printf@f,tblptrl
  6433  0005E4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6434  0005E8                     	if	0	;tblptru may be non-zero
  6435  0005E8                     	endif
  6436  0005E8                     	if	0	;tblptru may be non-zero
  6437  0005E8                     	endif
  6438  0005E8  0008               	tblrd		*
  6439  0005EA  50F5               	movf	tablat,w,c
  6440  0005EC  6E28               	movwf	(??_printf+2)& (0+255),c
  6441  0005EE  6A29               	clrf	(??_printf+3)& (0+255),c
  6442  0005F0  5026               	movf	??_printf,w,c
  6443  0005F2  2628               	addwf	??_printf+2,f,c
  6444  0005F4  5027               	movf	??_printf+1,w,c
  6445  0005F6  2229               	addwfc	??_printf+3,f,c
  6446  0005F8  5028               	movf	??_printf+2,w,c
  6447  0005FA  2631               	addwf	printf@width,f,c
  6448  0005FC  5029               	movf	??_printf+3,w,c
  6449  0005FE  2232               	addwfc	printf@width+1,f,c
  6450  000600  4A1C               	infsnz	printf@f,f,c
  6451  000602  2A1D               	incf	printf@f+1,f,c
  6452                           
  6453                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6454  000604  C01C  FFF6         	movff	printf@f,tblptrl
  6455  000608  C01D  FFF7         	movff	printf@f+1,tblptrh
  6456  00060C                     	if	0	;tblptru may be non-zero
  6457  00060C                     	endif
  6458  00060C                     	if	0	;tblptru may be non-zero
  6459  00060C                     	endif
  6460  00060C  0008               	tblrd		*
  6461  00060E  50F5               	movf	tablat,w,c
  6462  000610  EC1D  F00B         	call	_isdigit
  6463  000614  A0D8               	btfss	status,0,c
  6464  000616  D003               	goto	l3672
  6465  000618  D7D1               	goto	l3660
  6466  00061A                     l3668:
  6467                           
  6468                           ;doprnt.c: 721: flag |= 0x80;
  6469  00061A  8E30               	bsf	printf@flag,7,c
  6470                           
  6471                           ;doprnt.c: 723: break;
  6472  00061C  D017               	goto	l556
  6473  00061E                     l3672:
  6474  00061E  C01C  FFF6         	movff	printf@f,tblptrl
  6475  000622  C01D  FFF7         	movff	printf@f+1,tblptrh
  6476  000626  4A1C               	infsnz	printf@f,f,c
  6477  000628  2A1D               	incf	printf@f+1,f,c
  6478  00062A                     	if	0	;tblptru may be non-zero
  6479  00062A                     	endif
  6480  00062A                     	if	0	;tblptru may be non-zero
  6481  00062A                     	endif
  6482  00062A  0008               	tblrd		*
  6483  00062C  CFF5 F033          	movff	tablat,printf@c
  6484  000630  5033               	movf	printf@c,w,c
  6485                           
  6486                           ; Switch size 1, requested type "space"
  6487                           ; Number of cases is 4, Range of values is 0 to 120
  6488                           ; switch strategies available:
  6489                           ; Name         Instructions Cycles
  6490                           ; simple_byte           13     7 (average)
  6491                           ;	Chosen strategy is simple_byte
  6492  000632  0A00               	xorlw	0	; case 0
  6493  000634  B4D8               	btfsc	status,2,c
  6494  000636  0012               	return	
  6495  000638  0A64               	xorlw	100	; case 100
  6496  00063A  B4D8               	btfsc	status,2,c
  6497  00063C  D007               	goto	l556
  6498  00063E  0A0D               	xorlw	13	; case 105
  6499  000640  B4D8               	btfsc	status,2,c
  6500  000642  D004               	goto	l556
  6501  000644  0A11               	xorlw	17	; case 120
  6502  000646  B4D8               	btfsc	status,2,c
  6503  000648  D7E8               	goto	l3668
  6504  00064A  D103               	goto	l3770
  6505  00064C                     l556:
  6506                           
  6507                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6508  00064C  BE30               	btfsc	printf@flag,7,c
  6509  00064E  D015               	goto	l3684
  6510                           
  6511                           ;doprnt.c: 1253: {
  6512                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6513  000650  C02B  FFD9         	movff	printf@ap,fsr2l
  6514  000654  C02C  FFDA         	movff	printf@ap+1,fsr2h
  6515  000658  CFDE F02E          	movff	postinc2,printf@val
  6516  00065C  CFDD F02F          	movff	postdec2,printf@val+1
  6517  000660  0E02               	movlw	2
  6518  000662  262B               	addwf	printf@ap,f,c
  6519  000664  0E00               	movlw	0
  6520  000666  222C               	addwfc	printf@ap+1,f,c
  6521                           
  6522                           ;doprnt.c: 1261: if((int)val < 0) {
  6523  000668  AE2F               	btfss	printf@val+1,7,c
  6524  00066A  D044               	goto	l3718
  6525                           
  6526                           ;doprnt.c: 1262: flag |= 0x03;
  6527  00066C  0E03               	movlw	3
  6528  00066E  1230               	iorwf	printf@flag,f,c
  6529                           
  6530                           ;doprnt.c: 1263: val = -val;
  6531  000670  6C2E               	negf	printf@val,c
  6532  000672  1E2F               	comf	printf@val+1,f,c
  6533  000674  B0D8               	btfsc	status,0,c
  6534  000676  2A2F               	incf	printf@val+1,f,c
  6535                           
  6536                           ;doprnt.c: 1264: }
  6537                           ;doprnt.c: 1266: }
  6538  000678  D03D               	goto	l3718
  6539  00067A                     l3684:
  6540                           
  6541                           ;doprnt.c: 1268: else
  6542                           ;doprnt.c: 1273: {
  6543                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6544  00067A  C02B  FFD9         	movff	printf@ap,fsr2l
  6545  00067E  C02C  FFDA         	movff	printf@ap+1,fsr2h
  6546  000682  CFDE F02E          	movff	postinc2,printf@val
  6547  000686  CFDD F02F          	movff	postdec2,printf@val+1
  6548  00068A  0E02               	movlw	2
  6549  00068C  262B               	addwf	printf@ap,f,c
  6550  00068E  0E00               	movlw	0
  6551  000690  222C               	addwfc	printf@ap+1,f,c
  6552                           
  6553                           ;doprnt.c: 1287: }
  6554                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6555  000692  D030               	goto	l3718
  6556  000694                     l3688:
  6557                           
  6558                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6559  000694  0E01               	movlw	1
  6560  000696  6E33               	movwf	printf@c,c
  6561  000698                     l3690:
  6562  000698  0E05               	movlw	5
  6563  00069A  1833               	xorwf	printf@c,w,c
  6564  00069C  B4D8               	btfsc	status,2,c
  6565  00069E  D032               	goto	l3720
  6566                           
  6567                           ;doprnt.c: 1306: if(val < dpowers[c])
  6568  0006A0  5033               	movf	printf@c,w,c
  6569  0006A2  0D02               	mullw	2
  6570  0006A4  0EF8               	movlw	low _dpowers
  6571  0006A6  24F3               	addwf	prodl,w,c
  6572  0006A8  6EF6               	movwf	tblptrl,c
  6573  0006AA  0EFE               	movlw	high _dpowers
  6574  0006AC  20F4               	addwfc	prodh,w,c
  6575  0006AE  6EF7               	movwf	tblptrh,c
  6576  0006B0                     	if	0	;There are less than 3 active tblptr bytes
  6577  0006B0                     	endif
  6578  0006B0  0009               	tblrd		*+
  6579  0006B2  50F5               	movf	tablat,w,c
  6580  0006B4  5C2E               	subwf	printf@val,w,c
  6581  0006B6  0009               	tblrd		*+
  6582  0006B8  50F5               	movf	tablat,w,c
  6583  0006BA  582F               	subwfb	printf@val+1,w,c
  6584  0006BC  A0D8               	btfss	status,0,c
  6585  0006BE  D022               	goto	l3720
  6586                           
  6587                           ;doprnt.c: 1307: break;
  6588  0006C0  2A33               	incf	printf@c,f,c
  6589  0006C2  D7EA               	goto	l3690
  6590  0006C4                     l3702:
  6591                           
  6592                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6593  0006C4  0E01               	movlw	1
  6594  0006C6  6E33               	movwf	printf@c,c
  6595  0006C8                     l3704:
  6596  0006C8  0E04               	movlw	4
  6597  0006CA  1833               	xorwf	printf@c,w,c
  6598  0006CC  B4D8               	btfsc	status,2,c
  6599  0006CE  D01A               	goto	l3720
  6600                           
  6601                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6602  0006D0  5033               	movf	printf@c,w,c
  6603  0006D2  0D02               	mullw	2
  6604  0006D4  0E02               	movlw	low _hexpowers
  6605  0006D6  24F3               	addwf	prodl,w,c
  6606  0006D8  6EF6               	movwf	tblptrl,c
  6607  0006DA  0EFF               	movlw	high _hexpowers
  6608  0006DC  20F4               	addwfc	prodh,w,c
  6609  0006DE  6EF7               	movwf	tblptrh,c
  6610  0006E0                     	if	0	;There are less than 3 active tblptr bytes
  6611  0006E0                     	endif
  6612  0006E0  0009               	tblrd		*+
  6613  0006E2  50F5               	movf	tablat,w,c
  6614  0006E4  5C2E               	subwf	printf@val,w,c
  6615  0006E6  0009               	tblrd		*+
  6616  0006E8  50F5               	movf	tablat,w,c
  6617  0006EA  582F               	subwfb	printf@val+1,w,c
  6618  0006EC  A0D8               	btfss	status,0,c
  6619  0006EE  D00A               	goto	l3720
  6620                           
  6621                           ;doprnt.c: 1318: break;
  6622  0006F0  2A33               	incf	printf@c,f,c
  6623  0006F2  D7EA               	goto	l3704
  6624  0006F4                     l3718:
  6625  0006F4  5030               	movf	printf@flag,w,c
  6626  0006F6  0B80               	andlw	128
  6627                           
  6628                           ; Switch size 1, requested type "space"
  6629                           ; Number of cases is 2, Range of values is 0 to 128
  6630                           ; switch strategies available:
  6631                           ; Name         Instructions Cycles
  6632                           ; simple_byte            7     4 (average)
  6633                           ;	Chosen strategy is simple_byte
  6634  0006F8  0A00               	xorlw	0	; case 0
  6635  0006FA  B4D8               	btfsc	status,2,c
  6636  0006FC  D7CB               	goto	l3688
  6637  0006FE  0A80               	xorlw	128	; case 128
  6638  000700  B4D8               	btfsc	status,2,c
  6639  000702  D7E0               	goto	l3702
  6640  000704                     l3720:
  6641                           
  6642                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6643  000704  5031               	movf	printf@width,w,c
  6644  000706  1032               	iorwf	printf@width+1,w,c
  6645  000708  B4D8               	btfsc	status,2,c
  6646  00070A  D009               	goto	l3726
  6647  00070C  C030  F026         	movff	printf@flag,??_printf
  6648  000710  0E03               	movlw	3
  6649  000712  1626               	andwf	??_printf,f,c
  6650  000714  B4D8               	btfsc	status,2,c
  6651  000716  D003               	goto	l3726
  6652                           
  6653                           ;doprnt.c: 1346: width--;
  6654  000718  0631               	decf	printf@width,f,c
  6655  00071A  A0D8               	btfss	status,0,c
  6656  00071C  0632               	decf	printf@width+1,f,c
  6657  00071E                     l3726:
  6658                           
  6659                           ;doprnt.c: 1381: if(width > c)
  6660  00071E  0E80               	movlw	128
  6661  000720  BE33               	btfsc	printf@c,7,c
  6662  000722  0E7F               	movlw	127
  6663  000724  6E26               	movwf	??_printf& (0+255),c
  6664  000726  5031               	movf	printf@width,w,c
  6665  000728  5C33               	subwf	printf@c,w,c
  6666  00072A  5032               	movf	printf@width+1,w,c
  6667  00072C  0A80               	xorlw	128
  6668  00072E  5826               	subwfb	??_printf& (0+255),w,c
  6669  000730  B0D8               	btfsc	status,0,c
  6670  000732  D007               	goto	l3730
  6671                           
  6672                           ;doprnt.c: 1382: width -= c;
  6673  000734  5033               	movf	printf@c,w,c
  6674  000736  5E31               	subwf	printf@width,f,c
  6675  000738  0E00               	movlw	0
  6676  00073A  BE33               	btfsc	printf@c,7,c
  6677  00073C  0EFF               	movlw	255
  6678  00073E  5A32               	subwfb	printf@width+1,f,c
  6679  000740  D004               	goto	l3732
  6680  000742                     l3730:
  6681                           
  6682                           ;doprnt.c: 1383: else
  6683                           ;doprnt.c: 1384: width = 0;
  6684  000742  0E00               	movlw	0
  6685  000744  6E32               	movwf	printf@width+1,c
  6686  000746  0E00               	movlw	0
  6687  000748  6E31               	movwf	printf@width,c
  6688  00074A                     l3732:
  6689                           
  6690                           ;doprnt.c: 1387: if(flag & 0x04) {
  6691  00074A  A430               	btfss	printf@flag,2,c
  6692  00074C  D014               	goto	l3744
  6693                           
  6694                           ;doprnt.c: 1392: if(flag & 0x03)
  6695  00074E  C030  F026         	movff	printf@flag,??_printf
  6696  000752  0E03               	movlw	3
  6697  000754  1626               	andwf	??_printf,f,c
  6698  000756  B4D8               	btfsc	status,2,c
  6699  000758  D003               	goto	l3738
  6700                           
  6701                           ;doprnt.c: 1393: (putch('-') );
  6702  00075A  0E2D               	movlw	45
  6703  00075C  EC91  F00B         	call	_putch
  6704  000760                     l3738:
  6705                           
  6706                           ;doprnt.c: 1415: if(width)
  6707  000760  5031               	movf	printf@width,w,c
  6708  000762  1032               	iorwf	printf@width+1,w,c
  6709  000764  B4D8               	btfsc	status,2,c
  6710  000766  D01E               	goto	l3754
  6711                           
  6712                           ;doprnt.c: 1417: (putch('0') );
  6713                           
  6714                           ;doprnt.c: 1416: do
  6715  000768  0E30               	movlw	48
  6716  00076A  EC91  F00B         	call	_putch
  6717                           
  6718                           ;doprnt.c: 1418: while(--width);
  6719  00076E  0631               	decf	printf@width,f,c
  6720  000770  A0D8               	btfss	status,0,c
  6721  000772  0632               	decf	printf@width+1,f,c
  6722  000774  D7F5               	goto	l3738
  6723  000776                     l3744:
  6724                           
  6725                           ;doprnt.c: 1422: {
  6726                           ;doprnt.c: 1424: if(width
  6727                           ;doprnt.c: 1428: )
  6728  000776  5031               	movf	printf@width,w,c
  6729  000778  1032               	iorwf	printf@width+1,w,c
  6730  00077A  B4D8               	btfsc	status,2,c
  6731  00077C  D00A               	goto	l3750
  6732  00077E                     l3746:
  6733                           
  6734                           ;doprnt.c: 1430: (putch(' ') );
  6735  00077E  0E20               	movlw	32
  6736  000780  EC91  F00B         	call	_putch
  6737                           
  6738                           ;doprnt.c: 1431: while(--width);
  6739  000784  0631               	decf	printf@width,f,c
  6740  000786  A0D8               	btfss	status,0,c
  6741  000788  0632               	decf	printf@width+1,f,c
  6742  00078A  5031               	movf	printf@width,w,c
  6743  00078C  1032               	iorwf	printf@width+1,w,c
  6744  00078E  A4D8               	btfss	status,2,c
  6745  000790  D7F6               	goto	l3746
  6746  000792                     l3750:
  6747                           
  6748                           ;doprnt.c: 1438: if(flag & 0x03)
  6749  000792  C030  F026         	movff	printf@flag,??_printf
  6750  000796  0E03               	movlw	3
  6751  000798  1626               	andwf	??_printf,f,c
  6752  00079A  B4D8               	btfsc	status,2,c
  6753  00079C  D003               	goto	l3754
  6754                           
  6755                           ;doprnt.c: 1439: (putch('-') );
  6756  00079E  0E2D               	movlw	45
  6757  0007A0  EC91  F00B         	call	_putch
  6758  0007A4                     l3754:
  6759                           
  6760                           ;doprnt.c: 1469: }
  6761                           ;doprnt.c: 1472: prec = c;
  6762  0007A4  C033  F02D         	movff	printf@c,printf@prec
  6763                           
  6764                           ;doprnt.c: 1474: while(prec--) {
  6765  0007A8  D050               	goto	l3768
  6766  0007AA                     l3756:
  6767                           
  6768                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6769  0007AA  502D               	movf	printf@prec,w,c
  6770  0007AC  0D02               	mullw	2
  6771  0007AE  0EF8               	movlw	low _dpowers
  6772  0007B0  24F3               	addwf	prodl,w,c
  6773  0007B2  6EF6               	movwf	tblptrl,c
  6774  0007B4  0EFE               	movlw	high _dpowers
  6775  0007B6  20F4               	addwfc	prodh,w,c
  6776  0007B8  6EF7               	movwf	tblptrh,c
  6777  0007BA                     	if	0	;There are less than 3 active tblptr bytes
  6778  0007BA                     	endif
  6779  0007BA  0009               	tblrd		*+
  6780  0007BC  CFF5 F012          	movff	tablat,___lwdiv@divisor
  6781  0007C0  000A               	tblrd		*-
  6782  0007C2  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  6783  0007C6  C02E  F010         	movff	printf@val,___lwdiv@dividend
  6784  0007CA  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  6785  0007CE  EC5E  F009         	call	___lwdiv	;wreg free
  6786  0007D2  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  6787  0007D6  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  6788  0007DA  0E00               	movlw	0
  6789  0007DC  6E1A               	movwf	___lwmod@divisor+1,c
  6790  0007DE  0E0A               	movlw	10
  6791  0007E0  6E19               	movwf	___lwmod@divisor,c
  6792  0007E2  EC63  F00A         	call	___lwmod	;wreg free
  6793  0007E6  5017               	movf	?___lwmod,w,c
  6794  0007E8  0F30               	addlw	48
  6795  0007EA  6E33               	movwf	printf@c,c
  6796                           
  6797                           ;doprnt.c: 1491: break;
  6798  0007EC  D02B               	goto	l3766
  6799  0007EE                     l3758:
  6800                           
  6801                           ;doprnt.c: 1499: {
  6802                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6803  0007EE  C02E  F010         	movff	printf@val,___lwdiv@dividend
  6804  0007F2  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  6805  0007F6  502D               	movf	printf@prec,w,c
  6806  0007F8  0D02               	mullw	2
  6807  0007FA  0E02               	movlw	low _hexpowers
  6808  0007FC  24F3               	addwf	prodl,w,c
  6809  0007FE  6EF6               	movwf	tblptrl,c
  6810  000800  0EFF               	movlw	high _hexpowers
  6811  000802  20F4               	addwfc	prodh,w,c
  6812  000804  6EF7               	movwf	tblptrh,c
  6813  000806                     	if	0	;There are less than 3 active tblptr bytes
  6814  000806                     	endif
  6815  000806  0009               	tblrd		*+
  6816  000808  CFF5 F012          	movff	tablat,___lwdiv@divisor
  6817  00080C  000A               	tblrd		*-
  6818  00080E  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  6819  000812  EC5E  F009         	call	___lwdiv	;wreg free
  6820  000816  5010               	movf	?___lwdiv,w,c
  6821  000818  0B0F               	andlw	15
  6822  00081A  6E2A               	movwf	printf@idx,c
  6823                           
  6824                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6825  00081C  502A               	movf	printf@idx,w,c
  6826  00081E  0D01               	mullw	1
  6827  000820  0E48               	movlw	low STR_17
  6828  000822  24F3               	addwf	prodl,w,c
  6829  000824  6EF6               	movwf	tblptrl,c
  6830  000826  0EFF               	movlw	high STR_17
  6831  000828  20F4               	addwfc	prodh,w,c
  6832  00082A  6EF7               	movwf	tblptrh,c
  6833  00082C                     	if	0	;There are less than 3 active tblptr bytes
  6834  00082C                     	endif
  6835  00082C  0008               	tblrd		*
  6836  00082E  CFF5 F033          	movff	tablat,printf@c
  6837                           
  6838                           ;doprnt.c: 1523: }
  6839                           
  6840                           ;doprnt.c: 1508: }
  6841                           ;doprnt.c: 1510: break;
  6842  000832  D008               	goto	l3766
  6843  000834                     l3764:
  6844  000834  5030               	movf	printf@flag,w,c
  6845  000836  0B80               	andlw	128
  6846                           
  6847                           ; Switch size 1, requested type "space"
  6848                           ; Number of cases is 2, Range of values is 0 to 128
  6849                           ; switch strategies available:
  6850                           ; Name         Instructions Cycles
  6851                           ; simple_byte            7     4 (average)
  6852                           ;	Chosen strategy is simple_byte
  6853  000838  0A00               	xorlw	0	; case 0
  6854  00083A  B4D8               	btfsc	status,2,c
  6855  00083C  D7B6               	goto	l3756
  6856  00083E  0A80               	xorlw	128	; case 128
  6857  000840  B4D8               	btfsc	status,2,c
  6858  000842  D7D5               	goto	l3758
  6859  000844                     l3766:
  6860                           
  6861                           ;doprnt.c: 1524: (putch(c) );
  6862  000844  5033               	movf	printf@c,w,c
  6863  000846  EC91  F00B         	call	_putch
  6864  00084A                     l3768:
  6865  00084A  062D               	decf	printf@prec,f,c
  6866  00084C  282D               	incf	printf@prec,w,c
  6867  00084E  A4D8               	btfss	status,2,c
  6868  000850  D7F1               	goto	l3764
  6869  000852                     l3770:
  6870  000852  C01C  FFF6         	movff	printf@f,tblptrl
  6871  000856  C01D  FFF7         	movff	printf@f+1,tblptrh
  6872  00085A  4A1C               	infsnz	printf@f,f,c
  6873  00085C  2A1D               	incf	printf@f+1,f,c
  6874  00085E                     	if	0	;tblptru may be non-zero
  6875  00085E                     	endif
  6876  00085E                     	if	0	;tblptru may be non-zero
  6877  00085E                     	endif
  6878  00085E  0008               	tblrd		*
  6879  000860  CFF5 F033          	movff	tablat,printf@c
  6880  000864  5033               	movf	printf@c,w,c
  6881  000866  B4D8               	btfsc	status,2,c
  6882  000868  0012               	return	
  6883  00086A  D67F               	goto	l3644
  6884  00086C                     __end_of_printf:
  6885                           	opt stack 0
  6886                           tblptru	equ	0xFF8
  6887                           tblptrh	equ	0xFF7
  6888                           tblptrl	equ	0xFF6
  6889                           tablat	equ	0xFF5
  6890                           prodh	equ	0xFF4
  6891                           prodl	equ	0xFF3
  6892                           intcon	equ	0xFF2
  6893                           intcon3	equ	0xFF0
  6894                           postinc0	equ	0xFEE
  6895                           wreg	equ	0xFE8
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _putch *****************
  6904 ;; Defined at:
  6905 ;;		line 31 in file "lcd.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  data            1    wreg     unsigned char 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  data            1   17[COMRAM] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      void 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;Total ram usage:        1 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    2
  6926 ;; This function calls:
  6927 ;;		_lcdNibble
  6928 ;; This function is called by:
  6929 ;;		_printf
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text37
  6934  001722                     __ptext37:
  6935                           	opt stack 0
  6936  001722                     _putch:
  6937                           	opt stack 25
  6938                           
  6939                           ;incstack = 0
  6940                           ;putch@data stored from wreg
  6941  001722  6E12               	movwf	putch@data,c
  6942                           
  6943                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6944  001724  848C               	bsf	3980,2,c	;volatile
  6945                           
  6946                           ;lcd.c: 33: lcdNibble(data);
  6947  001726  5012               	movf	putch@data,w,c
  6948  001728  EC33  F009         	call	_lcdNibble
  6949  00172C  0012               	return		;funcret
  6950  00172E                     __end_of_putch:
  6951                           	opt stack 0
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           intcon	equ	0xFF2
  6959                           intcon3	equ	0xFF0
  6960                           postinc0	equ	0xFEE
  6961                           wreg	equ	0xFE8
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function _isdigit *****************
  6970 ;; Defined at:
  6971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  c               1    wreg     unsigned char 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  c               1   17[COMRAM] unsigned char 
  6976 ;; Return value:  Size  Location     Type
  6977 ;;		None               void
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;Total ram usage:        3 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    1
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_printf
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           	psect	text38
  7000  00163A                     __ptext38:
  7001                           	opt stack 0
  7002  00163A                     _isdigit:
  7003                           	opt stack 26
  7004                           
  7005                           ;incstack = 0
  7006                           ;isdigit@c stored from wreg
  7007  00163A  6E12               	movwf	isdigit@c,c
  7008  00163C  0E00               	movlw	0
  7009  00163E  6E11               	movwf	_isdigit$1336,c
  7010  001640  0E3A               	movlw	58
  7011  001642  6012               	cpfslt	isdigit@c,c
  7012  001644  D005               	goto	l3590
  7013  001646  0E2F               	movlw	47
  7014  001648  6412               	cpfsgt	isdigit@c,c
  7015  00164A  D002               	goto	l3590
  7016  00164C  0E01               	movlw	1
  7017  00164E  6E11               	movwf	_isdigit$1336,c
  7018  001650                     l3590:
  7019  001650  C011  F010         	movff	_isdigit$1336,??_isdigit
  7020  001654  3010               	rrcf	??_isdigit,w,c
  7021  001656  0012               	return	
  7022  001658                     __end_of_isdigit:
  7023                           	opt stack 0
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodh	equ	0xFF4
  7029                           prodl	equ	0xFF3
  7030                           intcon	equ	0xFF2
  7031                           intcon3	equ	0xFF0
  7032                           postinc0	equ	0xFEE
  7033                           wreg	equ	0xFE8
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function ___wmul *****************
  7042 ;; Defined at:
  7043 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;  multiplier      2   15[COMRAM] unsigned int 
  7046 ;;  multiplicand    2   17[COMRAM] unsigned int 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;  product         2   19[COMRAM] unsigned int 
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  2   15[COMRAM] unsigned int 
  7051 ;; Registers used:
  7052 ;;		wreg, status,2, status,0, prodl, prodh
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;Total ram usage:        6 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    1
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_get_timeDif
  7069 ;;		_executingState
  7070 ;;		_printf
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           	psect	text39
  7075  001614                     __ptext39:
  7076                           	opt stack 0
  7077  001614                     ___wmul:
  7078                           	opt stack 26
  7079                           
  7080                           ;incstack = 0
  7081  001614  5010               	movf	___wmul@multiplier,w,c
  7082  001616  0212               	mulwf	___wmul@multiplicand,c
  7083  001618  CFF3 F014          	movff	prodl,___wmul@product
  7084  00161C  CFF4 F015          	movff	prodh,___wmul@product+1
  7085  001620  5010               	movf	___wmul@multiplier,w,c
  7086  001622  0213               	mulwf	___wmul@multiplicand+1,c
  7087  001624  50F3               	movf	prodl,w,c
  7088  001626  2615               	addwf	___wmul@product+1,f,c
  7089  001628  5011               	movf	___wmul@multiplier+1,w,c
  7090  00162A  0212               	mulwf	___wmul@multiplicand,c
  7091  00162C  50F3               	movf	prodl,w,c
  7092  00162E  2615               	addwf	___wmul@product+1,f,c
  7093  001630  C014  F010         	movff	___wmul@product,?___wmul
  7094  001634  C015  F011         	movff	___wmul@product+1,?___wmul+1
  7095  001638  0012               	return	
  7096  00163A                     __end_of___wmul:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon3	equ	0xFF0
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function ___lwmod *****************
  7116 ;; Defined at:
  7117 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  dividend        2   22[COMRAM] unsigned int 
  7120 ;;  divisor         2   24[COMRAM] unsigned int 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  counter         1   26[COMRAM] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  2   22[COMRAM] unsigned int 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;Total ram usage:        5 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    1
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_printf
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text40
  7147  0014C6                     __ptext40:
  7148                           	opt stack 0
  7149  0014C6                     ___lwmod:
  7150                           	opt stack 26
  7151                           
  7152                           ;incstack = 0
  7153  0014C6  5019               	movf	___lwmod@divisor,w,c
  7154  0014C8  101A               	iorwf	___lwmod@divisor+1,w,c
  7155  0014CA  B4D8               	btfsc	status,2,c
  7156  0014CC  D018               	goto	l1011
  7157  0014CE  0E01               	movlw	1
  7158  0014D0  6E1B               	movwf	___lwmod@counter,c
  7159  0014D2  D004               	goto	l3628
  7160  0014D4                     l3626:
  7161  0014D4  90D8               	bcf	status,0,c
  7162  0014D6  3619               	rlcf	___lwmod@divisor,f,c
  7163  0014D8  361A               	rlcf	___lwmod@divisor+1,f,c
  7164  0014DA  2A1B               	incf	___lwmod@counter,f,c
  7165  0014DC                     l3628:
  7166  0014DC  AE1A               	btfss	___lwmod@divisor+1,7,c
  7167  0014DE  D7FA               	goto	l3626
  7168  0014E0                     l3630:
  7169  0014E0  5019               	movf	___lwmod@divisor,w,c
  7170  0014E2  5C17               	subwf	___lwmod@dividend,w,c
  7171  0014E4  501A               	movf	___lwmod@divisor+1,w,c
  7172  0014E6  5818               	subwfb	___lwmod@dividend+1,w,c
  7173  0014E8  A0D8               	btfss	status,0,c
  7174  0014EA  D004               	goto	l3634
  7175  0014EC  5019               	movf	___lwmod@divisor,w,c
  7176  0014EE  5E17               	subwf	___lwmod@dividend,f,c
  7177  0014F0  501A               	movf	___lwmod@divisor+1,w,c
  7178  0014F2  5A18               	subwfb	___lwmod@dividend+1,f,c
  7179  0014F4                     l3634:
  7180  0014F4  90D8               	bcf	status,0,c
  7181  0014F6  321A               	rrcf	___lwmod@divisor+1,f,c
  7182  0014F8  3219               	rrcf	___lwmod@divisor,f,c
  7183  0014FA  2E1B               	decfsz	___lwmod@counter,f,c
  7184  0014FC  D7F1               	goto	l3630
  7185  0014FE                     l1011:
  7186  0014FE  C017  F017         	movff	___lwmod@dividend,?___lwmod
  7187  001502  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  7188  001506  0012               	return		;funcret
  7189  001508                     __end_of___lwmod:
  7190                           	opt stack 0
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           intcon3	equ	0xFF0
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function ___lwdiv *****************
  7209 ;; Defined at:
  7210 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  dividend        2   15[COMRAM] unsigned int 
  7213 ;;  divisor         2   17[COMRAM] unsigned int 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  quotient        2   20[COMRAM] unsigned int 
  7216 ;;  counter         1   19[COMRAM] unsigned char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  2   15[COMRAM] unsigned int 
  7219 ;; Registers used:
  7220 ;;		wreg, status,2, status,0
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7226 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;Total ram usage:        7 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    1
  7233 ;; This function calls:
  7234 ;;		Nothing
  7235 ;; This function is called by:
  7236 ;;		_printf
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text41
  7241  0012BC                     __ptext41:
  7242                           	opt stack 0
  7243  0012BC                     ___lwdiv:
  7244                           	opt stack 26
  7245                           
  7246                           ;incstack = 0
  7247  0012BC  0E00               	movlw	0
  7248  0012BE  6E16               	movwf	___lwdiv@quotient+1,c
  7249  0012C0  0E00               	movlw	0
  7250  0012C2  6E15               	movwf	___lwdiv@quotient,c
  7251  0012C4  5012               	movf	___lwdiv@divisor,w,c
  7252  0012C6  1013               	iorwf	___lwdiv@divisor+1,w,c
  7253  0012C8  B4D8               	btfsc	status,2,c
  7254  0012CA  D01C               	goto	l1001
  7255  0012CC  0E01               	movlw	1
  7256  0012CE  6E14               	movwf	___lwdiv@counter,c
  7257  0012D0  D004               	goto	l3608
  7258  0012D2                     l3606:
  7259  0012D2  90D8               	bcf	status,0,c
  7260  0012D4  3612               	rlcf	___lwdiv@divisor,f,c
  7261  0012D6  3613               	rlcf	___lwdiv@divisor+1,f,c
  7262  0012D8  2A14               	incf	___lwdiv@counter,f,c
  7263  0012DA                     l3608:
  7264  0012DA  AE13               	btfss	___lwdiv@divisor+1,7,c
  7265  0012DC  D7FA               	goto	l3606
  7266  0012DE                     l3610:
  7267  0012DE  90D8               	bcf	status,0,c
  7268  0012E0  3615               	rlcf	___lwdiv@quotient,f,c
  7269  0012E2  3616               	rlcf	___lwdiv@quotient+1,f,c
  7270  0012E4  5012               	movf	___lwdiv@divisor,w,c
  7271  0012E6  5C10               	subwf	___lwdiv@dividend,w,c
  7272  0012E8  5013               	movf	___lwdiv@divisor+1,w,c
  7273  0012EA  5811               	subwfb	___lwdiv@dividend+1,w,c
  7274  0012EC  A0D8               	btfss	status,0,c
  7275  0012EE  D005               	goto	l3618
  7276  0012F0  5012               	movf	___lwdiv@divisor,w,c
  7277  0012F2  5E10               	subwf	___lwdiv@dividend,f,c
  7278  0012F4  5013               	movf	___lwdiv@divisor+1,w,c
  7279  0012F6  5A11               	subwfb	___lwdiv@dividend+1,f,c
  7280  0012F8  8015               	bsf	___lwdiv@quotient,0,c
  7281  0012FA                     l3618:
  7282  0012FA  90D8               	bcf	status,0,c
  7283  0012FC  3213               	rrcf	___lwdiv@divisor+1,f,c
  7284  0012FE  3212               	rrcf	___lwdiv@divisor,f,c
  7285  001300  2E14               	decfsz	___lwdiv@counter,f,c
  7286  001302  D7ED               	goto	l3610
  7287  001304                     l1001:
  7288  001304  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  7289  001308  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7290  00130C  0012               	return		;funcret
  7291  00130E                     __end_of___lwdiv:
  7292                           	opt stack 0
  7293                           tblptru	equ	0xFF8
  7294                           tblptrh	equ	0xFF7
  7295                           tblptrl	equ	0xFF6
  7296                           tablat	equ	0xFF5
  7297                           prodh	equ	0xFF4
  7298                           prodl	equ	0xFF3
  7299                           intcon	equ	0xFF2
  7300                           intcon3	equ	0xFF0
  7301                           postinc0	equ	0xFEE
  7302                           wreg	equ	0xFE8
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function _lcdInst *****************
  7311 ;; Defined at:
  7312 ;;		line 26 in file "lcd.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  data            1    wreg     unsigned char 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  data            1   17[COMRAM] unsigned char 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      void 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;Total ram usage:        1 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    2
  7333 ;; This function calls:
  7334 ;;		_lcdNibble
  7335 ;; This function is called by:
  7336 ;;		_initLCD
  7337 ;;		_update_lcd
  7338 ;;		_executingState
  7339 ;;		_debugState
  7340 ;;		_fixLCD
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text42
  7345  00172E                     __ptext42:
  7346                           	opt stack 0
  7347  00172E                     _lcdInst:
  7348                           	opt stack 26
  7349                           
  7350                           ;incstack = 0
  7351                           ;lcdInst@data stored from wreg
  7352  00172E  6E12               	movwf	lcdInst@data,c
  7353                           
  7354                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7355  001730  948C               	bcf	3980,2,c	;volatile
  7356                           
  7357                           ;lcd.c: 28: lcdNibble(data);
  7358  001732  5012               	movf	lcdInst@data,w,c
  7359  001734  EC33  F009         	call	_lcdNibble
  7360  001738  0012               	return		;funcret
  7361  00173A                     __end_of_lcdInst:
  7362                           	opt stack 0
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           prodh	equ	0xFF4
  7368                           prodl	equ	0xFF3
  7369                           intcon	equ	0xFF2
  7370                           intcon3	equ	0xFF0
  7371                           postinc0	equ	0xFEE
  7372                           wreg	equ	0xFE8
  7373                           indf2	equ	0xFDF
  7374                           postinc2	equ	0xFDE
  7375                           postdec2	equ	0xFDD
  7376                           fsr2h	equ	0xFDA
  7377                           fsr2l	equ	0xFD9
  7378                           status	equ	0xFD8
  7379                           
  7380 ;; *************** function _lcdNibble *****************
  7381 ;; Defined at:
  7382 ;;		line 36 in file "lcd.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  data            1    wreg     unsigned char 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  data            1   16[COMRAM] unsigned char 
  7387 ;;  temp            1   15[COMRAM] unsigned char 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;Total ram usage:        2 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    1
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_lcdInst
  7408 ;;		_putch
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text43
  7413  001266                     __ptext43:
  7414                           	opt stack 0
  7415  001266                     _lcdNibble:
  7416                           	opt stack 25
  7417                           
  7418                           ;incstack = 0
  7419                           ;lcdNibble@data stored from wreg
  7420  001266  6E11               	movwf	lcdNibble@data,c
  7421                           
  7422                           ;lcd.c: 38: char temp = data & 0xF0;
  7423  001268  5011               	movf	lcdNibble@data,w,c
  7424  00126A  0BF0               	andlw	240
  7425  00126C  6E10               	movwf	lcdNibble@temp,c
  7426                           
  7427                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7428  00126E  508C               	movf	3980,w,c	;volatile
  7429  001270  0B0F               	andlw	15
  7430  001272  6E8C               	movwf	3980,c	;volatile
  7431                           
  7432                           ;lcd.c: 40: LATD = temp | LATD;
  7433  001274  5010               	movf	lcdNibble@temp,w,c
  7434  001276  108C               	iorwf	3980,w,c	;volatile
  7435  001278  6E8C               	movwf	3980,c	;volatile
  7436                           
  7437                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7438  00127A  968C               	bcf	3980,3,c	;volatile
  7439                           
  7440                           ;lcd.c: 43: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7441  00127C  0E14               	movlw	20
  7442  00127E                     u3687:
  7443  00127E  2EE8               	decfsz	wreg,f,c
  7444  001280  D7FE               	bra	u3687
  7445  001282  D000               	nop2	
  7446                           
  7447                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7448  001284  868C               	bsf	3980,3,c	;volatile
  7449                           
  7450                           ;lcd.c: 45: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7451  001286  0E14               	movlw	20
  7452  001288                     u3697:
  7453  001288  2EE8               	decfsz	wreg,f,c
  7454  00128A  D7FE               	bra	u3697
  7455  00128C  D000               	nop2	
  7456                           
  7457                           ;lcd.c: 47: data = data << 4;
  7458  00128E  3811               	swapf	lcdNibble@data,w,c
  7459  001290  0BF0               	andlw	240
  7460  001292  6E11               	movwf	lcdNibble@data,c
  7461                           
  7462                           ;lcd.c: 49: temp = data & 0xF0;
  7463  001294  5011               	movf	lcdNibble@data,w,c
  7464  001296  0BF0               	andlw	240
  7465  001298  6E10               	movwf	lcdNibble@temp,c
  7466                           
  7467                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7468  00129A  508C               	movf	3980,w,c	;volatile
  7469  00129C  0B0F               	andlw	15
  7470  00129E  6E8C               	movwf	3980,c	;volatile
  7471                           
  7472                           ;lcd.c: 51: LATD = temp | LATD;
  7473  0012A0  5010               	movf	lcdNibble@temp,w,c
  7474  0012A2  108C               	iorwf	3980,w,c	;volatile
  7475  0012A4  6E8C               	movwf	3980,c	;volatile
  7476                           
  7477                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7478  0012A6  968C               	bcf	3980,3,c	;volatile
  7479                           
  7480                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7481  0012A8  0E14               	movlw	20
  7482  0012AA                     u3707:
  7483  0012AA  2EE8               	decfsz	wreg,f,c
  7484  0012AC  D7FE               	bra	u3707
  7485  0012AE  D000               	nop2	
  7486                           
  7487                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7488  0012B0  868C               	bsf	3980,3,c	;volatile
  7489                           
  7490                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7491  0012B2  0E14               	movlw	20
  7492  0012B4                     u3717:
  7493  0012B4  2EE8               	decfsz	wreg,f,c
  7494  0012B6  D7FE               	bra	u3717
  7495  0012B8  D000               	nop2	
  7496  0012BA  0012               	return		;funcret
  7497  0012BC                     __end_of_lcdNibble:
  7498                           	opt stack 0
  7499                           tblptru	equ	0xFF8
  7500                           tblptrh	equ	0xFF7
  7501                           tblptrl	equ	0xFF6
  7502                           tablat	equ	0xFF5
  7503                           prodh	equ	0xFF4
  7504                           prodl	equ	0xFF3
  7505                           intcon	equ	0xFF2
  7506                           intcon3	equ	0xFF0
  7507                           postinc0	equ	0xFEE
  7508                           wreg	equ	0xFE8
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _keypressed *****************
  7517 ;; Defined at:
  7518 ;;		line 479 in file "main.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;		None
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  keypress        1   14[COMRAM] unsigned char 
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      void 
  7525 ;; Registers used:
  7526 ;;		wreg, status,2, status,0
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;Total ram usage:       15 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; This function calls:
  7539 ;;		Nothing
  7540 ;; This function is called by:
  7541 ;;		Interrupt level 2
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	intcode
  7546  000008                     __pintcode:
  7547                           	opt stack 0
  7548  000008                     _keypressed:
  7549                           	opt stack 25
  7550                           
  7551                           ;incstack = 0
  7552  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7553  00000A  ED74  F007         	call	int_func,f	;refresh shadow registers
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           intcon	equ	0xFF2
  7561                           intcon3	equ	0xFF0
  7562                           postinc0	equ	0xFEE
  7563                           wreg	equ	0xFE8
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571                           	psect	intcode_body
  7572  000EE8                     __pintcode_body:
  7573                           	opt stack 25
  7574  000EE8                     int_func:
  7575                           	opt stack 25
  7576  000EE8  0006               	pop		; remove dummy address from shadow register refresh
  7577  000EEA  CFFA F001          	movff	pclath,??_keypressed
  7578  000EEE  CFFB F002          	movff	pclatu,??_keypressed+1
  7579  000EF2  CFE9 F003          	movff	fsr0l,??_keypressed+2
  7580  000EF6  CFEA F004          	movff	fsr0h,??_keypressed+3
  7581  000EFA  CFE1 F005          	movff	fsr1l,??_keypressed+4
  7582  000EFE  CFE2 F006          	movff	fsr1h,??_keypressed+5
  7583  000F02  CFD9 F007          	movff	fsr2l,??_keypressed+6
  7584  000F06  CFDA F008          	movff	fsr2h,??_keypressed+7
  7585  000F0A  CFF3 F009          	movff	prodl,??_keypressed+8
  7586  000F0E  CFF4 F00A          	movff	prodh,??_keypressed+9
  7587  000F12  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  7588  000F16  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  7589  000F1A  CFF8 F00D          	movff	tblptru,??_keypressed+12
  7590  000F1E  CFF5 F00E          	movff	tablat,??_keypressed+13
  7591                           
  7592                           ;main.c: 481: if (INT1IF)
  7593  000F22  A0F0               	btfss	intcon3,0,c	;volatile
  7594  000F24  D01C               	goto	i2l309
  7595  000F26                     i2l2246:
  7596                           
  7597                           ;main.c: 484: {
  7598                           ;main.c: 485: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7599  000F26  3881               	swapf	3969,w,c	;volatile
  7600  000F28  0B0F               	andlw	15
  7601  000F2A  0B0F               	andlw	15
  7602  000F2C  6E0F               	movwf	keypressed@keypress,c
  7603                           
  7604                           ;main.c: 486: if (keypress == 0b1101)
  7605  000F2E  0E0D               	movlw	13
  7606  000F30  180F               	xorwf	keypressed@keypress,w,c
  7607  000F32  A4D8               	btfss	status,2,c
  7608  000F34  D7F8               	goto	i2l2246
  7609                           
  7610                           ;main.c: 487: {
  7611                           ;main.c: 488: LATA = 0x00;
  7612  000F36  0E00               	movlw	0
  7613  000F38  6E89               	movwf	3977,c	;volatile
  7614                           
  7615                           ;main.c: 489: LATB = 0x00;
  7616  000F3A  0E00               	movlw	0
  7617  000F3C  6E8A               	movwf	3978,c	;volatile
  7618                           
  7619                           ;main.c: 490: LATC = 0x00;
  7620  000F3E  0E00               	movlw	0
  7621  000F40  6E8B               	movwf	3979,c	;volatile
  7622                           
  7623                           ;main.c: 491: LATD = 0x00;
  7624  000F42  0E00               	movlw	0
  7625  000F44  6E8C               	movwf	3980,c	;volatile
  7626                           
  7627                           ;main.c: 492: LATE = 0x00;
  7628  000F46  0E00               	movlw	0
  7629  000F48  6E8D               	movwf	3981,c	;volatile
  7630                           
  7631                           ;main.c: 493: LATCbits.LATC6 = 0;
  7632  000F4A  9C8B               	bcf	3979,6,c	;volatile
  7633                           
  7634                           ;main.c: 494: LATBbits.LATB0 = 0;
  7635  000F4C  908A               	bcf	3978,0,c	;volatile
  7636                           
  7637                           ;main.c: 495: state = FINISH;
  7638  000F4E  0E02               	movlw	2
  7639  000F50  6E4B               	movwf	_state,c
  7640                           
  7641                           ;main.c: 496: runResult = 0;
  7642  000F52  0E00               	movlw	0
  7643  000F54  6E46               	movwf	_runResult+1,c
  7644  000F56  0E00               	movlw	0
  7645  000F58  6E45               	movwf	_runResult,c
  7646                           
  7647                           ;main.c: 497: (INTCONbits.GIE = 0);
  7648  000F5A  9EF2               	bcf	intcon,7,c	;volatile
  7649                           
  7650                           ;main.c: 499: }
  7651                           ;main.c: 500: }
  7652                           ;main.c: 501: INT1IF = 0;
  7653                           
  7654                           ;main.c: 498: break;
  7655  000F5C  90F0               	bcf	intcon3,0,c	;volatile
  7656  000F5E                     i2l309:
  7657  000F5E  C00E  FFF5         	movff	??_keypressed+13,tablat
  7658  000F62  C00D  FFF8         	movff	??_keypressed+12,tblptru
  7659  000F66  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  7660  000F6A  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  7661  000F6E  C00A  FFF4         	movff	??_keypressed+9,prodh
  7662  000F72  C009  FFF3         	movff	??_keypressed+8,prodl
  7663  000F76  C008  FFDA         	movff	??_keypressed+7,fsr2h
  7664  000F7A  C007  FFD9         	movff	??_keypressed+6,fsr2l
  7665  000F7E  C006  FFE2         	movff	??_keypressed+5,fsr1h
  7666  000F82  C005  FFE1         	movff	??_keypressed+4,fsr1l
  7667  000F86  C004  FFEA         	movff	??_keypressed+3,fsr0h
  7668  000F8A  C003  FFE9         	movff	??_keypressed+2,fsr0l
  7669  000F8E  C002  FFFB         	movff	??_keypressed+1,pclatu
  7670  000F92  C001  FFFA         	movff	??_keypressed,pclath
  7671  000F96  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7672  000F98  0011               	retfie		f
  7673  000F9A                     __end_of_keypressed:
  7674                           	opt stack 0
  7675                           pclatu	equ	0xFFB
  7676                           pclath	equ	0xFFA
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           prodh	equ	0xFF4
  7682                           prodl	equ	0xFF3
  7683                           intcon	equ	0xFF2
  7684                           intcon3	equ	0xFF0
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           fsr1h	equ	0xFE2
  7690                           fsr1l	equ	0xFE1
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           fsr2h	equ	0xFDA
  7695                           fsr2l	equ	0xFD9
  7696                           status	equ	0xFD8
  7697                           pclatu	equ	0xFFB
  7698                           pclath	equ	0xFFA
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           intcon	equ	0xFF2
  7706                           intcon3	equ	0xFF0
  7707                           postinc0	equ	0xFEE
  7708                           fsr0h	equ	0xFEA
  7709                           fsr0l	equ	0xFE9
  7710                           wreg	equ	0xFE8
  7711                           fsr1h	equ	0xFE2
  7712                           fsr1l	equ	0xFE1
  7713                           indf2	equ	0xFDF
  7714                           postinc2	equ	0xFDE
  7715                           postdec2	equ	0xFDD
  7716                           fsr2h	equ	0xFDA
  7717                           fsr2l	equ	0xFD9
  7718                           status	equ	0xFD8
  7719                           
  7720                           	psect	rparam
  7721  0000                     pclatu	equ	0xFFB
  7722                           pclath	equ	0xFFA
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodh	equ	0xFF4
  7728                           prodl	equ	0xFF3
  7729                           intcon	equ	0xFF2
  7730                           intcon3	equ	0xFF0
  7731                           postinc0	equ	0xFEE
  7732                           fsr0h	equ	0xFEA
  7733                           fsr0l	equ	0xFE9
  7734                           wreg	equ	0xFE8
  7735                           fsr1h	equ	0xFE2
  7736                           fsr1l	equ	0xFE1
  7737                           indf2	equ	0xFDF
  7738                           postinc2	equ	0xFDE
  7739                           postdec2	equ	0xFDD
  7740                           fsr2h	equ	0xFDA
  7741                           fsr2l	equ	0xFD9
  7742                           status	equ	0xFD8
  7743                           
  7744                           	psect	temp
  7745  00005B                     btemp:
  7746                           	opt stack 0
  7747  00005B                     	ds	1
  7748  0000                     int$flags	set	btemp
  7749                           pclatu	equ	0xFFB
  7750                           pclath	equ	0xFFA
  7751                           tblptru	equ	0xFF8
  7752                           tblptrh	equ	0xFF7
  7753                           tblptrl	equ	0xFF6
  7754                           tablat	equ	0xFF5
  7755                           prodh	equ	0xFF4
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           intcon3	equ	0xFF0
  7759                           postinc0	equ	0xFEE
  7760                           fsr0h	equ	0xFEA
  7761                           fsr0l	equ	0xFE9
  7762                           wreg	equ	0xFE8
  7763                           fsr1h	equ	0xFE2
  7764                           fsr1l	equ	0xFE1
  7765                           indf2	equ	0xFDF
  7766                           postinc2	equ	0xFDE
  7767                           postdec2	equ	0xFDD
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8


Data Sizes:
    Strings     238
    Constant    42
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      90
    BANK0           128     46      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eeprom_LogResult@data	PTR unsigned char  size(2) Largest target is 8
		 -> executingState@res(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[15]), STR_15(CODE[15]), STR_14(CODE[15]), STR_13(CODE[12]), 
		 -> STR_12(CODE[18]), STR_11(CODE[6]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[19]), STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@time	PTR int  size(2) Largest target is 14
		 -> starttime(BANK0[14]), time(COMRAM[14]), 

    eeprom_GetLog@res	PTR int  size(2) Largest target is 1
		 -> logdata(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_fixLCD
    _eeprom_GetLog->_eeprom_ReadByte
    _fixLCD->_printf
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _executingState->_printf
    _update_lcd->_printf
    _get_timeDif->_get_time
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _eeprom_LogResult->_eeprom_WriteByte
    _dispenseSnCan->_servoRotate0
    _dispenseSnCan->_servoRotate90
    _dispenseAlCan->_servoRotate0
    _dispenseAlCan->_servoRotate90
    _eeprom_initialize->_eeprom_WriteByte
    _newestAddress->_eeprom_ReadByte
    _debugState->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executingState

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   61527
                    _I2C_Master_Init
                         _debugState
                  _eeprom_initialize
                     _executingState
                        _finishState
                             _fixLCD
                            _initLCD
                           _logState
                          _mainState
 ---------------------------------------------------------------------------------
 (1) _mainState                                            2     2      0    7379
                                             51 COMRAM     2     2      0
                           _get_time
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _logState                                             4     4      0    7050
                                             51 COMRAM     4     4      0
                      _eeprom_GetLog
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _eeprom_GetLog                                        9     5      4     846
                                             17 COMRAM     9     5      4
                    _eeprom_ReadByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (1) _fixLCD                                              13    13      0    7871
                                             51 COMRAM    13    13      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             28 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _finishState                                          4     4      0    6136
                                             51 COMRAM     4     4      0
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _readKey                                              5     3      2      69
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _executingState                                      49    49      0   25029
                                             51 COMRAM     3     3      0
                                              0 BANK0     46    46      0
                             ___wmul
                      _dispenseAlCan
                      _dispenseSnCan
                   _eeprom_LogResult
                           _get_time
                        _get_timeDif
                            _lcdInst
                             _printf
                          _readAlBot
                          _readAlTop
                          _readSnBot
                       _readSnSensor
                          _readSnTop
                       _servoRotate0
                      _servoRotate90
                     _servoRotate90n
                     _servoRotateArm
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _update_lcd                                           0     0      0    6033
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readSnTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnSensor                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_timeDif                                         23    21      2    3598
                                             23 COMRAM    23    21      2
                             ___wmul
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1181
                                             18 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                             16 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             16 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_LogResult                                     5     3      2    1012
                                             18 COMRAM     5     3      2
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (2) _dispenseSnCan                                        2     2      0    1184
                                             21 COMRAM     2     2      0
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _dispenseAlCan                                        2     2      0    1184
                                             21 COMRAM     2     2      0
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        6     4      2     438
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         6     4      2     746
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _eeprom_initialize                                    0     0      0     771
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (3) _newestAddress                                        0     0      0     216
                    _eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (4) _eeprom_ReadByte                                      2     0      2     216
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_WriteByte                                     3     0      3     555
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _debugState                                           2     2      0    6656
                                             51 COMRAM     2     2      0
                            _lcdInst
                             _printf
                     _servoRotate90n
                     _servoRotateArm
 ---------------------------------------------------------------------------------
 (2) _servoRotateArm                                       9     7      2     108
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate90n                                       6     4      2     515
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    5838
                                             27 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1926
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _debugState
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _servoRotate90n
     _servoRotateArm
   _eeprom_initialize
     _eeprom_WriteByte
     _newestAddress
       _eeprom_ReadByte
   _executingState
     ___wmul
     _dispenseAlCan
       _servoRotate0
       _servoRotate90
     _dispenseSnCan
       _servoRotate0
       _servoRotate90
     _eeprom_LogResult
       _eeprom_WriteByte
       _newestAddress
         _eeprom_ReadByte
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _get_timeDif
       ___wmul
       _get_time
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readAlBot
     _readAlTop
     _readSnBot
     _readSnSensor
     _readSnTop
     _servoRotate0
     _servoRotate90
     _servoRotate90n
     _servoRotateArm
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _finishState
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _fixLCD
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _logState
     _eeprom_GetLog
       _eeprom_ReadByte
       _newestAddress
         _eeprom_ReadByte
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _mainState
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2E      3C       5       46.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      34        0.0%
DATA                 0      0      96       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 21 00:21:00 2017

              ?_get_timeDif 0018                          l34 1702                ?_finishState 0001  
           readKey@keypress 0012         ___wmul@multiplicand 0012                 __CFG_BORV$3 000000  
             servoRotate0@i 0014                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000  
                       l211 1408                         l212 1432                         l214 1414  
                       l330 160A                         l324 16FA                         l261 052C  
                       l350 120A                         l345 13A6                         l451 0DCA  
                       l444 0D76                         l453 0DCE                         l454 0DD2  
                       l446 0D7A                         l470 0D04                         l455 0DD6  
                       l447 0D7E                         l463 0CB0                         l456 0DDA  
                       l448 0D82                         l472 0D08                         l288 0A1C  
                       l449 0D86                         l457 0E24                         l473 0D0C  
                       l465 0CB4                         l482 0E3C                         l474 0D10  
                       l466 0CB8                         l491 0E92                         l475 0D14  
                       l467 0CBC                         l556 064C                         l492 0E96  
                       l484 0E40                         l468 0CC0                         l476 0D5E  
                       l493 0E9A                         l485 0E44                         l494 0E9E  
                       l486 0E48                         l487 0E4C                         l495 0EE6  
                       l489 0E8E                         l498 115E                         l499 11A2  
                       l948 1130                __CFG_CPB$OFF 000000                         _PEN 007E2A  
              __CFG_CPD$OFF 000000                         _SEN 007E28              ?_dispenseAlCan 0001  
                       prod 000FF3                         wreg 000FE8              ?_dispenseSnCan 0001  
            servoRotate90@i 0014                __CFG_LVP$OFF 000000       __end_of_newestAddress 1722  
              __CFG_WDT$OFF 000000                        l1001 1304                        l1011 14FE  
                      l4004 16E2                        l4026 169A                        l4210 0328  
                      l4106 13E2                        l4060 138C                        l4046 118C  
                      l4216 0346                        l4072 11C6                        l3610 12DE  
                      l4226 038A                        l4170 0242                        l4162 020E  
                      l4306 1526                        l2730 10E2                        l4244 03FA  
                      l4236 03C8                        l2732 10EE                        l4412 0A0A  
                      l4076 11D6                        l4332 134C                        l4084 13AC  
                      l3606 12D2                        l3630 14E0                        l3702 06C4  
                      l4246 0404                        l4182 0284                        l4174 0258  
                      l2814 1424                        l2742 1122                        l2734 10F2  
                      l4318 131A                        l3608 12DA                        l3704 06C8  
                      l3720 0704                        l3800 0DBA                        l4272 0498  
                      l4264 0472                        l3618 12FA                        l3634 14F4  
                      l3626 14D4                        l3730 0742                        l3650 0588  
                      l4290 04FC                        l4274 04A2                        l4178 026E  
                      l4370 08E0                        l4098 13D6                        l3628 14DC  
                      l3732 074A                        l3660 05BC                        l3644 056A  
                      l3804 0DDE                        l3820 0CA2                        l4284 04DA  
                      l4196 02D6                        l4292 0512                        l3590 1650  
                      l3750 0792                        l3726 071E                        l3718 06F4  
                      l3654 058E                        l3806 0E0E                        l3558 15E8  
                      l3902 0C42                        l4294 0528                        l4374 0914  
                      l4470 100E                        l3744 0776                        l3672 061E  
                      l3648 057A                        l3832 0D18                        l3904 0C4E  
                      l3912 0C70                        l4384 0938                        l4472 1014  
                      l4464 0FFC                        l3746 077E                        l3754 07A4  
                      l3738 0760                        l3690 0698                        l3770 0852  
                      l3834 0D48                        l3826 0CC4                        l3914 0C8C  
                      l4378 091C                        l4466 1002                        l3756 07AA  
                      l3764 0834                        l3684 067A                        l3668 061A  
                      l3828 0CF4                        l3780 1076                        l3908 0C62  
                      l4468 1008                        l4476 1018                        l3758 07EE  
                      l3766 0844                        l3950 0E80                        l3942 0E2E  
                      l3768 084A                        l3688 0694                        l3792 0D68  
                      l3776 106E                        l3880 0B6A                        l3954 0EA2  
                      l3786 109C                        l3956 0ED2                        l3948 0E50  
                      l3892 0BEC            _eeprom_LogResult 135C                        l3798 0D8A  
                      l3974 1682                        l3886 0BC6                        l3984 16CA  
                      l3994 16B2                        l3898 0C2C                        STR_1 FFBF  
                      STR_2 FFDE                        STR_3 FFAE                        STR_4 FF11  
                      STR_5 FF9D                        STR_6 FF8C                        STR_7 FF24  
                      STR_8 FF6A                        STR_9 FF7B              eeprom_GetLog@i 0019  
                      u3000 11A2                        _LATA 000F89                        _LATB 000F8A  
                      _LATC 000F8B                        _LATD 000F8C                        u3105 00A6  
                      _LATE 000F8D                        u3410 09E2                        u2460 15E6  
                      u1820 1432                        u3085 0042                        u3430 09F8  
                      u3095 0076                        u3280 04CC                        u3408 09CC  
                      u3290 04F0                        u3370 09B4                        u3507 14BA  
                      u3428 09E4                        u3517 1514                        u3390 09CA  
                      u3607 0D4E                        u3527 02B0                        u1775 123A  
                      u3448 09FA                        u3617 0DC0                        u2905 0A8A  
                      u3537 0302                        u3707 12AA                        u3627 0E14  
                      u3547 035C                        u3388 09B6                        u3717 12B4  
                      u3637 1460                        u3557 0424                        u3647 1166  
                      u3567 0506                        u3657 1178                        u3577 1558  
                      u3497 1486                        u3667 0E82                        u3587 1588  
                      _RCEN 007E2B                        u3677 0ED8                        u3597 0CFA  
                      u2885 0A3A                        u3687 127E                        u2895 0A64  
                      u3697 1288                        _RSEN 007E29                        _main 0F9A  
                      _keys FEE7                        _time 004C                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 005B                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000             ??_servoRotate90 0012  
           ??_eeprom_GetLog 0016               __CFG_MCLRE$ON 000000             servoRotate90n@i 0014  
              ___param_bank 000000            ?_I2C_Master_Init 001D            ?_I2C_Master_Read 0001  
          ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001                       ?_main 0001  
                     _ACKEN 007E2C                       _ACKDT 007E2D                       _EEADR 000FA9  
                     STR_10 FF59        eeprom_WriteByte@data 0012                       STR_11 FFF9  
                     STR_12 FF36                       STR_13 FFED                       STR_14 FFCF  
                     STR_15 FFDE                       STR_16 FF15                       STR_17 FF48  
                     _CMCON 000FB4             __end_of___lldiv 1142                get_time@time 0013  
           __end_of___lwdiv 130E             __end_of___lwmod 1508                       i2l309 0F5E  
                     _PORTB 000F81                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
       servoRotate90n@servo 0010               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
           __end_of_lcdInst 173A              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
                     _alTab 0043             __end_of_initLCD 14C6              __CFG_EBTRB$OFF 000000  
           __end_of_dpowers FF02             __end_of_readKey 1438             __end_of_isdigit 1658  
                     _state 004B                       _putch 1722            _eeprom_WriteByte 15EE  
                     pclath 000FFA                       tablat 000FF5                       status 000FD8  
          ??_servoRotate90n 0012    __size_of_eeprom_ReadByte 0016              __CFG_PBADEN$ON 000000  
          ??_servoRotateArm 0012             __initialization 15A2                __end_of_main 103A  
              __end_of_keys FEF8             ??_dispenseAlCan 0016                      ??_main 0041  
             __activetblptr 000002             ??_dispenseSnCan 0016           ?_I2C_Master_Start 0001  
         ?_I2C_Master_Write 0011           executingState@res 0094               ?_readSnSensor 0010  
        ??_I2C_Master_Start 0011                      _ADCON0 000FC2                      _ADCON1 000FC1  
        ??_I2C_Master_Write 0013                      _EEADRH 000FAA                      _EEDATA 000FA8  
                    _EECON2 000FA7                      ?_putch 0001            eeprom_GetLog@res 0014  
                    _INT1IE 007F83                      _INT1IF 007F80                      i2l2246 0F26  
                    _OSCCON 000FD3                      _SSPADD 000FC8                      _TRISC3 007CA3  
                    _TRISC4 007CA4                      _SSPBUF 000FC9              __CFG_XINST$OFF 000000  
          __end_of_get_time 10C0                      ___wmul 1614              __CFG_STVREN$ON 000000  
                    _fixLCD 086C                   ??___lldiv 0018      executingState@alLoaded 00A6  
                 ??___lwdiv 0014                   ??___lwmod 001B        __size_of_get_timeDif 0144  
          __end_of_logState 135C                      clear_0 15A8                      clear_1 15B4  
               logState@log 0034                   ??_lcdInst 0012                      _printf 0560  
      __size_of_finishState 003A                   ??_initLCD 0013      executingState@hasLabel 00A2  
                 ??_readKey 0012                   ??_isdigit 0010                __mediumconst FEE6  
            ??_readSnSensor 0012                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8      executingState@snLoaded 00A4                  __accesstop 0080  
   __end_of__initialization 15BA               ___rparam_used 000001      executingState@runCanAl 0082  
    executingState@runCanSn 0080              __pcstackCOMRAM 0001           ??_eeprom_ReadByte 0012  
  __end_of_eeprom_LogResult 13A8           servoRotate0@servo 0010               __end_of_putch 172E  
        __size_of_lcdNibble 0056        executingState@hasTab 009E          __size_of_mainState 0048  
                   ??_putch 0012                  __pbssBANK0 00AE           servoRotateArm@res 0013  
        __size_of_readAlBot 0018                  _debugState 1438          __size_of_readAlTop 0018  
        __size_of_readSnBot 0018          __size_of_readSnTop 0018                     ?___wmul 0010  
                   ?_fixLCD 0001    __end_of_eeprom_WriteByte 1614                     ?_printf 001C  
   __size_of_executingState 054E           eeprom_GetLog@back 0012           _eeprom_initialize 1658  
        ?_eeprom_initialize 0001                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                   ?_get_time 0013                   ?_logState 0001  
       ??_eeprom_initialize 0013           __end_of_lcdNibble 12BC            get_timeDif@h_one 001F  
          get_timeDif@h_ten 001D            get_timeDif@m_one 0023            get_timeDif@m_ten 0021  
                   __Hparam 0000            get_timeDif@s_one 0027            get_timeDif@s_ten 0025  
                   __Lparam 0000            get_timeDif@start 0018        __end_of_readSnSensor 16A4  
     __end_of_servoRotate90 0D60       __end_of_eeprom_GetLog 120C                     _alNoTab 0041  
                   ___lldiv 10C0             __size_of___wmul 0026                     ___lwdiv 12BC  
                   ___lwmod 14C6             __size_of_fixLCD 01B2           __end_of_mainState 13F0  
    __size_of_newestAddress 000E                     __pcinit 15A2                     __ramtop 1000  
                   _lcdInst 172E                     __ptext0 0F9A                     __ptext1 13A8  
                   __ptext2 130E                     __ptext3 11AC                     __ptext4 086C  
                   __ptext5 1480                     __ptext6 120C                     __ptext7 10C0  
                   __ptext8 1508                     __ptext9 13F0           __end_of_readAlBot 16EC  
         __end_of_readAlTop 16D4             __size_of_printf 030C   __end_of_eeprom_initialize 1674  
                   _initLCD 1480           __end_of_hexpowers FF0A           __end_of_readSnBot 16BC  
                   _dpowers FEF8           __end_of_readSnTop 168C                     _readKey 13F0  
                   _snLabel 0047                     _isdigit 163A                     _logdata 005A  
                   fixLCD@i 0035                     fixLCD@j 003E                  _keypressed 0008  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026    __size_of_I2C_Master_Wait 0012  
  __size_of_I2C_Master_Stop 0008                  fixLCD@time 0037                  ??_get_time 0015  
            __pintcode_body 0EE8        end_of_initialization 15BA                 ?_debugState 0001  
             __Lmediumconst FEE6                  ??_logState 0034                     int_func 0EE8  
 __size_of_I2C_Master_Start 0008   __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0014  
           ___lldiv@counter 001C               ?_servoRotate0 0010                     printf@c 0033  
                   printf@f 001C            I2C_Master_Init@c 001D            I2C_Master_Read@a 0011  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTAbits 000F80                   _PORTBbits 000F81                   _PORTCbits 000F82  
     __end_of_dispenseAlCan 15A2           eeprom_LogResult@i 0016       __end_of_dispenseSnCan 1572  
                _update_lcd 0B62               _newestAddress 1714                  _statictime FF0A  
      servoRotateArm@i_1032 0015         finishState@keypress 0036             _eeprom_ReadByte 16EC  
               printf@width 0031              ??_servoRotate0 0012               ??_get_timeDif 001A  
        servoRotate90@servo 0010               ??_finishState 0034              __end_of___wmul 163A  
         ?_eeprom_LogResult 0013              __end_of_fixLCD 0A1E     __size_of_servoRotate90n 00C2  
    eeprom_ReadByte@address 0010     __size_of_servoRotateArm 006A              _executingState 0012  
        ??_eeprom_LogResult 0015  __size_of_eeprom_initialize 001C         __size_of_debugState 0048  
            __end_of_printf 086C         start_initialization 15A2                 ?_keypressed 0001  
            ?_newestAddress 0001           ??_I2C_Master_Init 0021           ??_I2C_Master_Read 0011  
         ??_I2C_Master_Wait 0010           ??_I2C_Master_Stop 0011       __size_of_readSnSensor 0018  
   eeprom_LogResult@address 0015            _get_timeDif$1730 002B            _get_timeDif$1731 002D  
        get_timeDif@start_s 0029                    ??___wmul 0014                    ??_fixLCD 0034  
    __end_of_executingState 0560            __CFG_LPT1OSC$OFF 000000           ?_eeprom_WriteByte 0010  
                  ??_printf 0026         __end_of_get_timeDif 0B62          ??_eeprom_WriteByte 0013  
               __pbssCOMRAM 0041         __end_of_finishState 1542       executingState@timedif 00A0  
             __pcstackBANK0 0080                 ?_update_lcd 0001       executingState@start_s 009C  
              _readSnSensor 168C     __end_of_eeprom_ReadByte 1702                _isdigit$1336 0011  
         __size_of_get_time 0086         executingState@h_one 0086         executingState@h_ten 0084  
       executingState@m_one 008A         executingState@m_ten 0088         executingState@s_one 008E  
       executingState@s_ten 008C            _I2C_Master_Start 174C            _I2C_Master_Write 173A  
         __size_of_logState 004E         _executingState$1732 0090         _executingState$1733 0092  
          ___lwdiv@dividend 0010           __CFG_CCP2MX$PORTC 000000         __size_of_keypressed 0F92  
                 __pintcode 0008               __pmediumconst FEE6                   _lcdNibble 1266  
                  ?___lldiv 0010                    ?___lwdiv 0010                    ?___lwmod 0017  
           ?_executingState 0001                    ?_lcdInst 0001                    ?_initLCD 0001  
                 _mainState 13A8                    ?_readKey 0010                    ?_isdigit 0001  
   eeprom_WriteByte@address 0010                   _readAlBot 16D4                   _readAlTop 16BC  
           ??_newestAddress 0012        __end_of_servoRotate0 0E26                   _hexpowers FF02  
                 _readSnBot 16A4            ___lwdiv@quotient 0015                   _readSnTop 1674  
            __size_of_putch 000C                   _snNoLabel 0049                ??_debugState 0034  
            ___wmul@product 0014                    _LATAbits 000F89                    _LATBbits 000F8A  
                  _LATCbits 000F8B                    _LATDbits 000F8C                    _LATEbits 000F8D  
                  _PIR2bits 000FA1            __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001  
               _get_timeDif 0A1E         __size_of_update_lcd 0138                 _finishState 1508  
            _servoRotate90n 0E26              _servoRotateArm 1142                   _runResult 0045  
         ___wmul@multiplier 0010               lcdNibble@data 0011                  ?_mainState 0001  
                printf@flag 0030                   _starttime 00AE               lcdNibble@temp 0010  
        __end_of_debugState 1480                  printf@prec 002D                   get_time@i 0017  
                ?_readAlBot 0010                  ?_readAlTop 0010                  ?_readSnBot 0010  
                ?_readSnTop 0010            ?_eeprom_ReadByte 0010         I2C_Master_Read@temp 0012  
    __size_of_servoRotate90 00C6      __size_of_eeprom_GetLog 0060                  _EECON1bits 000FA6  
        keypressed@keypress 000F                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate90n 0EE8      __end_of_servoRotateArm 11AC  
          __size_of___lldiv 0082            __size_of___lwdiv 0052            __size_of___lwmod 0042  
          __size_of_lcdInst 000C    executingState@alInSensor 00AA             _I2C_Master_Init 120C  
           _I2C_Master_Read 15C8            __size_of_initLCD 0046             _I2C_Master_Wait 1702  
           _I2C_Master_Stop 1744            __size_of_readKey 0048                ??_keypressed 0001  
          __size_of_isdigit 001E             ___lwdiv@divisor 0012             ___lwdiv@counter 0014  
                  __ptext10 0012                    __ptext11 0B62                    __ptext20 1744  
                  __ptext12 1674                    __ptext21 174C                    __ptext13 168C  
                  __ptext30 1714                    __ptext22 15C8                    __ptext14 16A4  
                  __ptext31 16EC                    __ptext23 1702                    __ptext15 16BC  
                  __ptext40 14C6                    __ptext32 15EE                    __ptext24 135C  
                  __ptext16 16D4                    __ptext41 12BC                    __ptext33 1438  
                  __ptext25 1542                    __ptext17 0A1E                    __ptext42 172E  
                  __ptext34 1142                    __ptext26 1572                    __ptext18 103A  
                  __ptext43 1266                    __ptext35 0E26                    __ptext27 0C9A  
                  __ptext19 173A                    __ptext36 0560                    __ptext28 0D60  
                  __ptext37 1722                    __ptext29 1658                    __ptext38 163A  
                  __ptext39 1614                    _get_time 103A   __size_of_eeprom_LogResult 004C  
      eeprom_GetLog@address 0018           mainState@keypress 0034                    _logState 130E  
             __size_of_main 00A0                 fixLCD@i_579 0040      __size_of_dispenseAlCan 0030  
    __size_of_dispenseSnCan 0030                 ??_lcdNibble 0010             ?_servoRotate90n 0010  
        __end_of_keypressed 0F9A                    int$flags 005B               _servoRotate90 0C9A  
           ?_servoRotateArm 0010               _eeprom_GetLog 11AC                   printf@idx 002A  
                 printf@val 002E       __size_of_servoRotate0 00C6                 ??_mainState 0034  
                 putch@data 0012    __end_of_I2C_Master_Start 1754    __end_of_I2C_Master_Write 1744  
                _INTCONbits 000FF2                 ??_readAlBot 0012                    readKey@i 0013  
               ??_readAlTop 0012                ??_update_lcd 0034                 ??_readSnBot 0012  
                  isdigit@c 0012                 ??_readSnTop 0012   __size_of_eeprom_WriteByte 0026  
                  intlevel2 0000            ___lwmod@dividend 0017            ___lldiv@dividend 0010  
          ??_executingState 0034              ?_servoRotate90 0010                _servoRotate0 0D60  
            ?_eeprom_GetLog 0012                    printf@ap 002B          __end_of_update_lcd 0C9A  
   __end_of_I2C_Master_Init 1266     __end_of_I2C_Master_Read 15EE     __end_of_I2C_Master_Wait 1714  
   __end_of_I2C_Master_Stop 174C                 lcdInst@data 0012        eeprom_LogResult@data 0013  
          logState@keypress 0036          __end_of_statictime FF11            ___lldiv@quotient 0018  
         I2C_Master_Write@d 0011             ___lwmod@divisor 0019             ___lwmod@counter 001B  
             _dispenseAlCan 1572    executingState@emptyCount 00AC               _dispenseSnCan 1542  
  executingState@snInSensor 00A8  
