

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 19 19:02:29 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.40
    61                           ; Generated 01/12/2016 GMT
    62                           ; 
    63                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4620 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	mediumconst
    96  00FEE6                     __pmediumconst:
    97                           	opt stack 0
    98  00FEE6  00                 	db	0
    99  00FEE7                     _keys:
   100                           	opt stack 0
   101  00FEE7  31                 	db	49
   102  00FEE8  32                 	db	50
   103  00FEE9  33                 	db	51
   104  00FEEA  41                 	db	65
   105  00FEEB  34                 	db	52
   106  00FEEC  35                 	db	53
   107  00FEED  36                 	db	54
   108  00FEEE  42                 	db	66
   109  00FEEF  37                 	db	55
   110  00FEF0  38                 	db	56
   111  00FEF1  39                 	db	57
   112  00FEF2  43                 	db	67
   113  00FEF3  2A                 	db	42
   114  00FEF4  30                 	db	48
   115  00FEF5  23                 	db	35
   116  00FEF6  44                 	db	68
   117  00FEF7  00                 	db	0
   118  00FEF8                     __end_of_keys:
   119                           	opt stack 0
   120  00FEF8                     _dpowers:
   121                           	opt stack 0
   122  00FEF8  0001               	dw	1
   123  00FEFA  000A               	dw	10
   124  00FEFC  0064               	dw	100
   125  00FEFE  03E8               	dw	1000
   126  00FF00  2710               	dw	10000
   127  00FF02                     __end_of_dpowers:
   128                           	opt stack 0
   129  00FF02                     _hexpowers:
   130                           	opt stack 0
   131  00FF02  0001               	dw	1
   132  00FF04  0010               	dw	16
   133  00FF06  0100               	dw	256
   134  00FF08  1000               	dw	4096
   135  00FF0A                     __end_of_hexpowers:
   136                           	opt stack 0
   137  00FF0A                     _statictime:
   138                           	opt stack 0
   139  00FF0A  00                 	db	0
   140  00FF0B  51                 	db	81
   141  00FF0C  14                 	db	20
   142  00FF0D  03                 	db	3
   143  00FF0E  28                 	db	40
   144  00FF0F  02                 	db	2
   145  00FF10  17                 	db	23
   146  00FF11                     __end_of_statictime:
   147                           	opt stack 0
   148  0000                     _ADCON0	set	4034
   149  0000                     _ADCON1	set	4033
   150  0000                     _CMCON	set	4020
   151  0000                     _EEADR	set	4009
   152  0000                     _EEADRH	set	4010
   153  0000                     _EECON1bits	set	4006
   154  0000                     _EECON2	set	4007
   155  0000                     _EEDATA	set	4008
   156  0000                     _INTCONbits	set	4082
   157  0000                     _LATA	set	3977
   158  0000                     _LATAbits	set	3977
   159  0000                     _LATB	set	3978
   160  0000                     _LATBbits	set	3978
   161  0000                     _LATC	set	3979
   162  0000                     _LATCbits	set	3979
   163  0000                     _LATD	set	3980
   164  0000                     _LATDbits	set	3980
   165  0000                     _LATE	set	3981
   166  0000                     _LATEbits	set	3981
   167  0000                     _OSCCON	set	4051
   168  0000                     _PIR2bits	set	4001
   169  0000                     _PORTAbits	set	3968
   170  0000                     _PORTB	set	3969
   171  0000                     _PORTBbits	set	3969
   172  0000                     _PORTCbits	set	3970
   173  0000                     _SSPADD	set	4040
   174  0000                     _SSPBUF	set	4041
   175  0000                     _SSPCON1	set	4038
   176  0000                     _SSPCON2	set	4037
   177  0000                     _SSPSTAT	set	4039
   178  0000                     _TRISA	set	3986
   179  0000                     _TRISB	set	3987
   180  0000                     _TRISC	set	3988
   181  0000                     _TRISD	set	3989
   182  0000                     _TRISE	set	3990
   183  0000                     _ACKDT	set	32301
   184  0000                     _ACKEN	set	32300
   185  0000                     _INT1IE	set	32643
   186  0000                     _INT1IF	set	32640
   187  0000                     _PEN	set	32298
   188  0000                     _RCEN	set	32299
   189  0000                     _RSEN	set	32297
   190  0000                     _SEN	set	32296
   191  0000                     _TRISC3	set	31907
   192  0000                     _TRISC4	set	31908
   193  00FF11                     STR_4:
   194  00FF11  25                 	db	37
   195  00FF12  30                 	db	48	;'0'
   196  00FF13  33                 	db	51	;'3'
   197  00FF14  64                 	db	100	;'d'
   198  00FF15  20                 	db	32
   199  00FF16  20                 	db	32
   200  00FF17  20                 	db	32
   201  00FF18  20                 	db	32
   202  00FF19  20                 	db	32
   203  00FF1A  20                 	db	32
   204  00FF1B  20                 	db	32
   205  00FF1C  20                 	db	32
   206  00FF1D  20                 	db	32
   207  00FF1E  20                 	db	32
   208  00FF1F  20                 	db	32
   209  00FF20  20                 	db	32
   210  00FF21  20                 	db	32
   211  00FF22  20                 	db	32
   212  00FF23  00                 	db	0
   213  00FF24                     STR_7:
   214  00FF24  61                 	db	97	;'a'
   215  00FF25  4E                 	db	78	;'N'
   216  00FF26  25                 	db	37
   217  00FF27  64                 	db	100	;'d'
   218  00FF28  2F                 	db	47
   219  00FF29  61                 	db	97	;'a'
   220  00FF2A  25                 	db	37
   221  00FF2B  64                 	db	100	;'d'
   222  00FF2C  2F                 	db	47
   223  00FF2D  73                 	db	115	;'s'
   224  00FF2E  4E                 	db	78	;'N'
   225  00FF2F  25                 	db	37
   226  00FF30  64                 	db	100	;'d'
   227  00FF31  2F                 	db	47
   228  00FF32  53                 	db	83	;'S'
   229  00FF33  25                 	db	37
   230  00FF34  64                 	db	100	;'d'
   231  00FF35  00                 	db	0
   232  00FF36                     STR_12:
   233  00FF36  45                 	db	69	;'E'
   234  00FF37  78                 	db	120	;'x'
   235  00FF38  65                 	db	101	;'e'
   236  00FF39  63                 	db	99	;'c'
   237  00FF3A  75                 	db	117	;'u'
   238  00FF3B  74                 	db	116	;'t'
   239  00FF3C  69                 	db	105	;'i'
   240  00FF3D  6E                 	db	110	;'n'
   241  00FF3E  67                 	db	103	;'g'
   242  00FF3F  20                 	db	32
   243  00FF40  20                 	db	32
   244  00FF41  20                 	db	32
   245  00FF42  20                 	db	32
   246  00FF43  25                 	db	37
   247  00FF44  30                 	db	48	;'0'
   248  00FF45  33                 	db	51	;'3'
   249  00FF46  64                 	db	100	;'d'
   250  00FF47  00                 	db	0
   251  00FF48                     STR_17:
   252  00FF48  30                 	db	48	;'0'
   253  00FF49  31                 	db	49	;'1'
   254  00FF4A  32                 	db	50	;'2'
   255  00FF4B  33                 	db	51	;'3'
   256  00FF4C  34                 	db	52	;'4'
   257  00FF4D  35                 	db	53	;'5'
   258  00FF4E  36                 	db	54	;'6'
   259  00FF4F  37                 	db	55	;'7'
   260  00FF50  38                 	db	56	;'8'
   261  00FF51  39                 	db	57	;'9'
   262  00FF52  61                 	db	97	;'a'
   263  00FF53  62                 	db	98	;'b'
   264  00FF54  63                 	db	99	;'c'
   265  00FF55  64                 	db	100	;'d'
   266  00FF56  65                 	db	101	;'e'
   267  00FF57  66                 	db	102	;'f'
   268  00FF58  00                 	db	0
   269  00FF59                     STR_10:
   270  00FF59  30                 	db	48	;'0'
   271  00FF5A  3A                 	db	58	;':'
   272  00FF5B  4D                 	db	77	;'M'
   273  00FF5C  65                 	db	101	;'e'
   274  00FF5D  6E                 	db	110	;'n'
   275  00FF5E  75                 	db	117	;'u'
   276  00FF5F  20                 	db	32
   277  00FF60  20                 	db	32
   278  00FF61  20                 	db	32
   279  00FF62  20                 	db	32
   280  00FF63  20                 	db	32
   281  00FF64  20                 	db	32
   282  00FF65  20                 	db	32
   283  00FF66  20                 	db	32
   284  00FF67  20                 	db	32
   285  00FF68  20                 	db	32
   286  00FF69  00                 	db	0
   287  00FF6A                     STR_8:
   288  00FF6A  46                 	db	70	;'F'
   289  00FF6B  69                 	db	105	;'i'
   290  00FF6C  6E                 	db	110	;'n'
   291  00FF6D  69                 	db	105	;'i'
   292  00FF6E  73                 	db	115	;'s'
   293  00FF6F  68                 	db	104	;'h'
   294  00FF70  65                 	db	101	;'e'
   295  00FF71  64                 	db	100	;'d'
   296  00FF72  20                 	db	32
   297  00FF73  20                 	db	32
   298  00FF74  20                 	db	32
   299  00FF75  20                 	db	32
   300  00FF76  20                 	db	32
   301  00FF77  20                 	db	32
   302  00FF78  20                 	db	32
   303  00FF79  20                 	db	32
   304  00FF7A  00                 	db	0
   305  00FF7B                     STR_9:
   306  00FF7B  54                 	db	84	;'T'
   307  00FF7C  65                 	db	101	;'e'
   308  00FF7D  72                 	db	114	;'r'
   309  00FF7E  6D                 	db	109	;'m'
   310  00FF7F  69                 	db	105	;'i'
   311  00FF80  6E                 	db	110	;'n'
   312  00FF81  61                 	db	97	;'a'
   313  00FF82  74                 	db	116	;'t'
   314  00FF83  65                 	db	101	;'e'
   315  00FF84  64                 	db	100	;'d'
   316  00FF85  20                 	db	32
   317  00FF86  20                 	db	32
   318  00FF87  20                 	db	32
   319  00FF88  20                 	db	32
   320  00FF89  20                 	db	32
   321  00FF8A  20                 	db	32
   322  00FF8B  00                 	db	0
   323  00FF8C                     STR_6:
   324  00FF8C  45                 	db	69	;'E'
   325  00FF8D  78                 	db	120	;'x'
   326  00FF8E  65                 	db	101	;'e'
   327  00FF8F  63                 	db	99	;'c'
   328  00FF90  75                 	db	117	;'u'
   329  00FF91  74                 	db	116	;'t'
   330  00FF92  69                 	db	105	;'i'
   331  00FF93  6E                 	db	110	;'n'
   332  00FF94  67                 	db	103	;'g'
   333  00FF95  2E                 	db	46
   334  00FF96  2E                 	db	46
   335  00FF97  2E                 	db	46
   336  00FF98  20                 	db	32
   337  00FF99  20                 	db	32
   338  00FF9A  20                 	db	32
   339  00FF9B  20                 	db	32
   340  00FF9C  00                 	db	0
   341  00FF9D                     STR_5:
   342  00FF9D  31                 	db	49	;'1'
   343  00FF9E  3A                 	db	58	;':'
   344  00FF9F  50                 	db	80	;'P'
   345  00FFA0  72                 	db	114	;'r'
   346  00FFA1  65                 	db	101	;'e'
   347  00FFA2  76                 	db	118	;'v'
   348  00FFA3  20                 	db	32
   349  00FFA4  30                 	db	48	;'0'
   350  00FFA5  3A                 	db	58	;':'
   351  00FFA6  45                 	db	69	;'E'
   352  00FFA7  78                 	db	120	;'x'
   353  00FFA8  69                 	db	105	;'i'
   354  00FFA9  74                 	db	116	;'t'
   355  00FFAA  20                 	db	32
   356  00FFAB  20                 	db	32
   357  00FFAC  20                 	db	32
   358  00FFAD  00                 	db	0
   359  00FFAE                     STR_3:
   360  00FFAE  31                 	db	49	;'1'
   361  00FFAF  3A                 	db	58	;':'
   362  00FFB0  53                 	db	83	;'S'
   363  00FFB1  74                 	db	116	;'t'
   364  00FFB2  61                 	db	97	;'a'
   365  00FFB3  72                 	db	114	;'r'
   366  00FFB4  74                 	db	116	;'t'
   367  00FFB5  20                 	db	32
   368  00FFB6  32                 	db	50	;'2'
   369  00FFB7  3A                 	db	58	;':'
   370  00FFB8  4C                 	db	76	;'L'
   371  00FFB9  6F                 	db	111	;'o'
   372  00FFBA  67                 	db	103	;'g'
   373  00FFBB  73                 	db	115	;'s'
   374  00FFBC  20                 	db	32
   375  00FFBD  20                 	db	32
   376  00FFBE  00                 	db	0
   377  00FFBF                     STR_1:
   378  00FFBF  25                 	db	37
   379  00FFC0  30                 	db	48	;'0'
   380  00FFC1  32                 	db	50	;'2'
   381  00FFC2  78                 	db	120	;'x'
   382  00FFC3  2F                 	db	47
   383  00FFC4  25                 	db	37
   384  00FFC5  30                 	db	48	;'0'
   385  00FFC6  31                 	db	49	;'1'
   386  00FFC7  78                 	db	120	;'x'
   387  00FFC8  2F                 	db	47
   388  00FFC9  25                 	db	37
   389  00FFCA  30                 	db	48	;'0'
   390  00FFCB  32                 	db	50	;'2'
   391  00FFCC  78                 	db	120	;'x'
   392  00FFCD  20                 	db	32
   393  00FFCE  00                 	db	0
   394  00FFCF                     STR_14:
   395  00FFCF  25                 	db	37
   396  00FFD0  30                 	db	48	;'0'
   397  00FFD1  32                 	db	50	;'2'
   398  00FFD2  78                 	db	120	;'x'
   399  00FFD3  25                 	db	37
   400  00FFD4  30                 	db	48	;'0'
   401  00FFD5  32                 	db	50	;'2'
   402  00FFD6  78                 	db	120	;'x'
   403  00FFD7  2F                 	db	47
   404  00FFD8  25                 	db	37
   405  00FFD9  30                 	db	48	;'0'
   406  00FFDA  32                 	db	50	;'2'
   407  00FFDB  78                 	db	120	;'x'
   408  00FFDC  20                 	db	32
   409  00FFDD  00                 	db	0
   410  00FFDE                     STR_2:
   411  00FFDE  25                 	db	37
   412  00FFDF  30                 	db	48	;'0'
   413  00FFE0  32                 	db	50	;'2'
   414  00FFE1  78                 	db	120	;'x'
   415  00FFE2  3A                 	db	58	;':'
   416  00FFE3  25                 	db	37
   417  00FFE4  30                 	db	48	;'0'
   418  00FFE5  32                 	db	50	;'2'
   419  00FFE6  78                 	db	120	;'x'
   420  00FFE7  3A                 	db	58	;':'
   421  00FFE8  25                 	db	37
   422  00FFE9  30                 	db	48	;'0'
   423  00FFEA  32                 	db	50	;'2'
   424  00FFEB  78                 	db	120	;'x'
   425  00FFEC  00                 	db	0
   426  00FFED                     STR_13:
   427  00FFED  67                 	db	103	;'g'
   428  00FFEE  6F                 	db	111	;'o'
   429  00FFEF  69                 	db	105	;'i'
   430  00FFF0  6E                 	db	110	;'n'
   431  00FFF1  67                 	db	103	;'g'
   432  00FFF2  20                 	db	32
   433  00FFF3  64                 	db	100	;'d'
   434  00FFF4  65                 	db	101	;'e'
   435  00FFF5  62                 	db	98	;'b'
   436  00FFF6  75                 	db	117	;'u'
   437  00FFF7  67                 	db	103	;'g'
   438  00FFF8  00                 	db	0
   439  00FFF9                     STR_11:
   440  00FFF9  65                 	db	101	;'e'
   441  00FFFA  72                 	db	114	;'r'
   442  00FFFB  72                 	db	114	;'r'
   443  00FFFC  6F                 	db	111	;'o'
   444  00FFFD  72                 	db	114	;'r'
   445  00FFFE  00                 	db	0
   446  0000                     
   447                           ; #config settings
   448  00FFFF  00                 	db	0	; dummy byte at the end
   449  0000                     
   450                           	psect	cinit
   451  00150A                     __pcinit:
   452                           	opt stack 0
   453  00150A                     start_initialization:
   454                           	opt stack 0
   455  00150A                     __initialization:
   456                           	opt stack 0
   457                           
   458                           ; Clear objects allocated to BANK0 (14 bytes)
   459  00150A  EE00  F0AC         	lfsr	0,__pbssBANK0
   460  00150E  0E0E               	movlw	14
   461  001510                     clear_0:
   462  001510  6AEE               	clrf	postinc0,c
   463  001512  06E8               	decf	wreg,f,c
   464  001514  E1FD               	bnz	clear_0
   465                           
   466                           ; Clear objects allocated to COMRAM (26 bytes)
   467  001516  EE00  F041         	lfsr	0,__pbssCOMRAM
   468  00151A  0E1A               	movlw	26
   469  00151C                     clear_1:
   470  00151C  6AEE               	clrf	postinc0,c
   471  00151E  06E8               	decf	wreg,f,c
   472  001520  E1FD               	bnz	clear_1
   473  001522                     end_of_initialization:
   474                           	opt stack 0
   475  001522                     __end_of__initialization:
   476                           	opt stack 0
   477  001522  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   478  001524  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   479  001526  0E00               	movlw	low (__Lmediumconst shr (0+16))
   480  001528  6EF8               	movwf	tblptru,c
   481  00152A  0100               	movlb	0
   482  00152C  EFB2  F007         	goto	_main	;jump to C main() function
   483                           tblptru	equ	0xFF8
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           
   487                           	psect	bssCOMRAM
   488  000041                     __pbssCOMRAM:
   489                           	opt stack 0
   490  000041                     _alNoTab:
   491                           	opt stack 0
   492  000041                     	ds	2
   493  000043                     _alTab:
   494                           	opt stack 0
   495  000043                     	ds	2
   496  000045                     _runResult:
   497                           	opt stack 0
   498  000045                     	ds	2
   499  000047                     _snLabel:
   500                           	opt stack 0
   501  000047                     	ds	2
   502  000049                     _snNoLabel:
   503                           	opt stack 0
   504  000049                     	ds	2
   505  00004B                     _state:
   506                           	opt stack 0
   507  00004B                     	ds	1
   508  00004C                     _time:
   509                           	opt stack 0
   510  00004C                     	ds	14
   511  00005A                     _logdata:
   512                           	opt stack 0
   513  00005A                     	ds	1
   514                           tblptru	equ	0xFF8
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           
   518                           	psect	bssBANK0
   519  0000AC                     __pbssBANK0:
   520                           	opt stack 0
   521  0000AC                     _starttime:
   522                           	opt stack 0
   523  0000AC                     	ds	14
   524                           tblptru	equ	0xFF8
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           
   528                           	psect	cstackBANK0
   529  000080                     __pcstackBANK0:
   530                           	opt stack 0
   531  000080                     executingState@h_ten:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x0
   535  000080                     	ds	2
   536  000082                     executingState@h_one:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x2
   540  000082                     	ds	2
   541  000084                     executingState@m_ten:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x4
   545  000084                     	ds	2
   546  000086                     executingState@m_one:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x6
   550  000086                     	ds	2
   551  000088                     executingState@s_ten:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x8
   555  000088                     	ds	2
   556  00008A                     executingState@s_one:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0xA
   560  00008A                     	ds	2
   561  00008C                     _executingState$1725:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0xC
   565  00008C                     	ds	2
   566  00008E                     _executingState$1726:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0xE
   570  00008E                     	ds	2
   571  000090                     executingState@res:
   572                           	opt stack 0
   573                           
   574                           ; 8 bytes @ 0x10
   575  000090                     	ds	8
   576  000098                     executingState@snInSensor:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x18
   580  000098                     	ds	2
   581  00009A                     executingState@alInSensor:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x1A
   585  00009A                     	ds	2
   586  00009C                     executingState@runCanSn:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x1C
   590  00009C                     	ds	2
   591  00009E                     executingState@runCanAl:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x1E
   595  00009E                     	ds	2
   596  0000A0                     executingState@start_s:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x20
   600  0000A0                     	ds	2
   601  0000A2                     executingState@timedif:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x22
   605  0000A2                     	ds	2
   606  0000A4                     executingState@hasLabel:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x24
   610  0000A4                     	ds	2
   611  0000A6                     executingState@snLoaded:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x26
   615  0000A6                     	ds	2
   616  0000A8                     executingState@alLoaded:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x28
   620  0000A8                     	ds	2
   621  0000AA                     executingState@emptyCount:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x2A
   625  0000AA                     	ds	2
   626                           tblptru	equ	0xFF8
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           
   630                           	psect	cstackCOMRAM
   631  000001                     __pcstackCOMRAM:
   632                           	opt stack 0
   633  000001                     ??_keypressed:
   634  000001                     
   635                           ; 1 bytes @ 0x0
   636  000001                     	ds	14
   637  00000F                     keypressed@keypress:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0xE
   641  00000F                     	ds	1
   642  000010                     ??_isdigit:
   643  000010                     ??_I2C_Master_Wait:
   644  000010                     ?_readSnTop:
   645                           	opt stack 0
   646  000010                     ?_readSnBot:
   647                           	opt stack 0
   648  000010                     ?_readAlBot:
   649                           	opt stack 0
   650  000010                     ?_readSnSensor:
   651                           	opt stack 0
   652  000010                     ?_readAlSensor:
   653                           	opt stack 0
   654  000010                     ?_readKey:
   655                           	opt stack 0
   656  000010                     ?___wmul:
   657                           	opt stack 0
   658  000010                     ?___lwdiv:
   659                           	opt stack 0
   660  000010                     ?___lldiv:
   661                           	opt stack 0
   662  000010                     lcdNibble@temp:
   663                           	opt stack 0
   664  000010                     eeprom_ReadByte@address:
   665                           	opt stack 0
   666  000010                     eeprom_WriteByte@address:
   667                           	opt stack 0
   668  000010                     servoRotate0@servo:
   669                           	opt stack 0
   670  000010                     servoRotate90@servo:
   671                           	opt stack 0
   672  000010                     servoRotate90n@servo:
   673                           	opt stack 0
   674  000010                     ___wmul@multiplier:
   675                           	opt stack 0
   676  000010                     ___lwdiv@dividend:
   677                           	opt stack 0
   678  000010                     ___lldiv@dividend:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0xF
   682  000010                     	ds	1
   683  000011                     I2C_Master_Read@a:
   684                           	opt stack 0
   685  000011                     lcdNibble@data:
   686                           	opt stack 0
   687  000011                     _isdigit$1329:
   688                           	opt stack 0
   689  000011                     I2C_Master_Write@d:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x10
   693  000011                     	ds	1
   694  000012                     ??_servoRotate0:
   695  000012                     ??_servoRotate90n:
   696  000012                     ??_servoRotate90:
   697  000012                     ??_readAlSensor:
   698  000012                     I2C_Master_Read@temp:
   699                           	opt stack 0
   700  000012                     lcdInst@data:
   701                           	opt stack 0
   702  000012                     putch@data:
   703                           	opt stack 0
   704  000012                     readKey@keypress:
   705                           	opt stack 0
   706  000012                     eeprom_WriteByte@data:
   707                           	opt stack 0
   708  000012                     isdigit@c:
   709                           	opt stack 0
   710  000012                     eeprom_GetLog@back:
   711                           	opt stack 0
   712  000012                     ___wmul@multiplicand:
   713                           	opt stack 0
   714  000012                     ___lwdiv@divisor:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x11
   718  000012                     	ds	1
   719  000013                     ??_initLCD:
   720  000013                     readKey@i:
   721                           	opt stack 0
   722  000013                     eeprom_LogResult@data:
   723                           	opt stack 0
   724  000013                     get_time@time:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x12
   728  000013                     	ds	1
   729  000014                     ___lwdiv@counter:
   730                           	opt stack 0
   731  000014                     eeprom_GetLog@res:
   732                           	opt stack 0
   733  000014                     servoRotate0@i:
   734                           	opt stack 0
   735  000014                     servoRotate90@i:
   736                           	opt stack 0
   737  000014                     servoRotate90n@i:
   738                           	opt stack 0
   739  000014                     ___wmul@product:
   740                           	opt stack 0
   741  000014                     ___lldiv@divisor:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x13
   745  000014                     	ds	1
   746  000015                     ??_get_time:
   747  000015                     eeprom_LogResult@address:
   748                           	opt stack 0
   749  000015                     ___lwdiv@quotient:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x14
   753  000015                     	ds	1
   754  000016                     ??_dispenseSnCan:
   755  000016                     ??_dispenseAlCan:
   756  000016                     ??_eeprom_GetLog:
   757  000016                     eeprom_LogResult@i:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x15
   761  000016                     	ds	1
   762  000017                     ?___lwmod:
   763                           	opt stack 0
   764  000017                     get_time@i:
   765                           	opt stack 0
   766  000017                     ___lwmod@dividend:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x16
   770  000017                     	ds	1
   771  000018                     ?_get_timeDif:
   772                           	opt stack 0
   773  000018                     eeprom_GetLog@address:
   774                           	opt stack 0
   775  000018                     get_timeDif@start:
   776                           	opt stack 0
   777  000018                     ___lldiv@quotient:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x17
   781  000018                     	ds	1
   782  000019                     eeprom_GetLog@i:
   783                           	opt stack 0
   784  000019                     ___lwmod@divisor:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x18
   788  000019                     	ds	1
   789  00001A                     ??_get_timeDif:
   790                           
   791                           ; 1 bytes @ 0x19
   792  00001A                     	ds	1
   793  00001B                     ___lwmod@counter:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x1A
   797  00001B                     	ds	1
   798  00001C                     ?_printf:
   799                           	opt stack 0
   800  00001C                     ___lldiv@counter:
   801                           	opt stack 0
   802  00001C                     printf@f:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x1B
   806  00001C                     	ds	1
   807  00001D                     get_timeDif@h_ten:
   808                           	opt stack 0
   809  00001D                     I2C_Master_Init@c:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x1C
   813  00001D                     	ds	2
   814  00001F                     get_timeDif@h_one:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x1E
   818  00001F                     	ds	2
   819  000021                     ??_I2C_Master_Init:
   820  000021                     get_timeDif@m_ten:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x20
   824  000021                     	ds	2
   825  000023                     get_timeDif@m_one:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x22
   829  000023                     	ds	2
   830  000025                     get_timeDif@s_ten:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x24
   834  000025                     	ds	1
   835  000026                     ??_printf:
   836                           
   837                           ; 1 bytes @ 0x25
   838  000026                     	ds	1
   839  000027                     get_timeDif@s_one:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x26
   843  000027                     	ds	2
   844  000029                     get_timeDif@start_s:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x28
   848  000029                     	ds	1
   849  00002A                     printf@idx:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x29
   853  00002A                     	ds	1
   854  00002B                     printf@ap:
   855                           	opt stack 0
   856  00002B                     _get_timeDif$1723:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x2A
   860  00002B                     	ds	2
   861  00002D                     printf@prec:
   862                           	opt stack 0
   863  00002D                     _get_timeDif$1724:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x2C
   867  00002D                     	ds	1
   868  00002E                     printf@val:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x2D
   872  00002E                     	ds	2
   873  000030                     printf@flag:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x2F
   877  000030                     	ds	1
   878  000031                     printf@width:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x30
   882  000031                     	ds	2
   883  000033                     printf@c:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x32
   887  000033                     	ds	1
   888  000034                     ??_executingState:
   889  000034                     ??_finishState:
   890  000034                     ??_fixLCD:
   891  000034                     mainState@keypress:
   892                           	opt stack 0
   893  000034                     logState@log:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x33
   897  000034                     	ds	1
   898  000035                     fixLCD@i:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x34
   902  000035                     	ds	1
   903  000036                     finishState@keypress:
   904                           	opt stack 0
   905  000036                     logState@keypress:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x35
   909  000036                     	ds	1
   910  000037                     fixLCD@time:
   911                           	opt stack 0
   912                           
   913                           ; 7 bytes @ 0x36
   914  000037                     	ds	7
   915  00003E                     fixLCD@j:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x3D
   919  00003E                     	ds	2
   920  000040                     fixLCD@i_656:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x3F
   924  000040                     	ds	1
   925  000041                     tblptru	equ	0xFF8
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           
   929                           ; 1 bytes @ 0x40
   930 ;;
   931 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   932 ;;
   933 ;; *************** function _main *****************
   934 ;; Defined at:
   935 ;;		line 417 in file "main.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;		None
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;Total ram usage:        0 bytes
   954 ;; Hardware stack levels required when called:    6
   955 ;; This function calls:
   956 ;;		_I2C_Master_Init
   957 ;;		_debugState
   958 ;;		_eeprom_initialize
   959 ;;		_executingState
   960 ;;		_finishState
   961 ;;		_fixLCD
   962 ;;		_initLCD
   963 ;;		_logState
   964 ;;		_mainState
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text0
   971  000F64                     __ptext0:
   972                           	opt stack 0
   973  000F64                     _main:
   974                           	opt stack 25
   975                           
   976                           ;main.c: 420: fixLCD();
   977                           
   978                           ;incstack = 0
   979  000F64  EC1B  F004         	call	_fixLCD	;wreg free
   980                           
   981                           ;main.c: 422: OSCCON = 0xF0;
   982  000F68  0EF0               	movlw	240
   983  000F6A  6ED3               	movwf	4051,c	;volatile
   984                           
   985                           ;main.c: 428: TRISA = 0b00001111;
   986  000F6C  0E0F               	movlw	15
   987  000F6E  6E92               	movwf	3986,c	;volatile
   988                           
   989                           ;main.c: 429: TRISB = 0b11110010;
   990  000F70  0EF2               	movlw	242
   991  000F72  6E93               	movwf	3987,c	;volatile
   992                           
   993                           ;main.c: 430: TRISC = 0b00011011;
   994  000F74  0E1B               	movlw	27
   995  000F76  6E94               	movwf	3988,c	;volatile
   996                           
   997                           ;main.c: 431: TRISD = 0x00;
   998  000F78  0E00               	movlw	0
   999  000F7A  6E95               	movwf	3989,c	;volatile
  1000                           
  1001                           ;main.c: 432: TRISE = 0x00;
  1002  000F7C  0E00               	movlw	0
  1003  000F7E  6E96               	movwf	3990,c	;volatile
  1004                           
  1005                           ;main.c: 434: LATA = 0x00;
  1006  000F80  0E00               	movlw	0
  1007  000F82  6E89               	movwf	3977,c	;volatile
  1008                           
  1009                           ;main.c: 435: LATB = 0x00;
  1010  000F84  0E00               	movlw	0
  1011  000F86  6E8A               	movwf	3978,c	;volatile
  1012                           
  1013                           ;main.c: 436: LATC = 0x00;
  1014  000F88  0E00               	movlw	0
  1015  000F8A  6E8B               	movwf	3979,c	;volatile
  1016                           
  1017                           ;main.c: 437: LATD = 0x00;
  1018  000F8C  0E00               	movlw	0
  1019  000F8E  6E8C               	movwf	3980,c	;volatile
  1020                           
  1021                           ;main.c: 438: LATE = 0x00;
  1022  000F90  0E00               	movlw	0
  1023  000F92  6E8D               	movwf	3981,c	;volatile
  1024                           
  1025                           ;main.c: 440: ADCON0 = 0x00;
  1026  000F94  0E00               	movlw	0
  1027  000F96  6EC2               	movwf	4034,c	;volatile
  1028                           
  1029                           ;main.c: 441: ADCON1 = 0x0F;
  1030  000F98  0E0F               	movlw	15
  1031  000F9A  6EC1               	movwf	4033,c	;volatile
  1032                           
  1033                           ;main.c: 442: CMCON = 0x07;
  1034  000F9C  0E07               	movlw	7
  1035  000F9E  6EB4               	movwf	4020,c	;volatile
  1036                           
  1037                           ;main.c: 445: initLCD();
  1038  000FA0  ECF4  F009         	call	_initLCD	;wreg free
  1039                           
  1040                           ;main.c: 446: eeprom_initialize();
  1041  000FA4  ECE0  F00A         	call	_eeprom_initialize	;wreg free
  1042                           
  1043                           ;main.c: 447: I2C_Master_Init(10000);
  1044  000FA8  0E10               	movlw	16
  1045  000FAA  6E1D               	movwf	I2C_Master_Init@c,c
  1046  000FAC  0E27               	movlw	39
  1047  000FAE  6E1E               	movwf	I2C_Master_Init@c+1,c
  1048  000FB0  0E00               	movlw	0
  1049  000FB2  6E1F               	movwf	I2C_Master_Init@c+2,c
  1050  000FB4  0E00               	movlw	0
  1051  000FB6  6E20               	movwf	I2C_Master_Init@c+3,c
  1052  000FB8  ECB6  F008         	call	_I2C_Master_Init	;wreg free
  1053                           
  1054                           ;main.c: 449: INT1IE = 1;
  1055  000FBC  86F0               	bsf	intcon3,3,c	;volatile
  1056                           
  1057                           ;main.c: 450: (INTCONbits.GIE = 0);
  1058  000FBE  9EF2               	bcf	intcon,7,c	;volatile
  1059                           
  1060                           ;main.c: 452: state = MAIN;
  1061  000FC0  0E00               	movlw	0
  1062  000FC2  6E4B               	movwf	_state,c
  1063                           
  1064                           ;main.c: 459: {
  1065                           ;main.c: 460: switch (state)
  1066                           
  1067                           ;main.c: 458: while (1)
  1068  000FC4  D00E               	goto	l4352
  1069  000FC6                     l4340:
  1070                           
  1071                           ;main.c: 463: mainState();
  1072  000FC6  ECAC  F009         	call	_mainState	;wreg free
  1073                           
  1074                           ;main.c: 464: break;
  1075  000FCA  D00B               	goto	l4352
  1076  000FCC                     l4342:
  1077                           
  1078                           ;main.c: 466: executingState();
  1079  000FCC  EC09  F000         	call	_executingState	;wreg free
  1080                           
  1081                           ;main.c: 467: break;
  1082  000FD0  D008               	goto	l4352
  1083  000FD2                     l4344:
  1084                           
  1085                           ;main.c: 469: finishState();
  1086  000FD2  EC38  F00A         	call	_finishState	;wreg free
  1087                           
  1088                           ;main.c: 470: break;
  1089  000FD6  D005               	goto	l4352
  1090  000FD8                     l4346:
  1091                           
  1092                           ;main.c: 472: logState();
  1093  000FD8  EC5F  F009         	call	_logState	;wreg free
  1094                           
  1095                           ;main.c: 473: break;
  1096  000FDC  D002               	goto	l4352
  1097  000FDE                     l4348:
  1098                           
  1099                           ;main.c: 475: debugState();
  1100  000FDE  EC37  F009         	call	_debugState	;wreg free
  1101  000FE2                     l4352:
  1102  000FE2  504B               	movf	_state,w,c
  1103                           
  1104                           ; Switch size 1, requested type "space"
  1105                           ; Number of cases is 5, Range of values is 0 to 5
  1106                           ; switch strategies available:
  1107                           ; Name         Instructions Cycles
  1108                           ; simple_byte           16     9 (average)
  1109                           ;	Chosen strategy is simple_byte
  1110  000FE4  0A00               	xorlw	0	; case 0
  1111  000FE6  B4D8               	btfsc	status,2,c
  1112  000FE8  D7EE               	goto	l4340
  1113  000FEA  0A01               	xorlw	1	; case 1
  1114  000FEC  B4D8               	btfsc	status,2,c
  1115  000FEE  D7EE               	goto	l4342
  1116  000FF0  0A03               	xorlw	3	; case 2
  1117  000FF2  B4D8               	btfsc	status,2,c
  1118  000FF4  D7EE               	goto	l4344
  1119  000FF6  0A01               	xorlw	1	; case 3
  1120  000FF8  B4D8               	btfsc	status,2,c
  1121  000FFA  D7EE               	goto	l4346
  1122  000FFC  0A06               	xorlw	6	; case 5
  1123  000FFE  B4D8               	btfsc	status,2,c
  1124  001000  D7EE               	goto	l4348
  1125  001002  D7EF               	goto	l4352
  1126  001004                     __end_of_main:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           intcon	equ	0xFF2
  1130                           intcon3	equ	0xFF0
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           status	equ	0xFD8
  1134                           
  1135 ;; *************** function _mainState *****************
  1136 ;; Defined at:
  1137 ;;		line 121 in file "main.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  keypress        2   51[COMRAM] int 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;Total ram usage:        2 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    5
  1158 ;; This function calls:
  1159 ;;		_get_time
  1160 ;;		_readKey
  1161 ;;		_update_lcd
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text1
  1168  001358                     __ptext1:
  1169                           	opt stack 0
  1170  001358                     _mainState:
  1171                           	opt stack 25
  1172                           
  1173                           ;main.c: 123: LATBbits.LATB0 = 1;
  1174                           
  1175                           ;incstack = 0
  1176  001358  808A               	bsf	3978,0,c	;volatile
  1177                           
  1178                           ;main.c: 124: LATCbits.LATC6 = 0;
  1179  00135A  9C8B               	bcf	3979,6,c	;volatile
  1180  00135C                     l3970:
  1181                           
  1182                           ;main.c: 126: {
  1183                           ;main.c: 128: get_time(time);
  1184  00135C  0E4C               	movlw	low _time
  1185  00135E  6E13               	movwf	get_time@time,c
  1186  001360  0E00               	movlw	high _time
  1187  001362  6E14               	movwf	get_time@time+1,c
  1188  001364  EC02  F008         	call	_get_time	;wreg free
  1189                           
  1190                           ;main.c: 129: update_lcd();
  1191  001368  EC96  F005         	call	_update_lcd	;wreg free
  1192                           
  1193                           ;main.c: 131: int keypress = readKey();
  1194  00136C  ECD0  F009         	call	_readKey	;wreg free
  1195  001370  C010  F034         	movff	?_readKey,mainState@keypress
  1196  001374  C011  F035         	movff	?_readKey+1,mainState@keypress+1
  1197                           
  1198                           ;main.c: 132: if(keypress == 0b0000){
  1199  001378  5034               	movf	mainState@keypress,w,c
  1200  00137A  1035               	iorwf	mainState@keypress+1,w,c
  1201  00137C  A4D8               	btfss	status,2,c
  1202  00137E  D003               	goto	l3984
  1203                           
  1204                           ;main.c: 137: state = EXECUTING;
  1205  001380  0E01               	movlw	1
  1206  001382                     L1:
  1207  001382  6E4B               	movwf	_state,c
  1208                           
  1209                           ;main.c: 138: return;
  1210  001384  0012               	return	
  1211  001386                     l3984:
  1212  001386  0434               	decf	mainState@keypress,w,c
  1213  001388  1035               	iorwf	mainState@keypress+1,w,c
  1214  00138A  A4D8               	btfss	status,2,c
  1215  00138C  D002               	goto	l3992
  1216                           
  1217                           ;main.c: 141: state = LOG;
  1218  00138E  0E03               	movlw	3
  1219  001390  D7F8               	goto	L1
  1220  001392                     l3992:
  1221  001392  0E03               	movlw	3
  1222  001394  1834               	xorwf	mainState@keypress,w,c
  1223  001396  1035               	iorwf	mainState@keypress+1,w,c
  1224  001398  A4D8               	btfss	status,2,c
  1225  00139A  D7E0               	goto	l3970
  1226                           
  1227                           ;main.c: 144: state = DEBUG;
  1228  00139C  0E05               	movlw	5
  1229  00139E  D7F1               	goto	L1
  1230  0013A0                     __end_of_mainState:
  1231                           	opt stack 0
  1232                           tblptru	equ	0xFF8
  1233                           intcon	equ	0xFF2
  1234                           intcon3	equ	0xFF0
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _logState *****************
  1240 ;; Defined at:
  1241 ;;		line 310 in file "main.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;		None
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  keypress        2   53[COMRAM] int 
  1246 ;;  log             2   51[COMRAM] int 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;Total ram usage:        4 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    5
  1263 ;; This function calls:
  1264 ;;		_eeprom_GetLog
  1265 ;;		_readKey
  1266 ;;		_update_lcd
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text2
  1273  0012BE                     __ptext2:
  1274                           	opt stack 0
  1275  0012BE                     _logState:
  1276                           	opt stack 25
  1277                           
  1278                           ;main.c: 312: update_lcd();
  1279                           
  1280                           ;incstack = 0
  1281  0012BE  EC96  F005         	call	_update_lcd	;wreg free
  1282                           
  1283                           ;main.c: 313: int log = 0;
  1284  0012C2  0E00               	movlw	0
  1285  0012C4  6E35               	movwf	logState@log+1,c
  1286  0012C6  0E00               	movlw	0
  1287  0012C8  6E34               	movwf	logState@log,c
  1288  0012CA                     l4192:
  1289                           
  1290                           ;main.c: 315: int keypress = readKey();
  1291  0012CA  ECD0  F009         	call	_readKey	;wreg free
  1292  0012CE  C010  F036         	movff	?_readKey,logState@keypress
  1293  0012D2  C011  F037         	movff	?_readKey+1,logState@keypress+1
  1294                           
  1295                           ;main.c: 316: if(keypress == 0b0001){
  1296  0012D6  0436               	decf	logState@keypress,w,c
  1297  0012D8  1037               	iorwf	logState@keypress+1,w,c
  1298  0012DA  A4D8               	btfss	status,2,c
  1299  0012DC  D00F               	goto	l4206
  1300                           
  1301                           ;main.c: 317: log++;
  1302  0012DE  4A34               	infsnz	logState@log,f,c
  1303  0012E0  2A35               	incf	logState@log+1,f,c
  1304                           
  1305                           ;main.c: 318: eeprom_GetLog(log, &logdata);
  1306  0012E2  C034  F012         	movff	logState@log,eeprom_GetLog@back
  1307  0012E6  C035  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1308  0012EA  0E5A               	movlw	low _logdata
  1309  0012EC  6E14               	movwf	eeprom_GetLog@res,c
  1310  0012EE  0E00               	movlw	high _logdata
  1311  0012F0  6E15               	movwf	eeprom_GetLog@res+1,c
  1312  0012F2  EC86  F008         	call	_eeprom_GetLog	;wreg free
  1313                           
  1314                           ;main.c: 319: update_lcd();
  1315  0012F6  EC96  F005         	call	_update_lcd	;wreg free
  1316                           
  1317                           ;main.c: 320: return;
  1318  0012FA  0012               	return	
  1319  0012FC                     l4206:
  1320  0012FC  0E0D               	movlw	13
  1321  0012FE  1836               	xorwf	logState@keypress,w,c
  1322  001300  1037               	iorwf	logState@keypress+1,w,c
  1323  001302  A4D8               	btfss	status,2,c
  1324  001304  D7E2               	goto	l4192
  1325                           
  1326                           ;main.c: 322: state = MAIN;
  1327  001306  0E00               	movlw	0
  1328  001308  6E4B               	movwf	_state,c
  1329                           
  1330                           ;main.c: 323: return;
  1331  00130A  0012               	return	
  1332  00130C                     __end_of_logState:
  1333                           	opt stack 0
  1334                           tblptru	equ	0xFF8
  1335                           intcon	equ	0xFF2
  1336                           intcon3	equ	0xFF0
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _eeprom_GetLog *****************
  1342 ;; Defined at:
  1343 ;;		line 90 in file "eeprom.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  back            2   17[COMRAM] int 
  1346 ;;  res             2   19[COMRAM] PTR int 
  1347 ;;		 -> logdata(1), 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  i               2   24[COMRAM] int 
  1350 ;;  address         1   23[COMRAM] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;Total ram usage:        9 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    3
  1367 ;; This function calls:
  1368 ;;		_eeprom_ReadByte
  1369 ;;		_newestAddress
  1370 ;; This function is called by:
  1371 ;;		_logState
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text3
  1376  00110C                     __ptext3:
  1377                           	opt stack 0
  1378  00110C                     _eeprom_GetLog:
  1379                           	opt stack 26
  1380                           
  1381                           ;eeprom.c: 91: uint8_t address = newestAddress();
  1382                           
  1383                           ;incstack = 0
  1384  00110C  EC3C  F00B         	call	_newestAddress	;wreg free
  1385  001110  6E18               	movwf	eeprom_GetLog@address,c
  1386                           
  1387                           ;eeprom.c: 92: address = address - back*5;
  1388  001112  5012               	movf	eeprom_GetLog@back,w,c
  1389  001114  0D05               	mullw	5
  1390  001116  50F3               	movf	prodl,w,c
  1391  001118  0800               	sublw	0
  1392  00111A  2418               	addwf	eeprom_GetLog@address,w,c
  1393  00111C  6E18               	movwf	eeprom_GetLog@address,c
  1394                           
  1395                           ;eeprom.c: 93: for(int i = 0; i < 5; i++){
  1396  00111E  0E00               	movlw	0
  1397  001120  6E1A               	movwf	eeprom_GetLog@i+1,c
  1398  001122  0E00               	movlw	0
  1399  001124  6E19               	movwf	eeprom_GetLog@i,c
  1400  001126                     l3958:
  1401  001126  BE1A               	btfsc	eeprom_GetLog@i+1,7,c
  1402  001128  D006               	goto	l3962
  1403  00112A  501A               	movf	eeprom_GetLog@i+1,w,c
  1404  00112C  E11E               	bnz	l349
  1405  00112E  0E05               	movlw	5
  1406  001130  5C19               	subwf	eeprom_GetLog@i,w,c
  1407  001132  B0D8               	btfsc	status,0,c
  1408  001134  0012               	return	
  1409  001136                     l3962:
  1410                           
  1411                           ;eeprom.c: 94: res[i] = eeprom_ReadByte(address + i);
  1412  001136  5018               	movf	eeprom_GetLog@address,w,c
  1413  001138  2419               	addwf	eeprom_GetLog@i,w,c
  1414  00113A  6E10               	movwf	eeprom_ReadByte@address,c
  1415  00113C  0E00               	movlw	0
  1416  00113E  201A               	addwfc	eeprom_GetLog@i+1,w,c
  1417  001140  6E11               	movwf	eeprom_ReadByte@address+1,c
  1418  001142  EC1E  F00B         	call	_eeprom_ReadByte	;wreg free
  1419  001146  6E16               	movwf	??_eeprom_GetLog& (0+255),c
  1420  001148  6A17               	clrf	(??_eeprom_GetLog+1)& (0+255),c
  1421  00114A  90D8               	bcf	status,0,c
  1422  00114C  3419               	rlcf	eeprom_GetLog@i,w,c
  1423  00114E  6ED9               	movwf	fsr2l,c
  1424  001150  341A               	rlcf	eeprom_GetLog@i+1,w,c
  1425  001152  6EDA               	movwf	fsr2h,c
  1426  001154  5014               	movf	eeprom_GetLog@res,w,c
  1427  001156  26D9               	addwf	fsr2l,f,c
  1428  001158  5015               	movf	eeprom_GetLog@res+1,w,c
  1429  00115A  22DA               	addwfc	fsr2h,f,c
  1430  00115C  C016  FFDE         	movff	??_eeprom_GetLog,postinc2
  1431  001160  C017  FFDD         	movff	??_eeprom_GetLog+1,postdec2
  1432  001164  4A19               	infsnz	eeprom_GetLog@i,f,c
  1433  001166  2A1A               	incf	eeprom_GetLog@i+1,f,c
  1434  001168  D7DE               	goto	l3958
  1435  00116A                     l349:
  1436  00116A  0012               	return		;funcret
  1437  00116C                     __end_of_eeprom_GetLog:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           prodl	equ	0xFF3
  1441                           intcon	equ	0xFF2
  1442                           intcon3	equ	0xFF0
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postinc2	equ	0xFDE
  1446                           postdec2	equ	0xFDD
  1447                           fsr2h	equ	0xFDA
  1448                           fsr2l	equ	0xFD9
  1449                           status	equ	0xFD8
  1450                           
  1451 ;; *************** function _fixLCD *****************
  1452 ;; Defined at:
  1453 ;;		line 350 in file "main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  i               1   63[COMRAM] unsigned char 
  1458 ;;  time            7   54[COMRAM] unsigned char [7]
  1459 ;;  j               2   61[COMRAM] int 
  1460 ;;  i               2   52[COMRAM] int 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;Total ram usage:       13 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    4
  1477 ;; This function calls:
  1478 ;;		_I2C_Master_Init
  1479 ;;		_I2C_Master_Read
  1480 ;;		_I2C_Master_Start
  1481 ;;		_I2C_Master_Stop
  1482 ;;		_I2C_Master_Write
  1483 ;;		_initLCD
  1484 ;;		_lcdInst
  1485 ;;		_printf
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text4
  1492  000836                     __ptext4:
  1493                           	opt stack 0
  1494  000836                     _fixLCD:
  1495                           	opt stack 26
  1496                           
  1497                           ;main.c: 352: OSCCON = 0xF0;
  1498                           
  1499                           ;incstack = 0
  1500  000836  0EF0               	movlw	240
  1501  000838  6ED3               	movwf	4051,c	;volatile
  1502                           
  1503                           ;main.c: 356: TRISA = 0x00;
  1504  00083A  0E00               	movlw	0
  1505  00083C  6E92               	movwf	3986,c	;volatile
  1506                           
  1507                           ;main.c: 357: TRISB = 0b11110010;
  1508  00083E  0EF2               	movlw	242
  1509  000840  6E93               	movwf	3987,c	;volatile
  1510                           
  1511                           ;main.c: 358: TRISC = 0x00011000;
  1512  000842  0E00               	movlw	0
  1513  000844  6E94               	movwf	3988,c	;volatile
  1514                           
  1515                           ;main.c: 359: TRISD = 0x00;
  1516  000846  0E00               	movlw	0
  1517  000848  6E95               	movwf	3989,c	;volatile
  1518                           
  1519                           ;main.c: 360: TRISE = 0x00;
  1520  00084A  0E00               	movlw	0
  1521  00084C  6E96               	movwf	3990,c	;volatile
  1522                           
  1523                           ;main.c: 361: LATA = 0x00;
  1524  00084E  0E00               	movlw	0
  1525  000850  6E89               	movwf	3977,c	;volatile
  1526                           
  1527                           ;main.c: 362: LATB = 0x00;
  1528  000852  0E00               	movlw	0
  1529  000854  6E8A               	movwf	3978,c	;volatile
  1530                           
  1531                           ;main.c: 363: LATC = 0x00;
  1532  000856  0E00               	movlw	0
  1533  000858  6E8B               	movwf	3979,c	;volatile
  1534                           
  1535                           ;main.c: 364: LATD = 0x00;
  1536  00085A  0E00               	movlw	0
  1537  00085C  6E8C               	movwf	3980,c	;volatile
  1538                           
  1539                           ;main.c: 365: LATE = 0x00;
  1540  00085E  0E00               	movlw	0
  1541  000860  6E8D               	movwf	3981,c	;volatile
  1542                           
  1543                           ;main.c: 366: ADCON0 = 0x00;
  1544  000862  0E00               	movlw	0
  1545  000864  6EC2               	movwf	4034,c	;volatile
  1546                           
  1547                           ;main.c: 367: ADCON1 = 0x00;
  1548  000866  0E00               	movlw	0
  1549  000868  6EC1               	movwf	4033,c	;volatile
  1550                           
  1551                           ;main.c: 369: initLCD();
  1552  00086A  ECF4  F009         	call	_initLCD	;wreg free
  1553                           
  1554                           ;main.c: 370: I2C_Master_Init(10000);
  1555  00086E  0E10               	movlw	16
  1556  000870  6E1D               	movwf	I2C_Master_Init@c,c
  1557  000872  0E27               	movlw	39
  1558  000874  6E1E               	movwf	I2C_Master_Init@c+1,c
  1559  000876  0E00               	movlw	0
  1560  000878  6E1F               	movwf	I2C_Master_Init@c+2,c
  1561  00087A  0E00               	movlw	0
  1562  00087C  6E20               	movwf	I2C_Master_Init@c+3,c
  1563  00087E  ECB6  F008         	call	_I2C_Master_Init	;wreg free
  1564                           
  1565                           ;main.c: 371: (INTCONbits.GIE = 0);
  1566  000882  9EF2               	bcf	intcon,7,c	;volatile
  1567                           
  1568                           ;main.c: 372: unsigned char time[7];
  1569                           ;main.c: 374: LATA = 0b01010101;
  1570  000884  0E55               	movlw	85
  1571  000886  6E89               	movwf	3977,c	;volatile
  1572                           
  1573                           ;main.c: 375: LATB = 0b01010101;
  1574  000888  0E55               	movlw	85
  1575  00088A  6E8A               	movwf	3978,c	;volatile
  1576                           
  1577                           ;main.c: 376: LATC = 0b01010101;
  1578  00088C  0E55               	movlw	85
  1579  00088E  6E8B               	movwf	3979,c	;volatile
  1580                           
  1581                           ;main.c: 377: LATDbits.LATD0 = 1;
  1582  000890  808C               	bsf	3980,0,c	;volatile
  1583                           
  1584                           ;main.c: 378: LATDbits.LATD1 = 0;
  1585  000892  928C               	bcf	3980,1,c	;volatile
  1586                           
  1587                           ;main.c: 379: LATEbits.LATE0 = 1;
  1588  000894  808D               	bsf	3981,0,c	;volatile
  1589                           
  1590                           ;main.c: 380: LATEbits.LATE1 = 0;
  1591  000896  928D               	bcf	3981,1,c	;volatile
  1592                           
  1593                           ;main.c: 381: int i = 0;
  1594  000898  0E00               	movlw	0
  1595  00089A  6E36               	movwf	fixLCD@i+1,c
  1596  00089C  0E00               	movlw	0
  1597  00089E  6E35               	movwf	fixLCD@i,c
  1598                           
  1599                           ;main.c: 382: int j = 0;
  1600  0008A0  0E00               	movlw	0
  1601  0008A2  6E3F               	movwf	fixLCD@j+1,c
  1602  0008A4  0E00               	movlw	0
  1603  0008A6  6E3E               	movwf	fixLCD@j,c
  1604                           
  1605                           ;main.c: 383: while(j < 10){
  1606  0008A8  D095               	goto	l4288
  1607  0008AA                     l4246:
  1608                           
  1609                           ;main.c: 385: I2C_Master_Start();
  1610  0008AA  EC58  F00B         	call	_I2C_Master_Start	;wreg free
  1611                           
  1612                           ;main.c: 386: I2C_Master_Write(0b11010000);
  1613  0008AE  0E00               	movlw	0
  1614  0008B0  6E12               	movwf	I2C_Master_Write@d+1,c
  1615  0008B2  0ED0               	movlw	208
  1616  0008B4  6E11               	movwf	I2C_Master_Write@d,c
  1617  0008B6  EC4F  F00B         	call	_I2C_Master_Write	;wreg free
  1618                           
  1619                           ;main.c: 387: I2C_Master_Write(0x00);
  1620  0008BA  0E00               	movlw	0
  1621  0008BC  6E12               	movwf	I2C_Master_Write@d+1,c
  1622  0008BE  0E00               	movlw	0
  1623  0008C0  6E11               	movwf	I2C_Master_Write@d,c
  1624  0008C2  EC4F  F00B         	call	_I2C_Master_Write	;wreg free
  1625                           
  1626                           ;main.c: 388: I2C_Master_Stop();
  1627  0008C6  EC54  F00B         	call	_I2C_Master_Stop	;wreg free
  1628                           
  1629                           ;main.c: 391: I2C_Master_Start();
  1630  0008CA  EC58  F00B         	call	_I2C_Master_Start	;wreg free
  1631                           
  1632                           ;main.c: 392: I2C_Master_Write(0b11010001);
  1633  0008CE  0E00               	movlw	0
  1634  0008D0  6E12               	movwf	I2C_Master_Write@d+1,c
  1635  0008D2  0ED1               	movlw	209
  1636  0008D4  6E11               	movwf	I2C_Master_Write@d,c
  1637  0008D6  EC4F  F00B         	call	_I2C_Master_Write	;wreg free
  1638                           
  1639                           ;main.c: 393: for(unsigned char i=0;i<0x06;i++){
  1640  0008DA  0E00               	movlw	0
  1641  0008DC  6E40               	movwf	fixLCD@i_656,c
  1642  0008DE                     l4250:
  1643  0008DE  0E05               	movlw	5
  1644  0008E0  6440               	cpfsgt	fixLCD@i_656,c
  1645  0008E2  D001               	goto	l4254
  1646  0008E4  D00E               	goto	l4260
  1647  0008E6                     l4254:
  1648                           
  1649                           ;main.c: 394: time[i] = I2C_Master_Read(1);
  1650  0008E6  5040               	movf	fixLCD@i_656,w,c
  1651  0008E8  0D01               	mullw	1
  1652  0008EA  0E37               	movlw	low fixLCD@time
  1653  0008EC  24F3               	addwf	prodl,w,c
  1654  0008EE  6ED9               	movwf	fsr2l,c
  1655  0008F0  0E00               	movlw	high fixLCD@time
  1656  0008F2  20F4               	addwfc	prodh,w,c
  1657  0008F4  6EDA               	movwf	fsr2h,c
  1658  0008F6  0E01               	movlw	1
  1659  0008F8  EC98  F00A         	call	_I2C_Master_Read
  1660  0008FC  6EDF               	movwf	indf2,c
  1661  0008FE  2A40               	incf	fixLCD@i_656,f,c
  1662  000900  D7EE               	goto	l4250
  1663  000902                     l4260:
  1664                           
  1665                           ;main.c: 395: }
  1666                           ;main.c: 396: time[6] = I2C_Master_Read(0);
  1667  000902  0E00               	movlw	0
  1668  000904  EC98  F00A         	call	_I2C_Master_Read
  1669  000908  6E3D               	movwf	fixLCD@time+6,c
  1670                           
  1671                           ;main.c: 397: I2C_Master_Stop();
  1672  00090A  EC54  F00B         	call	_I2C_Master_Stop	;wreg free
  1673                           
  1674                           ;main.c: 398: lcdInst(0b10000000);;
  1675  00090E  0E80               	movlw	128
  1676  000910  EC49  F00B         	call	_lcdInst
  1677                           
  1678                           ;main.c: 399: printf("%02x%02x/%02x ", time[6],time[5],time[4]);
  1679  000914  0ECF               	movlw	low STR_14
  1680  000916  6E1C               	movwf	printf@f,c
  1681  000918  0EFF               	movlw	high STR_14
  1682  00091A  6E1D               	movwf	printf@f+1,c
  1683  00091C  C03D  F01E         	movff	fixLCD@time+6,?_printf+2
  1684  000920  6A1F               	clrf	?_printf+3,c
  1685  000922  C03C  F020         	movff	fixLCD@time+5,?_printf+4
  1686  000926  6A21               	clrf	?_printf+5,c
  1687  000928  C03B  F022         	movff	fixLCD@time+4,?_printf+6
  1688  00092C  6A23               	clrf	?_printf+7,c
  1689  00092E  EC95  F002         	call	_printf	;wreg free
  1690                           
  1691                           ;main.c: 400: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1692  000932  0EDE               	movlw	low STR_2
  1693  000934  6E1C               	movwf	printf@f,c
  1694  000936  0EFF               	movlw	high STR_2
  1695  000938  6E1D               	movwf	printf@f+1,c
  1696  00093A  C039  F01E         	movff	fixLCD@time+2,?_printf+2
  1697  00093E  6A1F               	clrf	?_printf+3,c
  1698  000940  C038  F020         	movff	fixLCD@time+1,?_printf+4
  1699  000944  6A21               	clrf	?_printf+5,c
  1700  000946  C037  F022         	movff	fixLCD@time,?_printf+6
  1701  00094A  6A23               	clrf	?_printf+7,c
  1702  00094C  EC95  F002         	call	_printf	;wreg free
  1703                           
  1704                           ;main.c: 401: lcdInst(0b11000000);;
  1705  000950  0EC0               	movlw	192
  1706  000952  EC49  F00B         	call	_lcdInst
  1707                           
  1708                           ;main.c: 402: printf("              ");
  1709  000956  0E15               	movlw	low (STR_4+4)
  1710  000958  6E1C               	movwf	printf@f,c
  1711  00095A  0EFF               	movlw	high (STR_4+4)
  1712  00095C  6E1D               	movwf	printf@f+1,c
  1713  00095E  EC95  F002         	call	_printf	;wreg free
  1714                           
  1715                           ;main.c: 403: lcdInst(0b10000000);;
  1716  000962  0E80               	movlw	128
  1717  000964  EC49  F00B         	call	_lcdInst
  1718                           
  1719                           ;main.c: 404: lcdInst(0b11000000);;
  1720  000968  0EC0               	movlw	192
  1721  00096A  EC49  F00B         	call	_lcdInst
  1722                           
  1723                           ;main.c: 406: LATA = LATA ^ 0xFF;
  1724  00096E  1E89               	comf	3977,f,c	;volatile
  1725                           
  1726                           ;main.c: 407: LATB = LATB ^ 0xFF;
  1727  000970  1E8A               	comf	3978,f,c	;volatile
  1728                           
  1729                           ;main.c: 408: LATC = LATC ^ 0xFF;
  1730  000972  1E8B               	comf	3979,f,c	;volatile
  1731                           
  1732                           ;main.c: 409: LATDbits.LATD0 = !LATDbits.LATD0;
  1733  000974  B08C               	btfsc	3980,0,c	;volatile
  1734  000976  D003               	goto	u3250
  1735  000978  6A34               	clrf	??_fixLCD& (0+255),c
  1736  00097A  2A34               	incf	??_fixLCD& (0+255),f,c
  1737  00097C  D001               	goto	u3268
  1738  00097E                     u3250:
  1739  00097E  6A34               	clrf	??_fixLCD& (0+255),c
  1740  000980                     u3268:
  1741  000980  508C               	movf	3980,w,c	;volatile
  1742  000982  1834               	xorwf	??_fixLCD,w,c
  1743  000984  0BFE               	andlw	-2
  1744  000986  1834               	xorwf	??_fixLCD,w,c
  1745  000988  6E8C               	movwf	3980,c	;volatile
  1746                           
  1747                           ;main.c: 410: LATDbits.LATD1 = !LATDbits.LATD1;
  1748  00098A  B28C               	btfsc	3980,1,c	;volatile
  1749  00098C  D003               	goto	u3270
  1750  00098E  6A34               	clrf	??_fixLCD& (0+255),c
  1751  000990  2A34               	incf	??_fixLCD& (0+255),f,c
  1752  000992  D001               	goto	u3288
  1753  000994                     u3270:
  1754  000994  6A34               	clrf	??_fixLCD& (0+255),c
  1755  000996                     u3288:
  1756  000996  4634               	rlncf	??_fixLCD,f,c
  1757  000998  508C               	movf	3980,w,c	;volatile
  1758  00099A  1834               	xorwf	??_fixLCD,w,c
  1759  00099C  0BFD               	andlw	-3
  1760  00099E  1834               	xorwf	??_fixLCD,w,c
  1761  0009A0  6E8C               	movwf	3980,c	;volatile
  1762                           
  1763                           ;main.c: 411: LATEbits.LATE0 = !LATEbits.LATE0;
  1764  0009A2  B08D               	btfsc	3981,0,c	;volatile
  1765  0009A4  D003               	goto	u3290
  1766  0009A6  6A34               	clrf	??_fixLCD& (0+255),c
  1767  0009A8  2A34               	incf	??_fixLCD& (0+255),f,c
  1768  0009AA  D001               	goto	u3308
  1769  0009AC                     u3290:
  1770  0009AC  6A34               	clrf	??_fixLCD& (0+255),c
  1771  0009AE                     u3308:
  1772  0009AE  508D               	movf	3981,w,c	;volatile
  1773  0009B0  1834               	xorwf	??_fixLCD,w,c
  1774  0009B2  0BFE               	andlw	-2
  1775  0009B4  1834               	xorwf	??_fixLCD,w,c
  1776  0009B6  6E8D               	movwf	3981,c	;volatile
  1777                           
  1778                           ;main.c: 412: LATEbits.LATE1 = !LATEbits.LATE1;
  1779  0009B8  B28D               	btfsc	3981,1,c	;volatile
  1780  0009BA  D003               	goto	u3310
  1781  0009BC  6A34               	clrf	??_fixLCD& (0+255),c
  1782  0009BE  2A34               	incf	??_fixLCD& (0+255),f,c
  1783  0009C0  D001               	goto	u3328
  1784  0009C2                     u3310:
  1785  0009C2  6A34               	clrf	??_fixLCD& (0+255),c
  1786  0009C4                     u3328:
  1787  0009C4  4634               	rlncf	??_fixLCD,f,c
  1788  0009C6  508D               	movf	3981,w,c	;volatile
  1789  0009C8  1834               	xorwf	??_fixLCD,w,c
  1790  0009CA  0BFD               	andlw	-3
  1791  0009CC  1834               	xorwf	??_fixLCD,w,c
  1792  0009CE  6E8D               	movwf	3981,c	;volatile
  1793                           
  1794                           ;main.c: 413: j++;
  1795  0009D0  4A3E               	infsnz	fixLCD@j,f,c
  1796  0009D2  2A3F               	incf	fixLCD@j+1,f,c
  1797  0009D4                     l4288:
  1798  0009D4  BE3F               	btfsc	fixLCD@j+1,7,c
  1799  0009D6  D769               	goto	l4246
  1800  0009D8  503F               	movf	fixLCD@j+1,w,c
  1801  0009DA  E105               	bnz	l287
  1802  0009DC  0E0A               	movlw	10
  1803  0009DE  5C3E               	subwf	fixLCD@j,w,c
  1804  0009E0  B0D8               	btfsc	status,0,c
  1805  0009E2  0012               	return	
  1806  0009E4  D762               	goto	l4246
  1807  0009E6                     l287:
  1808  0009E6  0012               	return		;funcret
  1809  0009E8                     __end_of_fixLCD:
  1810                           	opt stack 0
  1811                           tblptru	equ	0xFF8
  1812                           prodh	equ	0xFF4
  1813                           prodl	equ	0xFF3
  1814                           intcon	equ	0xFF2
  1815                           intcon3	equ	0xFF0
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           indf2	equ	0xFDF
  1819                           postinc2	equ	0xFDE
  1820                           postdec2	equ	0xFDD
  1821                           fsr2h	equ	0xFDA
  1822                           fsr2l	equ	0xFD9
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _initLCD *****************
  1826 ;; Defined at:
  1827 ;;		line 15 in file "lcd.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, status,2, status,0, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;Total ram usage:        1 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    3
  1848 ;; This function calls:
  1849 ;;		_lcdInst
  1850 ;; This function is called by:
  1851 ;;		_fixLCD
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text5
  1857  0013E8                     __ptext5:
  1858                           	opt stack 0
  1859  0013E8                     _initLCD:
  1860                           	opt stack 27
  1861                           
  1862                           ;lcd.c: 16: _delay((unsigned long)((15)*(10000000/4000.0)));
  1863                           
  1864                           ;incstack = 0
  1865  0013E8  0E31               	movlw	49
  1866  0013EA  6E13               	movwf	??_initLCD& (0+255),c
  1867  0013EC  0EB2               	movlw	178
  1868  0013EE                     u3377:
  1869  0013EE  2EE8               	decfsz	wreg,f,c
  1870  0013F0  D7FE               	bra	u3377
  1871  0013F2  2E13               	decfsz	??_initLCD& (0+255),f,c
  1872  0013F4  D7FC               	bra	u3377
  1873  0013F6  D000               	nop2	
  1874                           
  1875                           ;lcd.c: 17: lcdInst(0b00110011);
  1876  0013F8  0E33               	movlw	51
  1877  0013FA  EC49  F00B         	call	_lcdInst
  1878                           
  1879                           ;lcd.c: 18: lcdInst(0b00110010);
  1880  0013FE  0E32               	movlw	50
  1881  001400  EC49  F00B         	call	_lcdInst
  1882                           
  1883                           ;lcd.c: 19: lcdInst(0b00101000);
  1884  001404  0E28               	movlw	40
  1885  001406  EC49  F00B         	call	_lcdInst
  1886                           
  1887                           ;lcd.c: 20: lcdInst(0b00001111);
  1888  00140A  0E0F               	movlw	15
  1889  00140C  EC49  F00B         	call	_lcdInst
  1890                           
  1891                           ;lcd.c: 21: lcdInst(0b00000110);
  1892  001410  0E06               	movlw	6
  1893  001412  EC49  F00B         	call	_lcdInst
  1894                           
  1895                           ;lcd.c: 22: lcdInst(0b00000001);
  1896  001416  0E01               	movlw	1
  1897  001418  EC49  F00B         	call	_lcdInst
  1898                           
  1899                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  1900  00141C  0E31               	movlw	49
  1901  00141E  6E13               	movwf	??_initLCD& (0+255),c
  1902  001420  0EB2               	movlw	178
  1903  001422                     u3387:
  1904  001422  2EE8               	decfsz	wreg,f,c
  1905  001424  D7FE               	bra	u3387
  1906  001426  2E13               	decfsz	??_initLCD& (0+255),f,c
  1907  001428  D7FC               	bra	u3387
  1908  00142A  D000               	nop2	
  1909  00142C  0012               	return		;funcret
  1910  00142E                     __end_of_initLCD:
  1911                           	opt stack 0
  1912                           tblptru	equ	0xFF8
  1913                           prodh	equ	0xFF4
  1914                           prodl	equ	0xFF3
  1915                           intcon	equ	0xFF2
  1916                           intcon3	equ	0xFF0
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           indf2	equ	0xFDF
  1920                           postinc2	equ	0xFDE
  1921                           postdec2	equ	0xFDD
  1922                           fsr2h	equ	0xFDA
  1923                           fsr2l	equ	0xFD9
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _I2C_Master_Init *****************
  1927 ;; Defined at:
  1928 ;;		line 13 in file "I2C.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  c               4   28[COMRAM] const unsigned long 
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2, status,0, cstack
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;Total ram usage:        8 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    2
  1949 ;; This function calls:
  1950 ;;		___lldiv
  1951 ;; This function is called by:
  1952 ;;		_fixLCD
  1953 ;;		_main
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text6
  1958  00116C                     __ptext6:
  1959                           	opt stack 0
  1960  00116C                     _I2C_Master_Init:
  1961                           	opt stack 27
  1962                           
  1963                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  1964                           
  1965                           ;incstack = 0
  1966  00116C  0E00               	movlw	0
  1967  00116E  6EC7               	movwf	4039,c	;volatile
  1968                           
  1969                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  1970  001170  0E28               	movlw	40
  1971  001172  6EC6               	movwf	4038,c	;volatile
  1972                           
  1973                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  1974  001174  0E00               	movlw	0
  1975  001176  6EC5               	movwf	4037,c	;volatile
  1976                           
  1977                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  1978  001178  0E80               	movlw	128
  1979  00117A  6E10               	movwf	___lldiv@dividend,c
  1980  00117C  0E96               	movlw	150
  1981  00117E  6E11               	movwf	___lldiv@dividend+1,c
  1982  001180  0E98               	movlw	152
  1983  001182  6E12               	movwf	___lldiv@dividend+2,c
  1984  001184  0E00               	movlw	0
  1985  001186  6E13               	movwf	___lldiv@dividend+3,c
  1986  001188  C01D  F021         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  1987  00118C  C01E  F022         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  1988  001190  C01F  F023         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  1989  001194  C020  F024         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  1990  001198  0E02               	movlw	2
  1991  00119A                     u1735:
  1992  00119A  90D8               	bcf	status,0,c
  1993  00119C  3621               	rlcf	??_I2C_Master_Init,f,c
  1994  00119E  3622               	rlcf	??_I2C_Master_Init+1,f,c
  1995  0011A0  3623               	rlcf	??_I2C_Master_Init+2,f,c
  1996  0011A2  3624               	rlcf	??_I2C_Master_Init+3,f,c
  1997  0011A4  2EE8               	decfsz	wreg,f,c
  1998  0011A6  D7F9               	goto	u1735
  1999  0011A8  C021  F014         	movff	??_I2C_Master_Init,___lldiv@divisor
  2000  0011AC  C022  F015         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2001  0011B0  C023  F016         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2002  0011B4  C024  F017         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2003  0011B8  EC45  F008         	call	___lldiv	;wreg free
  2004  0011BC  0410               	decf	?___lldiv,w,c
  2005  0011BE  6EC8               	movwf	4040,c	;volatile
  2006                           
  2007                           ;I2C.c: 20: TRISC3 = 1;
  2008  0011C0  8694               	bsf	3988,3,c	;volatile
  2009                           
  2010                           ;I2C.c: 21: TRISC4 = 1;
  2011  0011C2  8894               	bsf	3988,4,c	;volatile
  2012  0011C4  0012               	return		;funcret
  2013  0011C6                     __end_of_I2C_Master_Init:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           prodh	equ	0xFF4
  2017                           prodl	equ	0xFF3
  2018                           intcon	equ	0xFF2
  2019                           intcon3	equ	0xFF0
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           indf2	equ	0xFDF
  2023                           postinc2	equ	0xFDE
  2024                           postdec2	equ	0xFDD
  2025                           fsr2h	equ	0xFDA
  2026                           fsr2l	equ	0xFD9
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function ___lldiv *****************
  2030 ;; Defined at:
  2031 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  dividend        4   15[COMRAM] unsigned long 
  2034 ;;  divisor         4   19[COMRAM] unsigned long 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  quotient        4   23[COMRAM] unsigned long 
  2037 ;;  counter         1   27[COMRAM] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  4   15[COMRAM] unsigned long 
  2040 ;; Registers used:
  2041 ;;		wreg, status,2, status,0
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2047 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;Total ram usage:       13 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    1
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_I2C_Master_Init
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text7
  2062  00108A                     __ptext7:
  2063                           	opt stack 0
  2064  00108A                     ___lldiv:
  2065                           	opt stack 27
  2066                           
  2067                           ;incstack = 0
  2068  00108A  0E00               	movlw	0
  2069  00108C  6E18               	movwf	___lldiv@quotient,c
  2070  00108E  0E00               	movlw	0
  2071  001090  6E19               	movwf	___lldiv@quotient+1,c
  2072  001092  0E00               	movlw	0
  2073  001094  6E1A               	movwf	___lldiv@quotient+2,c
  2074  001096  0E00               	movlw	0
  2075  001098  6E1B               	movwf	___lldiv@quotient+3,c
  2076  00109A  5014               	movf	___lldiv@divisor,w,c
  2077  00109C  1015               	iorwf	___lldiv@divisor+1,w,c
  2078  00109E  1016               	iorwf	___lldiv@divisor+2,w,c
  2079  0010A0  1017               	iorwf	___lldiv@divisor+3,w,c
  2080  0010A2  B4D8               	btfsc	status,2,c
  2081  0010A4  D02A               	goto	l938
  2082  0010A6  0E01               	movlw	1
  2083  0010A8  6E1C               	movwf	___lldiv@counter,c
  2084  0010AA  D006               	goto	l2684
  2085  0010AC                     l2682:
  2086  0010AC  90D8               	bcf	status,0,c
  2087  0010AE  3614               	rlcf	___lldiv@divisor,f,c
  2088  0010B0  3615               	rlcf	___lldiv@divisor+1,f,c
  2089  0010B2  3616               	rlcf	___lldiv@divisor+2,f,c
  2090  0010B4  3617               	rlcf	___lldiv@divisor+3,f,c
  2091  0010B6  2A1C               	incf	___lldiv@counter,f,c
  2092  0010B8                     l2684:
  2093  0010B8  AE17               	btfss	___lldiv@divisor+3,7,c
  2094  0010BA  D7F8               	goto	l2682
  2095  0010BC                     l2686:
  2096  0010BC  90D8               	bcf	status,0,c
  2097  0010BE  3618               	rlcf	___lldiv@quotient,f,c
  2098  0010C0  3619               	rlcf	___lldiv@quotient+1,f,c
  2099  0010C2  361A               	rlcf	___lldiv@quotient+2,f,c
  2100  0010C4  361B               	rlcf	___lldiv@quotient+3,f,c
  2101  0010C6  5014               	movf	___lldiv@divisor,w,c
  2102  0010C8  5C10               	subwf	___lldiv@dividend,w,c
  2103  0010CA  5015               	movf	___lldiv@divisor+1,w,c
  2104  0010CC  5811               	subwfb	___lldiv@dividend+1,w,c
  2105  0010CE  5016               	movf	___lldiv@divisor+2,w,c
  2106  0010D0  5812               	subwfb	___lldiv@dividend+2,w,c
  2107  0010D2  5017               	movf	___lldiv@divisor+3,w,c
  2108  0010D4  5813               	subwfb	___lldiv@dividend+3,w,c
  2109  0010D6  A0D8               	btfss	status,0,c
  2110  0010D8  D009               	goto	l2694
  2111  0010DA  5014               	movf	___lldiv@divisor,w,c
  2112  0010DC  5E10               	subwf	___lldiv@dividend,f,c
  2113  0010DE  5015               	movf	___lldiv@divisor+1,w,c
  2114  0010E0  5A11               	subwfb	___lldiv@dividend+1,f,c
  2115  0010E2  5016               	movf	___lldiv@divisor+2,w,c
  2116  0010E4  5A12               	subwfb	___lldiv@dividend+2,f,c
  2117  0010E6  5017               	movf	___lldiv@divisor+3,w,c
  2118  0010E8  5A13               	subwfb	___lldiv@dividend+3,f,c
  2119  0010EA  8018               	bsf	___lldiv@quotient,0,c
  2120  0010EC                     l2694:
  2121  0010EC  90D8               	bcf	status,0,c
  2122  0010EE  3217               	rrcf	___lldiv@divisor+3,f,c
  2123  0010F0  3216               	rrcf	___lldiv@divisor+2,f,c
  2124  0010F2  3215               	rrcf	___lldiv@divisor+1,f,c
  2125  0010F4  3214               	rrcf	___lldiv@divisor,f,c
  2126  0010F6  2E1C               	decfsz	___lldiv@counter,f,c
  2127  0010F8  D7E1               	goto	l2686
  2128  0010FA                     l938:
  2129  0010FA  C018  F010         	movff	___lldiv@quotient,?___lldiv
  2130  0010FE  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  2131  001102  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  2132  001106  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  2133  00110A  0012               	return		;funcret
  2134  00110C                     __end_of___lldiv:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           intcon3	equ	0xFF0
  2141                           postinc0	equ	0xFEE
  2142                           wreg	equ	0xFE8
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _finishState *****************
  2151 ;; Defined at:
  2152 ;;		line 296 in file "main.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;		None
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  keypress        2   53[COMRAM] int 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;Total ram usage:        4 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    5
  2173 ;; This function calls:
  2174 ;;		_readKey
  2175 ;;		_update_lcd
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text8
  2182  001470                     __ptext8:
  2183                           	opt stack 0
  2184  001470                     _finishState:
  2185                           	opt stack 25
  2186                           
  2187                           ;main.c: 298: (INTCONbits.GIE = 0);
  2188                           
  2189                           ;incstack = 0
  2190  001470  9EF2               	bcf	intcon,7,c	;volatile
  2191                           
  2192                           ;main.c: 299: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2193  001472  0E0D               	movlw	13
  2194  001474  6E35               	movwf	(??_finishState+1)& (0+255),c
  2195  001476  0EAF               	movlw	175
  2196  001478  6E34               	movwf	??_finishState& (0+255),c
  2197  00147A  0EB6               	movlw	182
  2198  00147C                     u3397:
  2199  00147C  2EE8               	decfsz	wreg,f,c
  2200  00147E  D7FE               	bra	u3397
  2201  001480  2E34               	decfsz	??_finishState& (0+255),f,c
  2202  001482  D7FC               	bra	u3397
  2203  001484  2E35               	decfsz	(??_finishState+1)& (0+255),f,c
  2204  001486  D7FA               	bra	u3397
  2205  001488  D000               	nop2	
  2206                           
  2207                           ;main.c: 300: update_lcd();
  2208  00148A  EC96  F005         	call	_update_lcd	;wreg free
  2209  00148E                     l4180:
  2210                           
  2211                           ;main.c: 302: int keypress = readKey();
  2212  00148E  ECD0  F009         	call	_readKey	;wreg free
  2213  001492  C010  F036         	movff	?_readKey,finishState@keypress
  2214  001496  C011  F037         	movff	?_readKey+1,finishState@keypress+1
  2215                           
  2216                           ;main.c: 303: if(keypress == 0b1101){
  2217  00149A  0E0D               	movlw	13
  2218  00149C  1836               	xorwf	finishState@keypress,w,c
  2219  00149E  1037               	iorwf	finishState@keypress+1,w,c
  2220  0014A0  A4D8               	btfss	status,2,c
  2221  0014A2  D7F5               	goto	l4180
  2222                           
  2223                           ;main.c: 304: state = MAIN;
  2224  0014A4  0E00               	movlw	0
  2225  0014A6  6E4B               	movwf	_state,c
  2226                           
  2227                           ;main.c: 305: return;
  2228  0014A8  0012               	return	
  2229  0014AA                     __end_of_finishState:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           prodh	equ	0xFF4
  2233                           prodl	equ	0xFF3
  2234                           intcon	equ	0xFF2
  2235                           intcon3	equ	0xFF0
  2236                           postinc0	equ	0xFEE
  2237                           wreg	equ	0xFE8
  2238                           indf2	equ	0xFDF
  2239                           postinc2	equ	0xFDE
  2240                           postdec2	equ	0xFDD
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _readKey *****************
  2246 ;; Defined at:
  2247 ;;		line 90 in file "main.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  keypress        1   17[COMRAM] unsigned char 
  2252 ;;  i               2   18[COMRAM] int 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  2   15[COMRAM] int 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;Total ram usage:        5 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    1
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_mainState
  2273 ;;		_finishState
  2274 ;;		_logState
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text9
  2279  0013A0                     __ptext9:
  2280                           	opt stack 0
  2281  0013A0                     _readKey:
  2282                           	opt stack 28
  2283                           
  2284                           ;main.c: 92: for (int i = 0; i < 200; i++)
  2285                           
  2286                           ;incstack = 0
  2287  0013A0  0E00               	movlw	0
  2288  0013A2  6E14               	movwf	readKey@i+1,c
  2289  0013A4  0E00               	movlw	0
  2290  0013A6  6E13               	movwf	readKey@i,c
  2291  0013A8  BE14               	btfsc	readKey@i+1,7,c
  2292  0013AA  D006               	goto	l211
  2293  0013AC  5014               	movf	readKey@i+1,w,c
  2294  0013AE  E119               	bnz	l212
  2295  0013B0  0EC8               	movlw	200
  2296  0013B2  5C13               	subwf	readKey@i,w,c
  2297  0013B4  B0D8               	btfsc	status,0,c
  2298  0013B6  D015               	goto	l212
  2299  0013B8                     l211:
  2300                           
  2301                           ;main.c: 93: {
  2302                           ;main.c: 94: if (PORTBbits.RB1 != 0)
  2303  0013B8  A281               	btfss	3969,1,c	;volatile
  2304  0013BA  D00C               	goto	l2766
  2305                           
  2306                           ;main.c: 95: {
  2307                           ;main.c: 96: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2308  0013BC  3881               	swapf	3969,w,c	;volatile
  2309  0013BE  0B0F               	andlw	15
  2310  0013C0  0B0F               	andlw	15
  2311  0013C2  6E12               	movwf	readKey@keypress,c
  2312  0013C4                     l214:
  2313  0013C4  B281               	btfsc	3969,1,c	;volatile
  2314  0013C6  D7FE               	goto	l214
  2315                           
  2316                           ;main.c: 99: }
  2317                           ;main.c: 100: __nop();
  2318  0013C8  F000               	nop	
  2319                           
  2320                           ;main.c: 101: __nop();
  2321  0013CA  F000               	nop	
  2322                           
  2323                           ;main.c: 102: return keypress;
  2324  0013CC  C012  F010         	movff	readKey@keypress,?_readKey
  2325  0013D0  6A11               	clrf	?_readKey+1,c
  2326  0013D2  0012               	return	
  2327  0013D4                     l2766:
  2328  0013D4  4A13               	infsnz	readKey@i,f,c
  2329  0013D6  2A14               	incf	readKey@i+1,f,c
  2330  0013D8  BE14               	btfsc	readKey@i+1,7,c
  2331  0013DA  D7EE               	goto	l211
  2332  0013DC  5014               	movf	readKey@i+1,w,c
  2333  0013DE  E101               	bnz	u1780
  2334  0013E0  D7E7               	goto	L2
  2335  0013E2                     u1780:
  2336  0013E2                     l212:
  2337                           
  2338                           ;main.c: 103: }
  2339                           ;main.c: 104: }
  2340                           ;main.c: 105: return -1;
  2341  0013E2  6810               	setf	?_readKey,c
  2342  0013E4  6811               	setf	?_readKey+1,c
  2343  0013E6  0012               	return		;funcret
  2344  0013E8                     __end_of_readKey:
  2345                           	opt stack 0
  2346                           tblptru	equ	0xFF8
  2347                           prodh	equ	0xFF4
  2348                           prodl	equ	0xFF3
  2349                           intcon	equ	0xFF2
  2350                           intcon3	equ	0xFF0
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           indf2	equ	0xFDF
  2354                           postinc2	equ	0xFDE
  2355                           postdec2	equ	0xFDD
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _executingState *****************
  2361 ;; Defined at:
  2362 ;;		line 150 in file "main.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  hasLabel        2   36[BANK0 ] int 
  2367 ;;  res             8   16[BANK0 ] int [4]
  2368 ;;  emptyCount      2   42[BANK0 ] int 
  2369 ;;  alLoaded        2   40[BANK0 ] int 
  2370 ;;  snLoaded        2   38[BANK0 ] int 
  2371 ;;  timedif         2   34[BANK0 ] int 
  2372 ;;  start_s         2   32[BANK0 ] int 
  2373 ;;  runCanAl        2   30[BANK0 ] int 
  2374 ;;  runCanSn        2   28[BANK0 ] int 
  2375 ;;  alInSensor      2   26[BANK0 ] int 
  2376 ;;  snInSensor      2   24[BANK0 ] int 
  2377 ;;  s_one           2   10[BANK0 ] int 
  2378 ;;  s_ten           2    8[BANK0 ] int 
  2379 ;;  m_one           2    6[BANK0 ] int 
  2380 ;;  m_ten           2    4[BANK0 ] int 
  2381 ;;  h_one           2    2[BANK0 ] int 
  2382 ;;  h_ten           2    0[BANK0 ] int 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Totals:         3      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;Total ram usage:       47 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    5
  2399 ;; This function calls:
  2400 ;;		___wmul
  2401 ;;		_dispenseAlCan
  2402 ;;		_dispenseSnCan
  2403 ;;		_eeprom_LogResult
  2404 ;;		_get_time
  2405 ;;		_get_timeDif
  2406 ;;		_lcdInst
  2407 ;;		_printf
  2408 ;;		_readAlBot
  2409 ;;		_readAlSensor
  2410 ;;		_readSnBot
  2411 ;;		_readSnSensor
  2412 ;;		_readSnTop
  2413 ;;		_servoRotate0
  2414 ;;		_servoRotate90
  2415 ;;		_servoRotate90n
  2416 ;;		_update_lcd
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text10
  2423  000012                     __ptext10:
  2424                           	opt stack 0
  2425  000012                     _executingState:
  2426                           	opt stack 25
  2427                           
  2428                           ;main.c: 156: int runCanSn, runCanAl;
  2429                           ;main.c: 157: runCanSn = 0;
  2430                           
  2431                           ;incstack = 0
  2432  000012  0E00               	movlw	0
  2433  000014  0100               	movlb	0	; () banked
  2434  000016  6F9D               	movwf	(executingState@runCanSn+1)& (0+255),b
  2435  000018  0E00               	movlw	0
  2436  00001A  6F9C               	movwf	executingState@runCanSn& (0+255),b
  2437                           
  2438                           ;main.c: 158: runCanAl = 0;
  2439  00001C  0E00               	movlw	0
  2440  00001E  0100               	movlb	0	; () banked
  2441  000020  6F9F               	movwf	(executingState@runCanAl+1)& (0+255),b
  2442  000022  0E00               	movlw	0
  2443  000024  6F9E               	movwf	executingState@runCanAl& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;main.c: 160: get_time(starttime);
  2447  000026  0EAC               	movlw	low _starttime
  2448  000028  6E13               	movwf	get_time@time,c
  2449  00002A  0E00               	movlw	high _starttime
  2450  00002C  6E14               	movwf	get_time@time+1,c
  2451  00002E  EC02  F008         	call	_get_time	;wreg free
  2452                           
  2453                           ;main.c: 161: int h_ten = (starttime[2] & 0b11110000)>>4;
  2454  000032  EE20  F0B0         	lfsr	2,_starttime+4
  2455  000036  CFDE F034          	movff	postinc2,??_executingState
  2456  00003A  CFDD F035          	movff	postdec2,??_executingState+1
  2457  00003E  0E04               	movlw	4
  2458  000040  6E36               	movwf	(??_executingState+2)& (0+255),c
  2459  000042                     u2975:
  2460  000042  3435               	rlcf	??_executingState+1,w,c
  2461  000044  3235               	rrcf	??_executingState+1,f,c
  2462  000046  3234               	rrcf	??_executingState,f,c
  2463  000048  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2464  00004A  D7FB               	goto	u2975
  2465  00004C  0E0F               	movlw	15
  2466  00004E  1434               	andwf	??_executingState,w,c
  2467  000050  0100               	movlb	0	; () banked
  2468  000052  6F80               	movwf	executingState@h_ten& (0+255),b
  2469  000054  0100               	movlb	0	; () banked
  2470  000056  6B81               	clrf	(executingState@h_ten+1)& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 162: int h_one = (starttime[2] & 0b00001111);
  2474  000058  0E0F               	movlw	15
  2475  00005A  0100               	movlb	0	; () banked
  2476  00005C  15B0               	andwf	(_starttime+4)& (0+255),w,b
  2477  00005E  0100               	movlb	0	; () banked
  2478  000060  6F82               	movwf	executingState@h_one& (0+255),b
  2479  000062  0100               	movlb	0	; () banked
  2480  000064  6B83               	clrf	(executingState@h_one+1)& (0+255),b
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;main.c: 163: int m_ten = (starttime[1] & 0b11110000)>>4;
  2484  000066  EE20  F0AE         	lfsr	2,_starttime+2
  2485  00006A  CFDE F034          	movff	postinc2,??_executingState
  2486  00006E  CFDD F035          	movff	postdec2,??_executingState+1
  2487  000072  0E04               	movlw	4
  2488  000074  6E36               	movwf	(??_executingState+2)& (0+255),c
  2489  000076                     u2985:
  2490  000076  3435               	rlcf	??_executingState+1,w,c
  2491  000078  3235               	rrcf	??_executingState+1,f,c
  2492  00007A  3234               	rrcf	??_executingState,f,c
  2493  00007C  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2494  00007E  D7FB               	goto	u2985
  2495  000080  0E0F               	movlw	15
  2496  000082  1434               	andwf	??_executingState,w,c
  2497  000084  0100               	movlb	0	; () banked
  2498  000086  6F84               	movwf	executingState@m_ten& (0+255),b
  2499  000088  0100               	movlb	0	; () banked
  2500  00008A  6B85               	clrf	(executingState@m_ten+1)& (0+255),b
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 164: int m_one = (starttime[1] & 0b00001111);
  2504  00008C  0E0F               	movlw	15
  2505  00008E  0100               	movlb	0	; () banked
  2506  000090  15AE               	andwf	(_starttime+2)& (0+255),w,b
  2507  000092  0100               	movlb	0	; () banked
  2508  000094  6F86               	movwf	executingState@m_one& (0+255),b
  2509  000096  0100               	movlb	0	; () banked
  2510  000098  6B87               	clrf	(executingState@m_one+1)& (0+255),b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 165: int s_ten = (starttime[0] & 0b11110000)>>4;
  2514  00009A  C0AC  F034         	movff	_starttime,??_executingState
  2515  00009E  C0AD  F035         	movff	_starttime+1,??_executingState+1
  2516  0000A2  0E04               	movlw	4
  2517  0000A4  6E36               	movwf	(??_executingState+2)& (0+255),c
  2518  0000A6                     u2995:
  2519  0000A6  3435               	rlcf	??_executingState+1,w,c
  2520  0000A8  3235               	rrcf	??_executingState+1,f,c
  2521  0000AA  3234               	rrcf	??_executingState,f,c
  2522  0000AC  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2523  0000AE  D7FB               	goto	u2995
  2524  0000B0  0E0F               	movlw	15
  2525  0000B2  1434               	andwf	??_executingState,w,c
  2526  0000B4  0100               	movlb	0	; () banked
  2527  0000B6  6F88               	movwf	executingState@s_ten& (0+255),b
  2528  0000B8  0100               	movlb	0	; () banked
  2529  0000BA  6B89               	clrf	(executingState@s_ten+1)& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;main.c: 166: int s_one = (starttime[0] & 0b00001111);
  2533  0000BC  0E0F               	movlw	15
  2534  0000BE  0100               	movlb	0	; () banked
  2535  0000C0  15AC               	andwf	_starttime& (0+255),w,b
  2536  0000C2  0100               	movlb	0	; () banked
  2537  0000C4  6F8A               	movwf	executingState@s_one& (0+255),b
  2538  0000C6  0100               	movlb	0	; () banked
  2539  0000C8  6B8B               	clrf	(executingState@s_one+1)& (0+255),b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2543  0000CA  C084  F010         	movff	executingState@m_ten,___wmul@multiplier
  2544  0000CE  C085  F011         	movff	executingState@m_ten+1,___wmul@multiplier+1
  2545  0000D2  0E00               	movlw	0
  2546  0000D4  6E13               	movwf	___wmul@multiplicand+1,c
  2547  0000D6  0E0A               	movlw	10
  2548  0000D8  6E12               	movwf	___wmul@multiplicand,c
  2549  0000DA  ECBE  F00A         	call	___wmul	;wreg free
  2550  0000DE  0100               	movlb	0	; () banked
  2551  0000E0  5186               	movf	executingState@m_one& (0+255),w,b
  2552  0000E2  2410               	addwf	?___wmul,w,c
  2553  0000E4  0100               	movlb	0	; () banked
  2554  0000E6  6F8C               	movwf	_executingState$1725& (0+255),b
  2555  0000E8  0100               	movlb	0	; () banked
  2556  0000EA  5187               	movf	(executingState@m_one+1)& (0+255),w,b
  2557  0000EC  2011               	addwfc	?___wmul+1,w,c
  2558  0000EE  0100               	movlb	0	; () banked
  2559  0000F0  6F8D               	movwf	(_executingState$1725+1)& (0+255),b
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2563  0000F2  C080  F010         	movff	executingState@h_ten,___wmul@multiplier
  2564  0000F6  C081  F011         	movff	executingState@h_ten+1,___wmul@multiplier+1
  2565  0000FA  0E00               	movlw	0
  2566  0000FC  6E13               	movwf	___wmul@multiplicand+1,c
  2567  0000FE  0E0A               	movlw	10
  2568  000100  6E12               	movwf	___wmul@multiplicand,c
  2569  000102  ECBE  F00A         	call	___wmul	;wreg free
  2570  000106  0100               	movlb	0	; () banked
  2571  000108  5182               	movf	executingState@h_one& (0+255),w,b
  2572  00010A  2410               	addwf	?___wmul,w,c
  2573  00010C  0100               	movlb	0	; () banked
  2574  00010E  6F8E               	movwf	_executingState$1726& (0+255),b
  2575  000110  0100               	movlb	0	; () banked
  2576  000112  5183               	movf	(executingState@h_one+1)& (0+255),w,b
  2577  000114  2011               	addwfc	?___wmul+1,w,c
  2578  000116  0100               	movlb	0	; () banked
  2579  000118  6F8F               	movwf	(_executingState$1726+1)& (0+255),b
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2583  00011A  C088  F010         	movff	executingState@s_ten,___wmul@multiplier
  2584  00011E  C089  F011         	movff	executingState@s_ten+1,___wmul@multiplier+1
  2585  000122  0E00               	movlw	0
  2586  000124  6E13               	movwf	___wmul@multiplicand+1,c
  2587  000126  0E0A               	movlw	10
  2588  000128  6E12               	movwf	___wmul@multiplicand,c
  2589  00012A  ECBE  F00A         	call	___wmul	;wreg free
  2590  00012E  C010  F034         	movff	?___wmul,??_executingState
  2591  000132  C011  F035         	movff	?___wmul+1,??_executingState+1
  2592  000136  C08E  F010         	movff	_executingState$1726,___wmul@multiplier
  2593  00013A  C08F  F011         	movff	_executingState$1726+1,___wmul@multiplier+1
  2594  00013E  0E0E               	movlw	14
  2595  000140  6E13               	movwf	___wmul@multiplicand+1,c
  2596  000142  0E10               	movlw	16
  2597  000144  6E12               	movwf	___wmul@multiplicand,c
  2598  000146  ECBE  F00A         	call	___wmul	;wreg free
  2599  00014A  5010               	movf	?___wmul,w,c
  2600  00014C  2634               	addwf	??_executingState,f,c
  2601  00014E  5011               	movf	?___wmul+1,w,c
  2602  000150  2235               	addwfc	??_executingState+1,f,c
  2603  000152  C08C  F010         	movff	_executingState$1725,___wmul@multiplier
  2604  000156  C08D  F011         	movff	_executingState$1725+1,___wmul@multiplier+1
  2605  00015A  0E00               	movlw	0
  2606  00015C  6E13               	movwf	___wmul@multiplicand+1,c
  2607  00015E  0E3C               	movlw	60
  2608  000160  6E12               	movwf	___wmul@multiplicand,c
  2609  000162  ECBE  F00A         	call	___wmul	;wreg free
  2610  000166  5010               	movf	?___wmul,w,c
  2611  000168  2634               	addwf	??_executingState,f,c
  2612  00016A  5011               	movf	?___wmul+1,w,c
  2613  00016C  2235               	addwfc	??_executingState+1,f,c
  2614  00016E  0100               	movlb	0	; () banked
  2615  000170  518A               	movf	executingState@s_one& (0+255),w,b
  2616  000172  2434               	addwf	??_executingState,w,c
  2617  000174  0100               	movlb	0	; () banked
  2618  000176  6FA0               	movwf	executingState@start_s& (0+255),b
  2619  000178  0100               	movlb	0	; () banked
  2620  00017A  518B               	movf	(executingState@s_one+1)& (0+255),w,b
  2621  00017C  2035               	addwfc	??_executingState+1,w,c
  2622  00017E  0100               	movlb	0	; () banked
  2623  000180  6FA1               	movwf	(executingState@start_s+1)& (0+255),b
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;main.c: 169: LATCbits.LATC6 = 1;
  2627  000182  8C8B               	bsf	3979,6,c	;volatile
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 170: (INTCONbits.GIE = 0);
  2631  000184  9EF2               	bcf	intcon,7,c	;volatile
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 171: update_lcd();
  2635  000186  EC96  F005         	call	_update_lcd	;wreg free
  2636                           
  2637                           ;main.c: 172: int timedif = get_timeDif(start_s);
  2638  00018A  C0A0  F018         	movff	executingState@start_s,get_timeDif@start
  2639  00018E  C0A1  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  2640  000192  ECF4  F004         	call	_get_timeDif	;wreg free
  2641  000196  C018  F0A2         	movff	?_get_timeDif,executingState@timedif
  2642  00019A  C019  F0A3         	movff	?_get_timeDif+1,executingState@timedif+1
  2643                           
  2644                           ;main.c: 175: int emptyCount;
  2645                           ;main.c: 177: int snLoaded, alLoaded, snInSensor, alInSensor;
  2646                           ;main.c: 178: snLoaded = 1;
  2647  00019E  0E00               	movlw	0
  2648  0001A0  0100               	movlb	0	; () banked
  2649  0001A2  6FA7               	movwf	(executingState@snLoaded+1)& (0+255),b
  2650  0001A4  0E01               	movlw	1
  2651  0001A6  6FA6               	movwf	executingState@snLoaded& (0+255),b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 179: alLoaded = 1;
  2655  0001A8  0E00               	movlw	0
  2656  0001AA  0100               	movlb	0	; () banked
  2657  0001AC  6FA9               	movwf	(executingState@alLoaded+1)& (0+255),b
  2658  0001AE  0E01               	movlw	1
  2659  0001B0  6FA8               	movwf	executingState@alLoaded& (0+255),b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 180: snInSensor = 1;
  2663  0001B2  0E00               	movlw	0
  2664  0001B4  0100               	movlb	0	; () banked
  2665  0001B6  6F99               	movwf	(executingState@snInSensor+1)& (0+255),b
  2666  0001B8  0E01               	movlw	1
  2667  0001BA  6F98               	movwf	executingState@snInSensor& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;main.c: 181: alInSensor = 1;
  2671  0001BC  0E00               	movlw	0
  2672  0001BE  0100               	movlb	0	; () banked
  2673  0001C0  6F9B               	movwf	(executingState@alInSensor+1)& (0+255),b
  2674  0001C2  0E01               	movlw	1
  2675  0001C4  6F9A               	movwf	executingState@alInSensor& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;main.c: 182: emptyCount = 0;
  2679  0001C6  0E00               	movlw	0
  2680  0001C8  0100               	movlb	0	; () banked
  2681  0001CA  6FAB               	movwf	(executingState@emptyCount+1)& (0+255),b
  2682  0001CC  0E00               	movlw	0
  2683  0001CE  6FAA               	movwf	executingState@emptyCount& (0+255),b
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 184: servoRotate0(1);
  2687  0001D0  0E00               	movlw	0
  2688  0001D2  6E11               	movwf	servoRotate0@servo+1,c
  2689  0001D4  0E01               	movlw	1
  2690  0001D6  6E10               	movwf	servoRotate0@servo,c
  2691  0001D8  EC95  F006         	call	_servoRotate0	;wreg free
  2692                           
  2693                           ;main.c: 185: servoRotate0(2);
  2694  0001DC  0E00               	movlw	0
  2695  0001DE  6E11               	movwf	servoRotate0@servo+1,c
  2696  0001E0  0E02               	movlw	2
  2697  0001E2  6E10               	movwf	servoRotate0@servo,c
  2698  0001E4  EC95  F006         	call	_servoRotate0	;wreg free
  2699                           
  2700                           ;main.c: 186: servoRotate0(3);
  2701  0001E8  0E00               	movlw	0
  2702  0001EA  6E11               	movwf	servoRotate0@servo+1,c
  2703  0001EC  0E03               	movlw	3
  2704  0001EE  6E10               	movwf	servoRotate0@servo,c
  2705  0001F0  EC95  F006         	call	_servoRotate0	;wreg free
  2706                           
  2707                           ;main.c: 187: servoRotate0(0);
  2708  0001F4  0E00               	movlw	0
  2709  0001F6  6E11               	movwf	servoRotate0@servo+1,c
  2710  0001F8  0E00               	movlw	0
  2711  0001FA  6E10               	movwf	servoRotate0@servo,c
  2712  0001FC  EC95  F006         	call	_servoRotate0	;wreg free
  2713                           
  2714                           ;main.c: 190: while(timedif < 180 && PORTBbits.RB0 == 1){
  2715  000200  D16D               	goto	l4166
  2716  000202                     l4046:
  2717                           
  2718                           ;main.c: 191: update_lcd();
  2719  000202  EC96  F005         	call	_update_lcd	;wreg free
  2720                           
  2721                           ;main.c: 192: lcdInst(0b10000000);;
  2722  000206  0E80               	movlw	128
  2723  000208  EC49  F00B         	call	_lcdInst
  2724                           
  2725                           ;main.c: 193: printf("Executing    %03d", emptyCount);
  2726  00020C  0E36               	movlw	low STR_12
  2727  00020E  6E1C               	movwf	printf@f,c
  2728  000210  0EFF               	movlw	high STR_12
  2729  000212  6E1D               	movwf	printf@f+1,c
  2730  000214  C0AA  F01E         	movff	executingState@emptyCount,?_printf+2
  2731  000218  C0AB  F01F         	movff	executingState@emptyCount+1,?_printf+3
  2732  00021C  EC95  F002         	call	_printf	;wreg free
  2733                           
  2734                           ;main.c: 196: if(readSnTop() == 0){
  2735  000220  ECEE  F00A         	call	_readSnTop	;wreg free
  2736  000224  5010               	movf	?_readSnTop,w,c
  2737  000226  1011               	iorwf	?_readSnTop+1,w,c
  2738  000228  A4D8               	btfss	status,2,c
  2739  00022A  D005               	goto	l4054
  2740                           
  2741                           ;main.c: 197: snLoaded = 0;
  2742  00022C  0E00               	movlw	0
  2743  00022E  0100               	movlb	0	; () banked
  2744  000230  6FA7               	movwf	(executingState@snLoaded+1)& (0+255),b
  2745  000232  0E00               	movlw	0
  2746  000234  6FA6               	movwf	executingState@snLoaded& (0+255),b
  2747  000236                     l4054:
  2748                           
  2749                           ;main.c: 198: }
  2750                           ;main.c: 199: if(PORTAbits.RA3 == 0){
  2751  000236  B680               	btfsc	3968,3,c	;volatile
  2752  000238  D005               	goto	l4058
  2753                           
  2754                           ;main.c: 200: alLoaded = 0;
  2755  00023A  0E00               	movlw	0
  2756  00023C  0100               	movlb	0	; () banked
  2757  00023E  6FA9               	movwf	(executingState@alLoaded+1)& (0+255),b
  2758  000240  0E00               	movlw	0
  2759  000242  6FA8               	movwf	executingState@alLoaded& (0+255),b
  2760  000244                     l4058:
  2761                           
  2762                           ;main.c: 201: }
  2763                           ;main.c: 202: if(readSnBot() == 0){
  2764  000244  EC06  F00B         	call	_readSnBot	;wreg free
  2765  000248  5010               	movf	?_readSnBot,w,c
  2766  00024A  1011               	iorwf	?_readSnBot+1,w,c
  2767  00024C  A4D8               	btfss	status,2,c
  2768  00024E  D005               	goto	l4062
  2769                           
  2770                           ;main.c: 203: snInSensor = 0;
  2771  000250  0E00               	movlw	0
  2772  000252  0100               	movlb	0	; () banked
  2773  000254  6F99               	movwf	(executingState@snInSensor+1)& (0+255),b
  2774  000256  0E00               	movlw	0
  2775  000258  6F98               	movwf	executingState@snInSensor& (0+255),b
  2776  00025A                     l4062:
  2777                           
  2778                           ;main.c: 204: }
  2779                           ;main.c: 205: if(readAlBot() == 0){
  2780  00025A  EC12  F00B         	call	_readAlBot	;wreg free
  2781  00025E  5010               	movf	?_readAlBot,w,c
  2782  000260  1011               	iorwf	?_readAlBot+1,w,c
  2783  000262  A4D8               	btfss	status,2,c
  2784  000264  D005               	goto	l4066
  2785                           
  2786                           ;main.c: 206: alInSensor = 0;
  2787  000266  0E00               	movlw	0
  2788  000268  0100               	movlb	0	; () banked
  2789  00026A  6F9B               	movwf	(executingState@alInSensor+1)& (0+255),b
  2790  00026C  0E00               	movlw	0
  2791  00026E  6F9A               	movwf	executingState@alInSensor& (0+255),b
  2792  000270                     l4066:
  2793                           
  2794                           ;main.c: 207: }
  2795                           ;main.c: 209: if(snLoaded == 0){
  2796  000270  0100               	movlb	0	; () banked
  2797  000272  51A6               	movf	executingState@snLoaded& (0+255),w,b
  2798  000274  0100               	movlb	0	; () banked
  2799  000276  11A7               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2800  000278  A4D8               	btfss	status,2,c
  2801  00027A  D023               	goto	l4080
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 210: emptyCount = 0;
  2805  00027C  0E00               	movlw	0
  2806  00027E  0100               	movlb	0	; () banked
  2807  000280  6FAB               	movwf	(executingState@emptyCount+1)& (0+255),b
  2808  000282  0E00               	movlw	0
  2809  000284  6FAA               	movwf	executingState@emptyCount& (0+255),b
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 211: if(runCanSn == 0){
  2813  000286  0100               	movlb	0	; () banked
  2814  000288  519C               	movf	executingState@runCanSn& (0+255),w,b
  2815  00028A  0100               	movlb	0	; () banked
  2816  00028C  119D               	iorwf	(executingState@runCanSn+1)& (0+255),w,b
  2817  00028E  A4D8               	btfss	status,2,c
  2818  000290  D018               	goto	l4080
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 212: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2822  000292  0E0D               	movlw	13
  2823  000294  6E35               	movwf	(??_executingState+1)& (0+255),c
  2824  000296  0EAF               	movlw	175
  2825  000298  6E34               	movwf	??_executingState& (0+255),c
  2826  00029A  0EB6               	movlw	182
  2827  00029C                     u3407:
  2828  00029C  2EE8               	decfsz	wreg,f,c
  2829  00029E  D7FE               	bra	u3407
  2830  0002A0  2E34               	decfsz	??_executingState& (0+255),f,c
  2831  0002A2  D7FC               	bra	u3407
  2832  0002A4  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2833  0002A6  D7FA               	bra	u3407
  2834  0002A8  D000               	nop2	
  2835                           
  2836                           ;main.c: 213: dispenseSnCan();
  2837  0002AA  EC55  F00A         	call	_dispenseSnCan	;wreg free
  2838                           
  2839                           ;main.c: 214: runCanSn = 1;
  2840  0002AE  0E00               	movlw	0
  2841  0002B0  0100               	movlb	0	; () banked
  2842  0002B2  6F9D               	movwf	(executingState@runCanSn+1)& (0+255),b
  2843  0002B4  0E01               	movlw	1
  2844  0002B6  6F9C               	movwf	executingState@runCanSn& (0+255),b
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 215: snLoaded = 1;
  2848  0002B8  0E00               	movlw	0
  2849  0002BA  0100               	movlb	0	; () banked
  2850  0002BC  6FA7               	movwf	(executingState@snLoaded+1)& (0+255),b
  2851  0002BE  0E01               	movlw	1
  2852  0002C0  6FA6               	movwf	executingState@snLoaded& (0+255),b
  2853  0002C2                     l4080:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;main.c: 216: }
  2857                           ;main.c: 217: }
  2858                           ;main.c: 218: if(alLoaded == 0){
  2859  0002C2  0100               	movlb	0	; () banked
  2860  0002C4  51A8               	movf	executingState@alLoaded& (0+255),w,b
  2861  0002C6  0100               	movlb	0	; () banked
  2862  0002C8  11A9               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2863  0002CA  A4D8               	btfss	status,2,c
  2864  0002CC  D023               	goto	l4094
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 219: emptyCount = 0;
  2868  0002CE  0E00               	movlw	0
  2869  0002D0  0100               	movlb	0	; () banked
  2870  0002D2  6FAB               	movwf	(executingState@emptyCount+1)& (0+255),b
  2871  0002D4  0E00               	movlw	0
  2872  0002D6  6FAA               	movwf	executingState@emptyCount& (0+255),b
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 220: if(runCanAl == 0){
  2876  0002D8  0100               	movlb	0	; () banked
  2877  0002DA  519E               	movf	executingState@runCanAl& (0+255),w,b
  2878  0002DC  0100               	movlb	0	; () banked
  2879  0002DE  119F               	iorwf	(executingState@runCanAl+1)& (0+255),w,b
  2880  0002E0  A4D8               	btfss	status,2,c
  2881  0002E2  D018               	goto	l4094
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 221: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2885  0002E4  0E0D               	movlw	13
  2886  0002E6  6E35               	movwf	(??_executingState+1)& (0+255),c
  2887  0002E8  0EAF               	movlw	175
  2888  0002EA  6E34               	movwf	??_executingState& (0+255),c
  2889  0002EC  0EB6               	movlw	182
  2890  0002EE                     u3417:
  2891  0002EE  2EE8               	decfsz	wreg,f,c
  2892  0002F0  D7FE               	bra	u3417
  2893  0002F2  2E34               	decfsz	??_executingState& (0+255),f,c
  2894  0002F4  D7FC               	bra	u3417
  2895  0002F6  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2896  0002F8  D7FA               	bra	u3417
  2897  0002FA  D000               	nop2	
  2898                           
  2899                           ;main.c: 222: dispenseAlCan();
  2900  0002FC  EC6D  F00A         	call	_dispenseAlCan	;wreg free
  2901                           
  2902                           ;main.c: 223: runCanAl = 1;
  2903  000300  0E00               	movlw	0
  2904  000302  0100               	movlb	0	; () banked
  2905  000304  6F9F               	movwf	(executingState@runCanAl+1)& (0+255),b
  2906  000306  0E01               	movlw	1
  2907  000308  6F9E               	movwf	executingState@runCanAl& (0+255),b
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;main.c: 224: alLoaded = 1;
  2911  00030A  0E00               	movlw	0
  2912  00030C  0100               	movlb	0	; () banked
  2913  00030E  6FA9               	movwf	(executingState@alLoaded+1)& (0+255),b
  2914  000310  0E01               	movlw	1
  2915  000312  6FA8               	movwf	executingState@alLoaded& (0+255),b
  2916  000314                     l4094:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 225: }
  2920                           ;main.c: 226: }
  2921                           ;main.c: 228: if(snLoaded == 1 && alLoaded ==1){
  2922  000314  0100               	movlb	0	; () banked
  2923  000316  05A6               	decf	executingState@snLoaded& (0+255),w,b
  2924  000318  0100               	movlb	0	; () banked
  2925  00031A  11A7               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  2926  00031C  A4D8               	btfss	status,2,c
  2927  00031E  D009               	goto	l4100
  2928                           
  2929                           ; BSR set to: 0
  2930  000320  0100               	movlb	0	; () banked
  2931  000322  05A8               	decf	executingState@alLoaded& (0+255),w,b
  2932  000324  0100               	movlb	0	; () banked
  2933  000326  11A9               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  2934  000328  A4D8               	btfss	status,2,c
  2935  00032A  D003               	goto	l4100
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 229: emptyCount++;
  2939  00032C  0100               	movlb	0	; () banked
  2940  00032E  4BAA               	infsnz	executingState@emptyCount& (0+255),f,b
  2941  000330  2BAB               	incf	(executingState@emptyCount+1)& (0+255),f,b
  2942  000332                     l4100:
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;main.c: 230: }
  2946                           ;main.c: 233: if(snInSensor == 0){
  2947  000332  0100               	movlb	0	; () banked
  2948  000334  5198               	movf	executingState@snInSensor& (0+255),w,b
  2949  000336  0100               	movlb	0	; () banked
  2950  000338  1199               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  2951  00033A  A4D8               	btfss	status,2,c
  2952  00033C  D053               	goto	l4128
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 234: int hasLabel;
  2956                           ;main.c: 235: _delay((unsigned long)((300)*(10000000/4000.0)));
  2957  00033E  0E04               	movlw	4
  2958  000340  6E35               	movwf	(??_executingState+1)& (0+255),c
  2959  000342  0ECF               	movlw	207
  2960  000344  6E34               	movwf	??_executingState& (0+255),c
  2961  000346  0E02               	movlw	2
  2962  000348                     u3427:
  2963  000348  2EE8               	decfsz	wreg,f,c
  2964  00034A  D7FE               	bra	u3427
  2965  00034C  2E34               	decfsz	??_executingState& (0+255),f,c
  2966  00034E  D7FC               	bra	u3427
  2967  000350  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2968  000352  D7FA               	bra	u3427
  2969                           
  2970                           ;main.c: 236: if(readSnSensor() == 1){
  2971  000354  ECFA  F00A         	call	_readSnSensor	;wreg free
  2972  000358  0410               	decf	?_readSnSensor,w,c
  2973  00035A  1011               	iorwf	?_readSnSensor+1,w,c
  2974  00035C  A4D8               	btfss	status,2,c
  2975  00035E  D005               	goto	l4108
  2976                           
  2977                           ;main.c: 237: hasLabel = 0;
  2978  000360  0E00               	movlw	0
  2979  000362  0100               	movlb	0	; () banked
  2980  000364  6FA5               	movwf	(executingState@hasLabel+1)& (0+255),b
  2981  000366  0E00               	movlw	0
  2982  000368  D004               	goto	L3
  2983  00036A                     l4108:
  2984                           
  2985                           ;main.c: 239: hasLabel = 1;
  2986  00036A  0E00               	movlw	0
  2987  00036C  0100               	movlb	0	; () banked
  2988  00036E  6FA5               	movwf	(executingState@hasLabel+1)& (0+255),b
  2989  000370  0E01               	movlw	1
  2990  000372                     L3:
  2991  000372  6FA4               	movwf	executingState@hasLabel& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 240: }
  2995                           ;main.c: 241: if(hasLabel == 0){
  2996                           
  2997                           ; BSR set to: 0
  2998  000374  0100               	movlb	0	; () banked
  2999  000376  51A4               	movf	executingState@hasLabel& (0+255),w,b
  3000  000378  0100               	movlb	0	; () banked
  3001  00037A  11A5               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3002  00037C  A4D8               	btfss	status,2,c
  3003  00037E  D014               	goto	l4118
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;main.c: 242: servoRotate90n(2);
  3007  000380  0E00               	movlw	0
  3008  000382  6E11               	movwf	servoRotate90n@servo+1,c
  3009  000384  0E02               	movlw	2
  3010  000386  6E10               	movwf	servoRotate90n@servo,c
  3011  000388  ECF8  F006         	call	_servoRotate90n	;wreg free
  3012                           
  3013                           ;main.c: 243: servoRotate0(2);
  3014  00038C  0E00               	movlw	0
  3015  00038E  6E11               	movwf	servoRotate0@servo+1,c
  3016  000390  0E02               	movlw	2
  3017  000392  6E10               	movwf	servoRotate0@servo,c
  3018  000394  EC95  F006         	call	_servoRotate0	;wreg free
  3019                           
  3020                           ;main.c: 244: runCanSn = 0;
  3021  000398  0E00               	movlw	0
  3022  00039A  0100               	movlb	0	; () banked
  3023  00039C  6F9D               	movwf	(executingState@runCanSn+1)& (0+255),b
  3024  00039E  0E00               	movlw	0
  3025  0003A0  6F9C               	movwf	executingState@runCanSn& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 245: snNoLabel++;
  3029  0003A2  4A49               	infsnz	_snNoLabel,f,c
  3030  0003A4  2A4A               	incf	_snNoLabel+1,f,c
  3031                           
  3032                           ;main.c: 246: }else if(hasLabel == 1){
  3033  0003A6  D019               	goto	l4126
  3034  0003A8                     l4118:
  3035                           
  3036                           ; BSR set to: 0
  3037  0003A8  0100               	movlb	0	; () banked
  3038  0003AA  05A4               	decf	executingState@hasLabel& (0+255),w,b
  3039  0003AC  0100               	movlb	0	; () banked
  3040  0003AE  11A5               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3041  0003B0  A4D8               	btfss	status,2,c
  3042  0003B2  D013               	goto	l4126
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;main.c: 247: servoRotate90(2);
  3046  0003B4  0E00               	movlw	0
  3047  0003B6  6E11               	movwf	servoRotate90@servo+1,c
  3048  0003B8  0E02               	movlw	2
  3049  0003BA  6E10               	movwf	servoRotate90@servo,c
  3050  0003BC  EC32  F006         	call	_servoRotate90	;wreg free
  3051                           
  3052                           ;main.c: 248: servoRotate0(2);
  3053  0003C0  0E00               	movlw	0
  3054  0003C2  6E11               	movwf	servoRotate0@servo+1,c
  3055  0003C4  0E02               	movlw	2
  3056  0003C6  6E10               	movwf	servoRotate0@servo,c
  3057  0003C8  EC95  F006         	call	_servoRotate0	;wreg free
  3058                           
  3059                           ;main.c: 249: runCanSn = 0;
  3060  0003CC  0E00               	movlw	0
  3061  0003CE  0100               	movlb	0	; () banked
  3062  0003D0  6F9D               	movwf	(executingState@runCanSn+1)& (0+255),b
  3063  0003D2  0E00               	movlw	0
  3064  0003D4  6F9C               	movwf	executingState@runCanSn& (0+255),b
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;main.c: 250: snLabel++;
  3068  0003D6  4A47               	infsnz	_snLabel,f,c
  3069  0003D8  2A48               	incf	_snLabel+1,f,c
  3070  0003DA                     l4126:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 251: }
  3074                           ;main.c: 252: snInSensor = 1;
  3075  0003DA  0E00               	movlw	0
  3076  0003DC  0100               	movlb	0	; () banked
  3077  0003DE  6F99               	movwf	(executingState@snInSensor+1)& (0+255),b
  3078  0003E0  0E01               	movlw	1
  3079  0003E2  6F98               	movwf	executingState@snInSensor& (0+255),b
  3080  0003E4                     l4128:
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;main.c: 253: }
  3084                           ;main.c: 255: if(alInSensor == 0){
  3085  0003E4  0100               	movlb	0	; () banked
  3086  0003E6  519A               	movf	executingState@alInSensor& (0+255),w,b
  3087  0003E8  0100               	movlb	0	; () banked
  3088  0003EA  119B               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3089  0003EC  A4D8               	btfss	status,2,c
  3090  0003EE  D03E               	goto	l4148
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 256: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3094  0003F0  0E0D               	movlw	13
  3095  0003F2  6E35               	movwf	(??_executingState+1)& (0+255),c
  3096  0003F4  0EAF               	movlw	175
  3097  0003F6  6E34               	movwf	??_executingState& (0+255),c
  3098  0003F8  0EB6               	movlw	182
  3099  0003FA                     u3437:
  3100  0003FA  2EE8               	decfsz	wreg,f,c
  3101  0003FC  D7FE               	bra	u3437
  3102  0003FE  2E34               	decfsz	??_executingState& (0+255),f,c
  3103  000400  D7FC               	bra	u3437
  3104  000402  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3105  000404  D7FA               	bra	u3437
  3106  000406  D000               	nop2	
  3107                           
  3108                           ;main.c: 257: if(readAlSensor()){
  3109  000408  EC29  F00B         	call	_readAlSensor	;wreg free
  3110  00040C  5010               	movf	?_readAlSensor,w,c
  3111  00040E  1011               	iorwf	?_readAlSensor+1,w,c
  3112  000410  B4D8               	btfsc	status,2,c
  3113  000412  D014               	goto	l4140
  3114                           
  3115                           ;main.c: 259: _delay((unsigned long)((2000)*(10000000/4000.0)));
  3116  000414  0E1A               	movlw	26
  3117  000416  6E35               	movwf	(??_executingState+1)& (0+255),c
  3118  000418  0E5E               	movlw	94
  3119  00041A  6E34               	movwf	??_executingState& (0+255),c
  3120  00041C  0E6E               	movlw	110
  3121  00041E                     u3447:
  3122  00041E  2EE8               	decfsz	wreg,f,c
  3123  000420  D7FE               	bra	u3447
  3124  000422  2E34               	decfsz	??_executingState& (0+255),f,c
  3125  000424  D7FC               	bra	u3447
  3126  000426  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3127  000428  D7FA               	bra	u3447
  3128  00042A  D000               	nop2	
  3129                           
  3130                           ;main.c: 261: runCanAl = 0;
  3131  00042C  0E00               	movlw	0
  3132  00042E  0100               	movlb	0	; () banked
  3133  000430  6F9F               	movwf	(executingState@runCanAl+1)& (0+255),b
  3134  000432  0E00               	movlw	0
  3135  000434  6F9E               	movwf	executingState@runCanAl& (0+255),b
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 262: alTab++;
  3139  000436  4A43               	infsnz	_alTab,f,c
  3140  000438  2A44               	incf	_alTab+1,f,c
  3141                           
  3142                           ;main.c: 263: }else{
  3143  00043A  D013               	goto	l4146
  3144  00043C                     l4140:
  3145                           
  3146                           ;main.c: 265: _delay((unsigned long)((2000)*(10000000/4000.0)));
  3147  00043C  0E1A               	movlw	26
  3148  00043E  6E35               	movwf	(??_executingState+1)& (0+255),c
  3149  000440  0E5E               	movlw	94
  3150  000442  6E34               	movwf	??_executingState& (0+255),c
  3151  000444  0E6E               	movlw	110
  3152  000446                     u3457:
  3153  000446  2EE8               	decfsz	wreg,f,c
  3154  000448  D7FE               	bra	u3457
  3155  00044A  2E34               	decfsz	??_executingState& (0+255),f,c
  3156  00044C  D7FC               	bra	u3457
  3157  00044E  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3158  000450  D7FA               	bra	u3457
  3159  000452  D000               	nop2	
  3160                           
  3161                           ;main.c: 267: runCanAl = 0;
  3162  000454  0E00               	movlw	0
  3163  000456  0100               	movlb	0	; () banked
  3164  000458  6F9F               	movwf	(executingState@runCanAl+1)& (0+255),b
  3165  00045A  0E00               	movlw	0
  3166  00045C  6F9E               	movwf	executingState@runCanAl& (0+255),b
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 268: alNoTab++;
  3170  00045E  4A41               	infsnz	_alNoTab,f,c
  3171  000460  2A42               	incf	_alNoTab+1,f,c
  3172  000462                     l4146:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 269: }
  3176                           ;main.c: 270: alInSensor = 1;
  3177  000462  0E00               	movlw	0
  3178  000464  0100               	movlb	0	; () banked
  3179  000466  6F9B               	movwf	(executingState@alInSensor+1)& (0+255),b
  3180  000468  0E01               	movlw	1
  3181  00046A  6F9A               	movwf	executingState@alInSensor& (0+255),b
  3182  00046C                     l4148:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 271: }
  3186                           ;main.c: 273: timedif = get_timeDif(start_s);
  3187  00046C  C0A0  F018         	movff	executingState@start_s,get_timeDif@start
  3188  000470  C0A1  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  3189  000474  ECF4  F004         	call	_get_timeDif	;wreg free
  3190  000478  C018  F0A2         	movff	?_get_timeDif,executingState@timedif
  3191  00047C  C019  F0A3         	movff	?_get_timeDif+1,executingState@timedif+1
  3192                           
  3193                           ;main.c: 274: if(emptyCount > 20){
  3194  000480  0100               	movlb	0	; () banked
  3195  000482  BFAB               	btfsc	(executingState@emptyCount+1)& (0+255),7,b
  3196  000484  D00F               	goto	l4158
  3197  000486  0100               	movlb	0	; () banked
  3198  000488  51AB               	movf	(executingState@emptyCount+1)& (0+255),w,b
  3199  00048A  E105               	bnz	u3160
  3200  00048C  0E15               	movlw	21
  3201  00048E  0100               	movlb	0	; () banked
  3202  000490  5DAA               	subwf	executingState@emptyCount& (0+255),w,b
  3203  000492  A0D8               	btfss	status,0,c
  3204  000494  D007               	goto	l4158
  3205  000496                     u3160:
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;main.c: 275: state = FINISH;
  3209  000496  0E02               	movlw	2
  3210  000498  6E4B               	movwf	_state,c
  3211                           
  3212                           ;main.c: 276: runResult = 1;
  3213  00049A  0E00               	movlw	0
  3214  00049C  6E46               	movwf	_runResult+1,c
  3215  00049E  0E01               	movlw	1
  3216  0004A0  6E45               	movwf	_runResult,c
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 277: return;
  3220  0004A2  0012               	return	
  3221  0004A4                     l4158:
  3222                           
  3223                           ; BSR set to: 0
  3224  0004A4  0100               	movlb	0	; () banked
  3225  0004A6  BFA3               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3226  0004A8  D00E               	goto	l4164
  3227  0004AA  0100               	movlb	0	; () banked
  3228  0004AC  51A3               	movf	(executingState@timedif+1)& (0+255),w,b
  3229  0004AE  E105               	bnz	u3170
  3230  0004B0  0EB5               	movlw	181
  3231  0004B2  0100               	movlb	0	; () banked
  3232  0004B4  5DA2               	subwf	executingState@timedif& (0+255),w,b
  3233  0004B6  A0D8               	btfss	status,0,c
  3234  0004B8  D006               	goto	l4164
  3235  0004BA                     u3170:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;main.c: 279: state = FINISH;
  3239  0004BA  0E02               	movlw	2
  3240  0004BC  6E4B               	movwf	_state,c
  3241                           
  3242                           ;main.c: 280: runResult = 0;
  3243  0004BE  0E00               	movlw	0
  3244  0004C0  6E46               	movwf	_runResult+1,c
  3245  0004C2  0E00               	movlw	0
  3246  0004C4  D7ED               	goto	L4
  3247  0004C6                     l4164:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 282: }
  3251                           ;main.c: 283: _delay((unsigned long)((500)*(10000000/4000.0)));
  3252  0004C6  0E07               	movlw	7
  3253  0004C8  6E35               	movwf	(??_executingState+1)& (0+255),c
  3254  0004CA  0E58               	movlw	88
  3255  0004CC  6E34               	movwf	??_executingState& (0+255),c
  3256  0004CE  0E5A               	movlw	90
  3257  0004D0                     u3467:
  3258  0004D0  2EE8               	decfsz	wreg,f,c
  3259  0004D2  D7FE               	bra	u3467
  3260  0004D4  2E34               	decfsz	??_executingState& (0+255),f,c
  3261  0004D6  D7FC               	bra	u3467
  3262  0004D8  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3263  0004DA  D7FA               	bra	u3467
  3264  0004DC                     l4166:
  3265  0004DC  0100               	movlb	0	; () banked
  3266  0004DE  BFA3               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3267  0004E0  D008               	goto	l4168
  3268  0004E2  0100               	movlb	0	; () banked
  3269  0004E4  51A3               	movf	(executingState@timedif+1)& (0+255),w,b
  3270  0004E6  E107               	bnz	l260
  3271  0004E8  0EB4               	movlw	180
  3272  0004EA  0100               	movlb	0	; () banked
  3273  0004EC  5DA2               	subwf	executingState@timedif& (0+255),w,b
  3274  0004EE  B0D8               	btfsc	status,0,c
  3275  0004F0  D002               	goto	l260
  3276  0004F2                     l4168:
  3277                           
  3278                           ; BSR set to: 0
  3279  0004F2  B081               	btfsc	3969,0,c	;volatile
  3280  0004F4  D686               	goto	l4046
  3281  0004F6                     l260:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 284: }
  3285                           ;main.c: 286: LATCbits.LATC6 = 0;
  3286  0004F6  9C8B               	bcf	3979,6,c	;volatile
  3287                           
  3288                           ;main.c: 287: int res[4];
  3289                           ;main.c: 288: res[0] = alTab;
  3290  0004F8  C043  F090         	movff	_alTab,executingState@res
  3291  0004FC  C044  F091         	movff	_alTab+1,executingState@res+1
  3292                           
  3293                           ;main.c: 289: res[1] = alNoTab;
  3294  000500  C041  F092         	movff	_alNoTab,executingState@res+2
  3295  000504  C042  F093         	movff	_alNoTab+1,executingState@res+3
  3296                           
  3297                           ;main.c: 290: res[2] = snLabel;
  3298  000508  C047  F094         	movff	_snLabel,executingState@res+4
  3299  00050C  C048  F095         	movff	_snLabel+1,executingState@res+5
  3300                           
  3301                           ;main.c: 291: res[3] = snNoLabel;
  3302  000510  C049  F096         	movff	_snNoLabel,executingState@res+6
  3303  000514  C04A  F097         	movff	_snNoLabel+1,executingState@res+7
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 292: eeprom_LogResult(res);
  3307  000518  0E90               	movlw	low executingState@res
  3308  00051A  6E13               	movwf	eeprom_LogResult@data,c
  3309  00051C  0E00               	movlw	high executingState@res
  3310  00051E  6E14               	movwf	eeprom_LogResult@data+1,c
  3311  000520  EC86  F009         	call	_eeprom_LogResult	;wreg free
  3312                           
  3313                           ;main.c: 293: state = FINISH;
  3314  000524  0E02               	movlw	2
  3315  000526  6E4B               	movwf	_state,c
  3316  000528  0012               	return		;funcret
  3317  00052A                     __end_of_executingState:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           intcon	equ	0xFF2
  3323                           intcon3	equ	0xFF0
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           indf2	equ	0xFDF
  3327                           postinc2	equ	0xFDE
  3328                           postdec2	equ	0xFDD
  3329                           fsr2h	equ	0xFDA
  3330                           fsr2l	equ	0xFD9
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function _update_lcd *****************
  3334 ;; Defined at:
  3335 ;;		line 44 in file "main.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    4
  3356 ;; This function calls:
  3357 ;;		_lcdInst
  3358 ;;		_printf
  3359 ;; This function is called by:
  3360 ;;		_mainState
  3361 ;;		_executingState
  3362 ;;		_finishState
  3363 ;;		_logState
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text11
  3368  000B2C                     __ptext11:
  3369                           	opt stack 0
  3370  000B2C                     _update_lcd:
  3371                           	opt stack 25
  3372                           
  3373                           ;main.c: 46: lcdInst(0b10000000);;
  3374                           
  3375                           ;incstack = 0
  3376  000B2C  0E80               	movlw	128
  3377  000B2E  EC49  F00B         	call	_lcdInst
  3378                           
  3379                           ;main.c: 48: switch (state)
  3380  000B32  D083               	goto	l3826
  3381  000B34                     l3794:
  3382                           
  3383                           ;main.c: 51: printf("%02x/%01x/%02x ", time[6], time[5], time[4]);
  3384  000B34  0EBF               	movlw	low STR_1
  3385  000B36  6E1C               	movwf	printf@f,c
  3386  000B38  0EFF               	movlw	high STR_1
  3387  000B3A  6E1D               	movwf	printf@f+1,c
  3388  000B3C  C058  F01E         	movff	_time+12,?_printf+2
  3389  000B40  C059  F01F         	movff	_time+13,?_printf+3
  3390  000B44  C056  F020         	movff	_time+10,?_printf+4
  3391  000B48  C057  F021         	movff	_time+11,?_printf+5
  3392  000B4C  C054  F022         	movff	_time+8,?_printf+6
  3393  000B50  C055  F023         	movff	_time+9,?_printf+7
  3394  000B54  EC95  F002         	call	_printf	;wreg free
  3395                           
  3396                           ;main.c: 52: printf("%02x:%02x:%02x", time[2], time[1], time[0]);
  3397  000B58  0EDE               	movlw	low STR_2
  3398  000B5A  6E1C               	movwf	printf@f,c
  3399  000B5C  0EFF               	movlw	high STR_2
  3400  000B5E  6E1D               	movwf	printf@f+1,c
  3401  000B60  C050  F01E         	movff	_time+4,?_printf+2
  3402  000B64  C051  F01F         	movff	_time+5,?_printf+3
  3403  000B68  C04E  F020         	movff	_time+2,?_printf+4
  3404  000B6C  C04F  F021         	movff	_time+3,?_printf+5
  3405  000B70  C04C  F022         	movff	_time,?_printf+6
  3406  000B74  C04D  F023         	movff	_time+1,?_printf+7
  3407  000B78  EC95  F002         	call	_printf	;wreg free
  3408                           
  3409                           ;main.c: 54: lcdInst(0b11000000);;
  3410  000B7C  0EC0               	movlw	192
  3411  000B7E  EC49  F00B         	call	_lcdInst
  3412                           
  3413                           ;main.c: 55: printf("1:Start 2:Logs  ");
  3414  000B82  0EAE               	movlw	low STR_3
  3415  000B84  6E1C               	movwf	printf@f,c
  3416  000B86  0EFF               	movlw	high STR_3
  3417  000B88  6E1D               	movwf	printf@f+1,c
  3418  000B8A  EC95  F002         	call	_printf	;wreg free
  3419                           
  3420                           ;main.c: 56: break;
  3421  000B8E  D063               	goto	l3828
  3422  000B90                     l3800:
  3423                           
  3424                           ;main.c: 59: printf("%03d              ", logdata);
  3425  000B90  0E11               	movlw	low STR_4
  3426  000B92  6E1C               	movwf	printf@f,c
  3427  000B94  0EFF               	movlw	high STR_4
  3428  000B96  6E1D               	movwf	printf@f+1,c
  3429  000B98  C05A  F01E         	movff	_logdata,?_printf+2
  3430  000B9C  6A1F               	clrf	?_printf+3,c
  3431  000B9E  EC95  F002         	call	_printf	;wreg free
  3432                           
  3433                           ;main.c: 60: lcdInst(0b11000000);
  3434  000BA2  0EC0               	movlw	192
  3435  000BA4  EC49  F00B         	call	_lcdInst
  3436                           
  3437                           ;main.c: 61: printf("1:Prev 0:Exit   ");
  3438  000BA8  0E9D               	movlw	low STR_5
  3439  000BAA  6E1C               	movwf	printf@f,c
  3440  000BAC  0EFF               	movlw	high STR_5
  3441  000BAE  6E1D               	movwf	printf@f+1,c
  3442  000BB0  EC95  F002         	call	_printf	;wreg free
  3443                           
  3444                           ;main.c: 62: break;
  3445  000BB4  D050               	goto	l3828
  3446  000BB6                     l3806:
  3447                           
  3448                           ;main.c: 64: printf("Executing...    ");
  3449  000BB6  0E8C               	movlw	low STR_6
  3450  000BB8  6E1C               	movwf	printf@f,c
  3451  000BBA  0EFF               	movlw	high STR_6
  3452  000BBC  6E1D               	movwf	printf@f+1,c
  3453  000BBE  EC95  F002         	call	_printf	;wreg free
  3454                           
  3455                           ;main.c: 65: lcdInst(0b11000000);;
  3456  000BC2  0EC0               	movlw	192
  3457  000BC4  EC49  F00B         	call	_lcdInst
  3458                           
  3459                           ;main.c: 66: printf("aN%d/a%d/sN%d/S%d",alNoTab, alTab, snNoLabel, snLabel);
  3460  000BC8  0E24               	movlw	low STR_7
  3461  000BCA  6E1C               	movwf	printf@f,c
  3462  000BCC  0EFF               	movlw	high STR_7
  3463  000BCE  6E1D               	movwf	printf@f+1,c
  3464  000BD0  C041  F01E         	movff	_alNoTab,?_printf+2
  3465  000BD4  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3466  000BD8  C043  F020         	movff	_alTab,?_printf+4
  3467  000BDC  C044  F021         	movff	_alTab+1,?_printf+5
  3468  000BE0  C049  F022         	movff	_snNoLabel,?_printf+6
  3469  000BE4  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3470  000BE8  C047  F024         	movff	_snLabel,?_printf+8
  3471  000BEC  C048  F025         	movff	_snLabel+1,?_printf+9
  3472  000BF0  EC95  F002         	call	_printf	;wreg free
  3473                           
  3474                           ;main.c: 68: break;
  3475  000BF4  D030               	goto	l3828
  3476  000BF6                     l3812:
  3477                           
  3478                           ;main.c: 71: if(runResult == 1){
  3479  000BF6  0445               	decf	_runResult,w,c
  3480  000BF8  1046               	iorwf	_runResult+1,w,c
  3481  000BFA  A4D8               	btfss	status,2,c
  3482  000BFC  D007               	goto	l3816
  3483                           
  3484                           ;main.c: 72: printf("Finished        ");
  3485  000BFE  0E6A               	movlw	low STR_8
  3486  000C00  6E1C               	movwf	printf@f,c
  3487  000C02  0EFF               	movlw	high STR_8
  3488  000C04  6E1D               	movwf	printf@f+1,c
  3489  000C06  EC95  F002         	call	_printf	;wreg free
  3490                           
  3491                           ;main.c: 73: }
  3492  000C0A  D006               	goto	l3818
  3493  000C0C                     l3816:
  3494                           
  3495                           ;main.c: 74: else
  3496                           ;main.c: 75: {
  3497                           ;main.c: 76: printf("Terminated      ");
  3498  000C0C  0E7B               	movlw	low STR_9
  3499  000C0E  6E1C               	movwf	printf@f,c
  3500  000C10  0EFF               	movlw	high STR_9
  3501  000C12  6E1D               	movwf	printf@f+1,c
  3502  000C14  EC95  F002         	call	_printf	;wreg free
  3503  000C18                     l3818:
  3504                           
  3505                           ;main.c: 77: }
  3506                           ;main.c: 78: lcdInst(0b11000000);;
  3507  000C18  0EC0               	movlw	192
  3508  000C1A  EC49  F00B         	call	_lcdInst
  3509                           
  3510                           ;main.c: 79: printf("0:Menu          ");
  3511  000C1E  0E59               	movlw	low STR_10
  3512  000C20  6E1C               	movwf	printf@f,c
  3513  000C22  0EFF               	movlw	high STR_10
  3514  000C24  6E1D               	movwf	printf@f+1,c
  3515  000C26  EC95  F002         	call	_printf	;wreg free
  3516                           
  3517                           ;main.c: 80: break;
  3518  000C2A  D015               	goto	l3828
  3519  000C2C                     l3822:
  3520                           
  3521                           ;main.c: 82: printf("error");
  3522  000C2C  0EF9               	movlw	low STR_11
  3523  000C2E  6E1C               	movwf	printf@f,c
  3524  000C30  0EFF               	movlw	high STR_11
  3525  000C32  6E1D               	movwf	printf@f+1,c
  3526  000C34  EC95  F002         	call	_printf	;wreg free
  3527                           
  3528                           ;main.c: 84: }
  3529                           
  3530                           ;main.c: 83: break;
  3531  000C38  D00E               	goto	l3828
  3532  000C3A                     l3826:
  3533  000C3A  504B               	movf	_state,w,c
  3534                           
  3535                           ; Switch size 1, requested type "space"
  3536                           ; Number of cases is 4, Range of values is 0 to 3
  3537                           ; switch strategies available:
  3538                           ; Name         Instructions Cycles
  3539                           ; simple_byte           13     7 (average)
  3540                           ;	Chosen strategy is simple_byte
  3541  000C3C  0A00               	xorlw	0	; case 0
  3542  000C3E  B4D8               	btfsc	status,2,c
  3543  000C40  D779               	goto	l3794
  3544  000C42  0A01               	xorlw	1	; case 1
  3545  000C44  B4D8               	btfsc	status,2,c
  3546  000C46  D7B7               	goto	l3806
  3547  000C48  0A03               	xorlw	3	; case 2
  3548  000C4A  B4D8               	btfsc	status,2,c
  3549  000C4C  D7D4               	goto	l3812
  3550  000C4E  0A01               	xorlw	1	; case 3
  3551  000C50  B4D8               	btfsc	status,2,c
  3552  000C52  D79E               	goto	l3800
  3553  000C54  D7EB               	goto	l3822
  3554  000C56                     l3828:
  3555                           
  3556                           ;main.c: 86: lcdInst(0b10000000);;
  3557  000C56  0E80               	movlw	128
  3558  000C58  EC49  F00B         	call	_lcdInst
  3559                           
  3560                           ;main.c: 87: lcdInst(0b11000000);;
  3561  000C5C  0EC0               	movlw	192
  3562  000C5E  EC49  F00B         	call	_lcdInst
  3563  000C62  0012               	return		;funcret
  3564  000C64                     __end_of_update_lcd:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           prodh	equ	0xFF4
  3568                           prodl	equ	0xFF3
  3569                           intcon	equ	0xFF2
  3570                           intcon3	equ	0xFF0
  3571                           postinc0	equ	0xFEE
  3572                           wreg	equ	0xFE8
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           fsr2h	equ	0xFDA
  3577                           fsr2l	equ	0xFD9
  3578                           status	equ	0xFD8
  3579                           
  3580 ;; *************** function _readSnTop *****************
  3581 ;; Defined at:
  3582 ;;		line 25 in file "sensors.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;		None
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  2   15[COMRAM] int 
  3589 ;; Registers used:
  3590 ;;		wreg, status,2
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;Total ram usage:        2 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    1
  3603 ;; This function calls:
  3604 ;;		Nothing
  3605 ;; This function is called by:
  3606 ;;		_executingState
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text12
  3611  0015DC                     __ptext12:
  3612                           	opt stack 0
  3613  0015DC                     _readSnTop:
  3614                           	opt stack 28
  3615                           
  3616                           ;sensors.c: 26: if(PORTAbits.RA2 == 1){
  3617                           
  3618                           ;incstack = 0
  3619  0015DC  A480               	btfss	3968,2,c	;volatile
  3620  0015DE  D005               	goto	l3860
  3621                           
  3622                           ;sensors.c: 27: return 1;
  3623  0015E0  0E00               	movlw	0
  3624  0015E2  6E11               	movwf	?_readSnTop+1,c
  3625  0015E4  0E01               	movlw	1
  3626  0015E6  6E10               	movwf	?_readSnTop,c
  3627  0015E8  0012               	return	
  3628  0015EA                     l3860:
  3629                           
  3630                           ;sensors.c: 28: }
  3631                           ;sensors.c: 29: return 0;
  3632  0015EA  0E00               	movlw	0
  3633  0015EC  6E11               	movwf	?_readSnTop+1,c
  3634  0015EE  0E00               	movlw	0
  3635  0015F0  6E10               	movwf	?_readSnTop,c
  3636  0015F2  0012               	return	
  3637  0015F4                     __end_of_readSnTop:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           intcon	equ	0xFF2
  3643                           intcon3	equ	0xFF0
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _readSnSensor *****************
  3654 ;; Defined at:
  3655 ;;		line 39 in file "sensors.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  2   15[COMRAM] int 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3669 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;Total ram usage:        2 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_executingState
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text13
  3684  0015F4                     __ptext13:
  3685                           	opt stack 0
  3686  0015F4                     _readSnSensor:
  3687                           	opt stack 28
  3688                           
  3689                           ;sensors.c: 40: if(PORTCbits.RC0 == 1){
  3690                           
  3691                           ;incstack = 0
  3692  0015F4  A082               	btfss	3970,0,c	;volatile
  3693  0015F6  D005               	goto	l3902
  3694                           
  3695                           ;sensors.c: 41: return 1;
  3696  0015F8  0E00               	movlw	0
  3697  0015FA  6E11               	movwf	?_readSnSensor+1,c
  3698  0015FC  0E01               	movlw	1
  3699  0015FE  6E10               	movwf	?_readSnSensor,c
  3700  001600  0012               	return	
  3701  001602                     l3902:
  3702                           
  3703                           ;sensors.c: 42: }
  3704                           ;sensors.c: 43: return 0;
  3705  001602  0E00               	movlw	0
  3706  001604  6E11               	movwf	?_readSnSensor+1,c
  3707  001606  0E00               	movlw	0
  3708  001608  6E10               	movwf	?_readSnSensor,c
  3709  00160A  0012               	return	
  3710  00160C                     __end_of_readSnSensor:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           intcon3	equ	0xFF0
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           indf2	equ	0xFDF
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _readSnBot *****************
  3727 ;; Defined at:
  3728 ;;		line 11 in file "sensors.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  2   15[COMRAM] int 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;Total ram usage:        2 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    1
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_executingState
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text14
  3757  00160C                     __ptext14:
  3758                           	opt stack 0
  3759  00160C                     _readSnBot:
  3760                           	opt stack 28
  3761                           
  3762                           ;sensors.c: 12: if(PORTAbits.RA0 == 1){
  3763                           
  3764                           ;incstack = 0
  3765  00160C  A080               	btfss	3968,0,c	;volatile
  3766  00160E  D005               	goto	l3870
  3767                           
  3768                           ;sensors.c: 13: return 1;
  3769  001610  0E00               	movlw	0
  3770  001612  6E11               	movwf	?_readSnBot+1,c
  3771  001614  0E01               	movlw	1
  3772  001616  6E10               	movwf	?_readSnBot,c
  3773  001618  0012               	return	
  3774  00161A                     l3870:
  3775                           
  3776                           ;sensors.c: 14: }
  3777                           ;sensors.c: 15: return 0;
  3778  00161A  0E00               	movlw	0
  3779  00161C  6E11               	movwf	?_readSnBot+1,c
  3780  00161E  0E00               	movlw	0
  3781  001620  6E10               	movwf	?_readSnBot,c
  3782  001622  0012               	return	
  3783  001624                     __end_of_readSnBot:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           intcon3	equ	0xFF0
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           indf2	equ	0xFDF
  3793                           postinc2	equ	0xFDE
  3794                           postdec2	equ	0xFDD
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8
  3798                           
  3799 ;; *************** function _readAlSensor *****************
  3800 ;; Defined at:
  3801 ;;		line 46 in file "sensors.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  2   15[COMRAM] int 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;Total ram usage:        3 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; Hardware stack levels required when called:    1
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_executingState
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text15
  3830  001652                     __ptext15:
  3831                           	opt stack 0
  3832  001652                     _readAlSensor:
  3833                           	opt stack 28
  3834                           
  3835                           ;sensors.c: 47: return PORTCbits.RC1;
  3836                           
  3837                           ;incstack = 0
  3838  001652  A282               	btfss	3970,1,c	;volatile
  3839  001654  D003               	goto	u2890
  3840  001656  6A12               	clrf	??_readAlSensor& (0+255),c
  3841  001658  2A12               	incf	??_readAlSensor& (0+255),f,c
  3842  00165A  D001               	goto	u2898
  3843  00165C                     u2890:
  3844  00165C  6A12               	clrf	??_readAlSensor& (0+255),c
  3845  00165E                     u2898:
  3846  00165E  5012               	movf	??_readAlSensor,w,c
  3847  001660  6E10               	movwf	?_readAlSensor,c
  3848  001662  6A11               	clrf	?_readAlSensor+1,c
  3849  001664  0012               	return	
  3850  001666                     __end_of_readAlSensor:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           intcon3	equ	0xFF0
  3857                           postinc0	equ	0xFEE
  3858                           wreg	equ	0xFE8
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _readAlBot *****************
  3867 ;; Defined at:
  3868 ;;		line 18 in file "sensors.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  2   15[COMRAM] int 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;Total ram usage:        2 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    1
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_executingState
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text16
  3897  001624                     __ptext16:
  3898                           	opt stack 0
  3899  001624                     _readAlBot:
  3900                           	opt stack 28
  3901                           
  3902                           ;sensors.c: 19: if(PORTAbits.RA1 == 1){
  3903                           
  3904                           ;incstack = 0
  3905  001624  A280               	btfss	3968,1,c	;volatile
  3906  001626  D005               	goto	l3880
  3907                           
  3908                           ;sensors.c: 20: return 1;
  3909  001628  0E00               	movlw	0
  3910  00162A  6E11               	movwf	?_readAlBot+1,c
  3911  00162C  0E01               	movlw	1
  3912  00162E  6E10               	movwf	?_readAlBot,c
  3913  001630  0012               	return	
  3914  001632                     l3880:
  3915                           
  3916                           ;sensors.c: 21: }
  3917                           ;sensors.c: 22: return 0;
  3918  001632  0E00               	movlw	0
  3919  001634  6E11               	movwf	?_readAlBot+1,c
  3920  001636  0E00               	movlw	0
  3921  001638  6E10               	movwf	?_readAlBot,c
  3922  00163A  0012               	return	
  3923  00163C                     __end_of_readAlBot:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           prodh	equ	0xFF4
  3927                           prodl	equ	0xFF3
  3928                           intcon	equ	0xFF2
  3929                           intcon3	equ	0xFF0
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _get_timeDif *****************
  3940 ;; Defined at:
  3941 ;;		line 108 in file "main.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  start           2   23[COMRAM] int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  start_s         2   40[COMRAM] int 
  3946 ;;  s_one           2   38[COMRAM] int 
  3947 ;;  s_ten           2   36[COMRAM] int 
  3948 ;;  m_one           2   34[COMRAM] int 
  3949 ;;  m_ten           2   32[COMRAM] int 
  3950 ;;  h_one           2   30[COMRAM] int 
  3951 ;;  h_ten           2   28[COMRAM] int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2   23[COMRAM] int 
  3954 ;; Registers used:
  3955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;Total ram usage:       23 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    4
  3968 ;; This function calls:
  3969 ;;		___wmul
  3970 ;;		_get_time
  3971 ;; This function is called by:
  3972 ;;		_executingState
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text17
  3977  0009E8                     __ptext17:
  3978                           	opt stack 0
  3979  0009E8                     _get_timeDif:
  3980                           	opt stack 25
  3981                           
  3982                           ;main.c: 109: get_time(time);
  3983                           
  3984                           ;incstack = 0
  3985  0009E8  0E4C               	movlw	low _time
  3986  0009EA  6E13               	movwf	get_time@time,c
  3987  0009EC  0E00               	movlw	high _time
  3988  0009EE  6E14               	movwf	get_time@time+1,c
  3989  0009F0  EC02  F008         	call	_get_time	;wreg free
  3990                           
  3991                           ;main.c: 110: int h_ten = (time[2] & 0b11110000)>>4;
  3992  0009F4  EE20  F050         	lfsr	2,_time+4
  3993  0009F8  CFDE F01A          	movff	postinc2,??_get_timeDif
  3994  0009FC  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  3995  000A00  0E04               	movlw	4
  3996  000A02  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  3997  000A04                     u2805:
  3998  000A04  341B               	rlcf	??_get_timeDif+1,w,c
  3999  000A06  321B               	rrcf	??_get_timeDif+1,f,c
  4000  000A08  321A               	rrcf	??_get_timeDif,f,c
  4001  000A0A  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4002  000A0C  D7FB               	goto	u2805
  4003  000A0E  0E0F               	movlw	15
  4004  000A10  141A               	andwf	??_get_timeDif,w,c
  4005  000A12  6E1D               	movwf	get_timeDif@h_ten,c
  4006  000A14  6A1E               	clrf	get_timeDif@h_ten+1,c
  4007                           
  4008                           ;main.c: 111: int h_one = (time[2] & 0b00001111);
  4009  000A16  0E0F               	movlw	15
  4010  000A18  1450               	andwf	_time+4,w,c
  4011  000A1A  6E1F               	movwf	get_timeDif@h_one,c
  4012  000A1C  6A20               	clrf	get_timeDif@h_one+1,c
  4013                           
  4014                           ;main.c: 112: int m_ten = (time[1] & 0b11110000)>>4;
  4015  000A1E  EE20  F04E         	lfsr	2,_time+2
  4016  000A22  CFDE F01A          	movff	postinc2,??_get_timeDif
  4017  000A26  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4018  000A2A  0E04               	movlw	4
  4019  000A2C  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4020  000A2E                     u2815:
  4021  000A2E  341B               	rlcf	??_get_timeDif+1,w,c
  4022  000A30  321B               	rrcf	??_get_timeDif+1,f,c
  4023  000A32  321A               	rrcf	??_get_timeDif,f,c
  4024  000A34  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4025  000A36  D7FB               	goto	u2815
  4026  000A38  0E0F               	movlw	15
  4027  000A3A  141A               	andwf	??_get_timeDif,w,c
  4028  000A3C  6E21               	movwf	get_timeDif@m_ten,c
  4029  000A3E  6A22               	clrf	get_timeDif@m_ten+1,c
  4030                           
  4031                           ;main.c: 113: int m_one = (time[1] & 0b00001111);
  4032  000A40  0E0F               	movlw	15
  4033  000A42  144E               	andwf	_time+2,w,c
  4034  000A44  6E23               	movwf	get_timeDif@m_one,c
  4035  000A46  6A24               	clrf	get_timeDif@m_one+1,c
  4036                           
  4037                           ;main.c: 114: int s_ten = (time[0] & 0b11110000)>>4;
  4038  000A48  C04C  F01A         	movff	_time,??_get_timeDif
  4039  000A4C  C04D  F01B         	movff	_time+1,??_get_timeDif+1
  4040  000A50  0E04               	movlw	4
  4041  000A52  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4042  000A54                     u2825:
  4043  000A54  341B               	rlcf	??_get_timeDif+1,w,c
  4044  000A56  321B               	rrcf	??_get_timeDif+1,f,c
  4045  000A58  321A               	rrcf	??_get_timeDif,f,c
  4046  000A5A  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4047  000A5C  D7FB               	goto	u2825
  4048  000A5E  0E0F               	movlw	15
  4049  000A60  141A               	andwf	??_get_timeDif,w,c
  4050  000A62  6E25               	movwf	get_timeDif@s_ten,c
  4051  000A64  6A26               	clrf	get_timeDif@s_ten+1,c
  4052                           
  4053                           ;main.c: 115: int s_one = (time[0] & 0b00001111);
  4054  000A66  0E0F               	movlw	15
  4055  000A68  144C               	andwf	_time,w,c
  4056  000A6A  6E27               	movwf	get_timeDif@s_one,c
  4057  000A6C  6A28               	clrf	get_timeDif@s_one+1,c
  4058                           
  4059                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4060  000A6E  C021  F010         	movff	get_timeDif@m_ten,___wmul@multiplier
  4061  000A72  C022  F011         	movff	get_timeDif@m_ten+1,___wmul@multiplier+1
  4062  000A76  0E00               	movlw	0
  4063  000A78  6E13               	movwf	___wmul@multiplicand+1,c
  4064  000A7A  0E0A               	movlw	10
  4065  000A7C  6E12               	movwf	___wmul@multiplicand,c
  4066  000A7E  ECBE  F00A         	call	___wmul	;wreg free
  4067  000A82  5023               	movf	get_timeDif@m_one,w,c
  4068  000A84  2410               	addwf	?___wmul,w,c
  4069  000A86  6E2B               	movwf	_get_timeDif$1723,c
  4070  000A88  5024               	movf	get_timeDif@m_one+1,w,c
  4071  000A8A  2011               	addwfc	?___wmul+1,w,c
  4072  000A8C  6E2C               	movwf	_get_timeDif$1723+1,c
  4073                           
  4074                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4075  000A8E  C01D  F010         	movff	get_timeDif@h_ten,___wmul@multiplier
  4076  000A92  C01E  F011         	movff	get_timeDif@h_ten+1,___wmul@multiplier+1
  4077  000A96  0E00               	movlw	0
  4078  000A98  6E13               	movwf	___wmul@multiplicand+1,c
  4079  000A9A  0E0A               	movlw	10
  4080  000A9C  6E12               	movwf	___wmul@multiplicand,c
  4081  000A9E  ECBE  F00A         	call	___wmul	;wreg free
  4082  000AA2  501F               	movf	get_timeDif@h_one,w,c
  4083  000AA4  2410               	addwf	?___wmul,w,c
  4084  000AA6  6E2D               	movwf	_get_timeDif$1724,c
  4085  000AA8  5020               	movf	get_timeDif@h_one+1,w,c
  4086  000AAA  2011               	addwfc	?___wmul+1,w,c
  4087  000AAC  6E2E               	movwf	_get_timeDif$1724+1,c
  4088                           
  4089                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4090  000AAE  C025  F010         	movff	get_timeDif@s_ten,___wmul@multiplier
  4091  000AB2  C026  F011         	movff	get_timeDif@s_ten+1,___wmul@multiplier+1
  4092  000AB6  0E00               	movlw	0
  4093  000AB8  6E13               	movwf	___wmul@multiplicand+1,c
  4094  000ABA  0E0A               	movlw	10
  4095  000ABC  6E12               	movwf	___wmul@multiplicand,c
  4096  000ABE  ECBE  F00A         	call	___wmul	;wreg free
  4097  000AC2  C010  F01A         	movff	?___wmul,??_get_timeDif
  4098  000AC6  C011  F01B         	movff	?___wmul+1,??_get_timeDif+1
  4099  000ACA  C02D  F010         	movff	_get_timeDif$1724,___wmul@multiplier
  4100  000ACE  C02E  F011         	movff	_get_timeDif$1724+1,___wmul@multiplier+1
  4101  000AD2  0E0E               	movlw	14
  4102  000AD4  6E13               	movwf	___wmul@multiplicand+1,c
  4103  000AD6  0E10               	movlw	16
  4104  000AD8  6E12               	movwf	___wmul@multiplicand,c
  4105  000ADA  ECBE  F00A         	call	___wmul	;wreg free
  4106  000ADE  5010               	movf	?___wmul,w,c
  4107  000AE0  261A               	addwf	??_get_timeDif,f,c
  4108  000AE2  5011               	movf	?___wmul+1,w,c
  4109  000AE4  221B               	addwfc	??_get_timeDif+1,f,c
  4110  000AE6  C02B  F010         	movff	_get_timeDif$1723,___wmul@multiplier
  4111  000AEA  C02C  F011         	movff	_get_timeDif$1723+1,___wmul@multiplier+1
  4112  000AEE  0E00               	movlw	0
  4113  000AF0  6E13               	movwf	___wmul@multiplicand+1,c
  4114  000AF2  0E3C               	movlw	60
  4115  000AF4  6E12               	movwf	___wmul@multiplicand,c
  4116  000AF6  ECBE  F00A         	call	___wmul	;wreg free
  4117  000AFA  5010               	movf	?___wmul,w,c
  4118  000AFC  261A               	addwf	??_get_timeDif,f,c
  4119  000AFE  5011               	movf	?___wmul+1,w,c
  4120  000B00  221B               	addwfc	??_get_timeDif+1,f,c
  4121  000B02  5027               	movf	get_timeDif@s_one,w,c
  4122  000B04  241A               	addwf	??_get_timeDif,w,c
  4123  000B06  6E29               	movwf	get_timeDif@start_s,c
  4124  000B08  5028               	movf	get_timeDif@s_one+1,w,c
  4125  000B0A  201B               	addwfc	??_get_timeDif+1,w,c
  4126  000B0C  6E2A               	movwf	get_timeDif@start_s+1,c
  4127                           
  4128                           ;main.c: 118: return start_s - start;
  4129  000B0E  C018  F01A         	movff	get_timeDif@start,??_get_timeDif
  4130  000B12  C019  F01B         	movff	get_timeDif@start+1,??_get_timeDif+1
  4131  000B16  1E1A               	comf	??_get_timeDif,f,c
  4132  000B18  1E1B               	comf	??_get_timeDif+1,f,c
  4133  000B1A  4A1A               	infsnz	??_get_timeDif,f,c
  4134  000B1C  2A1B               	incf	??_get_timeDif+1,f,c
  4135  000B1E  5029               	movf	get_timeDif@start_s,w,c
  4136  000B20  241A               	addwf	??_get_timeDif,w,c
  4137  000B22  6E18               	movwf	?_get_timeDif,c
  4138  000B24  502A               	movf	get_timeDif@start_s+1,w,c
  4139  000B26  201B               	addwfc	??_get_timeDif+1,w,c
  4140  000B28  6E19               	movwf	?_get_timeDif+1,c
  4141  000B2A  0012               	return	
  4142  000B2C                     __end_of_get_timeDif:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           intcon3	equ	0xFF0
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           indf2	equ	0xFDF
  4152                           postinc2	equ	0xFDE
  4153                           postdec2	equ	0xFDD
  4154                           fsr2h	equ	0xFDA
  4155                           fsr2l	equ	0xFD9
  4156                           status	equ	0xFD8
  4157                           
  4158 ;; *************** function _get_time *****************
  4159 ;; Defined at:
  4160 ;;		line 23 in file "RTC.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  time            2   18[COMRAM] PTR int 
  4163 ;;		 -> starttime(14), time(14), 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  i               1   22[COMRAM] unsigned char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4175 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;Total ram usage:        5 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    3
  4182 ;; This function calls:
  4183 ;;		_I2C_Master_Read
  4184 ;;		_I2C_Master_Start
  4185 ;;		_I2C_Master_Stop
  4186 ;;		_I2C_Master_Write
  4187 ;; This function is called by:
  4188 ;;		_get_timeDif
  4189 ;;		_mainState
  4190 ;;		_executingState
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text18
  4195  001004                     __ptext18:
  4196                           	opt stack 0
  4197  001004                     _get_time:
  4198                           	opt stack 26
  4199                           
  4200                           ;RTC.c: 25: I2C_Master_Start();
  4201                           
  4202                           ;incstack = 0
  4203  001004  EC58  F00B         	call	_I2C_Master_Start	;wreg free
  4204                           
  4205                           ;RTC.c: 26: I2C_Master_Write(0b11010000);
  4206  001008  0E00               	movlw	0
  4207  00100A  6E12               	movwf	I2C_Master_Write@d+1,c
  4208  00100C  0ED0               	movlw	208
  4209  00100E  6E11               	movwf	I2C_Master_Write@d,c
  4210  001010  EC4F  F00B         	call	_I2C_Master_Write	;wreg free
  4211                           
  4212                           ;RTC.c: 27: I2C_Master_Write(0x00);
  4213  001014  0E00               	movlw	0
  4214  001016  6E12               	movwf	I2C_Master_Write@d+1,c
  4215  001018  0E00               	movlw	0
  4216  00101A  6E11               	movwf	I2C_Master_Write@d,c
  4217  00101C  EC4F  F00B         	call	_I2C_Master_Write	;wreg free
  4218                           
  4219                           ;RTC.c: 28: I2C_Master_Stop();
  4220  001020  EC54  F00B         	call	_I2C_Master_Stop	;wreg free
  4221                           
  4222                           ;RTC.c: 31: I2C_Master_Start();
  4223  001024  EC58  F00B         	call	_I2C_Master_Start	;wreg free
  4224                           
  4225                           ;RTC.c: 32: I2C_Master_Write(0b11010001);
  4226  001028  0E00               	movlw	0
  4227  00102A  6E12               	movwf	I2C_Master_Write@d+1,c
  4228  00102C  0ED1               	movlw	209
  4229  00102E  6E11               	movwf	I2C_Master_Write@d,c
  4230  001030  EC4F  F00B         	call	_I2C_Master_Write	;wreg free
  4231                           
  4232                           ;RTC.c: 33: for (unsigned char i = 0; i < 0x06; i++) {
  4233  001034  0E00               	movlw	0
  4234  001036  6E17               	movwf	get_time@i,c
  4235  001038                     l3690:
  4236  001038  0E05               	movlw	5
  4237  00103A  6417               	cpfsgt	get_time@i,c
  4238  00103C  D001               	goto	l3694
  4239  00103E  D013               	goto	l3700
  4240  001040                     l3694:
  4241                           
  4242                           ;RTC.c: 34: time[i] = I2C_Master_Read(1);
  4243  001040  0E01               	movlw	1
  4244  001042  EC98  F00A         	call	_I2C_Master_Read
  4245  001046  6E15               	movwf	??_get_time& (0+255),c
  4246  001048  6A16               	clrf	(??_get_time+1)& (0+255),c
  4247  00104A  5017               	movf	get_time@i,w,c
  4248  00104C  0D02               	mullw	2
  4249  00104E  50F3               	movf	prodl,w,c
  4250  001050  2413               	addwf	get_time@time,w,c
  4251  001052  6ED9               	movwf	fsr2l,c
  4252  001054  50F4               	movf	prodh,w,c
  4253  001056  2014               	addwfc	get_time@time+1,w,c
  4254  001058  6EDA               	movwf	fsr2h,c
  4255  00105A  C015  FFDE         	movff	??_get_time,postinc2
  4256  00105E  C016  FFDD         	movff	??_get_time+1,postdec2
  4257  001062  2A17               	incf	get_time@i,f,c
  4258  001064  D7E9               	goto	l3690
  4259  001066                     l3700:
  4260                           
  4261                           ;RTC.c: 35: }
  4262                           ;RTC.c: 36: time[6] = I2C_Master_Read(0);
  4263  001066  0E00               	movlw	0
  4264  001068  EC98  F00A         	call	_I2C_Master_Read
  4265  00106C  6E15               	movwf	??_get_time& (0+255),c
  4266  00106E  6A16               	clrf	(??_get_time+1)& (0+255),c
  4267  001070  EE20 F00C          	lfsr	2,12
  4268  001074  5013               	movf	get_time@time,w,c
  4269  001076  26D9               	addwf	fsr2l,f,c
  4270  001078  5014               	movf	get_time@time+1,w,c
  4271  00107A  22DA               	addwfc	fsr2h,f,c
  4272  00107C  C015  FFDE         	movff	??_get_time,postinc2
  4273  001080  C016  FFDD         	movff	??_get_time+1,postdec2
  4274                           
  4275                           ;RTC.c: 37: I2C_Master_Stop();
  4276  001084  EC54  F00B         	call	_I2C_Master_Stop	;wreg free
  4277  001088  0012               	return		;funcret
  4278  00108A                     __end_of_get_time:
  4279                           	opt stack 0
  4280                           tblptru	equ	0xFF8
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           intcon3	equ	0xFF0
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           indf2	equ	0xFDF
  4288                           postinc2	equ	0xFDE
  4289                           postdec2	equ	0xFDD
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _I2C_Master_Write *****************
  4295 ;; Defined at:
  4296 ;;		line 47 in file "I2C.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  d               2   16[COMRAM] unsigned int 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        2 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    2
  4317 ;; This function calls:
  4318 ;;		_I2C_Master_Wait
  4319 ;; This function is called by:
  4320 ;;		_fixLCD
  4321 ;;		_get_time
  4322 ;;		_set_time
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text19
  4327  00169E                     __ptext19:
  4328                           	opt stack 0
  4329  00169E                     _I2C_Master_Write:
  4330                           	opt stack 26
  4331                           
  4332                           ;I2C.c: 49: I2C_Master_Wait();
  4333                           
  4334                           ;incstack = 0
  4335  00169E  EC33  F00B         	call	_I2C_Master_Wait	;wreg free
  4336                           
  4337                           ;I2C.c: 50: SSPBUF = d;
  4338  0016A2  C011  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4339  0016A6  0012               	return		;funcret
  4340  0016A8                     __end_of_I2C_Master_Write:
  4341                           	opt stack 0
  4342                           tblptru	equ	0xFF8
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           intcon	equ	0xFF2
  4346                           intcon3	equ	0xFF0
  4347                           postinc0	equ	0xFEE
  4348                           wreg	equ	0xFE8
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _I2C_Master_Stop *****************
  4357 ;; Defined at:
  4358 ;;		line 41 in file "I2C.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    2
  4379 ;; This function calls:
  4380 ;;		_I2C_Master_Wait
  4381 ;; This function is called by:
  4382 ;;		_fixLCD
  4383 ;;		_get_time
  4384 ;;		_set_time
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text20
  4389  0016A8                     __ptext20:
  4390                           	opt stack 0
  4391  0016A8                     _I2C_Master_Stop:
  4392                           	opt stack 26
  4393                           
  4394                           ;I2C.c: 43: I2C_Master_Wait();
  4395                           
  4396                           ;incstack = 0
  4397  0016A8  EC33  F00B         	call	_I2C_Master_Wait	;wreg free
  4398                           
  4399                           ;I2C.c: 44: PEN = 1;
  4400  0016AC  84C5               	bsf	4037,2,c	;volatile
  4401  0016AE  0012               	return		;funcret
  4402  0016B0                     __end_of_I2C_Master_Stop:
  4403                           	opt stack 0
  4404                           tblptru	equ	0xFF8
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           intcon3	equ	0xFF0
  4409                           postinc0	equ	0xFEE
  4410                           wreg	equ	0xFE8
  4411                           indf2	equ	0xFDF
  4412                           postinc2	equ	0xFDE
  4413                           postdec2	equ	0xFDD
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _I2C_Master_Start *****************
  4419 ;; Defined at:
  4420 ;;		line 29 in file "I2C.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;		None
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  1    wreg      void 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:        0 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    2
  4441 ;; This function calls:
  4442 ;;		_I2C_Master_Wait
  4443 ;; This function is called by:
  4444 ;;		_fixLCD
  4445 ;;		_get_time
  4446 ;;		_set_time
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text21
  4451  0016B0                     __ptext21:
  4452                           	opt stack 0
  4453  0016B0                     _I2C_Master_Start:
  4454                           	opt stack 26
  4455                           
  4456                           ;I2C.c: 31: I2C_Master_Wait();
  4457                           
  4458                           ;incstack = 0
  4459  0016B0  EC33  F00B         	call	_I2C_Master_Wait	;wreg free
  4460                           
  4461                           ;I2C.c: 32: SEN = 1;
  4462  0016B4  80C5               	bsf	4037,0,c	;volatile
  4463  0016B6  0012               	return		;funcret
  4464  0016B8                     __end_of_I2C_Master_Start:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           intcon	equ	0xFF2
  4470                           intcon3	equ	0xFF0
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function _I2C_Master_Read *****************
  4481 ;; Defined at:
  4482 ;;		line 53 in file "I2C.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;  a               1    wreg     unsigned char 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  a               1   16[COMRAM] unsigned char 
  4487 ;;  temp            1   17[COMRAM] unsigned char 
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      unsigned char 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;Total ram usage:        2 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    2
  4504 ;; This function calls:
  4505 ;;		_I2C_Master_Wait
  4506 ;; This function is called by:
  4507 ;;		_fixLCD
  4508 ;;		_get_time
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text22
  4513  001530                     __ptext22:
  4514                           	opt stack 0
  4515  001530                     _I2C_Master_Read:
  4516                           	opt stack 26
  4517                           
  4518                           ;incstack = 0
  4519                           ;I2C_Master_Read@a stored from wreg
  4520  001530  6E11               	movwf	I2C_Master_Read@a,c
  4521                           
  4522                           ;I2C.c: 55: unsigned char temp;
  4523                           ;I2C.c: 56: I2C_Master_Wait();
  4524  001532  EC33  F00B         	call	_I2C_Master_Wait	;wreg free
  4525                           
  4526                           ;I2C.c: 57: RCEN = 1;
  4527  001536  86C5               	bsf	4037,3,c	;volatile
  4528                           
  4529                           ;I2C.c: 58: I2C_Master_Wait();
  4530  001538  EC33  F00B         	call	_I2C_Master_Wait	;wreg free
  4531                           
  4532                           ;I2C.c: 59: temp = SSPBUF;
  4533  00153C  CFC9 F012          	movff	4041,I2C_Master_Read@temp	;volatile
  4534                           
  4535                           ;I2C.c: 60: I2C_Master_Wait();
  4536  001540  EC33  F00B         	call	_I2C_Master_Wait	;wreg free
  4537                           
  4538                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4539  001544  5011               	movf	I2C_Master_Read@a,w,c
  4540  001546  A4D8               	btfss	status,2,c
  4541  001548  D002               	goto	u2380
  4542  00154A  8AC5               	bsf	4037,5,c	;volatile
  4543  00154C  D001               	goto	l3472
  4544  00154E                     u2380:
  4545  00154E  9AC5               	bcf	4037,5,c	;volatile
  4546  001550                     l3472:
  4547                           
  4548                           ;I2C.c: 62: ACKEN = 1;
  4549  001550  88C5               	bsf	4037,4,c	;volatile
  4550                           
  4551                           ;I2C.c: 63: return temp;
  4552  001552  5012               	movf	I2C_Master_Read@temp,w,c
  4553  001554  0012               	return	
  4554  001556                     __end_of_I2C_Master_Read:
  4555                           	opt stack 0
  4556                           tblptru	equ	0xFF8
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           intcon3	equ	0xFF0
  4561                           postinc0	equ	0xFEE
  4562                           wreg	equ	0xFE8
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _I2C_Master_Wait *****************
  4571 ;; Defined at:
  4572 ;;		line 24 in file "I2C.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;		None
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, status,2, status,0
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:        1 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    1
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_I2C_Master_Start
  4597 ;;		_I2C_Master_Stop
  4598 ;;		_I2C_Master_Write
  4599 ;;		_I2C_Master_Read
  4600 ;;		_I2C_Master_RepeatedStart
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text23
  4605  001666                     __ptext23:
  4606                           	opt stack 0
  4607  001666                     _I2C_Master_Wait:
  4608                           	opt stack 26
  4609  001666                     l34:
  4610  001666  B4C7               	btfsc	4039,2,c	;volatile
  4611  001668  D7FE               	goto	l34
  4612  00166A  CFC5 F010          	movff	4037,??_I2C_Master_Wait	;volatile
  4613  00166E  0E1F               	movlw	31
  4614  001670  1610               	andwf	??_I2C_Master_Wait,f,c
  4615  001672  B4D8               	btfsc	status,2,c
  4616  001674  0012               	return	
  4617  001676  D7F7               	goto	l34
  4618  001678                     __end_of_I2C_Master_Wait:
  4619                           	opt stack 0
  4620                           tblptru	equ	0xFF8
  4621                           prodh	equ	0xFF4
  4622                           prodl	equ	0xFF3
  4623                           intcon	equ	0xFF2
  4624                           intcon3	equ	0xFF0
  4625                           postinc0	equ	0xFEE
  4626                           wreg	equ	0xFE8
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _eeprom_LogResult *****************
  4635 ;; Defined at:
  4636 ;;		line 82 in file "eeprom.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  data            2   18[COMRAM] PTR unsigned char 
  4639 ;;		 -> executingState@res(8), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  i               2   21[COMRAM] int 
  4642 ;;  address         1   20[COMRAM] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;Total ram usage:        5 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    3
  4659 ;; This function calls:
  4660 ;;		_eeprom_WriteByte
  4661 ;;		_newestAddress
  4662 ;; This function is called by:
  4663 ;;		_executingState
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text24
  4668  00130C                     __ptext24:
  4669                           	opt stack 0
  4670  00130C                     _eeprom_LogResult:
  4671                           	opt stack 26
  4672                           
  4673                           ;eeprom.c: 83: uint8_t address = newestAddress() + 5;
  4674                           
  4675                           ;incstack = 0
  4676  00130C  EC3C  F00B         	call	_newestAddress	;wreg free
  4677  001310  0F05               	addlw	5
  4678  001312  6E15               	movwf	eeprom_LogResult@address,c
  4679                           
  4680                           ;eeprom.c: 84: eeprom_WriteByte(0x0000, address);
  4681  001314  0E00               	movlw	0
  4682  001316  6E11               	movwf	eeprom_WriteByte@address+1,c
  4683  001318  0E00               	movlw	0
  4684  00131A  6E10               	movwf	eeprom_WriteByte@address,c
  4685  00131C  C015  F012         	movff	eeprom_LogResult@address,eeprom_WriteByte@data
  4686  001320  ECAB  F00A         	call	_eeprom_WriteByte	;wreg free
  4687                           
  4688                           ;eeprom.c: 85: for(int i = 0; i < 5; i++){
  4689  001324  0E00               	movlw	0
  4690  001326  6E17               	movwf	eeprom_LogResult@i+1,c
  4691  001328  0E00               	movlw	0
  4692  00132A  6E16               	movwf	eeprom_LogResult@i,c
  4693  00132C  BE17               	btfsc	eeprom_LogResult@i+1,7,c
  4694  00132E  D006               	goto	l3946
  4695  001330  5017               	movf	eeprom_LogResult@i+1,w,c
  4696  001332  E111               	bnz	l344
  4697  001334  0E05               	movlw	5
  4698  001336  5C16               	subwf	eeprom_LogResult@i,w,c
  4699  001338  B0D8               	btfsc	status,0,c
  4700  00133A  0012               	return	
  4701  00133C                     l3946:
  4702                           
  4703                           ;eeprom.c: 86: eeprom_WriteByte(address + i, 0xFF);
  4704  00133C  5015               	movf	eeprom_LogResult@address,w,c
  4705  00133E  2416               	addwf	eeprom_LogResult@i,w,c
  4706  001340  6E10               	movwf	eeprom_WriteByte@address,c
  4707  001342  0E00               	movlw	0
  4708  001344  2017               	addwfc	eeprom_LogResult@i+1,w,c
  4709  001346  6E11               	movwf	eeprom_WriteByte@address+1,c
  4710  001348  0EFF               	movlw	255
  4711  00134A  6E12               	movwf	eeprom_WriteByte@data,c
  4712  00134C  ECAB  F00A         	call	_eeprom_WriteByte	;wreg free
  4713  001350  4A16               	infsnz	eeprom_LogResult@i,f,c
  4714  001352  2A17               	incf	eeprom_LogResult@i+1,f,c
  4715  001354  D7EB               	goto	L5
  4716  001356                     l344:
  4717  001356  0012               	return		;funcret
  4718  001358                     __end_of_eeprom_LogResult:
  4719                           	opt stack 0
  4720                           tblptru	equ	0xFF8
  4721                           prodh	equ	0xFF4
  4722                           prodl	equ	0xFF3
  4723                           intcon	equ	0xFF2
  4724                           intcon3	equ	0xFF0
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           indf2	equ	0xFDF
  4728                           postinc2	equ	0xFDE
  4729                           postdec2	equ	0xFDD
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function _dispenseSnCan *****************
  4735 ;; Defined at:
  4736 ;;		line 218 in file "servos.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;Total ram usage:        2 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    2
  4757 ;; This function calls:
  4758 ;;		_servoRotate0
  4759 ;;		_servoRotate90
  4760 ;; This function is called by:
  4761 ;;		_executingState
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text25
  4766  0014AA                     __ptext25:
  4767                           	opt stack 0
  4768  0014AA                     _dispenseSnCan:
  4769                           	opt stack 27
  4770                           
  4771                           ;servos.c: 219: servoRotate90(0);
  4772                           
  4773                           ;incstack = 0
  4774  0014AA  0E00               	movlw	0
  4775  0014AC  6E11               	movwf	servoRotate90@servo+1,c
  4776  0014AE  0E00               	movlw	0
  4777  0014B0  6E10               	movwf	servoRotate90@servo,c
  4778  0014B2  EC32  F006         	call	_servoRotate90	;wreg free
  4779                           
  4780                           ;servos.c: 220: _delay((unsigned long)((100)*(10000000/4000.0)));
  4781  0014B6  0E02               	movlw	2
  4782  0014B8  6E17               	movwf	(??_dispenseSnCan+1)& (0+255),c
  4783  0014BA  0E45               	movlw	69
  4784  0014BC  6E16               	movwf	??_dispenseSnCan& (0+255),c
  4785  0014BE  0EAA               	movlw	170
  4786  0014C0                     u3477:
  4787  0014C0  2EE8               	decfsz	wreg,f,c
  4788  0014C2  D7FE               	bra	u3477
  4789  0014C4  2E16               	decfsz	??_dispenseSnCan& (0+255),f,c
  4790  0014C6  D7FC               	bra	u3477
  4791  0014C8  2E17               	decfsz	(??_dispenseSnCan+1)& (0+255),f,c
  4792  0014CA  D7FA               	bra	u3477
  4793                           
  4794                           ;servos.c: 221: servoRotate0(0);
  4795  0014CC  0E00               	movlw	0
  4796  0014CE  6E11               	movwf	servoRotate0@servo+1,c
  4797  0014D0  0E00               	movlw	0
  4798  0014D2  6E10               	movwf	servoRotate0@servo,c
  4799  0014D4  EC95  F006         	call	_servoRotate0	;wreg free
  4800  0014D8  0012               	return		;funcret
  4801  0014DA                     __end_of_dispenseSnCan:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           intcon3	equ	0xFF0
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function _dispenseAlCan *****************
  4818 ;; Defined at:
  4819 ;;		line 212 in file "servos.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;		None
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;		None
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  1    wreg      void 
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;Total ram usage:        2 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    2
  4840 ;; This function calls:
  4841 ;;		_servoRotate0
  4842 ;;		_servoRotate90
  4843 ;; This function is called by:
  4844 ;;		_executingState
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text26
  4849  0014DA                     __ptext26:
  4850                           	opt stack 0
  4851  0014DA                     _dispenseAlCan:
  4852                           	opt stack 27
  4853                           
  4854                           ;servos.c: 213: servoRotate90(1);
  4855                           
  4856                           ;incstack = 0
  4857  0014DA  0E00               	movlw	0
  4858  0014DC  6E11               	movwf	servoRotate90@servo+1,c
  4859  0014DE  0E01               	movlw	1
  4860  0014E0  6E10               	movwf	servoRotate90@servo,c
  4861  0014E2  EC32  F006         	call	_servoRotate90	;wreg free
  4862                           
  4863                           ;servos.c: 214: _delay((unsigned long)((100)*(10000000/4000.0)));
  4864  0014E6  0E02               	movlw	2
  4865  0014E8  6E17               	movwf	(??_dispenseAlCan+1)& (0+255),c
  4866  0014EA  0E45               	movlw	69
  4867  0014EC  6E16               	movwf	??_dispenseAlCan& (0+255),c
  4868  0014EE  0EAA               	movlw	170
  4869  0014F0                     u3487:
  4870  0014F0  2EE8               	decfsz	wreg,f,c
  4871  0014F2  D7FE               	bra	u3487
  4872  0014F4  2E16               	decfsz	??_dispenseAlCan& (0+255),f,c
  4873  0014F6  D7FC               	bra	u3487
  4874  0014F8  2E17               	decfsz	(??_dispenseAlCan+1)& (0+255),f,c
  4875  0014FA  D7FA               	bra	u3487
  4876                           
  4877                           ;servos.c: 215: servoRotate0(1);
  4878  0014FC  0E00               	movlw	0
  4879  0014FE  6E11               	movwf	servoRotate0@servo+1,c
  4880  001500  0E01               	movlw	1
  4881  001502  6E10               	movwf	servoRotate0@servo,c
  4882  001504  EC95  F006         	call	_servoRotate0	;wreg free
  4883  001508  0012               	return		;funcret
  4884  00150A                     __end_of_dispenseAlCan:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           intcon	equ	0xFF2
  4890                           intcon3	equ	0xFF0
  4891                           postinc0	equ	0xFEE
  4892                           wreg	equ	0xFE8
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _eeprom_initialize *****************
  4901 ;; Defined at:
  4902 ;;		line 73 in file "eeprom.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    3
  4923 ;; This function calls:
  4924 ;;		_eeprom_WriteByte
  4925 ;;		_newestAddress
  4926 ;; This function is called by:
  4927 ;;		_main
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text27
  4932  0015C0                     __ptext27:
  4933                           	opt stack 0
  4934  0015C0                     _eeprom_initialize:
  4935                           	opt stack 27
  4936                           
  4937                           ;eeprom.c: 74: if(newestAddress() == 0b11111111){
  4938                           
  4939                           ;incstack = 0
  4940  0015C0  EC3C  F00B         	call	_newestAddress	;wreg free
  4941  0015C4  0AFF               	xorlw	255
  4942  0015C6  A4D8               	btfss	status,2,c
  4943  0015C8  0012               	return	
  4944                           
  4945                           ;eeprom.c: 75: eeprom_WriteByte(0x0000, 0x00);
  4946  0015CA  0E00               	movlw	0
  4947  0015CC  6E11               	movwf	eeprom_WriteByte@address+1,c
  4948  0015CE  0E00               	movlw	0
  4949  0015D0  6E10               	movwf	eeprom_WriteByte@address,c
  4950  0015D2  0E00               	movlw	0
  4951  0015D4  6E12               	movwf	eeprom_WriteByte@data,c
  4952  0015D6  ECAB  F00A         	call	_eeprom_WriteByte	;wreg free
  4953  0015DA  0012               	return	
  4954  0015DC                     __end_of_eeprom_initialize:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon3	equ	0xFF0
  4961                           postinc0	equ	0xFEE
  4962                           wreg	equ	0xFE8
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _newestAddress *****************
  4971 ;; Defined at:
  4972 ;;		line 69 in file "eeprom.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      unsigned char 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    2
  4993 ;; This function calls:
  4994 ;;		_eeprom_ReadByte
  4995 ;; This function is called by:
  4996 ;;		_eeprom_initialize
  4997 ;;		_eeprom_LogResult
  4998 ;;		_eeprom_GetLog
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text28
  5003  001678                     __ptext28:
  5004                           	opt stack 0
  5005  001678                     _newestAddress:
  5006                           	opt stack 26
  5007                           
  5008                           ;eeprom.c: 70: return eeprom_ReadByte(0x0000);
  5009                           
  5010                           ;incstack = 0
  5011  001678  0E00               	movlw	0
  5012  00167A  6E11               	movwf	eeprom_ReadByte@address+1,c
  5013  00167C  0E00               	movlw	0
  5014  00167E  6E10               	movwf	eeprom_ReadByte@address,c
  5015  001680  EC1E  F00B         	call	_eeprom_ReadByte	;wreg free
  5016  001684  0012               	return	
  5017  001686                     __end_of_newestAddress:
  5018                           	opt stack 0
  5019                           tblptru	equ	0xFF8
  5020                           prodh	equ	0xFF4
  5021                           prodl	equ	0xFF3
  5022                           intcon	equ	0xFF2
  5023                           intcon3	equ	0xFF0
  5024                           postinc0	equ	0xFEE
  5025                           wreg	equ	0xFE8
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _eeprom_ReadByte *****************
  5034 ;; Defined at:
  5035 ;;		line 14 in file "eeprom.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  address         2   15[COMRAM] unsigned int 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      unsigned char 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        2 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    1
  5056 ;; This function calls:
  5057 ;;		Nothing
  5058 ;; This function is called by:
  5059 ;;		_newestAddress
  5060 ;;		_eeprom_GetLog
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text29
  5065  00163C                     __ptext29:
  5066                           	opt stack 0
  5067  00163C                     _eeprom_ReadByte:
  5068                           	opt stack 26
  5069                           
  5070                           ;eeprom.c: 18: EEADRH = (uint8_t)(address >> 8);
  5071                           
  5072                           ;incstack = 0
  5073  00163C  5011               	movf	eeprom_ReadByte@address+1,w,c
  5074  00163E  6EAA               	movwf	4010,c	;volatile
  5075                           
  5076                           ;eeprom.c: 19: EEADR = (uint8_t)address;
  5077  001640  C010  FFA9         	movff	eeprom_ReadByte@address,4009	;volatile
  5078                           
  5079                           ;eeprom.c: 21: EECON1bits.EEPGD = 0;
  5080  001644  9EA6               	bcf	4006,7,c	;volatile
  5081                           
  5082                           ;eeprom.c: 22: EECON1bits.CFGS = 0;
  5083  001646  9CA6               	bcf	4006,6,c	;volatile
  5084                           
  5085                           ;eeprom.c: 23: EECON1bits.RD = 1;
  5086  001648  80A6               	bsf	4006,0,c	;volatile
  5087  00164A                     l323:
  5088  00164A  B0A6               	btfsc	4006,0,c	;volatile
  5089  00164C  D7FE               	goto	l323
  5090                           
  5091                           ;eeprom.c: 29: return EEDATA;
  5092  00164E  50A8               	movf	4008,w,c	;volatile
  5093  001650  0012               	return	
  5094  001652                     __end_of_eeprom_ReadByte:
  5095                           	opt stack 0
  5096                           tblptru	equ	0xFF8
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           intcon	equ	0xFF2
  5100                           intcon3	equ	0xFF0
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           indf2	equ	0xFDF
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           fsr2h	equ	0xFDA
  5107                           fsr2l	equ	0xFD9
  5108                           status	equ	0xFD8
  5109                           
  5110 ;; *************** function _eeprom_WriteByte *****************
  5111 ;; Defined at:
  5112 ;;		line 37 in file "eeprom.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  address         2   15[COMRAM] unsigned int 
  5115 ;;  data            1   17[COMRAM] unsigned char 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;		None
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      void 
  5120 ;; Registers used:
  5121 ;;		wreg, status,2
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5127 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;Total ram usage:        3 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    1
  5134 ;; This function calls:
  5135 ;;		Nothing
  5136 ;; This function is called by:
  5137 ;;		_eeprom_initialize
  5138 ;;		_eeprom_LogResult
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text30
  5143  001556                     __ptext30:
  5144                           	opt stack 0
  5145  001556                     _eeprom_WriteByte:
  5146                           	opt stack 27
  5147                           
  5148                           ;eeprom.c: 40: EEADRH = (uint8_t)(address >> 8);
  5149                           
  5150                           ;incstack = 0
  5151  001556  5011               	movf	eeprom_WriteByte@address+1,w,c
  5152  001558  6EAA               	movwf	4010,c	;volatile
  5153                           
  5154                           ;eeprom.c: 41: EEADR = (uint8_t)address;
  5155  00155A  C010  FFA9         	movff	eeprom_WriteByte@address,4009	;volatile
  5156                           
  5157                           ;eeprom.c: 43: EEDATA = data;
  5158  00155E  C012  FFA8         	movff	eeprom_WriteByte@data,4008	;volatile
  5159                           
  5160                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  5161  001562  9EA6               	bcf	4006,7,c	;volatile
  5162                           
  5163                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  5164  001564  9CA6               	bcf	4006,6,c	;volatile
  5165                           
  5166                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  5167  001566  84A6               	bsf	4006,2,c	;volatile
  5168                           
  5169                           ;eeprom.c: 50: EECON2 = 0x55;
  5170  001568  0E55               	movlw	85
  5171  00156A  6EA7               	movwf	4007,c	;volatile
  5172                           
  5173                           ;eeprom.c: 51: EECON2 = 0xAA;
  5174  00156C  0EAA               	movlw	170
  5175  00156E  6EA7               	movwf	4007,c	;volatile
  5176                           
  5177                           ;eeprom.c: 52: EECON1bits.WR = 1;
  5178  001570  82A6               	bsf	4006,1,c	;volatile
  5179  001572                     l329:
  5180  001572  A8A1               	btfss	4001,4,c	;volatile
  5181  001574  D7FE               	goto	l329
  5182                           
  5183                           ;eeprom.c: 58: }
  5184                           ;eeprom.c: 60: PIR2bits.EEIF = 0;
  5185  001576  98A1               	bcf	4001,4,c	;volatile
  5186                           
  5187                           ;eeprom.c: 61: EECON1bits.WREN = 0;
  5188  001578  94A6               	bcf	4006,2,c	;volatile
  5189  00157A  0012               	return		;funcret
  5190  00157C                     __end_of_eeprom_WriteByte:
  5191                           	opt stack 0
  5192                           tblptru	equ	0xFF8
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           intcon	equ	0xFF2
  5196                           intcon3	equ	0xFF0
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function _debugState *****************
  5207 ;; Defined at:
  5208 ;;		line 328 in file "main.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;		None
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;Total ram usage:        0 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    4
  5229 ;; This function calls:
  5230 ;;		_lcdInst
  5231 ;;		_printf
  5232 ;;		_servoRotate0
  5233 ;;		_servoRotate90
  5234 ;;		_servoRotate90n
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text31
  5241  00126E                     __ptext31:
  5242                           	opt stack 0
  5243  00126E                     _debugState:
  5244                           	opt stack 26
  5245                           
  5246                           ;main.c: 329: LATCbits.LATC6 = 1;
  5247                           
  5248                           ;incstack = 0
  5249  00126E  8C8B               	bsf	3979,6,c	;volatile
  5250                           
  5251                           ;main.c: 330: lcdInst(0b10000000);;
  5252  001270  0E80               	movlw	128
  5253  001272  EC49  F00B         	call	_lcdInst
  5254                           
  5255                           ;main.c: 331: printf("going debug");
  5256  001276  0EED               	movlw	low STR_13
  5257  001278  6E1C               	movwf	printf@f,c
  5258  00127A  0EFF               	movlw	high STR_13
  5259  00127C  6E1D               	movwf	printf@f+1,c
  5260  00127E  EC95  F002         	call	_printf	;wreg free
  5261                           
  5262                           ;main.c: 332: lcdInst(0b11000000);;
  5263  001282  0EC0               	movlw	192
  5264  001284  EC49  F00B         	call	_lcdInst
  5265                           
  5266                           ;main.c: 342: servoRotate0(4);
  5267  001288  0E00               	movlw	0
  5268  00128A  6E11               	movwf	servoRotate0@servo+1,c
  5269  00128C  0E04               	movlw	4
  5270  00128E  6E10               	movwf	servoRotate0@servo,c
  5271  001290  EC95  F006         	call	_servoRotate0	;wreg free
  5272                           
  5273                           ;main.c: 343: servoRotate90(4);
  5274  001294  0E00               	movlw	0
  5275  001296  6E11               	movwf	servoRotate90@servo+1,c
  5276  001298  0E04               	movlw	4
  5277  00129A  6E10               	movwf	servoRotate90@servo,c
  5278  00129C  EC32  F006         	call	_servoRotate90	;wreg free
  5279                           
  5280                           ;main.c: 344: servoRotate90n(4);
  5281  0012A0  0E00               	movlw	0
  5282  0012A2  6E11               	movwf	servoRotate90n@servo+1,c
  5283  0012A4  0E04               	movlw	4
  5284  0012A6  6E10               	movwf	servoRotate90n@servo,c
  5285  0012A8  ECF8  F006         	call	_servoRotate90n	;wreg free
  5286                           
  5287                           ;main.c: 345: servoRotate90(4);
  5288  0012AC  0E00               	movlw	0
  5289  0012AE  6E11               	movwf	servoRotate90@servo+1,c
  5290  0012B0  0E04               	movlw	4
  5291  0012B2  6E10               	movwf	servoRotate90@servo,c
  5292  0012B4  EC32  F006         	call	_servoRotate90	;wreg free
  5293                           
  5294                           ;main.c: 347: state = MAIN;
  5295  0012B8  0E00               	movlw	0
  5296  0012BA  6E4B               	movwf	_state,c
  5297  0012BC  0012               	return		;funcret
  5298  0012BE                     __end_of_debugState:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           intcon	equ	0xFF2
  5304                           intcon3	equ	0xFF0
  5305                           postinc0	equ	0xFEE
  5306                           wreg	equ	0xFE8
  5307                           indf2	equ	0xFDF
  5308                           postinc2	equ	0xFDE
  5309                           postdec2	equ	0xFDD
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _servoRotate90n *****************
  5315 ;; Defined at:
  5316 ;;		line 169 in file "servos.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  servo           2   15[COMRAM] int 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  i               2   19[COMRAM] unsigned int 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5330 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;Total ram usage:        6 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    1
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_executingState
  5341 ;;		_debugState
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           	psect	text32
  5346  000DF0                     __ptext32:
  5347                           	opt stack 0
  5348  000DF0                     _servoRotate90n:
  5349                           	opt stack 28
  5350                           
  5351                           ;servos.c: 171: unsigned int i;
  5352                           ;servos.c: 172: for (i = 0; i < 30; i++) {
  5353                           
  5354                           ;incstack = 0
  5355  000DF0  0E00               	movlw	0
  5356  000DF2  6E15               	movwf	servoRotate90n@i+1,c
  5357  000DF4  0E00               	movlw	0
  5358  000DF6  6E14               	movwf	servoRotate90n@i,c
  5359  000DF8                     l3908:
  5360  000DF8  5015               	movf	servoRotate90n@i+1,w,c
  5361  000DFA  E15A               	bnz	l492
  5362  000DFC  0E1E               	movlw	30
  5363  000DFE  5C14               	subwf	servoRotate90n@i,w,c
  5364  000E00  B0D8               	btfsc	status,0,c
  5365  000E02  0012               	return	
  5366  000E04  D00A               	goto	l3914
  5367  000E06                     l479:
  5368                           
  5369                           ;servos.c: 175: LATAbits.LATA4 = 1;
  5370  000E06  8889               	bsf	3977,4,c	;volatile
  5371                           
  5372                           ;servos.c: 176: break;
  5373  000E08  D020               	goto	l3916
  5374  000E0A                     l481:
  5375                           
  5376                           ;servos.c: 178: LATAbits.LATA5 = 1;
  5377  000E0A  8A89               	bsf	3977,5,c	;volatile
  5378                           
  5379                           ;servos.c: 179: break;
  5380  000E0C  D01E               	goto	l3916
  5381  000E0E                     l482:
  5382                           
  5383                           ;servos.c: 181: LATEbits.LATE0 = 1;
  5384  000E0E  808D               	bsf	3981,0,c	;volatile
  5385                           
  5386                           ;servos.c: 182: break;
  5387  000E10  D01C               	goto	l3916
  5388  000E12                     l483:
  5389                           
  5390                           ;servos.c: 184: LATEbits.LATE1 = 1;
  5391  000E12  828D               	bsf	3981,1,c	;volatile
  5392                           
  5393                           ;servos.c: 185: break;
  5394  000E14  D01A               	goto	l3916
  5395  000E16                     l484:
  5396                           
  5397                           ;servos.c: 187: LATBbits.LATB2 = 1;
  5398  000E16  848A               	bsf	3978,2,c	;volatile
  5399                           
  5400                           ;servos.c: 189: }
  5401                           
  5402                           ;servos.c: 188: break;
  5403  000E18  D018               	goto	l3916
  5404  000E1A                     l3914:
  5405  000E1A  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  5406  000E1E  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  5407                           
  5408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5409                           ; Switch size 1, requested type "space"
  5410                           ; Number of cases is 1, Range of values is 0 to 0
  5411                           ; switch strategies available:
  5412                           ; Name         Instructions Cycles
  5413                           ; simple_byte            4     3 (average)
  5414                           ;	Chosen strategy is simple_byte
  5415  000E22  5013               	movf	??_servoRotate90n+1,w,c
  5416  000E24  0A00               	xorlw	0	; case 0
  5417  000E26  A4D8               	btfss	status,2,c
  5418  000E28  D010               	goto	l3916
  5419                           
  5420                           ; Switch size 1, requested type "space"
  5421                           ; Number of cases is 5, Range of values is 0 to 4
  5422                           ; switch strategies available:
  5423                           ; Name         Instructions Cycles
  5424                           ; simple_byte           16     9 (average)
  5425                           ;	Chosen strategy is simple_byte
  5426  000E2A  5012               	movf	??_servoRotate90n,w,c
  5427  000E2C  0A00               	xorlw	0	; case 0
  5428  000E2E  B4D8               	btfsc	status,2,c
  5429  000E30  D7EA               	goto	l479
  5430  000E32  0A01               	xorlw	1	; case 1
  5431  000E34  B4D8               	btfsc	status,2,c
  5432  000E36  D7E9               	goto	l481
  5433  000E38  0A03               	xorlw	3	; case 2
  5434  000E3A  B4D8               	btfsc	status,2,c
  5435  000E3C  D7E8               	goto	l482
  5436  000E3E  0A01               	xorlw	1	; case 3
  5437  000E40  B4D8               	btfsc	status,2,c
  5438  000E42  D7E7               	goto	l483
  5439  000E44  0A07               	xorlw	7	; case 4
  5440  000E46  B4D8               	btfsc	status,2,c
  5441  000E48  D7E6               	goto	l484
  5442  000E4A                     l3916:
  5443                           
  5444                           ;servos.c: 190: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5445  000E4A  0ED6               	movlw	214
  5446  000E4C                     u3497:
  5447  000E4C  D000               	nop2	
  5448  000E4E  D000               	nop2	
  5449  000E50  2EE8               	decfsz	wreg,f,c
  5450  000E52  D7FC               	bra	u3497
  5451  000E54  D000               	nop2	
  5452                           
  5453                           ;servos.c: 191: switch (servo) {
  5454  000E56  D00A               	goto	l3920
  5455  000E58                     l486:
  5456                           
  5457                           ;servos.c: 193: LATAbits.LATA4 = 0;
  5458  000E58  9889               	bcf	3977,4,c	;volatile
  5459                           
  5460                           ;servos.c: 194: break;
  5461  000E5A  D020               	goto	l3922
  5462  000E5C                     l488:
  5463                           
  5464                           ;servos.c: 196: LATAbits.LATA5 = 0;
  5465  000E5C  9A89               	bcf	3977,5,c	;volatile
  5466                           
  5467                           ;servos.c: 197: break;
  5468  000E5E  D01E               	goto	l3922
  5469  000E60                     l489:
  5470                           
  5471                           ;servos.c: 199: LATEbits.LATE0 = 0;
  5472  000E60  908D               	bcf	3981,0,c	;volatile
  5473                           
  5474                           ;servos.c: 200: break;
  5475  000E62  D01C               	goto	l3922
  5476  000E64                     l490:
  5477                           
  5478                           ;servos.c: 202: LATEbits.LATE1 = 0;
  5479  000E64  928D               	bcf	3981,1,c	;volatile
  5480                           
  5481                           ;servos.c: 203: break;
  5482  000E66  D01A               	goto	l3922
  5483  000E68                     l491:
  5484                           
  5485                           ;servos.c: 205: LATBbits.LATB2 = 0;
  5486  000E68  948A               	bcf	3978,2,c	;volatile
  5487                           
  5488                           ;servos.c: 207: }
  5489                           
  5490                           ;servos.c: 206: break;
  5491  000E6A  D018               	goto	l3922
  5492  000E6C                     l3920:
  5493  000E6C  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  5494  000E70  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  5495                           
  5496                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5497                           ; Switch size 1, requested type "space"
  5498                           ; Number of cases is 1, Range of values is 0 to 0
  5499                           ; switch strategies available:
  5500                           ; Name         Instructions Cycles
  5501                           ; simple_byte            4     3 (average)
  5502                           ;	Chosen strategy is simple_byte
  5503  000E74  5013               	movf	??_servoRotate90n+1,w,c
  5504  000E76  0A00               	xorlw	0	; case 0
  5505  000E78  A4D8               	btfss	status,2,c
  5506  000E7A  D010               	goto	l3922
  5507                           
  5508                           ; Switch size 1, requested type "space"
  5509                           ; Number of cases is 5, Range of values is 0 to 4
  5510                           ; switch strategies available:
  5511                           ; Name         Instructions Cycles
  5512                           ; simple_byte           16     9 (average)
  5513                           ;	Chosen strategy is simple_byte
  5514  000E7C  5012               	movf	??_servoRotate90n,w,c
  5515  000E7E  0A00               	xorlw	0	; case 0
  5516  000E80  B4D8               	btfsc	status,2,c
  5517  000E82  D7EA               	goto	l486
  5518  000E84  0A01               	xorlw	1	; case 1
  5519  000E86  B4D8               	btfsc	status,2,c
  5520  000E88  D7E9               	goto	l488
  5521  000E8A  0A03               	xorlw	3	; case 2
  5522  000E8C  B4D8               	btfsc	status,2,c
  5523  000E8E  D7E8               	goto	l489
  5524  000E90  0A01               	xorlw	1	; case 3
  5525  000E92  B4D8               	btfsc	status,2,c
  5526  000E94  D7E7               	goto	l490
  5527  000E96  0A07               	xorlw	7	; case 4
  5528  000E98  B4D8               	btfsc	status,2,c
  5529  000E9A  D7E6               	goto	l491
  5530  000E9C                     l3922:
  5531                           
  5532                           ;servos.c: 208: _delay((unsigned long)((19400)*(10000000/4000000.0)));
  5533  000E9C  0E3F               	movlw	63
  5534  000E9E  6E12               	movwf	??_servoRotate90n& (0+255),c
  5535  000EA0  0EFC               	movlw	252
  5536  000EA2                     u3507:
  5537  000EA2  2EE8               	decfsz	wreg,f,c
  5538  000EA4  D7FE               	bra	u3507
  5539  000EA6  2E12               	decfsz	??_servoRotate90n& (0+255),f,c
  5540  000EA8  D7FC               	bra	u3507
  5541  000EAA  4A14               	infsnz	servoRotate90n@i,f,c
  5542  000EAC  2A15               	incf	servoRotate90n@i+1,f,c
  5543  000EAE  D7A4               	goto	l3908
  5544  000EB0                     l492:
  5545  000EB0  0012               	return		;funcret
  5546  000EB2                     __end_of_servoRotate90n:
  5547                           	opt stack 0
  5548                           tblptru	equ	0xFF8
  5549                           prodh	equ	0xFF4
  5550                           prodl	equ	0xFF3
  5551                           intcon	equ	0xFF2
  5552                           intcon3	equ	0xFF0
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _servoRotate90 *****************
  5563 ;; Defined at:
  5564 ;;		line 126 in file "servos.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  servo           2   15[COMRAM] int 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  i               2   19[COMRAM] unsigned int 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;Total ram usage:        6 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    1
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_executingState
  5589 ;;		_debugState
  5590 ;;		_dispenseAlCan
  5591 ;;		_dispenseSnCan
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text33
  5596  000C64                     __ptext33:
  5597                           	opt stack 0
  5598  000C64                     _servoRotate90:
  5599                           	opt stack 28
  5600                           
  5601                           ;servos.c: 128: unsigned int i;
  5602                           ;servos.c: 129: for (i = 0; i < 30; i++) {
  5603                           
  5604                           ;incstack = 0
  5605  000C64  0E00               	movlw	0
  5606  000C66  6E15               	movwf	servoRotate90@i+1,c
  5607  000C68  0E00               	movlw	0
  5608  000C6A  6E14               	movwf	servoRotate90@i,c
  5609  000C6C                     l3734:
  5610  000C6C  5015               	movf	servoRotate90@i+1,w,c
  5611  000C6E  E15C               	bnz	l473
  5612  000C70  0E1E               	movlw	30
  5613  000C72  5C14               	subwf	servoRotate90@i,w,c
  5614  000C74  B0D8               	btfsc	status,0,c
  5615  000C76  0012               	return	
  5616  000C78  D00A               	goto	l3740
  5617  000C7A                     l460:
  5618                           
  5619                           ;servos.c: 132: LATAbits.LATA4 = 1;
  5620  000C7A  8889               	bsf	3977,4,c	;volatile
  5621                           
  5622                           ;servos.c: 133: break;
  5623  000C7C  D020               	goto	l3742
  5624  000C7E                     l462:
  5625                           
  5626                           ;servos.c: 135: LATAbits.LATA5 = 1;
  5627  000C7E  8A89               	bsf	3977,5,c	;volatile
  5628                           
  5629                           ;servos.c: 136: break;
  5630  000C80  D01E               	goto	l3742
  5631  000C82                     l463:
  5632                           
  5633                           ;servos.c: 138: LATEbits.LATE0 = 1;
  5634  000C82  808D               	bsf	3981,0,c	;volatile
  5635                           
  5636                           ;servos.c: 139: break;
  5637  000C84  D01C               	goto	l3742
  5638  000C86                     l464:
  5639                           
  5640                           ;servos.c: 141: LATEbits.LATE1 = 1;
  5641  000C86  828D               	bsf	3981,1,c	;volatile
  5642                           
  5643                           ;servos.c: 142: break;
  5644  000C88  D01A               	goto	l3742
  5645  000C8A                     l465:
  5646                           
  5647                           ;servos.c: 144: LATBbits.LATB2 = 1;
  5648  000C8A  848A               	bsf	3978,2,c	;volatile
  5649                           
  5650                           ;servos.c: 146: }
  5651                           
  5652                           ;servos.c: 145: break;
  5653  000C8C  D018               	goto	l3742
  5654  000C8E                     l3740:
  5655  000C8E  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5656  000C92  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5657                           
  5658                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5659                           ; Switch size 1, requested type "space"
  5660                           ; Number of cases is 1, Range of values is 0 to 0
  5661                           ; switch strategies available:
  5662                           ; Name         Instructions Cycles
  5663                           ; simple_byte            4     3 (average)
  5664                           ;	Chosen strategy is simple_byte
  5665  000C96  5013               	movf	??_servoRotate90+1,w,c
  5666  000C98  0A00               	xorlw	0	; case 0
  5667  000C9A  A4D8               	btfss	status,2,c
  5668  000C9C  D010               	goto	l3742
  5669                           
  5670                           ; Switch size 1, requested type "space"
  5671                           ; Number of cases is 5, Range of values is 0 to 4
  5672                           ; switch strategies available:
  5673                           ; Name         Instructions Cycles
  5674                           ; simple_byte           16     9 (average)
  5675                           ;	Chosen strategy is simple_byte
  5676  000C9E  5012               	movf	??_servoRotate90,w,c
  5677  000CA0  0A00               	xorlw	0	; case 0
  5678  000CA2  B4D8               	btfsc	status,2,c
  5679  000CA4  D7EA               	goto	l460
  5680  000CA6  0A01               	xorlw	1	; case 1
  5681  000CA8  B4D8               	btfsc	status,2,c
  5682  000CAA  D7E9               	goto	l462
  5683  000CAC  0A03               	xorlw	3	; case 2
  5684  000CAE  B4D8               	btfsc	status,2,c
  5685  000CB0  D7E8               	goto	l463
  5686  000CB2  0A01               	xorlw	1	; case 3
  5687  000CB4  B4D8               	btfsc	status,2,c
  5688  000CB6  D7E7               	goto	l464
  5689  000CB8  0A07               	xorlw	7	; case 4
  5690  000CBA  B4D8               	btfsc	status,2,c
  5691  000CBC  D7E6               	goto	l465
  5692  000CBE                     l3742:
  5693                           
  5694                           ;servos.c: 147: _delay((unsigned long)((2400)*(10000000/4000000.0)));
  5695  000CBE  0E08               	movlw	8
  5696  000CC0  6E12               	movwf	??_servoRotate90& (0+255),c
  5697  000CC2  0ECA               	movlw	202
  5698  000CC4                     u3517:
  5699  000CC4  2EE8               	decfsz	wreg,f,c
  5700  000CC6  D7FE               	bra	u3517
  5701  000CC8  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5702  000CCA  D7FC               	bra	u3517
  5703                           
  5704                           ;servos.c: 148: switch (servo) {
  5705  000CCC  D00A               	goto	l3746
  5706  000CCE                     l467:
  5707                           
  5708                           ;servos.c: 150: LATAbits.LATA4 = 0;
  5709  000CCE  9889               	bcf	3977,4,c	;volatile
  5710                           
  5711                           ;servos.c: 151: break;
  5712  000CD0  D020               	goto	l3748
  5713  000CD2                     l469:
  5714                           
  5715                           ;servos.c: 153: LATAbits.LATA5 = 0;
  5716  000CD2  9A89               	bcf	3977,5,c	;volatile
  5717                           
  5718                           ;servos.c: 154: break;
  5719  000CD4  D01E               	goto	l3748
  5720  000CD6                     l470:
  5721                           
  5722                           ;servos.c: 156: LATEbits.LATE0 = 0;
  5723  000CD6  908D               	bcf	3981,0,c	;volatile
  5724                           
  5725                           ;servos.c: 157: break;
  5726  000CD8  D01C               	goto	l3748
  5727  000CDA                     l471:
  5728                           
  5729                           ;servos.c: 159: LATEbits.LATE1 = 0;
  5730  000CDA  928D               	bcf	3981,1,c	;volatile
  5731                           
  5732                           ;servos.c: 160: break;
  5733  000CDC  D01A               	goto	l3748
  5734  000CDE                     l472:
  5735                           
  5736                           ;servos.c: 162: LATBbits.LATB2 = 0;
  5737  000CDE  948A               	bcf	3978,2,c	;volatile
  5738                           
  5739                           ;servos.c: 164: }
  5740                           
  5741                           ;servos.c: 163: break;
  5742  000CE0  D018               	goto	l3748
  5743  000CE2                     l3746:
  5744  000CE2  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5745  000CE6  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5746                           
  5747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5748                           ; Switch size 1, requested type "space"
  5749                           ; Number of cases is 1, Range of values is 0 to 0
  5750                           ; switch strategies available:
  5751                           ; Name         Instructions Cycles
  5752                           ; simple_byte            4     3 (average)
  5753                           ;	Chosen strategy is simple_byte
  5754  000CEA  5013               	movf	??_servoRotate90+1,w,c
  5755  000CEC  0A00               	xorlw	0	; case 0
  5756  000CEE  A4D8               	btfss	status,2,c
  5757  000CF0  D010               	goto	l3748
  5758                           
  5759                           ; Switch size 1, requested type "space"
  5760                           ; Number of cases is 5, Range of values is 0 to 4
  5761                           ; switch strategies available:
  5762                           ; Name         Instructions Cycles
  5763                           ; simple_byte           16     9 (average)
  5764                           ;	Chosen strategy is simple_byte
  5765  000CF2  5012               	movf	??_servoRotate90,w,c
  5766  000CF4  0A00               	xorlw	0	; case 0
  5767  000CF6  B4D8               	btfsc	status,2,c
  5768  000CF8  D7EA               	goto	l467
  5769  000CFA  0A01               	xorlw	1	; case 1
  5770  000CFC  B4D8               	btfsc	status,2,c
  5771  000CFE  D7E9               	goto	l469
  5772  000D00  0A03               	xorlw	3	; case 2
  5773  000D02  B4D8               	btfsc	status,2,c
  5774  000D04  D7E8               	goto	l470
  5775  000D06  0A01               	xorlw	1	; case 3
  5776  000D08  B4D8               	btfsc	status,2,c
  5777  000D0A  D7E7               	goto	l471
  5778  000D0C  0A07               	xorlw	7	; case 4
  5779  000D0E  B4D8               	btfsc	status,2,c
  5780  000D10  D7E6               	goto	l472
  5781  000D12                     l3748:
  5782                           
  5783                           ;servos.c: 165: _delay((unsigned long)((17600)*(10000000/4000000.0)));
  5784  000D12  0E3A               	movlw	58
  5785  000D14  6E12               	movwf	??_servoRotate90& (0+255),c
  5786  000D16  0E23               	movlw	35
  5787  000D18                     u3527:
  5788  000D18  2EE8               	decfsz	wreg,f,c
  5789  000D1A  D7FE               	bra	u3527
  5790  000D1C  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5791  000D1E  D7FC               	bra	u3527
  5792  000D20  F000               	nop	
  5793  000D22  4A14               	infsnz	servoRotate90@i,f,c
  5794  000D24  2A15               	incf	servoRotate90@i+1,f,c
  5795  000D26  D7A2               	goto	l3734
  5796  000D28                     l473:
  5797  000D28  0012               	return		;funcret
  5798  000D2A                     __end_of_servoRotate90:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           prodh	equ	0xFF4
  5802                           prodl	equ	0xFF3
  5803                           intcon	equ	0xFF2
  5804                           intcon3	equ	0xFF0
  5805                           postinc0	equ	0xFEE
  5806                           wreg	equ	0xFE8
  5807                           indf2	equ	0xFDF
  5808                           postinc2	equ	0xFDE
  5809                           postdec2	equ	0xFDD
  5810                           fsr2h	equ	0xFDA
  5811                           fsr2l	equ	0xFD9
  5812                           status	equ	0xFD8
  5813                           
  5814 ;; *************** function _servoRotate0 *****************
  5815 ;; Defined at:
  5816 ;;		line 83 in file "servos.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  servo           2   15[COMRAM] int 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  i               2   19[COMRAM] unsigned int 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;Total ram usage:        6 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    1
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_executingState
  5841 ;;		_debugState
  5842 ;;		_dispenseAlCan
  5843 ;;		_dispenseSnCan
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text34
  5848  000D2A                     __ptext34:
  5849                           	opt stack 0
  5850  000D2A                     _servoRotate0:
  5851                           	opt stack 28
  5852                           
  5853                           ;servos.c: 85: unsigned int i;
  5854                           ;servos.c: 86: for (i = 0; i < 30; i++) {
  5855                           
  5856                           ;incstack = 0
  5857  000D2A  0E00               	movlw	0
  5858  000D2C  6E15               	movwf	servoRotate0@i+1,c
  5859  000D2E  0E00               	movlw	0
  5860  000D30  6E14               	movwf	servoRotate0@i,c
  5861  000D32                     l3706:
  5862  000D32  5015               	movf	servoRotate0@i+1,w,c
  5863  000D34  E15C               	bnz	l454
  5864  000D36  0E1E               	movlw	30
  5865  000D38  5C14               	subwf	servoRotate0@i,w,c
  5866  000D3A  B0D8               	btfsc	status,0,c
  5867  000D3C  0012               	return	
  5868  000D3E  D00A               	goto	l3712
  5869  000D40                     l441:
  5870                           
  5871                           ;servos.c: 89: LATAbits.LATA4 = 1;
  5872  000D40  8889               	bsf	3977,4,c	;volatile
  5873                           
  5874                           ;servos.c: 90: break;
  5875  000D42  D020               	goto	l3714
  5876  000D44                     l443:
  5877                           
  5878                           ;servos.c: 92: LATAbits.LATA5 = 1;
  5879  000D44  8A89               	bsf	3977,5,c	;volatile
  5880                           
  5881                           ;servos.c: 93: break;
  5882  000D46  D01E               	goto	l3714
  5883  000D48                     l444:
  5884                           
  5885                           ;servos.c: 95: LATEbits.LATE0 = 1;
  5886  000D48  808D               	bsf	3981,0,c	;volatile
  5887                           
  5888                           ;servos.c: 96: break;
  5889  000D4A  D01C               	goto	l3714
  5890  000D4C                     l445:
  5891                           
  5892                           ;servos.c: 98: LATEbits.LATE1 = 1;
  5893  000D4C  828D               	bsf	3981,1,c	;volatile
  5894                           
  5895                           ;servos.c: 99: break;
  5896  000D4E  D01A               	goto	l3714
  5897  000D50                     l446:
  5898                           
  5899                           ;servos.c: 101: LATBbits.LATB2 = 1;
  5900  000D50  848A               	bsf	3978,2,c	;volatile
  5901                           
  5902                           ;servos.c: 103: }
  5903                           
  5904                           ;servos.c: 102: break;
  5905  000D52  D018               	goto	l3714
  5906  000D54                     l3712:
  5907  000D54  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  5908  000D58  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  5909                           
  5910                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5911                           ; Switch size 1, requested type "space"
  5912                           ; Number of cases is 1, Range of values is 0 to 0
  5913                           ; switch strategies available:
  5914                           ; Name         Instructions Cycles
  5915                           ; simple_byte            4     3 (average)
  5916                           ;	Chosen strategy is simple_byte
  5917  000D5C  5013               	movf	??_servoRotate0+1,w,c
  5918  000D5E  0A00               	xorlw	0	; case 0
  5919  000D60  A4D8               	btfss	status,2,c
  5920  000D62  D010               	goto	l3714
  5921                           
  5922                           ; Switch size 1, requested type "space"
  5923                           ; Number of cases is 5, Range of values is 0 to 4
  5924                           ; switch strategies available:
  5925                           ; Name         Instructions Cycles
  5926                           ; simple_byte           16     9 (average)
  5927                           ;	Chosen strategy is simple_byte
  5928  000D64  5012               	movf	??_servoRotate0,w,c
  5929  000D66  0A00               	xorlw	0	; case 0
  5930  000D68  B4D8               	btfsc	status,2,c
  5931  000D6A  D7EA               	goto	l441
  5932  000D6C  0A01               	xorlw	1	; case 1
  5933  000D6E  B4D8               	btfsc	status,2,c
  5934  000D70  D7E9               	goto	l443
  5935  000D72  0A03               	xorlw	3	; case 2
  5936  000D74  B4D8               	btfsc	status,2,c
  5937  000D76  D7E8               	goto	l444
  5938  000D78  0A01               	xorlw	1	; case 3
  5939  000D7A  B4D8               	btfsc	status,2,c
  5940  000D7C  D7E7               	goto	l445
  5941  000D7E  0A07               	xorlw	7	; case 4
  5942  000D80  B4D8               	btfsc	status,2,c
  5943  000D82  D7E6               	goto	l446
  5944  000D84                     l3714:
  5945                           
  5946                           ;servos.c: 104: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  5947  000D84  0E05               	movlw	5
  5948  000D86  6E12               	movwf	??_servoRotate0& (0+255),c
  5949  000D88  0EDE               	movlw	222
  5950  000D8A                     u3537:
  5951  000D8A  2EE8               	decfsz	wreg,f,c
  5952  000D8C  D7FE               	bra	u3537
  5953  000D8E  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  5954  000D90  D7FC               	bra	u3537
  5955                           
  5956                           ;servos.c: 105: switch (servo) {
  5957  000D92  D00A               	goto	l3718
  5958  000D94                     l448:
  5959                           
  5960                           ;servos.c: 107: LATAbits.LATA4 = 0;
  5961  000D94  9889               	bcf	3977,4,c	;volatile
  5962                           
  5963                           ;servos.c: 108: break;
  5964  000D96  D020               	goto	l3720
  5965  000D98                     l450:
  5966                           
  5967                           ;servos.c: 110: LATAbits.LATA5 = 0;
  5968  000D98  9A89               	bcf	3977,5,c	;volatile
  5969                           
  5970                           ;servos.c: 111: break;
  5971  000D9A  D01E               	goto	l3720
  5972  000D9C                     l451:
  5973                           
  5974                           ;servos.c: 113: LATEbits.LATE0 = 0;
  5975  000D9C  908D               	bcf	3981,0,c	;volatile
  5976                           
  5977                           ;servos.c: 114: break;
  5978  000D9E  D01C               	goto	l3720
  5979  000DA0                     l452:
  5980                           
  5981                           ;servos.c: 116: LATEbits.LATE1 = 0;
  5982  000DA0  928D               	bcf	3981,1,c	;volatile
  5983                           
  5984                           ;servos.c: 117: break;
  5985  000DA2  D01A               	goto	l3720
  5986  000DA4                     l453:
  5987                           
  5988                           ;servos.c: 119: LATBbits.LATB2 = 0;
  5989  000DA4  948A               	bcf	3978,2,c	;volatile
  5990                           
  5991                           ;servos.c: 121: }
  5992                           
  5993                           ;servos.c: 120: break;
  5994  000DA6  D018               	goto	l3720
  5995  000DA8                     l3718:
  5996  000DA8  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  5997  000DAC  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  5998                           
  5999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6000                           ; Switch size 1, requested type "space"
  6001                           ; Number of cases is 1, Range of values is 0 to 0
  6002                           ; switch strategies available:
  6003                           ; Name         Instructions Cycles
  6004                           ; simple_byte            4     3 (average)
  6005                           ;	Chosen strategy is simple_byte
  6006  000DB0  5013               	movf	??_servoRotate0+1,w,c
  6007  000DB2  0A00               	xorlw	0	; case 0
  6008  000DB4  A4D8               	btfss	status,2,c
  6009  000DB6  D010               	goto	l3720
  6010                           
  6011                           ; Switch size 1, requested type "space"
  6012                           ; Number of cases is 5, Range of values is 0 to 4
  6013                           ; switch strategies available:
  6014                           ; Name         Instructions Cycles
  6015                           ; simple_byte           16     9 (average)
  6016                           ;	Chosen strategy is simple_byte
  6017  000DB8  5012               	movf	??_servoRotate0,w,c
  6018  000DBA  0A00               	xorlw	0	; case 0
  6019  000DBC  B4D8               	btfsc	status,2,c
  6020  000DBE  D7EA               	goto	l448
  6021  000DC0  0A01               	xorlw	1	; case 1
  6022  000DC2  B4D8               	btfsc	status,2,c
  6023  000DC4  D7E9               	goto	l450
  6024  000DC6  0A03               	xorlw	3	; case 2
  6025  000DC8  B4D8               	btfsc	status,2,c
  6026  000DCA  D7E8               	goto	l451
  6027  000DCC  0A01               	xorlw	1	; case 3
  6028  000DCE  B4D8               	btfsc	status,2,c
  6029  000DD0  D7E7               	goto	l452
  6030  000DD2  0A07               	xorlw	7	; case 4
  6031  000DD4  B4D8               	btfsc	status,2,c
  6032  000DD6  D7E6               	goto	l453
  6033  000DD8                     l3720:
  6034                           
  6035                           ;servos.c: 122: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  6036  000DD8  0E3D               	movlw	61
  6037  000DDA  6E12               	movwf	??_servoRotate0& (0+255),c
  6038  000DDC  0E0F               	movlw	15
  6039  000DDE                     u3547:
  6040  000DDE  2EE8               	decfsz	wreg,f,c
  6041  000DE0  D7FE               	bra	u3547
  6042  000DE2  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  6043  000DE4  D7FC               	bra	u3547
  6044  000DE6  F000               	nop	
  6045  000DE8  4A14               	infsnz	servoRotate0@i,f,c
  6046  000DEA  2A15               	incf	servoRotate0@i+1,f,c
  6047  000DEC  D7A2               	goto	l3706
  6048  000DEE                     l454:
  6049  000DEE  0012               	return		;funcret
  6050  000DF0                     __end_of_servoRotate0:
  6051                           	opt stack 0
  6052                           tblptru	equ	0xFF8
  6053                           prodh	equ	0xFF4
  6054                           prodl	equ	0xFF3
  6055                           intcon	equ	0xFF2
  6056                           intcon3	equ	0xFF0
  6057                           postinc0	equ	0xFEE
  6058                           wreg	equ	0xFE8
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           postdec2	equ	0xFDD
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _printf *****************
  6067 ;; Defined at:
  6068 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  f               2   27[COMRAM] PTR const unsigned char 
  6071 ;;		 -> STR_16(15), STR_15(15), STR_14(15), STR_13(12), 
  6072 ;;		 -> STR_12(18), STR_11(6), STR_10(17), STR_9(17), 
  6073 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(17), 
  6074 ;;		 -> STR_4(19), STR_3(17), STR_2(15), STR_1(16), 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  idx             1   41[COMRAM] unsigned char 
  6077 ;;  tmpval          4    0        struct .
  6078 ;;  cp              3    0        PTR const unsigned char 
  6079 ;;  width           2   48[COMRAM] int 
  6080 ;;  val             2   45[COMRAM] unsigned int 
  6081 ;;  ap              2   42[COMRAM] PTR void [1]
  6082 ;;		 -> ?_printf(2), 
  6083 ;;  len             2    0        unsigned int 
  6084 ;;  c               1   50[COMRAM] char 
  6085 ;;  flag            1   47[COMRAM] unsigned char 
  6086 ;;  prec            1   44[COMRAM] char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  2   27[COMRAM] int 
  6089 ;; Registers used:
  6090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6096 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6099 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;Total ram usage:       24 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    3
  6103 ;; This function calls:
  6104 ;;		___lwdiv
  6105 ;;		___lwmod
  6106 ;;		___wmul
  6107 ;;		_isdigit
  6108 ;;		_putch
  6109 ;; This function is called by:
  6110 ;;		_update_lcd
  6111 ;;		_executingState
  6112 ;;		_debugState
  6113 ;;		_fixLCD
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text35
  6118  00052A                     __ptext35:
  6119                           	opt stack 0
  6120  00052A                     _printf:
  6121                           	opt stack 25
  6122                           
  6123                           ;doprnt.c: 466: va_list ap;
  6124                           ;doprnt.c: 499: signed char c;
  6125                           ;doprnt.c: 501: int width;
  6126                           ;doprnt.c: 506: signed char prec;
  6127                           ;doprnt.c: 508: unsigned char flag;
  6128                           ;doprnt.c: 523: union {
  6129                           ;doprnt.c: 524: unsigned long vd;
  6130                           ;doprnt.c: 525: double integ;
  6131                           ;doprnt.c: 526: } tmpval;
  6132                           ;doprnt.c: 528: unsigned int val;
  6133                           ;doprnt.c: 529: unsigned len;
  6134                           ;doprnt.c: 530: const char * cp;
  6135                           ;doprnt.c: 533: *ap = __va_start();
  6136                           
  6137                           ;incstack = 0
  6138  00052A  0E1E               	movlw	low (?_printf+2)
  6139  00052C  6E2B               	movwf	printf@ap,c
  6140  00052E  0E00               	movlw	high (?_printf+2)
  6141  000530  6E2C               	movwf	printf@ap+1,c
  6142                           
  6143                           ;doprnt.c: 536: while(c = *f++) {
  6144  000532  D174               	goto	l3684
  6145  000534                     l3558:
  6146                           
  6147                           ;doprnt.c: 538: if(c != '%')
  6148  000534  0E25               	movlw	37
  6149  000536  1833               	xorwf	printf@c,w,c
  6150  000538  B4D8               	btfsc	status,2,c
  6151  00053A  D004               	goto	l3562
  6152                           
  6153                           ;doprnt.c: 540: {
  6154                           ;doprnt.c: 541: (putch(c) );
  6155  00053C  5033               	movf	printf@c,w,c
  6156  00053E  EC43  F00B         	call	_putch
  6157                           
  6158                           ;doprnt.c: 542: continue;
  6159  000542  D16C               	goto	l3684
  6160  000544                     l3562:
  6161                           
  6162                           ;doprnt.c: 543: }
  6163                           ;doprnt.c: 546: width = 0;
  6164  000544  0E00               	movlw	0
  6165  000546  6E32               	movwf	printf@width+1,c
  6166  000548  0E00               	movlw	0
  6167  00054A  6E31               	movwf	printf@width,c
  6168                           
  6169                           ;doprnt.c: 548: flag = 0;
  6170  00054C  0E00               	movlw	0
  6171  00054E  6E30               	movwf	printf@flag,c
  6172                           
  6173                           ;doprnt.c: 551: switch(*f) {
  6174                           
  6175                           ;doprnt.c: 550: for(;;) {
  6176  000550  D003               	goto	l3568
  6177  000552                     l3564:
  6178                           
  6179                           ;doprnt.c: 580: flag |= 0x04;
  6180  000552  8430               	bsf	printf@flag,2,c
  6181                           
  6182                           ;doprnt.c: 581: f++;
  6183  000554  4A1C               	infsnz	printf@f,f,c
  6184  000556  2A1D               	incf	printf@f+1,f,c
  6185  000558                     l3568:
  6186  000558  C01C  FFF6         	movff	printf@f,tblptrl
  6187  00055C  C01D  FFF7         	movff	printf@f+1,tblptrh
  6188  000560                     	if	0	;tblptru may be non-zero
  6189  000560                     	endif
  6190  000560                     	if	0	;tblptru may be non-zero
  6191  000560                     	endif
  6192  000560  0008               	tblrd		*
  6193  000562  50F5               	movf	tablat,w,c
  6194                           
  6195                           ; Switch size 1, requested type "space"
  6196                           ; Number of cases is 1, Range of values is 48 to 48
  6197                           ; switch strategies available:
  6198                           ; Name         Instructions Cycles
  6199                           ; simple_byte            4     3 (average)
  6200                           ;	Chosen strategy is simple_byte
  6201  000564  0A30               	xorlw	48	; case 48
  6202  000566  B4D8               	btfsc	status,2,c
  6203  000568  D7F4               	goto	l3564
  6204                           
  6205                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6206                           
  6207                           ;doprnt.c: 586: }
  6208                           
  6209                           ;doprnt.c: 585: break;
  6210  00056A  C01C  FFF6         	movff	printf@f,tblptrl
  6211  00056E  C01D  FFF7         	movff	printf@f+1,tblptrh
  6212  000572                     	if	0	;tblptru may be non-zero
  6213  000572                     	endif
  6214  000572                     	if	0	;tblptru may be non-zero
  6215  000572                     	endif
  6216  000572  0008               	tblrd		*
  6217  000574  50F5               	movf	tablat,w,c
  6218  000576  ECD1  F00A         	call	_isdigit
  6219  00057A  A0D8               	btfss	status,0,c
  6220  00057C  D035               	goto	l3586
  6221                           
  6222                           ;doprnt.c: 598: width = 0;
  6223  00057E  0E00               	movlw	0
  6224  000580  6E32               	movwf	printf@width+1,c
  6225  000582  0E00               	movlw	0
  6226  000584  6E31               	movwf	printf@width,c
  6227  000586                     l3574:
  6228                           
  6229                           ;doprnt.c: 600: width *= 10;
  6230  000586  C031  F010         	movff	printf@width,___wmul@multiplier
  6231  00058A  C032  F011         	movff	printf@width+1,___wmul@multiplier+1
  6232  00058E  0E00               	movlw	0
  6233  000590  6E13               	movwf	___wmul@multiplicand+1,c
  6234  000592  0E0A               	movlw	10
  6235  000594  6E12               	movwf	___wmul@multiplicand,c
  6236  000596  ECBE  F00A         	call	___wmul	;wreg free
  6237  00059A  C010  F031         	movff	?___wmul,printf@width
  6238  00059E  C011  F032         	movff	?___wmul+1,printf@width+1
  6239                           
  6240                           ;doprnt.c: 601: width += *f++ - '0';
  6241  0005A2  0ED0               	movlw	208
  6242  0005A4  6E26               	movwf	??_printf& (0+255),c
  6243  0005A6  0EFF               	movlw	255
  6244  0005A8  6E27               	movwf	(??_printf+1)& (0+255),c
  6245  0005AA  C01C  FFF6         	movff	printf@f,tblptrl
  6246  0005AE  C01D  FFF7         	movff	printf@f+1,tblptrh
  6247  0005B2                     	if	0	;tblptru may be non-zero
  6248  0005B2                     	endif
  6249  0005B2                     	if	0	;tblptru may be non-zero
  6250  0005B2                     	endif
  6251  0005B2  0008               	tblrd		*
  6252  0005B4  50F5               	movf	tablat,w,c
  6253  0005B6  6E28               	movwf	(??_printf+2)& (0+255),c
  6254  0005B8  6A29               	clrf	(??_printf+3)& (0+255),c
  6255  0005BA  5026               	movf	??_printf,w,c
  6256  0005BC  2628               	addwf	??_printf+2,f,c
  6257  0005BE  5027               	movf	??_printf+1,w,c
  6258  0005C0  2229               	addwfc	??_printf+3,f,c
  6259  0005C2  5028               	movf	??_printf+2,w,c
  6260  0005C4  2631               	addwf	printf@width,f,c
  6261  0005C6  5029               	movf	??_printf+3,w,c
  6262  0005C8  2232               	addwfc	printf@width+1,f,c
  6263  0005CA  4A1C               	infsnz	printf@f,f,c
  6264  0005CC  2A1D               	incf	printf@f+1,f,c
  6265                           
  6266                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6267  0005CE  C01C  FFF6         	movff	printf@f,tblptrl
  6268  0005D2  C01D  FFF7         	movff	printf@f+1,tblptrh
  6269  0005D6                     	if	0	;tblptru may be non-zero
  6270  0005D6                     	endif
  6271  0005D6                     	if	0	;tblptru may be non-zero
  6272  0005D6                     	endif
  6273  0005D6  0008               	tblrd		*
  6274  0005D8  50F5               	movf	tablat,w,c
  6275  0005DA  ECD1  F00A         	call	_isdigit
  6276  0005DE  A0D8               	btfss	status,0,c
  6277  0005E0  D003               	goto	l3586
  6278  0005E2  D7D1               	goto	l3574
  6279  0005E4                     l3582:
  6280                           
  6281                           ;doprnt.c: 721: flag |= 0x80;
  6282  0005E4  8E30               	bsf	printf@flag,7,c
  6283                           
  6284                           ;doprnt.c: 723: break;
  6285  0005E6  D017               	goto	l546
  6286  0005E8                     l3586:
  6287  0005E8  C01C  FFF6         	movff	printf@f,tblptrl
  6288  0005EC  C01D  FFF7         	movff	printf@f+1,tblptrh
  6289  0005F0  4A1C               	infsnz	printf@f,f,c
  6290  0005F2  2A1D               	incf	printf@f+1,f,c
  6291  0005F4                     	if	0	;tblptru may be non-zero
  6292  0005F4                     	endif
  6293  0005F4                     	if	0	;tblptru may be non-zero
  6294  0005F4                     	endif
  6295  0005F4  0008               	tblrd		*
  6296  0005F6  CFF5 F033          	movff	tablat,printf@c
  6297  0005FA  5033               	movf	printf@c,w,c
  6298                           
  6299                           ; Switch size 1, requested type "space"
  6300                           ; Number of cases is 4, Range of values is 0 to 120
  6301                           ; switch strategies available:
  6302                           ; Name         Instructions Cycles
  6303                           ; simple_byte           13     7 (average)
  6304                           ;	Chosen strategy is simple_byte
  6305  0005FC  0A00               	xorlw	0	; case 0
  6306  0005FE  B4D8               	btfsc	status,2,c
  6307  000600  0012               	return	
  6308  000602  0A64               	xorlw	100	; case 100
  6309  000604  B4D8               	btfsc	status,2,c
  6310  000606  D007               	goto	l546
  6311  000608  0A0D               	xorlw	13	; case 105
  6312  00060A  B4D8               	btfsc	status,2,c
  6313  00060C  D004               	goto	l546
  6314  00060E  0A11               	xorlw	17	; case 120
  6315  000610  B4D8               	btfsc	status,2,c
  6316  000612  D7E8               	goto	l3582
  6317  000614  D103               	goto	l3684
  6318  000616                     l546:
  6319                           
  6320                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6321  000616  BE30               	btfsc	printf@flag,7,c
  6322  000618  D015               	goto	l3598
  6323                           
  6324                           ;doprnt.c: 1253: {
  6325                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6326  00061A  C02B  FFD9         	movff	printf@ap,fsr2l
  6327  00061E  C02C  FFDA         	movff	printf@ap+1,fsr2h
  6328  000622  CFDE F02E          	movff	postinc2,printf@val
  6329  000626  CFDD F02F          	movff	postdec2,printf@val+1
  6330  00062A  0E02               	movlw	2
  6331  00062C  262B               	addwf	printf@ap,f,c
  6332  00062E  0E00               	movlw	0
  6333  000630  222C               	addwfc	printf@ap+1,f,c
  6334                           
  6335                           ;doprnt.c: 1261: if((int)val < 0) {
  6336  000632  AE2F               	btfss	printf@val+1,7,c
  6337  000634  D044               	goto	l3632
  6338                           
  6339                           ;doprnt.c: 1262: flag |= 0x03;
  6340  000636  0E03               	movlw	3
  6341  000638  1230               	iorwf	printf@flag,f,c
  6342                           
  6343                           ;doprnt.c: 1263: val = -val;
  6344  00063A  6C2E               	negf	printf@val,c
  6345  00063C  1E2F               	comf	printf@val+1,f,c
  6346  00063E  B0D8               	btfsc	status,0,c
  6347  000640  2A2F               	incf	printf@val+1,f,c
  6348                           
  6349                           ;doprnt.c: 1264: }
  6350                           ;doprnt.c: 1266: }
  6351  000642  D03D               	goto	l3632
  6352  000644                     l3598:
  6353                           
  6354                           ;doprnt.c: 1268: else
  6355                           ;doprnt.c: 1273: {
  6356                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6357  000644  C02B  FFD9         	movff	printf@ap,fsr2l
  6358  000648  C02C  FFDA         	movff	printf@ap+1,fsr2h
  6359  00064C  CFDE F02E          	movff	postinc2,printf@val
  6360  000650  CFDD F02F          	movff	postdec2,printf@val+1
  6361  000654  0E02               	movlw	2
  6362  000656  262B               	addwf	printf@ap,f,c
  6363  000658  0E00               	movlw	0
  6364  00065A  222C               	addwfc	printf@ap+1,f,c
  6365                           
  6366                           ;doprnt.c: 1287: }
  6367                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6368  00065C  D030               	goto	l3632
  6369  00065E                     l3602:
  6370                           
  6371                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6372  00065E  0E01               	movlw	1
  6373  000660  6E33               	movwf	printf@c,c
  6374  000662                     l3604:
  6375  000662  0E05               	movlw	5
  6376  000664  1833               	xorwf	printf@c,w,c
  6377  000666  B4D8               	btfsc	status,2,c
  6378  000668  D032               	goto	l3634
  6379                           
  6380                           ;doprnt.c: 1306: if(val < dpowers[c])
  6381  00066A  5033               	movf	printf@c,w,c
  6382  00066C  0D02               	mullw	2
  6383  00066E  0EF8               	movlw	low _dpowers
  6384  000670  24F3               	addwf	prodl,w,c
  6385  000672  6EF6               	movwf	tblptrl,c
  6386  000674  0EFE               	movlw	high _dpowers
  6387  000676  20F4               	addwfc	prodh,w,c
  6388  000678  6EF7               	movwf	tblptrh,c
  6389  00067A                     	if	0	;There are less than 3 active tblptr bytes
  6390  00067A                     	endif
  6391  00067A  0009               	tblrd		*+
  6392  00067C  50F5               	movf	tablat,w,c
  6393  00067E  5C2E               	subwf	printf@val,w,c
  6394  000680  0009               	tblrd		*+
  6395  000682  50F5               	movf	tablat,w,c
  6396  000684  582F               	subwfb	printf@val+1,w,c
  6397  000686  A0D8               	btfss	status,0,c
  6398  000688  D022               	goto	l3634
  6399                           
  6400                           ;doprnt.c: 1307: break;
  6401  00068A  2A33               	incf	printf@c,f,c
  6402  00068C  D7EA               	goto	l3604
  6403  00068E                     l3616:
  6404                           
  6405                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6406  00068E  0E01               	movlw	1
  6407  000690  6E33               	movwf	printf@c,c
  6408  000692                     l3618:
  6409  000692  0E04               	movlw	4
  6410  000694  1833               	xorwf	printf@c,w,c
  6411  000696  B4D8               	btfsc	status,2,c
  6412  000698  D01A               	goto	l3634
  6413                           
  6414                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6415  00069A  5033               	movf	printf@c,w,c
  6416  00069C  0D02               	mullw	2
  6417  00069E  0E02               	movlw	low _hexpowers
  6418  0006A0  24F3               	addwf	prodl,w,c
  6419  0006A2  6EF6               	movwf	tblptrl,c
  6420  0006A4  0EFF               	movlw	high _hexpowers
  6421  0006A6  20F4               	addwfc	prodh,w,c
  6422  0006A8  6EF7               	movwf	tblptrh,c
  6423  0006AA                     	if	0	;There are less than 3 active tblptr bytes
  6424  0006AA                     	endif
  6425  0006AA  0009               	tblrd		*+
  6426  0006AC  50F5               	movf	tablat,w,c
  6427  0006AE  5C2E               	subwf	printf@val,w,c
  6428  0006B0  0009               	tblrd		*+
  6429  0006B2  50F5               	movf	tablat,w,c
  6430  0006B4  582F               	subwfb	printf@val+1,w,c
  6431  0006B6  A0D8               	btfss	status,0,c
  6432  0006B8  D00A               	goto	l3634
  6433                           
  6434                           ;doprnt.c: 1318: break;
  6435  0006BA  2A33               	incf	printf@c,f,c
  6436  0006BC  D7EA               	goto	l3618
  6437  0006BE                     l3632:
  6438  0006BE  5030               	movf	printf@flag,w,c
  6439  0006C0  0B80               	andlw	128
  6440                           
  6441                           ; Switch size 1, requested type "space"
  6442                           ; Number of cases is 2, Range of values is 0 to 128
  6443                           ; switch strategies available:
  6444                           ; Name         Instructions Cycles
  6445                           ; simple_byte            7     4 (average)
  6446                           ;	Chosen strategy is simple_byte
  6447  0006C2  0A00               	xorlw	0	; case 0
  6448  0006C4  B4D8               	btfsc	status,2,c
  6449  0006C6  D7CB               	goto	l3602
  6450  0006C8  0A80               	xorlw	128	; case 128
  6451  0006CA  B4D8               	btfsc	status,2,c
  6452  0006CC  D7E0               	goto	l3616
  6453  0006CE                     l3634:
  6454                           
  6455                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6456  0006CE  5031               	movf	printf@width,w,c
  6457  0006D0  1032               	iorwf	printf@width+1,w,c
  6458  0006D2  B4D8               	btfsc	status,2,c
  6459  0006D4  D009               	goto	l3640
  6460  0006D6  C030  F026         	movff	printf@flag,??_printf
  6461  0006DA  0E03               	movlw	3
  6462  0006DC  1626               	andwf	??_printf,f,c
  6463  0006DE  B4D8               	btfsc	status,2,c
  6464  0006E0  D003               	goto	l3640
  6465                           
  6466                           ;doprnt.c: 1346: width--;
  6467  0006E2  0631               	decf	printf@width,f,c
  6468  0006E4  A0D8               	btfss	status,0,c
  6469  0006E6  0632               	decf	printf@width+1,f,c
  6470  0006E8                     l3640:
  6471                           
  6472                           ;doprnt.c: 1381: if(width > c)
  6473  0006E8  0E80               	movlw	128
  6474  0006EA  BE33               	btfsc	printf@c,7,c
  6475  0006EC  0E7F               	movlw	127
  6476  0006EE  6E26               	movwf	??_printf& (0+255),c
  6477  0006F0  5031               	movf	printf@width,w,c
  6478  0006F2  5C33               	subwf	printf@c,w,c
  6479  0006F4  5032               	movf	printf@width+1,w,c
  6480  0006F6  0A80               	xorlw	128
  6481  0006F8  5826               	subwfb	??_printf& (0+255),w,c
  6482  0006FA  B0D8               	btfsc	status,0,c
  6483  0006FC  D007               	goto	l3644
  6484                           
  6485                           ;doprnt.c: 1382: width -= c;
  6486  0006FE  5033               	movf	printf@c,w,c
  6487  000700  5E31               	subwf	printf@width,f,c
  6488  000702  0E00               	movlw	0
  6489  000704  BE33               	btfsc	printf@c,7,c
  6490  000706  0EFF               	movlw	255
  6491  000708  5A32               	subwfb	printf@width+1,f,c
  6492  00070A  D004               	goto	l3646
  6493  00070C                     l3644:
  6494                           
  6495                           ;doprnt.c: 1383: else
  6496                           ;doprnt.c: 1384: width = 0;
  6497  00070C  0E00               	movlw	0
  6498  00070E  6E32               	movwf	printf@width+1,c
  6499  000710  0E00               	movlw	0
  6500  000712  6E31               	movwf	printf@width,c
  6501  000714                     l3646:
  6502                           
  6503                           ;doprnt.c: 1387: if(flag & 0x04) {
  6504  000714  A430               	btfss	printf@flag,2,c
  6505  000716  D014               	goto	l3658
  6506                           
  6507                           ;doprnt.c: 1392: if(flag & 0x03)
  6508  000718  C030  F026         	movff	printf@flag,??_printf
  6509  00071C  0E03               	movlw	3
  6510  00071E  1626               	andwf	??_printf,f,c
  6511  000720  B4D8               	btfsc	status,2,c
  6512  000722  D003               	goto	l3652
  6513                           
  6514                           ;doprnt.c: 1393: (putch('-') );
  6515  000724  0E2D               	movlw	45
  6516  000726  EC43  F00B         	call	_putch
  6517  00072A                     l3652:
  6518                           
  6519                           ;doprnt.c: 1415: if(width)
  6520  00072A  5031               	movf	printf@width,w,c
  6521  00072C  1032               	iorwf	printf@width+1,w,c
  6522  00072E  B4D8               	btfsc	status,2,c
  6523  000730  D01E               	goto	l3668
  6524                           
  6525                           ;doprnt.c: 1417: (putch('0') );
  6526                           
  6527                           ;doprnt.c: 1416: do
  6528  000732  0E30               	movlw	48
  6529  000734  EC43  F00B         	call	_putch
  6530                           
  6531                           ;doprnt.c: 1418: while(--width);
  6532  000738  0631               	decf	printf@width,f,c
  6533  00073A  A0D8               	btfss	status,0,c
  6534  00073C  0632               	decf	printf@width+1,f,c
  6535  00073E  D7F5               	goto	l3652
  6536  000740                     l3658:
  6537                           
  6538                           ;doprnt.c: 1422: {
  6539                           ;doprnt.c: 1424: if(width
  6540                           ;doprnt.c: 1428: )
  6541  000740  5031               	movf	printf@width,w,c
  6542  000742  1032               	iorwf	printf@width+1,w,c
  6543  000744  B4D8               	btfsc	status,2,c
  6544  000746  D00A               	goto	l3664
  6545  000748                     l3660:
  6546                           
  6547                           ;doprnt.c: 1430: (putch(' ') );
  6548  000748  0E20               	movlw	32
  6549  00074A  EC43  F00B         	call	_putch
  6550                           
  6551                           ;doprnt.c: 1431: while(--width);
  6552  00074E  0631               	decf	printf@width,f,c
  6553  000750  A0D8               	btfss	status,0,c
  6554  000752  0632               	decf	printf@width+1,f,c
  6555  000754  5031               	movf	printf@width,w,c
  6556  000756  1032               	iorwf	printf@width+1,w,c
  6557  000758  A4D8               	btfss	status,2,c
  6558  00075A  D7F6               	goto	l3660
  6559  00075C                     l3664:
  6560                           
  6561                           ;doprnt.c: 1438: if(flag & 0x03)
  6562  00075C  C030  F026         	movff	printf@flag,??_printf
  6563  000760  0E03               	movlw	3
  6564  000762  1626               	andwf	??_printf,f,c
  6565  000764  B4D8               	btfsc	status,2,c
  6566  000766  D003               	goto	l3668
  6567                           
  6568                           ;doprnt.c: 1439: (putch('-') );
  6569  000768  0E2D               	movlw	45
  6570  00076A  EC43  F00B         	call	_putch
  6571  00076E                     l3668:
  6572                           
  6573                           ;doprnt.c: 1469: }
  6574                           ;doprnt.c: 1472: prec = c;
  6575  00076E  C033  F02D         	movff	printf@c,printf@prec
  6576                           
  6577                           ;doprnt.c: 1474: while(prec--) {
  6578  000772  D050               	goto	l3682
  6579  000774                     l3670:
  6580                           
  6581                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6582  000774  502D               	movf	printf@prec,w,c
  6583  000776  0D02               	mullw	2
  6584  000778  0EF8               	movlw	low _dpowers
  6585  00077A  24F3               	addwf	prodl,w,c
  6586  00077C  6EF6               	movwf	tblptrl,c
  6587  00077E  0EFE               	movlw	high _dpowers
  6588  000780  20F4               	addwfc	prodh,w,c
  6589  000782  6EF7               	movwf	tblptrh,c
  6590  000784                     	if	0	;There are less than 3 active tblptr bytes
  6591  000784                     	endif
  6592  000784  0009               	tblrd		*+
  6593  000786  CFF5 F012          	movff	tablat,___lwdiv@divisor
  6594  00078A  000A               	tblrd		*-
  6595  00078C  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  6596  000790  C02E  F010         	movff	printf@val,___lwdiv@dividend
  6597  000794  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  6598  000798  EC0E  F009         	call	___lwdiv	;wreg free
  6599  00079C  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  6600  0007A0  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  6601  0007A4  0E00               	movlw	0
  6602  0007A6  6E1A               	movwf	___lwmod@divisor+1,c
  6603  0007A8  0E0A               	movlw	10
  6604  0007AA  6E19               	movwf	___lwmod@divisor,c
  6605  0007AC  EC17  F00A         	call	___lwmod	;wreg free
  6606  0007B0  5017               	movf	?___lwmod,w,c
  6607  0007B2  0F30               	addlw	48
  6608  0007B4  6E33               	movwf	printf@c,c
  6609                           
  6610                           ;doprnt.c: 1491: break;
  6611  0007B6  D02B               	goto	l3680
  6612  0007B8                     l3672:
  6613                           
  6614                           ;doprnt.c: 1499: {
  6615                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6616  0007B8  C02E  F010         	movff	printf@val,___lwdiv@dividend
  6617  0007BC  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  6618  0007C0  502D               	movf	printf@prec,w,c
  6619  0007C2  0D02               	mullw	2
  6620  0007C4  0E02               	movlw	low _hexpowers
  6621  0007C6  24F3               	addwf	prodl,w,c
  6622  0007C8  6EF6               	movwf	tblptrl,c
  6623  0007CA  0EFF               	movlw	high _hexpowers
  6624  0007CC  20F4               	addwfc	prodh,w,c
  6625  0007CE  6EF7               	movwf	tblptrh,c
  6626  0007D0                     	if	0	;There are less than 3 active tblptr bytes
  6627  0007D0                     	endif
  6628  0007D0  0009               	tblrd		*+
  6629  0007D2  CFF5 F012          	movff	tablat,___lwdiv@divisor
  6630  0007D6  000A               	tblrd		*-
  6631  0007D8  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  6632  0007DC  EC0E  F009         	call	___lwdiv	;wreg free
  6633  0007E0  5010               	movf	?___lwdiv,w,c
  6634  0007E2  0B0F               	andlw	15
  6635  0007E4  6E2A               	movwf	printf@idx,c
  6636                           
  6637                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6638  0007E6  502A               	movf	printf@idx,w,c
  6639  0007E8  0D01               	mullw	1
  6640  0007EA  0E48               	movlw	low STR_17
  6641  0007EC  24F3               	addwf	prodl,w,c
  6642  0007EE  6EF6               	movwf	tblptrl,c
  6643  0007F0  0EFF               	movlw	high STR_17
  6644  0007F2  20F4               	addwfc	prodh,w,c
  6645  0007F4  6EF7               	movwf	tblptrh,c
  6646  0007F6                     	if	0	;There are less than 3 active tblptr bytes
  6647  0007F6                     	endif
  6648  0007F6  0008               	tblrd		*
  6649  0007F8  CFF5 F033          	movff	tablat,printf@c
  6650                           
  6651                           ;doprnt.c: 1523: }
  6652                           
  6653                           ;doprnt.c: 1508: }
  6654                           ;doprnt.c: 1510: break;
  6655  0007FC  D008               	goto	l3680
  6656  0007FE                     l3678:
  6657  0007FE  5030               	movf	printf@flag,w,c
  6658  000800  0B80               	andlw	128
  6659                           
  6660                           ; Switch size 1, requested type "space"
  6661                           ; Number of cases is 2, Range of values is 0 to 128
  6662                           ; switch strategies available:
  6663                           ; Name         Instructions Cycles
  6664                           ; simple_byte            7     4 (average)
  6665                           ;	Chosen strategy is simple_byte
  6666  000802  0A00               	xorlw	0	; case 0
  6667  000804  B4D8               	btfsc	status,2,c
  6668  000806  D7B6               	goto	l3670
  6669  000808  0A80               	xorlw	128	; case 128
  6670  00080A  B4D8               	btfsc	status,2,c
  6671  00080C  D7D5               	goto	l3672
  6672  00080E                     l3680:
  6673                           
  6674                           ;doprnt.c: 1524: (putch(c) );
  6675  00080E  5033               	movf	printf@c,w,c
  6676  000810  EC43  F00B         	call	_putch
  6677  000814                     l3682:
  6678  000814  062D               	decf	printf@prec,f,c
  6679  000816  282D               	incf	printf@prec,w,c
  6680  000818  A4D8               	btfss	status,2,c
  6681  00081A  D7F1               	goto	l3678
  6682  00081C                     l3684:
  6683  00081C  C01C  FFF6         	movff	printf@f,tblptrl
  6684  000820  C01D  FFF7         	movff	printf@f+1,tblptrh
  6685  000824  4A1C               	infsnz	printf@f,f,c
  6686  000826  2A1D               	incf	printf@f+1,f,c
  6687  000828                     	if	0	;tblptru may be non-zero
  6688  000828                     	endif
  6689  000828                     	if	0	;tblptru may be non-zero
  6690  000828                     	endif
  6691  000828  0008               	tblrd		*
  6692  00082A  CFF5 F033          	movff	tablat,printf@c
  6693  00082E  5033               	movf	printf@c,w,c
  6694  000830  B4D8               	btfsc	status,2,c
  6695  000832  0012               	return	
  6696  000834  D67F               	goto	l3558
  6697  000836                     __end_of_printf:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon3	equ	0xFF0
  6707                           postinc0	equ	0xFEE
  6708                           wreg	equ	0xFE8
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           fsr2h	equ	0xFDA
  6713                           fsr2l	equ	0xFD9
  6714                           status	equ	0xFD8
  6715                           
  6716 ;; *************** function _putch *****************
  6717 ;; Defined at:
  6718 ;;		line 31 in file "lcd.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  data            1    wreg     unsigned char 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  data            1   17[COMRAM] unsigned char 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  1    wreg      void 
  6725 ;; Registers used:
  6726 ;;		wreg, status,2, status,0, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;Total ram usage:        1 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    2
  6739 ;; This function calls:
  6740 ;;		_lcdNibble
  6741 ;; This function is called by:
  6742 ;;		_printf
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text36
  6747  001686                     __ptext36:
  6748                           	opt stack 0
  6749  001686                     _putch:
  6750                           	opt stack 25
  6751                           
  6752                           ;incstack = 0
  6753                           ;putch@data stored from wreg
  6754  001686  6E12               	movwf	putch@data,c
  6755                           
  6756                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6757  001688  848C               	bsf	3980,2,c	;volatile
  6758                           
  6759                           ;lcd.c: 33: lcdNibble(data);
  6760  00168A  5012               	movf	putch@data,w,c
  6761  00168C  ECE3  F008         	call	_lcdNibble
  6762  001690  0012               	return		;funcret
  6763  001692                     __end_of_putch:
  6764                           	opt stack 0
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           intcon	equ	0xFF2
  6772                           intcon3	equ	0xFF0
  6773                           postinc0	equ	0xFEE
  6774                           wreg	equ	0xFE8
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function _isdigit *****************
  6783 ;; Defined at:
  6784 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  c               1    wreg     unsigned char 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  c               1   17[COMRAM] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;Total ram usage:        3 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    1
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_printf
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text37
  6813  0015A2                     __ptext37:
  6814                           	opt stack 0
  6815  0015A2                     _isdigit:
  6816                           	opt stack 26
  6817                           
  6818                           ;incstack = 0
  6819                           ;isdigit@c stored from wreg
  6820  0015A2  6E12               	movwf	isdigit@c,c
  6821  0015A4  0E00               	movlw	0
  6822  0015A6  6E11               	movwf	_isdigit$1329,c
  6823  0015A8  0E3A               	movlw	58
  6824  0015AA  6012               	cpfslt	isdigit@c,c
  6825  0015AC  D005               	goto	l3504
  6826  0015AE  0E2F               	movlw	47
  6827  0015B0  6412               	cpfsgt	isdigit@c,c
  6828  0015B2  D002               	goto	l3504
  6829  0015B4  0E01               	movlw	1
  6830  0015B6  6E11               	movwf	_isdigit$1329,c
  6831  0015B8                     l3504:
  6832  0015B8  C011  F010         	movff	_isdigit$1329,??_isdigit
  6833  0015BC  3010               	rrcf	??_isdigit,w,c
  6834  0015BE  0012               	return	
  6835  0015C0                     __end_of_isdigit:
  6836                           	opt stack 0
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon	equ	0xFF2
  6844                           intcon3	equ	0xFF0
  6845                           postinc0	equ	0xFEE
  6846                           wreg	equ	0xFE8
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function ___wmul *****************
  6855 ;; Defined at:
  6856 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  multiplier      2   15[COMRAM] unsigned int 
  6859 ;;  multiplicand    2   17[COMRAM] unsigned int 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  product         2   19[COMRAM] unsigned int 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  2   15[COMRAM] unsigned int 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0, prodl, prodh
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6871 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;Total ram usage:        6 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    1
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_get_timeDif
  6882 ;;		_executingState
  6883 ;;		_printf
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text38
  6888  00157C                     __ptext38:
  6889                           	opt stack 0
  6890  00157C                     ___wmul:
  6891                           	opt stack 26
  6892                           
  6893                           ;incstack = 0
  6894  00157C  5010               	movf	___wmul@multiplier,w,c
  6895  00157E  0212               	mulwf	___wmul@multiplicand,c
  6896  001580  CFF3 F014          	movff	prodl,___wmul@product
  6897  001584  CFF4 F015          	movff	prodh,___wmul@product+1
  6898  001588  5010               	movf	___wmul@multiplier,w,c
  6899  00158A  0213               	mulwf	___wmul@multiplicand+1,c
  6900  00158C  50F3               	movf	prodl,w,c
  6901  00158E  2615               	addwf	___wmul@product+1,f,c
  6902  001590  5011               	movf	___wmul@multiplier+1,w,c
  6903  001592  0212               	mulwf	___wmul@multiplicand,c
  6904  001594  50F3               	movf	prodl,w,c
  6905  001596  2615               	addwf	___wmul@product+1,f,c
  6906  001598  C014  F010         	movff	___wmul@product,?___wmul
  6907  00159C  C015  F011         	movff	___wmul@product+1,?___wmul+1
  6908  0015A0  0012               	return	
  6909  0015A2                     __end_of___wmul:
  6910                           	opt stack 0
  6911                           tblptru	equ	0xFF8
  6912                           tblptrh	equ	0xFF7
  6913                           tblptrl	equ	0xFF6
  6914                           tablat	equ	0xFF5
  6915                           prodh	equ	0xFF4
  6916                           prodl	equ	0xFF3
  6917                           intcon	equ	0xFF2
  6918                           intcon3	equ	0xFF0
  6919                           postinc0	equ	0xFEE
  6920                           wreg	equ	0xFE8
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function ___lwmod *****************
  6929 ;; Defined at:
  6930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;  dividend        2   22[COMRAM] unsigned int 
  6933 ;;  divisor         2   24[COMRAM] unsigned int 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  counter         1   26[COMRAM] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  2   22[COMRAM] unsigned int 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;Total ram usage:        5 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    1
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_printf
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text39
  6960  00142E                     __ptext39:
  6961                           	opt stack 0
  6962  00142E                     ___lwmod:
  6963                           	opt stack 26
  6964                           
  6965                           ;incstack = 0
  6966  00142E  5019               	movf	___lwmod@divisor,w,c
  6967  001430  101A               	iorwf	___lwmod@divisor+1,w,c
  6968  001432  B4D8               	btfsc	status,2,c
  6969  001434  D018               	goto	l1001
  6970  001436  0E01               	movlw	1
  6971  001438  6E1B               	movwf	___lwmod@counter,c
  6972  00143A  D004               	goto	l3542
  6973  00143C                     l3540:
  6974  00143C  90D8               	bcf	status,0,c
  6975  00143E  3619               	rlcf	___lwmod@divisor,f,c
  6976  001440  361A               	rlcf	___lwmod@divisor+1,f,c
  6977  001442  2A1B               	incf	___lwmod@counter,f,c
  6978  001444                     l3542:
  6979  001444  AE1A               	btfss	___lwmod@divisor+1,7,c
  6980  001446  D7FA               	goto	l3540
  6981  001448                     l3544:
  6982  001448  5019               	movf	___lwmod@divisor,w,c
  6983  00144A  5C17               	subwf	___lwmod@dividend,w,c
  6984  00144C  501A               	movf	___lwmod@divisor+1,w,c
  6985  00144E  5818               	subwfb	___lwmod@dividend+1,w,c
  6986  001450  A0D8               	btfss	status,0,c
  6987  001452  D004               	goto	l3548
  6988  001454  5019               	movf	___lwmod@divisor,w,c
  6989  001456  5E17               	subwf	___lwmod@dividend,f,c
  6990  001458  501A               	movf	___lwmod@divisor+1,w,c
  6991  00145A  5A18               	subwfb	___lwmod@dividend+1,f,c
  6992  00145C                     l3548:
  6993  00145C  90D8               	bcf	status,0,c
  6994  00145E  321A               	rrcf	___lwmod@divisor+1,f,c
  6995  001460  3219               	rrcf	___lwmod@divisor,f,c
  6996  001462  2E1B               	decfsz	___lwmod@counter,f,c
  6997  001464  D7F1               	goto	l3544
  6998  001466                     l1001:
  6999  001466  C017  F017         	movff	___lwmod@dividend,?___lwmod
  7000  00146A  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  7001  00146E  0012               	return		;funcret
  7002  001470                     __end_of___lwmod:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon	equ	0xFF2
  7011                           intcon3	equ	0xFF0
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function ___lwdiv *****************
  7022 ;; Defined at:
  7023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  dividend        2   15[COMRAM] unsigned int 
  7026 ;;  divisor         2   17[COMRAM] unsigned int 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  quotient        2   20[COMRAM] unsigned int 
  7029 ;;  counter         1   19[COMRAM] unsigned char 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  2   15[COMRAM] unsigned int 
  7032 ;; Registers used:
  7033 ;;		wreg, status,2, status,0
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7039 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;Total ram usage:        7 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    1
  7046 ;; This function calls:
  7047 ;;		Nothing
  7048 ;; This function is called by:
  7049 ;;		_printf
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text40
  7054  00121C                     __ptext40:
  7055                           	opt stack 0
  7056  00121C                     ___lwdiv:
  7057                           	opt stack 26
  7058                           
  7059                           ;incstack = 0
  7060  00121C  0E00               	movlw	0
  7061  00121E  6E16               	movwf	___lwdiv@quotient+1,c
  7062  001220  0E00               	movlw	0
  7063  001222  6E15               	movwf	___lwdiv@quotient,c
  7064  001224  5012               	movf	___lwdiv@divisor,w,c
  7065  001226  1013               	iorwf	___lwdiv@divisor+1,w,c
  7066  001228  B4D8               	btfsc	status,2,c
  7067  00122A  D01C               	goto	l991
  7068  00122C  0E01               	movlw	1
  7069  00122E  6E14               	movwf	___lwdiv@counter,c
  7070  001230  D004               	goto	l3522
  7071  001232                     l3520:
  7072  001232  90D8               	bcf	status,0,c
  7073  001234  3612               	rlcf	___lwdiv@divisor,f,c
  7074  001236  3613               	rlcf	___lwdiv@divisor+1,f,c
  7075  001238  2A14               	incf	___lwdiv@counter,f,c
  7076  00123A                     l3522:
  7077  00123A  AE13               	btfss	___lwdiv@divisor+1,7,c
  7078  00123C  D7FA               	goto	l3520
  7079  00123E                     l3524:
  7080  00123E  90D8               	bcf	status,0,c
  7081  001240  3615               	rlcf	___lwdiv@quotient,f,c
  7082  001242  3616               	rlcf	___lwdiv@quotient+1,f,c
  7083  001244  5012               	movf	___lwdiv@divisor,w,c
  7084  001246  5C10               	subwf	___lwdiv@dividend,w,c
  7085  001248  5013               	movf	___lwdiv@divisor+1,w,c
  7086  00124A  5811               	subwfb	___lwdiv@dividend+1,w,c
  7087  00124C  A0D8               	btfss	status,0,c
  7088  00124E  D005               	goto	l3532
  7089  001250  5012               	movf	___lwdiv@divisor,w,c
  7090  001252  5E10               	subwf	___lwdiv@dividend,f,c
  7091  001254  5013               	movf	___lwdiv@divisor+1,w,c
  7092  001256  5A11               	subwfb	___lwdiv@dividend+1,f,c
  7093  001258  8015               	bsf	___lwdiv@quotient,0,c
  7094  00125A                     l3532:
  7095  00125A  90D8               	bcf	status,0,c
  7096  00125C  3213               	rrcf	___lwdiv@divisor+1,f,c
  7097  00125E  3212               	rrcf	___lwdiv@divisor,f,c
  7098  001260  2E14               	decfsz	___lwdiv@counter,f,c
  7099  001262  D7ED               	goto	l3524
  7100  001264                     l991:
  7101  001264  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  7102  001268  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7103  00126C  0012               	return		;funcret
  7104  00126E                     __end_of___lwdiv:
  7105                           	opt stack 0
  7106                           tblptru	equ	0xFF8
  7107                           tblptrh	equ	0xFF7
  7108                           tblptrl	equ	0xFF6
  7109                           tablat	equ	0xFF5
  7110                           prodh	equ	0xFF4
  7111                           prodl	equ	0xFF3
  7112                           intcon	equ	0xFF2
  7113                           intcon3	equ	0xFF0
  7114                           postinc0	equ	0xFEE
  7115                           wreg	equ	0xFE8
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _lcdInst *****************
  7124 ;; Defined at:
  7125 ;;		line 26 in file "lcd.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  data            1    wreg     unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  data            1   17[COMRAM] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, status,2, status,0, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;Total ram usage:        1 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    2
  7146 ;; This function calls:
  7147 ;;		_lcdNibble
  7148 ;; This function is called by:
  7149 ;;		_initLCD
  7150 ;;		_update_lcd
  7151 ;;		_executingState
  7152 ;;		_debugState
  7153 ;;		_fixLCD
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text41
  7158  001692                     __ptext41:
  7159                           	opt stack 0
  7160  001692                     _lcdInst:
  7161                           	opt stack 26
  7162                           
  7163                           ;incstack = 0
  7164                           ;lcdInst@data stored from wreg
  7165  001692  6E12               	movwf	lcdInst@data,c
  7166                           
  7167                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7168  001694  948C               	bcf	3980,2,c	;volatile
  7169                           
  7170                           ;lcd.c: 28: lcdNibble(data);
  7171  001696  5012               	movf	lcdInst@data,w,c
  7172  001698  ECE3  F008         	call	_lcdNibble
  7173  00169C  0012               	return		;funcret
  7174  00169E                     __end_of_lcdInst:
  7175                           	opt stack 0
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon3	equ	0xFF0
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           indf2	equ	0xFDF
  7187                           postinc2	equ	0xFDE
  7188                           postdec2	equ	0xFDD
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function _lcdNibble *****************
  7194 ;; Defined at:
  7195 ;;		line 36 in file "lcd.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  data            1    wreg     unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  data            1   16[COMRAM] unsigned char 
  7200 ;;  temp            1   15[COMRAM] unsigned char 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;Total ram usage:        2 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    1
  7217 ;; This function calls:
  7218 ;;		Nothing
  7219 ;; This function is called by:
  7220 ;;		_lcdInst
  7221 ;;		_putch
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text42
  7226  0011C6                     __ptext42:
  7227                           	opt stack 0
  7228  0011C6                     _lcdNibble:
  7229                           	opt stack 25
  7230                           
  7231                           ;incstack = 0
  7232                           ;lcdNibble@data stored from wreg
  7233  0011C6  6E11               	movwf	lcdNibble@data,c
  7234                           
  7235                           ;lcd.c: 38: char temp = data & 0xF0;
  7236  0011C8  5011               	movf	lcdNibble@data,w,c
  7237  0011CA  0BF0               	andlw	240
  7238  0011CC  6E10               	movwf	lcdNibble@temp,c
  7239                           
  7240                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7241  0011CE  508C               	movf	3980,w,c	;volatile
  7242  0011D0  0B0F               	andlw	15
  7243  0011D2  6E8C               	movwf	3980,c	;volatile
  7244                           
  7245                           ;lcd.c: 40: LATD = temp | LATD;
  7246  0011D4  5010               	movf	lcdNibble@temp,w,c
  7247  0011D6  108C               	iorwf	3980,w,c	;volatile
  7248  0011D8  6E8C               	movwf	3980,c	;volatile
  7249                           
  7250                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7251  0011DA  968C               	bcf	3980,3,c	;volatile
  7252                           
  7253                           ;lcd.c: 43: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7254  0011DC  0E14               	movlw	20
  7255  0011DE                     u3557:
  7256  0011DE  2EE8               	decfsz	wreg,f,c
  7257  0011E0  D7FE               	bra	u3557
  7258  0011E2  D000               	nop2	
  7259                           
  7260                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7261  0011E4  868C               	bsf	3980,3,c	;volatile
  7262                           
  7263                           ;lcd.c: 45: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7264  0011E6  0E14               	movlw	20
  7265  0011E8                     u3567:
  7266  0011E8  2EE8               	decfsz	wreg,f,c
  7267  0011EA  D7FE               	bra	u3567
  7268  0011EC  D000               	nop2	
  7269                           
  7270                           ;lcd.c: 47: data = data << 4;
  7271  0011EE  3811               	swapf	lcdNibble@data,w,c
  7272  0011F0  0BF0               	andlw	240
  7273  0011F2  6E11               	movwf	lcdNibble@data,c
  7274                           
  7275                           ;lcd.c: 49: temp = data & 0xF0;
  7276  0011F4  5011               	movf	lcdNibble@data,w,c
  7277  0011F6  0BF0               	andlw	240
  7278  0011F8  6E10               	movwf	lcdNibble@temp,c
  7279                           
  7280                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7281  0011FA  508C               	movf	3980,w,c	;volatile
  7282  0011FC  0B0F               	andlw	15
  7283  0011FE  6E8C               	movwf	3980,c	;volatile
  7284                           
  7285                           ;lcd.c: 51: LATD = temp | LATD;
  7286  001200  5010               	movf	lcdNibble@temp,w,c
  7287  001202  108C               	iorwf	3980,w,c	;volatile
  7288  001204  6E8C               	movwf	3980,c	;volatile
  7289                           
  7290                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7291  001206  968C               	bcf	3980,3,c	;volatile
  7292                           
  7293                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7294  001208  0E14               	movlw	20
  7295  00120A                     u3577:
  7296  00120A  2EE8               	decfsz	wreg,f,c
  7297  00120C  D7FE               	bra	u3577
  7298  00120E  D000               	nop2	
  7299                           
  7300                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7301  001210  868C               	bsf	3980,3,c	;volatile
  7302                           
  7303                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7304  001212  0E14               	movlw	20
  7305  001214                     u3587:
  7306  001214  2EE8               	decfsz	wreg,f,c
  7307  001216  D7FE               	bra	u3587
  7308  001218  D000               	nop2	
  7309  00121A  0012               	return		;funcret
  7310  00121C                     __end_of_lcdNibble:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           intcon3	equ	0xFF0
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           indf2	equ	0xFDF
  7323                           postinc2	equ	0xFDE
  7324                           postdec2	equ	0xFDD
  7325                           fsr2h	equ	0xFDA
  7326                           fsr2l	equ	0xFD9
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _keypressed *****************
  7330 ;; Defined at:
  7331 ;;		line 484 in file "main.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  keypress        1   14[COMRAM] unsigned char 
  7336 ;; Return value:  Size  Location     Type
  7337 ;;                  1    wreg      void 
  7338 ;; Registers used:
  7339 ;;		wreg, status,2, status,0
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;Total ram usage:       15 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; This function calls:
  7352 ;;		Nothing
  7353 ;; This function is called by:
  7354 ;;		Interrupt level 2
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           	psect	intcode
  7359  000008                     __pintcode:
  7360                           	opt stack 0
  7361  000008                     _keypressed:
  7362                           	opt stack 25
  7363                           
  7364                           ;incstack = 0
  7365  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7366  00000A  ED59  F007         	call	int_func,f	;refresh shadow registers
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           prodh	equ	0xFF4
  7372                           prodl	equ	0xFF3
  7373                           intcon	equ	0xFF2
  7374                           intcon3	equ	0xFF0
  7375                           postinc0	equ	0xFEE
  7376                           wreg	equ	0xFE8
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384                           	psect	intcode_body
  7385  000EB2                     __pintcode_body:
  7386                           	opt stack 25
  7387  000EB2                     int_func:
  7388                           	opt stack 25
  7389  000EB2  0006               	pop		; remove dummy address from shadow register refresh
  7390  000EB4  CFFA F001          	movff	pclath,??_keypressed
  7391  000EB8  CFFB F002          	movff	pclatu,??_keypressed+1
  7392  000EBC  CFE9 F003          	movff	fsr0l,??_keypressed+2
  7393  000EC0  CFEA F004          	movff	fsr0h,??_keypressed+3
  7394  000EC4  CFE1 F005          	movff	fsr1l,??_keypressed+4
  7395  000EC8  CFE2 F006          	movff	fsr1h,??_keypressed+5
  7396  000ECC  CFD9 F007          	movff	fsr2l,??_keypressed+6
  7397  000ED0  CFDA F008          	movff	fsr2h,??_keypressed+7
  7398  000ED4  CFF3 F009          	movff	prodl,??_keypressed+8
  7399  000ED8  CFF4 F00A          	movff	prodh,??_keypressed+9
  7400  000EDC  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  7401  000EE0  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  7402  000EE4  CFF8 F00D          	movff	tblptru,??_keypressed+12
  7403  000EE8  CFF5 F00E          	movff	tablat,??_keypressed+13
  7404                           
  7405                           ;main.c: 486: if (INT1IF)
  7406  000EEC  A0F0               	btfss	intcon3,0,c	;volatile
  7407  000EEE  D01C               	goto	i2l308
  7408  000EF0                     i2l2198:
  7409                           
  7410                           ;main.c: 489: {
  7411                           ;main.c: 490: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7412  000EF0  3881               	swapf	3969,w,c	;volatile
  7413  000EF2  0B0F               	andlw	15
  7414  000EF4  0B0F               	andlw	15
  7415  000EF6  6E0F               	movwf	keypressed@keypress,c
  7416                           
  7417                           ;main.c: 491: if (keypress == 0b1101)
  7418  000EF8  0E0D               	movlw	13
  7419  000EFA  180F               	xorwf	keypressed@keypress,w,c
  7420  000EFC  A4D8               	btfss	status,2,c
  7421  000EFE  D7F8               	goto	i2l2198
  7422                           
  7423                           ;main.c: 492: {
  7424                           ;main.c: 493: LATA = 0x00;
  7425  000F00  0E00               	movlw	0
  7426  000F02  6E89               	movwf	3977,c	;volatile
  7427                           
  7428                           ;main.c: 494: LATB = 0x00;
  7429  000F04  0E00               	movlw	0
  7430  000F06  6E8A               	movwf	3978,c	;volatile
  7431                           
  7432                           ;main.c: 495: LATC = 0x00;
  7433  000F08  0E00               	movlw	0
  7434  000F0A  6E8B               	movwf	3979,c	;volatile
  7435                           
  7436                           ;main.c: 496: LATD = 0x00;
  7437  000F0C  0E00               	movlw	0
  7438  000F0E  6E8C               	movwf	3980,c	;volatile
  7439                           
  7440                           ;main.c: 497: LATE = 0x00;
  7441  000F10  0E00               	movlw	0
  7442  000F12  6E8D               	movwf	3981,c	;volatile
  7443                           
  7444                           ;main.c: 498: LATCbits.LATC6 = 0;
  7445  000F14  9C8B               	bcf	3979,6,c	;volatile
  7446                           
  7447                           ;main.c: 499: LATBbits.LATB0 = 0;
  7448  000F16  908A               	bcf	3978,0,c	;volatile
  7449                           
  7450                           ;main.c: 500: state = FINISH;
  7451  000F18  0E02               	movlw	2
  7452  000F1A  6E4B               	movwf	_state,c
  7453                           
  7454                           ;main.c: 501: runResult = 0;
  7455  000F1C  0E00               	movlw	0
  7456  000F1E  6E46               	movwf	_runResult+1,c
  7457  000F20  0E00               	movlw	0
  7458  000F22  6E45               	movwf	_runResult,c
  7459                           
  7460                           ;main.c: 502: (INTCONbits.GIE = 0);
  7461  000F24  9EF2               	bcf	intcon,7,c	;volatile
  7462                           
  7463                           ;main.c: 504: }
  7464                           ;main.c: 505: }
  7465                           ;main.c: 506: INT1IF = 0;
  7466                           
  7467                           ;main.c: 503: break;
  7468  000F26  90F0               	bcf	intcon3,0,c	;volatile
  7469  000F28                     i2l308:
  7470  000F28  C00E  FFF5         	movff	??_keypressed+13,tablat
  7471  000F2C  C00D  FFF8         	movff	??_keypressed+12,tblptru
  7472  000F30  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  7473  000F34  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  7474  000F38  C00A  FFF4         	movff	??_keypressed+9,prodh
  7475  000F3C  C009  FFF3         	movff	??_keypressed+8,prodl
  7476  000F40  C008  FFDA         	movff	??_keypressed+7,fsr2h
  7477  000F44  C007  FFD9         	movff	??_keypressed+6,fsr2l
  7478  000F48  C006  FFE2         	movff	??_keypressed+5,fsr1h
  7479  000F4C  C005  FFE1         	movff	??_keypressed+4,fsr1l
  7480  000F50  C004  FFEA         	movff	??_keypressed+3,fsr0h
  7481  000F54  C003  FFE9         	movff	??_keypressed+2,fsr0l
  7482  000F58  C002  FFFB         	movff	??_keypressed+1,pclatu
  7483  000F5C  C001  FFFA         	movff	??_keypressed,pclath
  7484  000F60  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7485  000F62  0011               	retfie		f
  7486  000F64                     __end_of_keypressed:
  7487                           	opt stack 0
  7488                           pclatu	equ	0xFFB
  7489                           pclath	equ	0xFFA
  7490                           tblptru	equ	0xFF8
  7491                           tblptrh	equ	0xFF7
  7492                           tblptrl	equ	0xFF6
  7493                           tablat	equ	0xFF5
  7494                           prodh	equ	0xFF4
  7495                           prodl	equ	0xFF3
  7496                           intcon	equ	0xFF2
  7497                           intcon3	equ	0xFF0
  7498                           postinc0	equ	0xFEE
  7499                           fsr0h	equ	0xFEA
  7500                           fsr0l	equ	0xFE9
  7501                           wreg	equ	0xFE8
  7502                           fsr1h	equ	0xFE2
  7503                           fsr1l	equ	0xFE1
  7504                           indf2	equ	0xFDF
  7505                           postinc2	equ	0xFDE
  7506                           postdec2	equ	0xFDD
  7507                           fsr2h	equ	0xFDA
  7508                           fsr2l	equ	0xFD9
  7509                           status	equ	0xFD8
  7510                           pclatu	equ	0xFFB
  7511                           pclath	equ	0xFFA
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodh	equ	0xFF4
  7517                           prodl	equ	0xFF3
  7518                           intcon	equ	0xFF2
  7519                           intcon3	equ	0xFF0
  7520                           postinc0	equ	0xFEE
  7521                           fsr0h	equ	0xFEA
  7522                           fsr0l	equ	0xFE9
  7523                           wreg	equ	0xFE8
  7524                           fsr1h	equ	0xFE2
  7525                           fsr1l	equ	0xFE1
  7526                           indf2	equ	0xFDF
  7527                           postinc2	equ	0xFDE
  7528                           postdec2	equ	0xFDD
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533                           	psect	rparam
  7534  0000                     pclatu	equ	0xFFB
  7535                           pclath	equ	0xFFA
  7536                           tblptru	equ	0xFF8
  7537                           tblptrh	equ	0xFF7
  7538                           tblptrl	equ	0xFF6
  7539                           tablat	equ	0xFF5
  7540                           prodh	equ	0xFF4
  7541                           prodl	equ	0xFF3
  7542                           intcon	equ	0xFF2
  7543                           intcon3	equ	0xFF0
  7544                           postinc0	equ	0xFEE
  7545                           fsr0h	equ	0xFEA
  7546                           fsr0l	equ	0xFE9
  7547                           wreg	equ	0xFE8
  7548                           fsr1h	equ	0xFE2
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557                           	psect	temp
  7558  00005B                     btemp:
  7559                           	opt stack 0
  7560  00005B                     	ds	1
  7561  0000                     int$flags	set	btemp
  7562                           pclatu	equ	0xFFB
  7563                           pclath	equ	0xFFA
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           intcon3	equ	0xFF0
  7572                           postinc0	equ	0xFEE
  7573                           fsr0h	equ	0xFEA
  7574                           fsr0l	equ	0xFE9
  7575                           wreg	equ	0xFE8
  7576                           fsr1h	equ	0xFE2
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8


Data Sizes:
    Strings     238
    Constant    42
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      90
    BANK0           128     44      58
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eeprom_LogResult@data	PTR unsigned char  size(2) Largest target is 8
		 -> executingState@res(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[15]), STR_15(CODE[15]), STR_14(CODE[15]), STR_13(CODE[12]), 
		 -> STR_12(CODE[18]), STR_11(CODE[6]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[19]), STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@time	PTR int  size(2) Largest target is 14
		 -> starttime(BANK0[14]), time(COMRAM[14]), 

    eeprom_GetLog@res	PTR int  size(2) Largest target is 1
		 -> logdata(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_fixLCD
    _eeprom_GetLog->_eeprom_ReadByte
    _fixLCD->_printf
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _executingState->_printf
    _update_lcd->_printf
    _get_timeDif->_get_time
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _eeprom_LogResult->_eeprom_WriteByte
    _dispenseSnCan->_servoRotate0
    _dispenseSnCan->_servoRotate90
    _dispenseAlCan->_servoRotate0
    _dispenseAlCan->_servoRotate90
    _eeprom_initialize->_eeprom_WriteByte
    _newestAddress->_eeprom_ReadByte
    _debugState->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executingState

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   62578
                    _I2C_Master_Init
                         _debugState
                  _eeprom_initialize
                     _executingState
                        _finishState
                             _fixLCD
                            _initLCD
                           _logState
                          _mainState
 ---------------------------------------------------------------------------------
 (1) _mainState                                            2     2      0    7379
                                             51 COMRAM     2     2      0
                           _get_time
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _logState                                             4     4      0    7050
                                             51 COMRAM     4     4      0
                      _eeprom_GetLog
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _eeprom_GetLog                                        9     5      4     846
                                             17 COMRAM     9     5      4
                    _eeprom_ReadByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (1) _fixLCD                                              13    13      0    7871
                                             51 COMRAM    13    13      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             28 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _finishState                                          4     4      0    6136
                                             51 COMRAM     4     4      0
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _readKey                                              5     3      2      69
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _executingState                                      47    47      0   25081
                                             51 COMRAM     3     3      0
                                              0 BANK0     44    44      0
                             ___wmul
                      _dispenseAlCan
                      _dispenseSnCan
                   _eeprom_LogResult
                           _get_time
                        _get_timeDif
                            _lcdInst
                             _printf
                          _readAlBot
                       _readAlSensor
                          _readSnBot
                       _readSnSensor
                          _readSnTop
                       _servoRotate0
                      _servoRotate90
                     _servoRotate90n
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _update_lcd                                           0     0      0    6033
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readSnTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnSensor                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlSensor                                         3     1      2       0
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _readAlBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_timeDif                                         23    21      2    3598
                                             23 COMRAM    23    21      2
                             ___wmul
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1181
                                             18 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                             16 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             16 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_LogResult                                     5     3      2    1012
                                             18 COMRAM     5     3      2
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (2) _dispenseSnCan                                        2     2      0    1338
                                             21 COMRAM     2     2      0
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _dispenseAlCan                                        2     2      0    1338
                                             21 COMRAM     2     2      0
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (1) _eeprom_initialize                                    0     0      0     771
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (3) _newestAddress                                        0     0      0     216
                    _eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (4) _eeprom_ReadByte                                      2     0      2     216
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_WriteByte                                     3     0      3     555
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _debugState                                           0     0      0    7655
                            _lcdInst
                             _printf
                       _servoRotate0
                      _servoRotate90
                     _servoRotate90n
 ---------------------------------------------------------------------------------
 (2) _servoRotate90n                                       6     4      2     284
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        6     4      2     515
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         6     4      2     823
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    5838
                                             27 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1926
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _debugState
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _servoRotate0
     _servoRotate90
     _servoRotate90n
   _eeprom_initialize
     _eeprom_WriteByte
     _newestAddress
       _eeprom_ReadByte
   _executingState
     ___wmul
     _dispenseAlCan
       _servoRotate0
       _servoRotate90
     _dispenseSnCan
       _servoRotate0
       _servoRotate90
     _eeprom_LogResult
       _eeprom_WriteByte
       _newestAddress
         _eeprom_ReadByte
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _get_timeDif
       ___wmul
       _get_time
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readAlBot
     _readAlSensor
     _readSnBot
     _readSnSensor
     _readSnTop
     _servoRotate0
     _servoRotate90
     _servoRotate90n
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _finishState
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _fixLCD
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _logState
     _eeprom_GetLog
       _eeprom_ReadByte
       _newestAddress
         _eeprom_ReadByte
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _mainState
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2C      3A       5       45.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94      34        0.0%
DATA                 0      0      94       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 19 19:02:29 2017

              ?_get_timeDif 0018                          l34 1666                ?_finishState 0001  
           readKey@keypress 0012         ___wmul@multiplicand 0012                 __CFG_BORV$3 000000  
             servoRotate0@i 0014                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000  
                       l211 13B8                         l212 13E2                         l214 13C4  
                       l323 164A                         l260 04F6                         l344 1356  
                       l441 0D40                         l329 1572                         l450 0D98  
                       l451 0D9C                         l443 0D44                         l452 0DA0  
                       l444 0D48                         l460 0C7A                         l453 0DA4  
                       l445 0D4C                         l349 116A                         l446 0D50  
                       l454 0DEE                         l470 0CD6                         l462 0C7E  
                       l471 0CDA                         l463 0C82                         l287 09E6  
                       l448 0D94                         l472 0CDE                         l464 0C86  
                       l465 0C8A                         l473 0D28                         l481 0E0A  
                       l546 0616                         l490 0E64                         l482 0E0E  
                       l467 0CCE                         l491 0E68                         l483 0E12  
                       l484 0E16                         l492 0EB0                         l469 0CD2  
                       l486 0E58                         l479 0E06                         l488 0E5C  
                       l489 0E60                         l938 10FA                         l991 1264  
              __CFG_CPB$OFF 000000                         _PEN 007E2A                __CFG_CPD$OFF 000000  
                       _SEN 007E28              ?_dispenseAlCan 0001                         prod 000FF3  
                       wreg 000FE8              ?_dispenseSnCan 0001              servoRotate90@i 0014  
              __CFG_LVP$OFF 000000       __end_of_newestAddress 1686                __CFG_WDT$OFF 000000  
                      l1001 1466                        l4100 0332                        l4140 043C  
                      l4108 036A                        l4126 03DA                        l4118 03A8  
                      l4062 025A                        l4054 0236                        l4046 0202  
                      l4206 12FC                        l3520 1232                        l3504 15B8  
                      l4128 03E4                        l4080 02C2                        l3522 123A  
                      l3602 065E                        l4146 0462                        l4066 0270  
                      l4058 0244                        l4250 08DE                        l3532 125A  
                      l3524 123E                        l3540 143C                        l3604 0662  
                      l3700 1066                        l4164 04C6                        l4148 046C  
                      l4180 148E                        l4260 0902                        l4340 0FC6  
                      l3542 1444                        l4158 04A4                        l4094 0314  
                      l4166 04DC                        l4254 08E6                        l4246 08AA  
                      l4342 0FCC                        l3544 1448                        l3640 06E8  
                      l3616 068E                        l3632 06BE                        l3720 0DD8  
                      l3712 0D54                        l3472 1550                        l3800 0B90  
                      l4168 04F2                        l4192 12CA                        l4344 0FD2  
                      l4352 0FE2                        l3618 0692                        l3634 06CE  
                      l3562 0544                        l3714 0D84                        l3706 0D32  
                      l2682 10AC                        l4346 0FD8                        l3548 145C  
                      l3660 0748                        l3652 072A                        l3644 070C  
                      l3564 0552                        l3740 0C8E                        l3812 0BF6  
                      l2684 10B8                        l4348 0FDE                        l3670 0774  
                      l3646 0714                        l3582 05E4                        l3574 0586  
                      l3558 0534                        l3718 0DA8                        l3742 0CBE  
                      l3734 0C6C                        l3902 1602                        l3822 0C2C  
                      l3806 0BB6                        l2766 13D4                        l2694 10EC  
                      l2686 10BC                        l3672 07B8                        l3680 080E  
                      l3664 075C                        l3568 0558                        l3920 0E6C  
                      l3816 0C0C                        l4288 09D4                        l3682 0814  
                      l3658 0740                        l3586 05E8                        l3746 0CE2  
                      l3922 0E9C                        l3914 0E1A                        l3690 1038  
                      l3818 0C18                        l3826 0C3A                        l3668 076E  
                      l3684 081C                        l3748 0D12                        l3916 0E4A  
                      l3908 0DF8                        l3860 15EA                        l3828 0C56  
                      l3678 07FE                        l3598 0644                        l3694 1040  
                      l3870 161A                        l3880 1632                        l3946 133C  
                      l3794 0B34                        l3962 1136                        l3970 135C  
          _eeprom_LogResult 130C                        l3958 1126                        l3992 1392  
                      l3984 1386                        STR_1 FFBF                        STR_2 FFDE  
                      STR_3 FFAE                        STR_4 FF11                        STR_5 FF9D  
                      STR_6 FF8C                        STR_7 FF24                        STR_8 FF6A  
                      STR_9 FF7B              eeprom_GetLog@i 0019                        _LATA 000F89  
                      _LATB 000F8A                        _LATC 000F8B                        _LATD 000F8C  
                      _LATE 000F8D                        u3310 09C2                        u3160 0496  
                      u3170 04BA                        u3250 097E                        u2380 154E  
                      u3308 09AE                        u3270 0994                        u3407 029C  
                      u1735 119A                        u3328 09C4                        u3417 02EE  
                      u3290 09AC                        u3507 0EA2                        u3427 0348  
                      u1780 13E2                        u3268 0980                        u3517 0CC4  
                      u2805 0A04                        u3437 03FA                        u3527 0D18  
                      u2815 0A2E                        u3447 041E                        u3288 0996  
                      u3537 0D8A                        u2825 0A54                        u3457 0446  
                      u3377 13EE                        u3547 0DDE                        u3467 04D0  
                      u3387 1422                        u3557 11DE                        u3477 14C0  
                      u3397 147C                        u3567 11E8                        u3487 14F0  
                      u3577 120A                        u3497 0E4C                        u2890 165C  
                      u3587 1214                        _RCEN 007E2B                        u2975 0042  
                      u2985 0076                        u2898 165E                        u2995 00A6  
                      _RSEN 007E29                        _main 0F64                        _keys FEE7  
                      _time 004C                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 005B  
                      prodh 000FF4                        prodl 000FF3                        start 000E  
             __CFG_IESO$OFF 000000             ??_servoRotate90 0012             ??_eeprom_GetLog 0016  
             __CFG_MCLRE$ON 000000             servoRotate90n@i 0014                ___param_bank 000000  
          ?_I2C_Master_Init 001D            ?_I2C_Master_Read 0001            ?_I2C_Master_Wait 0001  
          ?_I2C_Master_Stop 0001                       ?_main 0001                       _ACKEN 007E2C  
                     _ACKDT 007E2D                       _EEADR 000FA9                       STR_10 FF59  
      eeprom_WriteByte@data 0012                       STR_11 FFF9                       STR_12 FF36  
                     STR_13 FFED                       STR_14 FFCF                       STR_15 FFDE  
                     STR_16 FF15                       STR_17 FF48                       _CMCON 000FB4  
           __end_of___lldiv 110C                get_time@time 0013             __end_of___lwdiv 126E  
           __end_of___lwmod 1470                       i2l308 0F28                       _PORTB 000F81  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96         servoRotate90n@servo 0010  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000             __end_of_lcdInst 169E  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000                       _alTab 0043  
           __end_of_initLCD 142E              __CFG_EBTRB$OFF 000000             __end_of_dpowers FF02  
           __end_of_readKey 13E8             __end_of_isdigit 15C0                       _state 004B  
                     _putch 1686            _eeprom_WriteByte 1556                       pclath 000FFA  
                     tablat 000FF5                       status 000FD8            ??_servoRotate90n 0012  
  __size_of_eeprom_ReadByte 0016              __CFG_PBADEN$ON 000000               ?_readAlSensor 0010  
           __initialization 150A                __end_of_main 1004                __end_of_keys FEF8  
           ??_dispenseAlCan 0016                      ??_main 0041               __activetblptr 000002  
           ??_dispenseSnCan 0016           ?_I2C_Master_Start 0001           ?_I2C_Master_Write 0011  
         executingState@res 0090               ?_readSnSensor 0010          ??_I2C_Master_Start 0011  
                    _ADCON0 000FC2                      _ADCON1 000FC1          ??_I2C_Master_Write 0013  
                    _EEADRH 000FAA                      _EEDATA 000FA8                      _EECON2 000FA7  
                    ?_putch 0001            eeprom_GetLog@res 0014                      _INT1IE 007F83  
                    _INT1IF 007F80                      i2l2198 0EF0                      _OSCCON 000FD3  
                    _SSPADD 000FC8                      _TRISC3 007CA3                      _TRISC4 007CA4  
                    _SSPBUF 000FC9              ??_readAlSensor 0012              __CFG_XINST$OFF 000000  
          __end_of_get_time 108A                      ___wmul 157C              __CFG_STVREN$ON 000000  
                    _fixLCD 0836                   ??___lldiv 0018      executingState@alLoaded 00A8  
                 ??___lwdiv 0014                   ??___lwmod 001B        __size_of_get_timeDif 0144  
          __end_of_logState 130C                      clear_0 1510                      clear_1 151C  
               logState@log 0034                   ??_lcdInst 0012                      _printf 052A  
      __size_of_finishState 003A                   ??_initLCD 0013      executingState@hasLabel 00A4  
                 ??_readKey 0012                   ??_isdigit 0010                __mediumconst FEE6  
            ??_readSnSensor 0012                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8      executingState@snLoaded 00A6                  __accesstop 0080  
   __end_of__initialization 1522               ___rparam_used 000001      executingState@runCanAl 009E  
    executingState@runCanSn 009C              __pcstackCOMRAM 0001           ??_eeprom_ReadByte 0012  
  __end_of_eeprom_LogResult 1358           servoRotate0@servo 0010               __end_of_putch 1692  
        __size_of_lcdNibble 0056          __size_of_mainState 0048                     ??_putch 0012  
                __pbssBANK0 00AC          __size_of_readAlBot 0018                  _debugState 126E  
        __size_of_readSnBot 0018          __size_of_readSnTop 0018                     ?___wmul 0010  
                   ?_fixLCD 0001    __end_of_eeprom_WriteByte 157C                     ?_printf 001C  
   __size_of_executingState 0518           eeprom_GetLog@back 0012        __end_of_readAlSensor 1666  
         _eeprom_initialize 15C0          ?_eeprom_initialize 0001                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7                   ?_get_time 0013  
                 ?_logState 0001         ??_eeprom_initialize 0013           __end_of_lcdNibble 121C  
          get_timeDif@h_one 001F            get_timeDif@h_ten 001D            get_timeDif@m_one 0023  
          get_timeDif@m_ten 0021                     __Hparam 0000            get_timeDif@s_one 0027  
          get_timeDif@s_ten 0025                     __Lparam 0000            get_timeDif@start 0018  
      __end_of_readSnSensor 160C       __end_of_servoRotate90 0D2A       __end_of_eeprom_GetLog 116C  
                   _alNoTab 0041                     ___lldiv 108A             __size_of___wmul 0026  
                   ___lwdiv 121C                     ___lwmod 142E             __size_of_fixLCD 01B2  
         __end_of_mainState 13A0      __size_of_newestAddress 000E                     __pcinit 150A  
                   __ramtop 1000                     _lcdInst 1692                     __ptext0 0F64  
                   __ptext1 1358                     __ptext2 12BE                     __ptext3 110C  
                   __ptext4 0836                     __ptext5 13E8                     __ptext6 116C  
                   __ptext7 108A                     __ptext8 1470                     __ptext9 13A0  
         __end_of_readAlBot 163C             __size_of_printf 030C   __end_of_eeprom_initialize 15DC  
                   _initLCD 13E8           __end_of_hexpowers FF0A           __end_of_readSnBot 1624  
                   _dpowers FEF8           __end_of_readSnTop 15F4                     _readKey 13A0  
                   _snLabel 0047                     _isdigit 15A2                     _logdata 005A  
                   fixLCD@i 0035                     fixLCD@j 003E                  _keypressed 0008  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026    __size_of_I2C_Master_Wait 0012  
  __size_of_I2C_Master_Stop 0008                  fixLCD@time 0037                  ??_get_time 0015  
            __pintcode_body 0EB2        end_of_initialization 1522                 ?_debugState 0001  
             __Lmediumconst FEE6                  ??_logState 0034                     int_func 0EB2  
 __size_of_I2C_Master_Start 0008   __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0014  
           ___lldiv@counter 001C               ?_servoRotate0 0010                     printf@c 0033  
                   printf@f 001C            I2C_Master_Init@c 001D            I2C_Master_Read@a 0011  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTAbits 000F80                   _PORTBbits 000F81                   _PORTCbits 000F82  
     __end_of_dispenseAlCan 150A           eeprom_LogResult@i 0016       __end_of_dispenseSnCan 14DA  
                _update_lcd 0B2C               _newestAddress 1678                  _statictime FF0A  
       finishState@keypress 0036             _eeprom_ReadByte 163C                 printf@width 0031  
            ??_servoRotate0 0012               ??_get_timeDif 001A          servoRotate90@servo 0010  
             ??_finishState 0034              __end_of___wmul 15A2           ?_eeprom_LogResult 0013  
            __end_of_fixLCD 09E8       __size_of_readAlSensor 0014     __size_of_servoRotate90n 00C2  
    eeprom_ReadByte@address 0010              _executingState 0012          ??_eeprom_LogResult 0015  
__size_of_eeprom_initialize 001C         __size_of_debugState 0050              __end_of_printf 0836  
       start_initialization 150A                 ?_keypressed 0001              ?_newestAddress 0001  
         ??_I2C_Master_Init 0021           ??_I2C_Master_Read 0011           ??_I2C_Master_Wait 0010  
         ??_I2C_Master_Stop 0011       __size_of_readSnSensor 0018     eeprom_LogResult@address 0015  
          _get_timeDif$1723 002B            _get_timeDif$1724 002D                _readAlSensor 1652  
        get_timeDif@start_s 0029                    ??___wmul 0014                    ??_fixLCD 0034  
    __end_of_executingState 052A            __CFG_LPT1OSC$OFF 000000           ?_eeprom_WriteByte 0010  
                  ??_printf 0026         __end_of_get_timeDif 0B2C          ??_eeprom_WriteByte 0013  
               __pbssCOMRAM 0041         __end_of_finishState 14AA       executingState@timedif 00A2  
             __pcstackBANK0 0080                 ?_update_lcd 0001       executingState@start_s 00A0  
              _readSnSensor 15F4     __end_of_eeprom_ReadByte 1652                _isdigit$1329 0011  
         __size_of_get_time 0086         executingState@h_one 0082         executingState@h_ten 0080  
       executingState@m_one 0086         executingState@m_ten 0084         executingState@s_one 008A  
       executingState@s_ten 0088            _I2C_Master_Start 16B0            _I2C_Master_Write 169E  
         __size_of_logState 004E         _executingState$1725 008C         _executingState$1726 008E  
          ___lwdiv@dividend 0010           __CFG_CCP2MX$PORTC 000000         __size_of_keypressed 0F5C  
                 __pintcode 0008               __pmediumconst FEE6                   _lcdNibble 11C6  
                  ?___lldiv 0010                    ?___lwdiv 0010                    ?___lwmod 0017  
           ?_executingState 0001                    ?_lcdInst 0001                    ?_initLCD 0001  
                 _mainState 1358                    ?_readKey 0010                    ?_isdigit 0001  
   eeprom_WriteByte@address 0010                   _readAlBot 1624             ??_newestAddress 0012  
      __end_of_servoRotate0 0DF0                   _hexpowers FF02                   _readSnBot 160C  
          ___lwdiv@quotient 0015                   _readSnTop 15DC              __size_of_putch 000C  
                 _snNoLabel 0049                ??_debugState 0034              ___wmul@product 0014  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _LATCbits 000F8B  
                  _LATDbits 000F8C                    _LATEbits 000F8D                    _PIR2bits 000FA1  
          __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001                 _get_timeDif 09E8  
       __size_of_update_lcd 0138                 _finishState 1470              _servoRotate90n 0DF0  
                 _runResult 0045           ___wmul@multiplier 0010               lcdNibble@data 0011  
                ?_mainState 0001                  printf@flag 0030                   _starttime 00AC  
             lcdNibble@temp 0010          __end_of_debugState 12BE                  printf@prec 002D  
                 get_time@i 0017                  ?_readAlBot 0010                  ?_readSnBot 0010  
                ?_readSnTop 0010            ?_eeprom_ReadByte 0010         I2C_Master_Read@temp 0012  
    __size_of_servoRotate90 00C6      __size_of_eeprom_GetLog 0060                  _EECON1bits 000FA6  
        keypressed@keypress 000F                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate90n 0EB2            __size_of___lldiv 0082  
          __size_of___lwdiv 0052            __size_of___lwmod 0042            __size_of_lcdInst 000C  
  executingState@alInSensor 009A             _I2C_Master_Init 116C             _I2C_Master_Read 1530  
          __size_of_initLCD 0046             _I2C_Master_Wait 1666             _I2C_Master_Stop 16A8  
          __size_of_readKey 0048                ??_keypressed 0001            __size_of_isdigit 001E  
           ___lwdiv@divisor 0012             ___lwdiv@counter 0014                    __ptext10 0012  
                  __ptext11 0B2C                    __ptext20 16A8                    __ptext12 15DC  
                  __ptext21 16B0                    __ptext13 15F4                    __ptext30 1556  
                  __ptext22 1530                    __ptext14 160C                    __ptext31 126E  
                  __ptext23 1666                    __ptext15 1652                    __ptext40 121C  
                  __ptext32 0DF0                    __ptext24 130C                    __ptext16 1624  
                  __ptext41 1692                    __ptext33 0C64                    __ptext25 14AA  
                  __ptext17 09E8                    __ptext42 11C6                    __ptext34 0D2A  
                  __ptext26 14DA                    __ptext18 1004                    __ptext35 052A  
                  __ptext27 15C0                    __ptext19 169E                    __ptext36 1686  
                  __ptext28 1678                    __ptext37 15A2                    __ptext29 163C  
                  __ptext38 157C                    __ptext39 142E                    _get_time 1004  
 __size_of_eeprom_LogResult 004C        eeprom_GetLog@address 0018           mainState@keypress 0034  
                  _logState 12BE               __size_of_main 00A0                 fixLCD@i_656 0040  
    __size_of_dispenseAlCan 0030      __size_of_dispenseSnCan 0030                 ??_lcdNibble 0010  
           ?_servoRotate90n 0010          __end_of_keypressed 0F64                    int$flags 005B  
             _servoRotate90 0C64               _eeprom_GetLog 110C                   printf@idx 002A  
                 printf@val 002E       __size_of_servoRotate0 00C6                 ??_mainState 0034  
                 putch@data 0012    __end_of_I2C_Master_Start 16B8    __end_of_I2C_Master_Write 16A8  
                _INTCONbits 000FF2                 ??_readAlBot 0012                    readKey@i 0013  
              ??_update_lcd 0034                 ??_readSnBot 0012                    isdigit@c 0012  
               ??_readSnTop 0012   __size_of_eeprom_WriteByte 0026                    intlevel2 0000  
          ___lwmod@dividend 0017            ___lldiv@dividend 0010            ??_executingState 0034  
            ?_servoRotate90 0010                _servoRotate0 0D2A              ?_eeprom_GetLog 0012  
                  printf@ap 002B          __end_of_update_lcd 0C64     __end_of_I2C_Master_Init 11C6  
   __end_of_I2C_Master_Read 1556     __end_of_I2C_Master_Wait 1678     __end_of_I2C_Master_Stop 16B0  
               lcdInst@data 0012        eeprom_LogResult@data 0013            logState@keypress 0036  
        __end_of_statictime FF11            ___lldiv@quotient 0018           I2C_Master_Write@d 0011  
           ___lwmod@divisor 0019             ___lwmod@counter 001B               _dispenseAlCan 14DA  
  executingState@emptyCount 00AA               _dispenseSnCan 14AA    executingState@snInSensor 0098  
