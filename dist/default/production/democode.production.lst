

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 04:09:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.40
    67                           ; Generated 01/12/2016 GMT
    68                           ; 
    69                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4620 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	idataCOMRAM
   102  0018BC                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _loopcount
   106  0018BC  001E               	dw	30
   107                           
   108                           	psect	mediumconst
   109  00FEC4                     __pmediumconst:
   110                           	opt stack 0
   111  00FEC4  00                 	db	0
   112  00FEC5                     _keys:
   113                           	opt stack 0
   114  00FEC5  31                 	db	49
   115  00FEC6  32                 	db	50
   116  00FEC7  33                 	db	51
   117  00FEC8  41                 	db	65
   118  00FEC9  34                 	db	52
   119  00FECA  35                 	db	53
   120  00FECB  36                 	db	54
   121  00FECC  42                 	db	66
   122  00FECD  37                 	db	55
   123  00FECE  38                 	db	56
   124  00FECF  39                 	db	57
   125  00FED0  43                 	db	67
   126  00FED1  2A                 	db	42
   127  00FED2  30                 	db	48
   128  00FED3  23                 	db	35
   129  00FED4  44                 	db	68
   130  00FED5  00                 	db	0
   131  00FED6                     __end_of_keys:
   132                           	opt stack 0
   133  00FED6                     _dpowers:
   134                           	opt stack 0
   135  00FED6  0001               	dw	1
   136  00FED8  000A               	dw	10
   137  00FEDA  0064               	dw	100
   138  00FEDC  03E8               	dw	1000
   139  00FEDE  2710               	dw	10000
   140  00FEE0                     __end_of_dpowers:
   141                           	opt stack 0
   142  00FEE0                     _hexpowers:
   143                           	opt stack 0
   144  00FEE0  0001               	dw	1
   145  00FEE2  0010               	dw	16
   146  00FEE4  0100               	dw	256
   147  00FEE6  1000               	dw	4096
   148  00FEE8                     __end_of_hexpowers:
   149                           	opt stack 0
   150  00FEE8                     _statictime:
   151                           	opt stack 0
   152  00FEE8  00                 	db	0
   153  00FEE9  51                 	db	81
   154  00FEEA  14                 	db	20
   155  00FEEB  03                 	db	3
   156  00FEEC  28                 	db	40
   157  00FEED  02                 	db	2
   158  00FEEE  17                 	db	23
   159  00FEEF                     __end_of_statictime:
   160                           	opt stack 0
   161  0000                     _ADCON0	set	4034
   162  0000                     _ADCON1	set	4033
   163  0000                     _CMCON	set	4020
   164  0000                     _EEADR	set	4009
   165  0000                     _EEADRH	set	4010
   166  0000                     _EECON1bits	set	4006
   167  0000                     _EECON2	set	4007
   168  0000                     _EEDATA	set	4008
   169  0000                     _INTCONbits	set	4082
   170  0000                     _LATA	set	3977
   171  0000                     _LATAbits	set	3977
   172  0000                     _LATB	set	3978
   173  0000                     _LATBbits	set	3978
   174  0000                     _LATC	set	3979
   175  0000                     _LATCbits	set	3979
   176  0000                     _LATD	set	3980
   177  0000                     _LATDbits	set	3980
   178  0000                     _LATE	set	3981
   179  0000                     _LATEbits	set	3981
   180  0000                     _OSCCON	set	4051
   181  0000                     _PIR2bits	set	4001
   182  0000                     _PORTAbits	set	3968
   183  0000                     _PORTB	set	3969
   184  0000                     _PORTBbits	set	3969
   185  0000                     _PORTCbits	set	3970
   186  0000                     _SSPADD	set	4040
   187  0000                     _SSPBUF	set	4041
   188  0000                     _SSPCON1	set	4038
   189  0000                     _SSPCON2	set	4037
   190  0000                     _SSPSTAT	set	4039
   191  0000                     _TRISA	set	3986
   192  0000                     _TRISB	set	3987
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISE	set	3990
   196  0000                     _ACKDT	set	32301
   197  0000                     _ACKEN	set	32300
   198  0000                     _INT1IE	set	32643
   199  0000                     _INT1IF	set	32640
   200  0000                     _PEN	set	32298
   201  0000                     _RCEN	set	32299
   202  0000                     _RSEN	set	32297
   203  0000                     _SEN	set	32296
   204  0000                     _TRISC3	set	31907
   205  0000                     _TRISC4	set	31908
   206  00FEEF                     STR_4:
   207  00FEEF  25                 	db	37
   208  00FEF0  30                 	db	48	;'0'
   209  00FEF1  33                 	db	51	;'3'
   210  00FEF2  64                 	db	100	;'d'
   211  00FEF3  20                 	db	32
   212  00FEF4  20                 	db	32
   213  00FEF5  20                 	db	32
   214  00FEF6  20                 	db	32
   215  00FEF7  20                 	db	32
   216  00FEF8  20                 	db	32
   217  00FEF9  20                 	db	32
   218  00FEFA  20                 	db	32
   219  00FEFB  20                 	db	32
   220  00FEFC  20                 	db	32
   221  00FEFD  20                 	db	32
   222  00FEFE  20                 	db	32
   223  00FEFF  20                 	db	32
   224  00FF00  20                 	db	32
   225  00FF01  00                 	db	0
   226  00FF02                     STR_7:
   227  00FF02  61                 	db	97	;'a'
   228  00FF03  4E                 	db	78	;'N'
   229  00FF04  25                 	db	37
   230  00FF05  64                 	db	100	;'d'
   231  00FF06  2F                 	db	47
   232  00FF07  61                 	db	97	;'a'
   233  00FF08  25                 	db	37
   234  00FF09  64                 	db	100	;'d'
   235  00FF0A  2F                 	db	47
   236  00FF0B  73                 	db	115	;'s'
   237  00FF0C  4E                 	db	78	;'N'
   238  00FF0D  25                 	db	37
   239  00FF0E  64                 	db	100	;'d'
   240  00FF0F  2F                 	db	47
   241  00FF10  53                 	db	83	;'S'
   242  00FF11  25                 	db	37
   243  00FF12  64                 	db	100	;'d'
   244  00FF13  00                 	db	0
   245  00FF14                     STR_14:
   246  00FF14  45                 	db	69	;'E'
   247  00FF15  78                 	db	120	;'x'
   248  00FF16  65                 	db	101	;'e'
   249  00FF17  63                 	db	99	;'c'
   250  00FF18  75                 	db	117	;'u'
   251  00FF19  74                 	db	116	;'t'
   252  00FF1A  69                 	db	105	;'i'
   253  00FF1B  6E                 	db	110	;'n'
   254  00FF1C  67                 	db	103	;'g'
   255  00FF1D  20                 	db	32
   256  00FF1E  20                 	db	32
   257  00FF1F  20                 	db	32
   258  00FF20  20                 	db	32
   259  00FF21  25                 	db	37
   260  00FF22  30                 	db	48	;'0'
   261  00FF23  33                 	db	51	;'3'
   262  00FF24  64                 	db	100	;'d'
   263  00FF25  00                 	db	0
   264  00FF26                     STR_19:
   265  00FF26  30                 	db	48	;'0'
   266  00FF27  31                 	db	49	;'1'
   267  00FF28  32                 	db	50	;'2'
   268  00FF29  33                 	db	51	;'3'
   269  00FF2A  34                 	db	52	;'4'
   270  00FF2B  35                 	db	53	;'5'
   271  00FF2C  36                 	db	54	;'6'
   272  00FF2D  37                 	db	55	;'7'
   273  00FF2E  38                 	db	56	;'8'
   274  00FF2F  39                 	db	57	;'9'
   275  00FF30  61                 	db	97	;'a'
   276  00FF31  62                 	db	98	;'b'
   277  00FF32  63                 	db	99	;'c'
   278  00FF33  64                 	db	100	;'d'
   279  00FF34  65                 	db	101	;'e'
   280  00FF35  66                 	db	102	;'f'
   281  00FF36  00                 	db	0
   282  00FF37                     STR_13:
   283  00FF37  20                 	db	32
   284  00FF38  20                 	db	32
   285  00FF39  20                 	db	32
   286  00FF3A  20                 	db	32
   287  00FF3B  20                 	db	32
   288  00FF3C  20                 	db	32
   289  00FF3D  20                 	db	32
   290  00FF3E  20                 	db	32
   291  00FF3F  20                 	db	32
   292  00FF40  20                 	db	32
   293  00FF41  20                 	db	32
   294  00FF42  20                 	db	32
   295  00FF43  20                 	db	32
   296  00FF44  20                 	db	32
   297  00FF45  20                 	db	32
   298  00FF46  20                 	db	32
   299  00FF47  00                 	db	0
   300  00FF48                     STR_10:
   301  00FF48  30                 	db	48	;'0'
   302  00FF49  3A                 	db	58	;':'
   303  00FF4A  4D                 	db	77	;'M'
   304  00FF4B  65                 	db	101	;'e'
   305  00FF4C  6E                 	db	110	;'n'
   306  00FF4D  75                 	db	117	;'u'
   307  00FF4E  20                 	db	32
   308  00FF4F  20                 	db	32
   309  00FF50  20                 	db	32
   310  00FF51  20                 	db	32
   311  00FF52  20                 	db	32
   312  00FF53  20                 	db	32
   313  00FF54  20                 	db	32
   314  00FF55  20                 	db	32
   315  00FF56  20                 	db	32
   316  00FF57  20                 	db	32
   317  00FF58  00                 	db	0
   318  00FF59                     STR_8:
   319  00FF59  46                 	db	70	;'F'
   320  00FF5A  69                 	db	105	;'i'
   321  00FF5B  6E                 	db	110	;'n'
   322  00FF5C  69                 	db	105	;'i'
   323  00FF5D  73                 	db	115	;'s'
   324  00FF5E  68                 	db	104	;'h'
   325  00FF5F  65                 	db	101	;'e'
   326  00FF60  64                 	db	100	;'d'
   327  00FF61  20                 	db	32
   328  00FF62  20                 	db	32
   329  00FF63  20                 	db	32
   330  00FF64  20                 	db	32
   331  00FF65  20                 	db	32
   332  00FF66  20                 	db	32
   333  00FF67  20                 	db	32
   334  00FF68  20                 	db	32
   335  00FF69  00                 	db	0
   336  00FF6A                     STR_9:
   337  00FF6A  54                 	db	84	;'T'
   338  00FF6B  65                 	db	101	;'e'
   339  00FF6C  72                 	db	114	;'r'
   340  00FF6D  6D                 	db	109	;'m'
   341  00FF6E  69                 	db	105	;'i'
   342  00FF6F  6E                 	db	110	;'n'
   343  00FF70  61                 	db	97	;'a'
   344  00FF71  74                 	db	116	;'t'
   345  00FF72  65                 	db	101	;'e'
   346  00FF73  64                 	db	100	;'d'
   347  00FF74  20                 	db	32
   348  00FF75  20                 	db	32
   349  00FF76  20                 	db	32
   350  00FF77  20                 	db	32
   351  00FF78  20                 	db	32
   352  00FF79  20                 	db	32
   353  00FF7A  00                 	db	0
   354  00FF7B                     STR_6:
   355  00FF7B  45                 	db	69	;'E'
   356  00FF7C  78                 	db	120	;'x'
   357  00FF7D  65                 	db	101	;'e'
   358  00FF7E  63                 	db	99	;'c'
   359  00FF7F  75                 	db	117	;'u'
   360  00FF80  74                 	db	116	;'t'
   361  00FF81  69                 	db	105	;'i'
   362  00FF82  6E                 	db	110	;'n'
   363  00FF83  67                 	db	103	;'g'
   364  00FF84  2E                 	db	46
   365  00FF85  2E                 	db	46
   366  00FF86  2E                 	db	46
   367  00FF87  20                 	db	32
   368  00FF88  20                 	db	32
   369  00FF89  20                 	db	32
   370  00FF8A  20                 	db	32
   371  00FF8B  00                 	db	0
   372  00FF8C                     STR_12:
   373  00FF8C  69                 	db	105	;'i'
   374  00FF8D  6E                 	db	110	;'n'
   375  00FF8E  69                 	db	105	;'i'
   376  00FF8F  74                 	db	116	;'t'
   377  00FF90  69                 	db	105	;'i'
   378  00FF91  61                 	db	97	;'a'
   379  00FF92  6C                 	db	108	;'l'
   380  00FF93  69                 	db	105	;'i'
   381  00FF94  7A                 	db	122	;'z'
   382  00FF95  69                 	db	105	;'i'
   383  00FF96  6E                 	db	110	;'n'
   384  00FF97  67                 	db	103	;'g'
   385  00FF98  20                 	db	32
   386  00FF99  20                 	db	32
   387  00FF9A  20                 	db	32
   388  00FF9B  20                 	db	32
   389  00FF9C  00                 	db	0
   390  00FF9D                     STR_5:
   391  00FF9D  31                 	db	49	;'1'
   392  00FF9E  3A                 	db	58	;':'
   393  00FF9F  50                 	db	80	;'P'
   394  00FFA0  72                 	db	114	;'r'
   395  00FFA1  65                 	db	101	;'e'
   396  00FFA2  76                 	db	118	;'v'
   397  00FFA3  20                 	db	32
   398  00FFA4  30                 	db	48	;'0'
   399  00FFA5  3A                 	db	58	;':'
   400  00FFA6  45                 	db	69	;'E'
   401  00FFA7  78                 	db	120	;'x'
   402  00FFA8  69                 	db	105	;'i'
   403  00FFA9  74                 	db	116	;'t'
   404  00FFAA  20                 	db	32
   405  00FFAB  20                 	db	32
   406  00FFAC  20                 	db	32
   407  00FFAD  00                 	db	0
   408  00FFAE                     STR_3:
   409  00FFAE  31                 	db	49	;'1'
   410  00FFAF  3A                 	db	58	;':'
   411  00FFB0  53                 	db	83	;'S'
   412  00FFB1  74                 	db	116	;'t'
   413  00FFB2  61                 	db	97	;'a'
   414  00FFB3  72                 	db	114	;'r'
   415  00FFB4  74                 	db	116	;'t'
   416  00FFB5  20                 	db	32
   417  00FFB6  32                 	db	50	;'2'
   418  00FFB7  3A                 	db	58	;':'
   419  00FFB8  4C                 	db	76	;'L'
   420  00FFB9  6F                 	db	111	;'o'
   421  00FFBA  67                 	db	103	;'g'
   422  00FFBB  73                 	db	115	;'s'
   423  00FFBC  20                 	db	32
   424  00FFBD  20                 	db	32
   425  00FFBE  00                 	db	0
   426  00FFBF                     STR_1:
   427  00FFBF  25                 	db	37
   428  00FFC0  30                 	db	48	;'0'
   429  00FFC1  32                 	db	50	;'2'
   430  00FFC2  78                 	db	120	;'x'
   431  00FFC3  2F                 	db	47
   432  00FFC4  25                 	db	37
   433  00FFC5  30                 	db	48	;'0'
   434  00FFC6  31                 	db	49	;'1'
   435  00FFC7  78                 	db	120	;'x'
   436  00FFC8  2F                 	db	47
   437  00FFC9  25                 	db	37
   438  00FFCA  30                 	db	48	;'0'
   439  00FFCB  32                 	db	50	;'2'
   440  00FFCC  78                 	db	120	;'x'
   441  00FFCD  20                 	db	32
   442  00FFCE  00                 	db	0
   443  00FFCF                     STR_16:
   444  00FFCF  25                 	db	37
   445  00FFD0  30                 	db	48	;'0'
   446  00FFD1  32                 	db	50	;'2'
   447  00FFD2  78                 	db	120	;'x'
   448  00FFD3  25                 	db	37
   449  00FFD4  30                 	db	48	;'0'
   450  00FFD5  32                 	db	50	;'2'
   451  00FFD6  78                 	db	120	;'x'
   452  00FFD7  2F                 	db	47
   453  00FFD8  25                 	db	37
   454  00FFD9  30                 	db	48	;'0'
   455  00FFDA  32                 	db	50	;'2'
   456  00FFDB  78                 	db	120	;'x'
   457  00FFDC  20                 	db	32
   458  00FFDD  00                 	db	0
   459  00FFDE                     STR_2:
   460  00FFDE  25                 	db	37
   461  00FFDF  30                 	db	48	;'0'
   462  00FFE0  32                 	db	50	;'2'
   463  00FFE1  78                 	db	120	;'x'
   464  00FFE2  3A                 	db	58	;':'
   465  00FFE3  25                 	db	37
   466  00FFE4  30                 	db	48	;'0'
   467  00FFE5  32                 	db	50	;'2'
   468  00FFE6  78                 	db	120	;'x'
   469  00FFE7  3A                 	db	58	;':'
   470  00FFE8  25                 	db	37
   471  00FFE9  30                 	db	48	;'0'
   472  00FFEA  32                 	db	50	;'2'
   473  00FFEB  78                 	db	120	;'x'
   474  00FFEC  00                 	db	0
   475  00FFED                     STR_15:
   476  00FFED  67                 	db	103	;'g'
   477  00FFEE  6F                 	db	111	;'o'
   478  00FFEF  69                 	db	105	;'i'
   479  00FFF0  6E                 	db	110	;'n'
   480  00FFF1  67                 	db	103	;'g'
   481  00FFF2  20                 	db	32
   482  00FFF3  64                 	db	100	;'d'
   483  00FFF4  65                 	db	101	;'e'
   484  00FFF5  62                 	db	98	;'b'
   485  00FFF6  75                 	db	117	;'u'
   486  00FFF7  67                 	db	103	;'g'
   487  00FFF8  00                 	db	0
   488  00FFF9                     STR_11:
   489  00FFF9  65                 	db	101	;'e'
   490  00FFFA  72                 	db	114	;'r'
   491  00FFFB  72                 	db	114	;'r'
   492  00FFFC  6F                 	db	111	;'o'
   493  00FFFD  72                 	db	114	;'r'
   494  00FFFE  00                 	db	0
   495  0000                     
   496                           ; #config settings
   497  00FFFF  00                 	db	0	; dummy byte at the end
   498  0000                     
   499                           	psect	cinit
   500  0015D8                     __pcinit:
   501                           	opt stack 0
   502  0015D8                     start_initialization:
   503                           	opt stack 0
   504  0015D8                     __initialization:
   505                           	opt stack 0
   506                           
   507                           ; Initialize objects allocated to COMRAM (2 bytes)
   508                           ; load TBLPTR registers with __pidataCOMRAM
   509  0015D8  0EBC               	movlw	low __pidataCOMRAM
   510  0015DA  6EF6               	movwf	tblptrl,c
   511  0015DC  0E18               	movlw	high __pidataCOMRAM
   512  0015DE  6EF7               	movwf	tblptrh,c
   513  0015E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   514  0015E2  6EF8               	movwf	tblptru,c
   515  0015E4  0009               	tblrd		*+	;fetch initializer
   516  0015E6  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   517  0015EA  0009               	tblrd		*+	;fetch initializer
   518  0015EC  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
   519                           
   520                           ; Clear objects allocated to BANK0 (28 bytes)
   521  0015F0  EE00  F0AE         	lfsr	0,__pbssBANK0
   522  0015F4  0E1C               	movlw	28
   523  0015F6                     clear_0:
   524  0015F6  6AEE               	clrf	postinc0,c
   525  0015F8  06E8               	decf	wreg,f,c
   526  0015FA  E1FD               	bnz	clear_0
   527                           
   528                           ; Clear objects allocated to COMRAM (12 bytes)
   529  0015FC  EE00  F041         	lfsr	0,__pbssCOMRAM
   530  001600  0E0C               	movlw	12
   531  001602                     clear_1:
   532  001602  6AEE               	clrf	postinc0,c
   533  001604  06E8               	decf	wreg,f,c
   534  001606  E1FD               	bnz	clear_1
   535  001608                     end_of_initialization:
   536                           	opt stack 0
   537  001608                     __end_of__initialization:
   538                           	opt stack 0
   539  001608  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   540  00160A  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   541  00160C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   542  00160E  6EF8               	movwf	tblptru,c
   543  001610  0100               	movlb	0
   544  001612  EFFC  F007         	goto	_main	;jump to C main() function
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           
   552                           	psect	bssCOMRAM
   553  000041                     __pbssCOMRAM:
   554                           	opt stack 0
   555  000041                     _alNoTab:
   556                           	opt stack 0
   557  000041                     	ds	2
   558  000043                     _alTab:
   559                           	opt stack 0
   560  000043                     	ds	2
   561  000045                     _runResult:
   562                           	opt stack 0
   563  000045                     	ds	2
   564  000047                     _snLabel:
   565                           	opt stack 0
   566  000047                     	ds	2
   567  000049                     _snNoLabel:
   568                           	opt stack 0
   569  000049                     	ds	2
   570  00004B                     _state:
   571                           	opt stack 0
   572  00004B                     	ds	1
   573  00004C                     _logdata:
   574                           	opt stack 0
   575  00004C                     	ds	1
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           
   583                           	psect	dataCOMRAM
   584  00004D                     __pdataCOMRAM:
   585                           	opt stack 0
   586  00004D                     _loopcount:
   587                           	opt stack 0
   588  00004D                     	ds	2
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           
   596                           	psect	bssBANK0
   597  0000AE                     __pbssBANK0:
   598                           	opt stack 0
   599  0000AE                     _starttime:
   600                           	opt stack 0
   601  0000AE                     	ds	14
   602  0000BC                     _time:
   603                           	opt stack 0
   604  0000BC                     	ds	14
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           
   612                           	psect	cstackBANK0
   613  000080                     __pcstackBANK0:
   614                           	opt stack 0
   615  000080                     executingState@runCanSn:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x0
   619  000080                     	ds	2
   620  000082                     executingState@runCanAl:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x2
   624  000082                     	ds	2
   625  000084                     executingState@h_ten:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x4
   629  000084                     	ds	2
   630  000086                     executingState@h_one:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x6
   634  000086                     	ds	2
   635  000088                     executingState@m_ten:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x8
   639  000088                     	ds	2
   640  00008A                     executingState@m_one:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0xA
   644  00008A                     	ds	2
   645  00008C                     executingState@s_ten:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0xC
   649  00008C                     	ds	2
   650  00008E                     executingState@s_one:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0xE
   654  00008E                     	ds	2
   655  000090                     _executingState$1735:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x10
   659  000090                     	ds	2
   660  000092                     _executingState$1736:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x12
   664  000092                     	ds	2
   665  000094                     executingState@res:
   666                           	opt stack 0
   667                           
   668                           ; 8 bytes @ 0x14
   669  000094                     	ds	8
   670  00009C                     executingState@start_s:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x1C
   674  00009C                     	ds	2
   675  00009E                     executingState@hasTab:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x1E
   679  00009E                     	ds	2
   680  0000A0                     executingState@timedif:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x20
   684  0000A0                     	ds	2
   685  0000A2                     executingState@hasLabel:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x22
   689  0000A2                     	ds	2
   690  0000A4                     executingState@snLoaded:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x24
   694  0000A4                     	ds	2
   695  0000A6                     executingState@alLoaded:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x26
   699  0000A6                     	ds	2
   700  0000A8                     executingState@snInSensor:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x28
   704  0000A8                     	ds	2
   705  0000AA                     executingState@alInSensor:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x2A
   709  0000AA                     	ds	2
   710  0000AC                     executingState@emptyCount:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x2C
   714  0000AC                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           
   722                           	psect	cstackCOMRAM
   723  000001                     __pcstackCOMRAM:
   724                           	opt stack 0
   725  000001                     ??_keypressed:
   726  000001                     
   727                           ; 1 bytes @ 0x0
   728  000001                     	ds	14
   729  00000F                     keypressed@keypress:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0xE
   733  00000F                     	ds	1
   734  000010                     ??_isdigit:
   735  000010                     ??_I2C_Master_Wait:
   736  000010                     ?_readSnTop:
   737                           	opt stack 0
   738  000010                     ?_readAlTop:
   739                           	opt stack 0
   740  000010                     ?_readSnBot:
   741                           	opt stack 0
   742  000010                     ?_readAlBot:
   743                           	opt stack 0
   744  000010                     ?_readSnSensor:
   745                           	opt stack 0
   746  000010                     ?_servoRotateArm:
   747                           	opt stack 0
   748  000010                     ?_readKey:
   749                           	opt stack 0
   750  000010                     ?___wmul:
   751                           	opt stack 0
   752  000010                     ?___lwdiv:
   753                           	opt stack 0
   754  000010                     ?___lldiv:
   755                           	opt stack 0
   756  000010                     lcdNibble@temp:
   757                           	opt stack 0
   758  000010                     eeprom_ReadByte@address:
   759                           	opt stack 0
   760  000010                     eeprom_WriteByte@address:
   761                           	opt stack 0
   762  000010                     servoRotate1@angle:
   763                           	opt stack 0
   764  000010                     servoRotate2@angle:
   765                           	opt stack 0
   766  000010                     servoRotate4@angle:
   767                           	opt stack 0
   768  000010                     servoRotate0@servo:
   769                           	opt stack 0
   770  000010                     servoRotate90@servo:
   771                           	opt stack 0
   772  000010                     servoRotate90n@servo:
   773                           	opt stack 0
   774  000010                     ___wmul@multiplier:
   775                           	opt stack 0
   776  000010                     ___lwdiv@dividend:
   777                           	opt stack 0
   778  000010                     ___lldiv@dividend:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0xF
   782  000010                     	ds	1
   783  000011                     I2C_Master_Read@a:
   784                           	opt stack 0
   785  000011                     lcdNibble@data:
   786                           	opt stack 0
   787  000011                     _isdigit$1348:
   788                           	opt stack 0
   789  000011                     I2C_Master_Write@d:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x10
   793  000011                     	ds	1
   794  000012                     ??_servoRotate90n:
   795  000012                     ??_servoRotate2:
   796  000012                     ??_servoRotate0:
   797  000012                     ??_servoRotate1:
   798  000012                     ??_servoRotate4:
   799  000012                     ??_servoRotate90:
   800  000012                     ??_servoRotateArm:
   801  000012                     I2C_Master_Read@temp:
   802                           	opt stack 0
   803  000012                     lcdInst@data:
   804                           	opt stack 0
   805  000012                     putch@data:
   806                           	opt stack 0
   807  000012                     readKey@keypress:
   808                           	opt stack 0
   809  000012                     eeprom_WriteByte@data:
   810                           	opt stack 0
   811  000012                     isdigit@c:
   812                           	opt stack 0
   813  000012                     eeprom_GetLog@back:
   814                           	opt stack 0
   815  000012                     ___wmul@multiplicand:
   816                           	opt stack 0
   817  000012                     ___lwdiv@divisor:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x11
   821  000012                     	ds	1
   822  000013                     ??_initLCD:
   823  000013                     readKey@i:
   824                           	opt stack 0
   825  000013                     eeprom_LogResult@data:
   826                           	opt stack 0
   827  000013                     get_time@time:
   828                           	opt stack 0
   829  000013                     servoRotate1@i:
   830                           	opt stack 0
   831  000013                     servoRotate2@i:
   832                           	opt stack 0
   833  000013                     servoRotate4@i:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x12
   837  000013                     	ds	1
   838  000014                     ___lwdiv@counter:
   839                           	opt stack 0
   840  000014                     eeprom_GetLog@res:
   841                           	opt stack 0
   842  000014                     servoRotate0@i:
   843                           	opt stack 0
   844  000014                     servoRotate90@i:
   845                           	opt stack 0
   846  000014                     servoRotate90n@i:
   847                           	opt stack 0
   848  000014                     ___wmul@product:
   849                           	opt stack 0
   850  000014                     ___lldiv@divisor:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x13
   854  000014                     	ds	1
   855  000015                     ??_get_time:
   856  000015                     eeprom_LogResult@address:
   857                           	opt stack 0
   858  000015                     servoRotateArm@i_1044:
   859                           	opt stack 0
   860  000015                     ___lwdiv@quotient:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x14
   864  000015                     	ds	1
   865  000016                     ??_dispenseSnCan:
   866  000016                     ??_dispenseAlCan:
   867  000016                     ??_eeprom_GetLog:
   868  000016                     eeprom_LogResult@i:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x15
   872  000016                     	ds	1
   873  000017                     ?___lwmod:
   874                           	opt stack 0
   875  000017                     get_time@i:
   876                           	opt stack 0
   877  000017                     servoRotateArm@res:
   878                           	opt stack 0
   879  000017                     ___lwmod@dividend:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x16
   883  000017                     	ds	1
   884  000018                     ?_get_timeDif:
   885                           	opt stack 0
   886  000018                     eeprom_GetLog@address:
   887                           	opt stack 0
   888  000018                     get_timeDif@start:
   889                           	opt stack 0
   890  000018                     ___lldiv@quotient:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x17
   894  000018                     	ds	1
   895  000019                     eeprom_GetLog@i:
   896                           	opt stack 0
   897  000019                     ___lwmod@divisor:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x18
   901  000019                     	ds	1
   902  00001A                     ??_get_timeDif:
   903                           
   904                           ; 1 bytes @ 0x19
   905  00001A                     	ds	1
   906  00001B                     ___lwmod@counter:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x1A
   910  00001B                     	ds	1
   911  00001C                     ?_printf:
   912                           	opt stack 0
   913  00001C                     ___lldiv@counter:
   914                           	opt stack 0
   915  00001C                     printf@f:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x1B
   919  00001C                     	ds	1
   920  00001D                     get_timeDif@h_ten:
   921                           	opt stack 0
   922  00001D                     I2C_Master_Init@c:
   923                           	opt stack 0
   924                           
   925                           ; 4 bytes @ 0x1C
   926  00001D                     	ds	2
   927  00001F                     get_timeDif@h_one:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x1E
   931  00001F                     	ds	2
   932  000021                     ??_I2C_Master_Init:
   933  000021                     get_timeDif@m_ten:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x20
   937  000021                     	ds	2
   938  000023                     get_timeDif@m_one:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x22
   942  000023                     	ds	2
   943  000025                     get_timeDif@s_ten:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x24
   947  000025                     	ds	1
   948  000026                     ??_printf:
   949                           
   950                           ; 1 bytes @ 0x25
   951  000026                     	ds	1
   952  000027                     get_timeDif@s_one:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x26
   956  000027                     	ds	2
   957  000029                     get_timeDif@start_s:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x28
   961  000029                     	ds	1
   962  00002A                     printf@idx:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x29
   966  00002A                     	ds	1
   967  00002B                     printf@ap:
   968                           	opt stack 0
   969  00002B                     _get_timeDif$1733:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x2A
   973  00002B                     	ds	2
   974  00002D                     printf@prec:
   975                           	opt stack 0
   976  00002D                     _get_timeDif$1734:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x2C
   980  00002D                     	ds	1
   981  00002E                     printf@val:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x2D
   985  00002E                     	ds	2
   986  000030                     printf@flag:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x2F
   990  000030                     	ds	1
   991  000031                     printf@width:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x30
   995  000031                     	ds	2
   996  000033                     printf@c:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x32
  1000  000033                     	ds	1
  1001  000034                     ??_executingState:
  1002  000034                     ??_finishState:
  1003  000034                     ??_debugState:
  1004  000034                     ??_fixLCD:
  1005  000034                     mainState@keypress:
  1006                           	opt stack 0
  1007  000034                     logState@log:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x33
  1011  000034                     	ds	1
  1012  000035                     fixLCD@i:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x34
  1016  000035                     	ds	1
  1017  000036                     finishState@keypress:
  1018                           	opt stack 0
  1019  000036                     logState@keypress:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x35
  1023  000036                     	ds	1
  1024  000037                     fixLCD@time:
  1025                           	opt stack 0
  1026                           
  1027                           ; 7 bytes @ 0x36
  1028  000037                     	ds	7
  1029  00003E                     fixLCD@j:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x3D
  1033  00003E                     	ds	2
  1034  000040                     fixLCD@i_596:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x3F
  1038  000040                     	ds	1
  1039  000041                     tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           
  1046                           ; 1 bytes @ 0x40
  1047 ;;
  1048 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1049 ;;
  1050 ;; *************** function _main *****************
  1051 ;; Defined at:
  1052 ;;		line 449 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels required when called:    6
  1072 ;; This function calls:
  1073 ;;		_I2C_Master_Init
  1074 ;;		_debugState
  1075 ;;		_eeprom_initialize
  1076 ;;		_executingState
  1077 ;;		_finishState
  1078 ;;		_fixLCD
  1079 ;;		_initLCD
  1080 ;;		_logState
  1081 ;;		_mainState
  1082 ;; This function is called by:
  1083 ;;		Startup code after reset
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text0
  1088  000FF8                     __ptext0:
  1089                           	opt stack 0
  1090  000FF8                     _main:
  1091                           	opt stack 25
  1092                           
  1093                           ;main.c: 452: fixLCD();
  1094                           
  1095                           ;incstack = 0
  1096  000FF8  EC65  F004         	call	_fixLCD	;wreg free
  1097                           
  1098                           ;main.c: 454: OSCCON = 0xF0;
  1099  000FFC  0EF0               	movlw	240
  1100  000FFE  6ED3               	movwf	4051,c	;volatile
  1101                           
  1102                           ;main.c: 460: TRISA = 0b00001111;
  1103  001000  0E0F               	movlw	15
  1104  001002  6E92               	movwf	3986,c	;volatile
  1105                           
  1106                           ;main.c: 461: TRISB = 0b11110010;
  1107  001004  0EF2               	movlw	242
  1108  001006  6E93               	movwf	3987,c	;volatile
  1109                           
  1110                           ;main.c: 462: TRISC = 0b00011011;
  1111  001008  0E1B               	movlw	27
  1112  00100A  6E94               	movwf	3988,c	;volatile
  1113                           
  1114                           ;main.c: 463: TRISD = 0x00;
  1115  00100C  0E00               	movlw	0
  1116  00100E  6E95               	movwf	3989,c	;volatile
  1117                           
  1118                           ;main.c: 464: TRISE = 0x00;
  1119  001010  0E00               	movlw	0
  1120  001012  6E96               	movwf	3990,c	;volatile
  1121                           
  1122                           ;main.c: 466: LATA = 0x00;
  1123  001014  0E00               	movlw	0
  1124  001016  6E89               	movwf	3977,c	;volatile
  1125                           
  1126                           ;main.c: 467: LATB = 0x00;
  1127  001018  0E00               	movlw	0
  1128  00101A  6E8A               	movwf	3978,c	;volatile
  1129                           
  1130                           ;main.c: 468: LATC = 0x00;
  1131  00101C  0E00               	movlw	0
  1132  00101E  6E8B               	movwf	3979,c	;volatile
  1133                           
  1134                           ;main.c: 469: LATD = 0x00;
  1135  001020  0E00               	movlw	0
  1136  001022  6E8C               	movwf	3980,c	;volatile
  1137                           
  1138                           ;main.c: 470: LATE = 0x00;
  1139  001024  0E00               	movlw	0
  1140  001026  6E8D               	movwf	3981,c	;volatile
  1141                           
  1142                           ;main.c: 472: ADCON0 = 0x00;
  1143  001028  0E00               	movlw	0
  1144  00102A  6EC2               	movwf	4034,c	;volatile
  1145                           
  1146                           ;main.c: 473: ADCON1 = 0x0F;
  1147  00102C  0E0F               	movlw	15
  1148  00102E  6EC1               	movwf	4033,c	;volatile
  1149                           
  1150                           ;main.c: 474: CMCON = 0x07;
  1151  001030  0E07               	movlw	7
  1152  001032  6EB4               	movwf	4020,c	;volatile
  1153                           
  1154                           ;main.c: 477: initLCD();
  1155  001034  EC88  F00A         	call	_initLCD	;wreg free
  1156                           
  1157                           ;main.c: 478: eeprom_initialize();
  1158  001038  ECE0  F00B         	call	_eeprom_initialize	;wreg free
  1159                           
  1160                           ;main.c: 479: I2C_Master_Init(10000);
  1161  00103C  0E10               	movlw	16
  1162  00103E  6E1D               	movwf	I2C_Master_Init@c,c
  1163  001040  0E27               	movlw	39
  1164  001042  6E1E               	movwf	I2C_Master_Init@c+1,c
  1165  001044  0E00               	movlw	0
  1166  001046  6E1F               	movwf	I2C_Master_Init@c+2,c
  1167  001048  0E00               	movlw	0
  1168  00104A  6E20               	movwf	I2C_Master_Init@c+3,c
  1169  00104C  EC72  F009         	call	_I2C_Master_Init	;wreg free
  1170                           
  1171                           ;main.c: 481: INT1IE = 1;
  1172  001050  86F0               	bsf	intcon3,3,c	;volatile
  1173                           
  1174                           ;main.c: 482: (INTCONbits.GIE = 0);
  1175  001052  9EF2               	bcf	intcon,7,c	;volatile
  1176                           
  1177                           ;main.c: 484: state = MAIN;
  1178  001054  0E00               	movlw	0
  1179  001056  6E4B               	movwf	_state,c
  1180                           
  1181                           ;main.c: 491: {
  1182                           ;main.c: 492: switch (state)
  1183                           
  1184                           ;main.c: 490: while (1)
  1185  001058  D00E               	goto	l4551
  1186  00105A                     l4539:
  1187                           
  1188                           ;main.c: 495: mainState();
  1189  00105A  EC40  F00A         	call	_mainState	;wreg free
  1190                           
  1191                           ;main.c: 496: break;
  1192  00105E  D00B               	goto	l4551
  1193  001060                     l4541:
  1194                           
  1195                           ;main.c: 498: executingState();
  1196  001060  EC09  F000         	call	_executingState	;wreg free
  1197                           
  1198                           ;main.c: 499: break;
  1199  001064  D008               	goto	l4551
  1200  001066                     l4543:
  1201                           
  1202                           ;main.c: 501: finishState();
  1203  001066  EC0B  F00B         	call	_finishState	;wreg free
  1204                           
  1205                           ;main.c: 502: break;
  1206  00106A  D005               	goto	l4551
  1207  00106C                     l4545:
  1208                           
  1209                           ;main.c: 504: logState();
  1210  00106C  ECF3  F009         	call	_logState	;wreg free
  1211                           
  1212                           ;main.c: 505: break;
  1213  001070  D002               	goto	l4551
  1214  001072                     l4547:
  1215                           
  1216                           ;main.c: 507: debugState();
  1217  001072  ECD0  F008         	call	_debugState	;wreg free
  1218  001076                     l4551:
  1219  001076  504B               	movf	_state,w,c
  1220                           
  1221                           ; Switch size 1, requested type "space"
  1222                           ; Number of cases is 5, Range of values is 0 to 5
  1223                           ; switch strategies available:
  1224                           ; Name         Instructions Cycles
  1225                           ; simple_byte           16     9 (average)
  1226                           ;	Chosen strategy is simple_byte
  1227  001078  0A00               	xorlw	0	; case 0
  1228  00107A  B4D8               	btfsc	status,2,c
  1229  00107C  D7EE               	goto	l4539
  1230  00107E  0A01               	xorlw	1	; case 1
  1231  001080  B4D8               	btfsc	status,2,c
  1232  001082  D7EE               	goto	l4541
  1233  001084  0A03               	xorlw	3	; case 2
  1234  001086  B4D8               	btfsc	status,2,c
  1235  001088  D7EE               	goto	l4543
  1236  00108A  0A01               	xorlw	1	; case 3
  1237  00108C  B4D8               	btfsc	status,2,c
  1238  00108E  D7EE               	goto	l4545
  1239  001090  0A06               	xorlw	6	; case 5
  1240  001092  B4D8               	btfsc	status,2,c
  1241  001094  D7EE               	goto	l4547
  1242  001096  D7EF               	goto	l4551
  1243  001098                     __end_of_main:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           intcon	equ	0xFF2
  1250                           intcon3	equ	0xFF0
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           status	equ	0xFD8
  1254                           
  1255 ;; *************** function _mainState *****************
  1256 ;; Defined at:
  1257 ;;		line 121 in file "main.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;  keypress        2   51[COMRAM] int 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;Total ram usage:        2 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    5
  1278 ;; This function calls:
  1279 ;;		_get_time
  1280 ;;		_readKey
  1281 ;;		_update_lcd
  1282 ;; This function is called by:
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text1
  1288  001480                     __ptext1:
  1289                           	opt stack 0
  1290  001480                     _mainState:
  1291                           	opt stack 25
  1292                           
  1293                           ;main.c: 123: LATBbits.LATB0 = 0;
  1294                           
  1295                           ;incstack = 0
  1296  001480  908A               	bcf	3978,0,c	;volatile
  1297                           
  1298                           ;main.c: 124: LATCbits.LATC6 = 0;
  1299  001482  9C8B               	bcf	3979,6,c	;volatile
  1300  001484                     l4131:
  1301                           
  1302                           ;main.c: 126: {
  1303                           ;main.c: 128: get_time(time);
  1304  001484  0EBC               	movlw	low _time
  1305  001486  6E13               	movwf	get_time@time,c
  1306  001488  0E00               	movlw	high _time
  1307  00148A  6E14               	movwf	get_time@time+1,c
  1308  00148C  EC4C  F008         	call	_get_time	;wreg free
  1309                           
  1310                           ;main.c: 129: update_lcd();
  1311  001490  ECE3  F005         	call	_update_lcd	;wreg free
  1312                           
  1313                           ;main.c: 131: int keypress = readKey();
  1314  001494  EC64  F00A         	call	_readKey	;wreg free
  1315  001498  C010  F034         	movff	?_readKey,mainState@keypress
  1316  00149C  C011  F035         	movff	?_readKey+1,mainState@keypress+1
  1317                           
  1318                           ;main.c: 132: if(keypress == 0b0000){
  1319  0014A0  5034               	movf	mainState@keypress,w,c
  1320  0014A2  1035               	iorwf	mainState@keypress+1,w,c
  1321  0014A4  A4D8               	btfss	status,2,c
  1322  0014A6  D003               	goto	l4145
  1323                           
  1324                           ;main.c: 137: state = EXECUTING;
  1325  0014A8  0E01               	movlw	1
  1326  0014AA                     L1:
  1327  0014AA  6E4B               	movwf	_state,c
  1328                           
  1329                           ;main.c: 138: return;
  1330  0014AC  0012               	return	
  1331  0014AE                     l4145:
  1332  0014AE  0434               	decf	mainState@keypress,w,c
  1333  0014B0  1035               	iorwf	mainState@keypress+1,w,c
  1334  0014B2  A4D8               	btfss	status,2,c
  1335  0014B4  D002               	goto	l4153
  1336                           
  1337                           ;main.c: 141: state = LOG;
  1338  0014B6  0E03               	movlw	3
  1339  0014B8  D7F8               	goto	L1
  1340  0014BA                     l4153:
  1341  0014BA  0E03               	movlw	3
  1342  0014BC  1834               	xorwf	mainState@keypress,w,c
  1343  0014BE  1035               	iorwf	mainState@keypress+1,w,c
  1344  0014C0  A4D8               	btfss	status,2,c
  1345  0014C2  D7E0               	goto	l4131
  1346                           
  1347                           ;main.c: 144: state = DEBUG;
  1348  0014C4  0E05               	movlw	5
  1349  0014C6  D7F1               	goto	L1
  1350  0014C8                     __end_of_mainState:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           intcon	equ	0xFF2
  1357                           intcon3	equ	0xFF0
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _logState *****************
  1363 ;; Defined at:
  1364 ;;		line 326 in file "main.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  keypress        2   53[COMRAM] int 
  1369 ;;  log             2   51[COMRAM] int 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;Total ram usage:        4 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    5
  1386 ;; This function calls:
  1387 ;;		_eeprom_GetLog
  1388 ;;		_readKey
  1389 ;;		_update_lcd
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text2
  1396  0013E6                     __ptext2:
  1397                           	opt stack 0
  1398  0013E6                     _logState:
  1399                           	opt stack 25
  1400                           
  1401                           ;main.c: 328: update_lcd();
  1402                           
  1403                           ;incstack = 0
  1404  0013E6  ECE3  F005         	call	_update_lcd	;wreg free
  1405                           
  1406                           ;main.c: 329: int log = 0;
  1407  0013EA  0E00               	movlw	0
  1408  0013EC  6E35               	movwf	logState@log+1,c
  1409  0013EE  0E00               	movlw	0
  1410  0013F0  6E34               	movwf	logState@log,c
  1411  0013F2                     l4385:
  1412                           
  1413                           ;main.c: 331: int keypress = readKey();
  1414  0013F2  EC64  F00A         	call	_readKey	;wreg free
  1415  0013F6  C010  F036         	movff	?_readKey,logState@keypress
  1416  0013FA  C011  F037         	movff	?_readKey+1,logState@keypress+1
  1417                           
  1418                           ;main.c: 332: if(keypress == 0b0001){
  1419  0013FE  0436               	decf	logState@keypress,w,c
  1420  001400  1037               	iorwf	logState@keypress+1,w,c
  1421  001402  A4D8               	btfss	status,2,c
  1422  001404  D00F               	goto	l4399
  1423                           
  1424                           ;main.c: 333: log++;
  1425  001406  4A34               	infsnz	logState@log,f,c
  1426  001408  2A35               	incf	logState@log+1,f,c
  1427                           
  1428                           ;main.c: 334: eeprom_GetLog(log, &logdata);
  1429  00140A  C034  F012         	movff	logState@log,eeprom_GetLog@back
  1430  00140E  C035  F013         	movff	logState@log+1,eeprom_GetLog@back+1
  1431  001412  0E4C               	movlw	low _logdata
  1432  001414  6E14               	movwf	eeprom_GetLog@res,c
  1433  001416  0E00               	movlw	high _logdata
  1434  001418  6E15               	movwf	eeprom_GetLog@res+1,c
  1435  00141A  EC42  F009         	call	_eeprom_GetLog	;wreg free
  1436                           
  1437                           ;main.c: 335: update_lcd();
  1438  00141E  ECE3  F005         	call	_update_lcd	;wreg free
  1439                           
  1440                           ;main.c: 336: return;
  1441  001422  0012               	return	
  1442  001424                     l4399:
  1443  001424  0E0D               	movlw	13
  1444  001426  1836               	xorwf	logState@keypress,w,c
  1445  001428  1037               	iorwf	logState@keypress+1,w,c
  1446  00142A  A4D8               	btfss	status,2,c
  1447  00142C  D7E2               	goto	l4385
  1448                           
  1449                           ;main.c: 338: state = MAIN;
  1450  00142E  0E00               	movlw	0
  1451  001430  6E4B               	movwf	_state,c
  1452                           
  1453                           ;main.c: 339: return;
  1454  001432  0012               	return	
  1455  001434                     __end_of_logState:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           intcon	equ	0xFF2
  1462                           intcon3	equ	0xFF0
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _eeprom_GetLog *****************
  1468 ;; Defined at:
  1469 ;;		line 90 in file "eeprom.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  back            2   17[COMRAM] int 
  1472 ;;  res             2   19[COMRAM] PTR int 
  1473 ;;		 -> logdata(1), 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  i               2   24[COMRAM] int 
  1476 ;;  address         1   23[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;Total ram usage:        9 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    3
  1493 ;; This function calls:
  1494 ;;		_eeprom_ReadByte
  1495 ;;		_newestAddress
  1496 ;; This function is called by:
  1497 ;;		_logState
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text3
  1502  001284                     __ptext3:
  1503                           	opt stack 0
  1504  001284                     _eeprom_GetLog:
  1505                           	opt stack 26
  1506                           
  1507                           ;eeprom.c: 91: uint8_t address = newestAddress();
  1508                           
  1509                           ;incstack = 0
  1510  001284  EC3E  F00C         	call	_newestAddress	;wreg free
  1511  001288  6E18               	movwf	eeprom_GetLog@address,c
  1512                           
  1513                           ;eeprom.c: 92: address = address - back*5;
  1514  00128A  5012               	movf	eeprom_GetLog@back,w,c
  1515  00128C  0D05               	mullw	5
  1516  00128E  50F3               	movf	prodl,w,c
  1517  001290  0800               	sublw	0
  1518  001292  2418               	addwf	eeprom_GetLog@address,w,c
  1519  001294  6E18               	movwf	eeprom_GetLog@address,c
  1520                           
  1521                           ;eeprom.c: 93: for(int i = 0; i < 5; i++){
  1522  001296  0E00               	movlw	0
  1523  001298  6E1A               	movwf	eeprom_GetLog@i+1,c
  1524  00129A  0E00               	movlw	0
  1525  00129C  6E19               	movwf	eeprom_GetLog@i,c
  1526  00129E                     l4119:
  1527  00129E  BE1A               	btfsc	eeprom_GetLog@i+1,7,c
  1528  0012A0  D006               	goto	l4123
  1529  0012A2  501A               	movf	eeprom_GetLog@i+1,w,c
  1530  0012A4  E11E               	bnz	l359
  1531  0012A6  0E05               	movlw	5
  1532  0012A8  5C19               	subwf	eeprom_GetLog@i,w,c
  1533  0012AA  B0D8               	btfsc	status,0,c
  1534  0012AC  0012               	return	
  1535  0012AE                     l4123:
  1536                           
  1537                           ;eeprom.c: 94: res[i] = eeprom_ReadByte(address + i);
  1538  0012AE  5018               	movf	eeprom_GetLog@address,w,c
  1539  0012B0  2419               	addwf	eeprom_GetLog@i,w,c
  1540  0012B2  6E10               	movwf	eeprom_ReadByte@address,c
  1541  0012B4  0E00               	movlw	0
  1542  0012B6  201A               	addwfc	eeprom_GetLog@i+1,w,c
  1543  0012B8  6E11               	movwf	eeprom_ReadByte@address+1,c
  1544  0012BA  EC2A  F00C         	call	_eeprom_ReadByte	;wreg free
  1545  0012BE  6E16               	movwf	??_eeprom_GetLog& (0+255),c
  1546  0012C0  6A17               	clrf	(??_eeprom_GetLog+1)& (0+255),c
  1547  0012C2  90D8               	bcf	status,0,c
  1548  0012C4  3419               	rlcf	eeprom_GetLog@i,w,c
  1549  0012C6  6ED9               	movwf	fsr2l,c
  1550  0012C8  341A               	rlcf	eeprom_GetLog@i+1,w,c
  1551  0012CA  6EDA               	movwf	fsr2h,c
  1552  0012CC  5014               	movf	eeprom_GetLog@res,w,c
  1553  0012CE  26D9               	addwf	fsr2l,f,c
  1554  0012D0  5015               	movf	eeprom_GetLog@res+1,w,c
  1555  0012D2  22DA               	addwfc	fsr2h,f,c
  1556  0012D4  C016  FFDE         	movff	??_eeprom_GetLog,postinc2
  1557  0012D8  C017  FFDD         	movff	??_eeprom_GetLog+1,postdec2
  1558  0012DC  4A19               	infsnz	eeprom_GetLog@i,f,c
  1559  0012DE  2A1A               	incf	eeprom_GetLog@i+1,f,c
  1560  0012E0  D7DE               	goto	l4119
  1561  0012E2                     l359:
  1562  0012E2  0012               	return		;funcret
  1563  0012E4                     __end_of_eeprom_GetLog:
  1564                           	opt stack 0
  1565                           tblptru	equ	0xFF8
  1566                           tblptrh	equ	0xFF7
  1567                           tblptrl	equ	0xFF6
  1568                           tablat	equ	0xFF5
  1569                           prodl	equ	0xFF3
  1570                           intcon	equ	0xFF2
  1571                           intcon3	equ	0xFF0
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postinc2	equ	0xFDE
  1575                           postdec2	equ	0xFDD
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _fixLCD *****************
  1581 ;; Defined at:
  1582 ;;		line 382 in file "main.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  i               1   63[COMRAM] unsigned char 
  1587 ;;  time            7   54[COMRAM] unsigned char [7]
  1588 ;;  j               2   61[COMRAM] int 
  1589 ;;  i               2   52[COMRAM] int 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;Total ram usage:       13 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    4
  1606 ;; This function calls:
  1607 ;;		_I2C_Master_Init
  1608 ;;		_I2C_Master_Read
  1609 ;;		_I2C_Master_Start
  1610 ;;		_I2C_Master_Stop
  1611 ;;		_I2C_Master_Write
  1612 ;;		_initLCD
  1613 ;;		_lcdInst
  1614 ;;		_printf
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text4
  1621  0008CA                     __ptext4:
  1622                           	opt stack 0
  1623  0008CA                     _fixLCD:
  1624                           	opt stack 26
  1625                           
  1626                           ;main.c: 384: OSCCON = 0xF0;
  1627                           
  1628                           ;incstack = 0
  1629  0008CA  0EF0               	movlw	240
  1630  0008CC  6ED3               	movwf	4051,c	;volatile
  1631                           
  1632                           ;main.c: 388: TRISA = 0x00;
  1633  0008CE  0E00               	movlw	0
  1634  0008D0  6E92               	movwf	3986,c	;volatile
  1635                           
  1636                           ;main.c: 389: TRISB = 0b11110010;
  1637  0008D2  0EF2               	movlw	242
  1638  0008D4  6E93               	movwf	3987,c	;volatile
  1639                           
  1640                           ;main.c: 390: TRISC = 0x00011000;
  1641  0008D6  0E00               	movlw	0
  1642  0008D8  6E94               	movwf	3988,c	;volatile
  1643                           
  1644                           ;main.c: 391: TRISD = 0x00;
  1645  0008DA  0E00               	movlw	0
  1646  0008DC  6E95               	movwf	3989,c	;volatile
  1647                           
  1648                           ;main.c: 392: TRISE = 0x00;
  1649  0008DE  0E00               	movlw	0
  1650  0008E0  6E96               	movwf	3990,c	;volatile
  1651                           
  1652                           ;main.c: 393: LATA = 0x00;
  1653  0008E2  0E00               	movlw	0
  1654  0008E4  6E89               	movwf	3977,c	;volatile
  1655                           
  1656                           ;main.c: 394: LATB = 0x00;
  1657  0008E6  0E00               	movlw	0
  1658  0008E8  6E8A               	movwf	3978,c	;volatile
  1659                           
  1660                           ;main.c: 395: LATC = 0x00;
  1661  0008EA  0E00               	movlw	0
  1662  0008EC  6E8B               	movwf	3979,c	;volatile
  1663                           
  1664                           ;main.c: 396: LATD = 0x00;
  1665  0008EE  0E00               	movlw	0
  1666  0008F0  6E8C               	movwf	3980,c	;volatile
  1667                           
  1668                           ;main.c: 397: LATE = 0x00;
  1669  0008F2  0E00               	movlw	0
  1670  0008F4  6E8D               	movwf	3981,c	;volatile
  1671                           
  1672                           ;main.c: 398: ADCON0 = 0x00;
  1673  0008F6  0E00               	movlw	0
  1674  0008F8  6EC2               	movwf	4034,c	;volatile
  1675                           
  1676                           ;main.c: 399: ADCON1 = 0x00;
  1677  0008FA  0E00               	movlw	0
  1678  0008FC  6EC1               	movwf	4033,c	;volatile
  1679                           
  1680                           ;main.c: 401: initLCD();
  1681  0008FE  EC88  F00A         	call	_initLCD	;wreg free
  1682                           
  1683                           ;main.c: 402: I2C_Master_Init(10000);
  1684  000902  0E10               	movlw	16
  1685  000904  6E1D               	movwf	I2C_Master_Init@c,c
  1686  000906  0E27               	movlw	39
  1687  000908  6E1E               	movwf	I2C_Master_Init@c+1,c
  1688  00090A  0E00               	movlw	0
  1689  00090C  6E1F               	movwf	I2C_Master_Init@c+2,c
  1690  00090E  0E00               	movlw	0
  1691  000910  6E20               	movwf	I2C_Master_Init@c+3,c
  1692  000912  EC72  F009         	call	_I2C_Master_Init	;wreg free
  1693                           
  1694                           ;main.c: 403: (INTCONbits.GIE = 0);
  1695  000916  9EF2               	bcf	intcon,7,c	;volatile
  1696                           
  1697                           ;main.c: 404: unsigned char time[7];
  1698                           ;main.c: 406: LATA = 0b01010101;
  1699  000918  0E55               	movlw	85
  1700  00091A  6E89               	movwf	3977,c	;volatile
  1701                           
  1702                           ;main.c: 407: LATB = 0b01010101;
  1703  00091C  0E55               	movlw	85
  1704  00091E  6E8A               	movwf	3978,c	;volatile
  1705                           
  1706                           ;main.c: 408: LATC = 0b01010101;
  1707  000920  0E55               	movlw	85
  1708  000922  6E8B               	movwf	3979,c	;volatile
  1709                           
  1710                           ;main.c: 409: LATDbits.LATD0 = 1;
  1711  000924  808C               	bsf	3980,0,c	;volatile
  1712                           
  1713                           ;main.c: 410: LATDbits.LATD1 = 0;
  1714  000926  928C               	bcf	3980,1,c	;volatile
  1715                           
  1716                           ;main.c: 411: LATEbits.LATE0 = 1;
  1717  000928  808D               	bsf	3981,0,c	;volatile
  1718                           
  1719                           ;main.c: 412: LATEbits.LATE1 = 0;
  1720  00092A  928D               	bcf	3981,1,c	;volatile
  1721                           
  1722                           ;main.c: 413: int i = 0;
  1723  00092C  0E00               	movlw	0
  1724  00092E  6E36               	movwf	fixLCD@i+1,c
  1725  000930  0E00               	movlw	0
  1726  000932  6E35               	movwf	fixLCD@i,c
  1727                           
  1728                           ;main.c: 414: int j = 0;
  1729  000934  0E00               	movlw	0
  1730  000936  6E3F               	movwf	fixLCD@j+1,c
  1731  000938  0E00               	movlw	0
  1732  00093A  6E3E               	movwf	fixLCD@j,c
  1733                           
  1734                           ;main.c: 415: while(j < 10){
  1735  00093C  D095               	goto	l4487
  1736  00093E                     l4445:
  1737                           
  1738                           ;main.c: 417: I2C_Master_Start();
  1739  00093E  EC5A  F00C         	call	_I2C_Master_Start	;wreg free
  1740                           
  1741                           ;main.c: 418: I2C_Master_Write(0b11010000);
  1742  000942  0E00               	movlw	0
  1743  000944  6E12               	movwf	I2C_Master_Write@d+1,c
  1744  000946  0ED0               	movlw	208
  1745  000948  6E11               	movwf	I2C_Master_Write@d,c
  1746  00094A  EC51  F00C         	call	_I2C_Master_Write	;wreg free
  1747                           
  1748                           ;main.c: 419: I2C_Master_Write(0x00);
  1749  00094E  0E00               	movlw	0
  1750  000950  6E12               	movwf	I2C_Master_Write@d+1,c
  1751  000952  0E00               	movlw	0
  1752  000954  6E11               	movwf	I2C_Master_Write@d,c
  1753  000956  EC51  F00C         	call	_I2C_Master_Write	;wreg free
  1754                           
  1755                           ;main.c: 420: I2C_Master_Stop();
  1756  00095A  EC56  F00C         	call	_I2C_Master_Stop	;wreg free
  1757                           
  1758                           ;main.c: 423: I2C_Master_Start();
  1759  00095E  EC5A  F00C         	call	_I2C_Master_Start	;wreg free
  1760                           
  1761                           ;main.c: 424: I2C_Master_Write(0b11010001);
  1762  000962  0E00               	movlw	0
  1763  000964  6E12               	movwf	I2C_Master_Write@d+1,c
  1764  000966  0ED1               	movlw	209
  1765  000968  6E11               	movwf	I2C_Master_Write@d,c
  1766  00096A  EC51  F00C         	call	_I2C_Master_Write	;wreg free
  1767                           
  1768                           ;main.c: 425: for(unsigned char i=0;i<0x06;i++){
  1769  00096E  0E00               	movlw	0
  1770  000970  6E40               	movwf	fixLCD@i_596,c
  1771  000972                     l4449:
  1772  000972  0E05               	movlw	5
  1773  000974  6440               	cpfsgt	fixLCD@i_596,c
  1774  000976  D001               	goto	l4453
  1775  000978  D00E               	goto	l4459
  1776  00097A                     l4453:
  1777                           
  1778                           ;main.c: 426: time[i] = I2C_Master_Read(1);
  1779  00097A  5040               	movf	fixLCD@i_596,w,c
  1780  00097C  0D01               	mullw	1
  1781  00097E  0E37               	movlw	low fixLCD@time
  1782  000980  24F3               	addwf	prodl,w,c
  1783  000982  6ED9               	movwf	fsr2l,c
  1784  000984  0E00               	movlw	high fixLCD@time
  1785  000986  20F4               	addwfc	prodh,w,c
  1786  000988  6EDA               	movwf	fsr2h,c
  1787  00098A  0E01               	movlw	1
  1788  00098C  EC98  F00B         	call	_I2C_Master_Read
  1789  000990  6EDF               	movwf	indf2,c
  1790  000992  2A40               	incf	fixLCD@i_596,f,c
  1791  000994  D7EE               	goto	l4449
  1792  000996                     l4459:
  1793                           
  1794                           ;main.c: 427: }
  1795                           ;main.c: 428: time[6] = I2C_Master_Read(0);
  1796  000996  0E00               	movlw	0
  1797  000998  EC98  F00B         	call	_I2C_Master_Read
  1798  00099C  6E3D               	movwf	fixLCD@time+6,c
  1799                           
  1800                           ;main.c: 429: I2C_Master_Stop();
  1801  00099E  EC56  F00C         	call	_I2C_Master_Stop	;wreg free
  1802                           
  1803                           ;main.c: 430: lcdInst(0b10000000);;
  1804  0009A2  0E80               	movlw	128
  1805  0009A4  EC4B  F00C         	call	_lcdInst
  1806                           
  1807                           ;main.c: 431: printf("%02x%02x/%02x ", time[6],time[5],time[4]);
  1808  0009A8  0ECF               	movlw	low STR_16
  1809  0009AA  6E1C               	movwf	printf@f,c
  1810  0009AC  0EFF               	movlw	high STR_16
  1811  0009AE  6E1D               	movwf	printf@f+1,c
  1812  0009B0  C03D  F01E         	movff	fixLCD@time+6,?_printf+2
  1813  0009B4  6A1F               	clrf	?_printf+3,c
  1814  0009B6  C03C  F020         	movff	fixLCD@time+5,?_printf+4
  1815  0009BA  6A21               	clrf	?_printf+5,c
  1816  0009BC  C03B  F022         	movff	fixLCD@time+4,?_printf+6
  1817  0009C0  6A23               	clrf	?_printf+7,c
  1818  0009C2  ECDF  F002         	call	_printf	;wreg free
  1819                           
  1820                           ;main.c: 432: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1821  0009C6  0EDE               	movlw	low STR_2
  1822  0009C8  6E1C               	movwf	printf@f,c
  1823  0009CA  0EFF               	movlw	high STR_2
  1824  0009CC  6E1D               	movwf	printf@f+1,c
  1825  0009CE  C039  F01E         	movff	fixLCD@time+2,?_printf+2
  1826  0009D2  6A1F               	clrf	?_printf+3,c
  1827  0009D4  C038  F020         	movff	fixLCD@time+1,?_printf+4
  1828  0009D8  6A21               	clrf	?_printf+5,c
  1829  0009DA  C037  F022         	movff	fixLCD@time,?_printf+6
  1830  0009DE  6A23               	clrf	?_printf+7,c
  1831  0009E0  ECDF  F002         	call	_printf	;wreg free
  1832                           
  1833                           ;main.c: 433: lcdInst(0b11000000);;
  1834  0009E4  0EC0               	movlw	192
  1835  0009E6  EC4B  F00C         	call	_lcdInst
  1836                           
  1837                           ;main.c: 434: printf("              ");
  1838  0009EA  0E39               	movlw	low (STR_13+2)
  1839  0009EC  6E1C               	movwf	printf@f,c
  1840  0009EE  0EFF               	movlw	high (STR_13+2)
  1841  0009F0  6E1D               	movwf	printf@f+1,c
  1842  0009F2  ECDF  F002         	call	_printf	;wreg free
  1843                           
  1844                           ;main.c: 435: lcdInst(0b10000000);;
  1845  0009F6  0E80               	movlw	128
  1846  0009F8  EC4B  F00C         	call	_lcdInst
  1847                           
  1848                           ;main.c: 436: lcdInst(0b11000000);;
  1849  0009FC  0EC0               	movlw	192
  1850  0009FE  EC4B  F00C         	call	_lcdInst
  1851                           
  1852                           ;main.c: 438: LATA = LATA ^ 0xFF;
  1853  000A02  1E89               	comf	3977,f,c	;volatile
  1854                           
  1855                           ;main.c: 439: LATB = LATB ^ 0xFF;
  1856  000A04  1E8A               	comf	3978,f,c	;volatile
  1857                           
  1858                           ;main.c: 440: LATC = LATC ^ 0xFF;
  1859  000A06  1E8B               	comf	3979,f,c	;volatile
  1860                           
  1861                           ;main.c: 441: LATDbits.LATD0 = !LATDbits.LATD0;
  1862  000A08  B08C               	btfsc	3980,0,c	;volatile
  1863  000A0A  D003               	goto	u3270
  1864  000A0C  6A34               	clrf	??_fixLCD& (0+255),c
  1865  000A0E  2A34               	incf	??_fixLCD& (0+255),f,c
  1866  000A10  D001               	goto	u3288
  1867  000A12                     u3270:
  1868  000A12  6A34               	clrf	??_fixLCD& (0+255),c
  1869  000A14                     u3288:
  1870  000A14  508C               	movf	3980,w,c	;volatile
  1871  000A16  1834               	xorwf	??_fixLCD,w,c
  1872  000A18  0BFE               	andlw	-2
  1873  000A1A  1834               	xorwf	??_fixLCD,w,c
  1874  000A1C  6E8C               	movwf	3980,c	;volatile
  1875                           
  1876                           ;main.c: 442: LATDbits.LATD1 = !LATDbits.LATD1;
  1877  000A1E  B28C               	btfsc	3980,1,c	;volatile
  1878  000A20  D003               	goto	u3290
  1879  000A22  6A34               	clrf	??_fixLCD& (0+255),c
  1880  000A24  2A34               	incf	??_fixLCD& (0+255),f,c
  1881  000A26  D001               	goto	u3308
  1882  000A28                     u3290:
  1883  000A28  6A34               	clrf	??_fixLCD& (0+255),c
  1884  000A2A                     u3308:
  1885  000A2A  4634               	rlncf	??_fixLCD,f,c
  1886  000A2C  508C               	movf	3980,w,c	;volatile
  1887  000A2E  1834               	xorwf	??_fixLCD,w,c
  1888  000A30  0BFD               	andlw	-3
  1889  000A32  1834               	xorwf	??_fixLCD,w,c
  1890  000A34  6E8C               	movwf	3980,c	;volatile
  1891                           
  1892                           ;main.c: 443: LATEbits.LATE0 = !LATEbits.LATE0;
  1893  000A36  B08D               	btfsc	3981,0,c	;volatile
  1894  000A38  D003               	goto	u3310
  1895  000A3A  6A34               	clrf	??_fixLCD& (0+255),c
  1896  000A3C  2A34               	incf	??_fixLCD& (0+255),f,c
  1897  000A3E  D001               	goto	u3328
  1898  000A40                     u3310:
  1899  000A40  6A34               	clrf	??_fixLCD& (0+255),c
  1900  000A42                     u3328:
  1901  000A42  508D               	movf	3981,w,c	;volatile
  1902  000A44  1834               	xorwf	??_fixLCD,w,c
  1903  000A46  0BFE               	andlw	-2
  1904  000A48  1834               	xorwf	??_fixLCD,w,c
  1905  000A4A  6E8D               	movwf	3981,c	;volatile
  1906                           
  1907                           ;main.c: 444: LATEbits.LATE1 = !LATEbits.LATE1;
  1908  000A4C  B28D               	btfsc	3981,1,c	;volatile
  1909  000A4E  D003               	goto	u3330
  1910  000A50  6A34               	clrf	??_fixLCD& (0+255),c
  1911  000A52  2A34               	incf	??_fixLCD& (0+255),f,c
  1912  000A54  D001               	goto	u3348
  1913  000A56                     u3330:
  1914  000A56  6A34               	clrf	??_fixLCD& (0+255),c
  1915  000A58                     u3348:
  1916  000A58  4634               	rlncf	??_fixLCD,f,c
  1917  000A5A  508D               	movf	3981,w,c	;volatile
  1918  000A5C  1834               	xorwf	??_fixLCD,w,c
  1919  000A5E  0BFD               	andlw	-3
  1920  000A60  1834               	xorwf	??_fixLCD,w,c
  1921  000A62  6E8D               	movwf	3981,c	;volatile
  1922                           
  1923                           ;main.c: 445: j++;
  1924  000A64  4A3E               	infsnz	fixLCD@j,f,c
  1925  000A66  2A3F               	incf	fixLCD@j+1,f,c
  1926  000A68                     l4487:
  1927  000A68  BE3F               	btfsc	fixLCD@j+1,7,c
  1928  000A6A  D769               	goto	l4445
  1929  000A6C  503F               	movf	fixLCD@j+1,w,c
  1930  000A6E  E105               	bnz	l297
  1931  000A70  0E0A               	movlw	10
  1932  000A72  5C3E               	subwf	fixLCD@j,w,c
  1933  000A74  B0D8               	btfsc	status,0,c
  1934  000A76  0012               	return	
  1935  000A78  D762               	goto	l4445
  1936  000A7A                     l297:
  1937  000A7A  0012               	return		;funcret
  1938  000A7C                     __end_of_fixLCD:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           intcon	equ	0xFF2
  1947                           intcon3	equ	0xFF0
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           indf2	equ	0xFDF
  1951                           postinc2	equ	0xFDE
  1952                           postdec2	equ	0xFDD
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _initLCD *****************
  1958 ;; Defined at:
  1959 ;;		line 15 in file "lcd.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    3
  1980 ;; This function calls:
  1981 ;;		_lcdInst
  1982 ;; This function is called by:
  1983 ;;		_fixLCD
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text5
  1989  001510                     __ptext5:
  1990                           	opt stack 0
  1991  001510                     _initLCD:
  1992                           	opt stack 27
  1993                           
  1994                           ;lcd.c: 16: _delay((unsigned long)((15)*(10000000/4000.0)));
  1995                           
  1996                           ;incstack = 0
  1997  001510  0E31               	movlw	49
  1998  001512  6E13               	movwf	??_initLCD& (0+255),c
  1999  001514  0EB2               	movlw	178
  2000  001516                     u3397:
  2001  001516  2EE8               	decfsz	wreg,f,c
  2002  001518  D7FE               	bra	u3397
  2003  00151A  2E13               	decfsz	??_initLCD& (0+255),f,c
  2004  00151C  D7FC               	bra	u3397
  2005  00151E  D000               	nop2	
  2006                           
  2007                           ;lcd.c: 17: lcdInst(0b00110011);
  2008  001520  0E33               	movlw	51
  2009  001522  EC4B  F00C         	call	_lcdInst
  2010                           
  2011                           ;lcd.c: 18: lcdInst(0b00110010);
  2012  001526  0E32               	movlw	50
  2013  001528  EC4B  F00C         	call	_lcdInst
  2014                           
  2015                           ;lcd.c: 19: lcdInst(0b00101000);
  2016  00152C  0E28               	movlw	40
  2017  00152E  EC4B  F00C         	call	_lcdInst
  2018                           
  2019                           ;lcd.c: 20: lcdInst(0b00001111);
  2020  001532  0E0F               	movlw	15
  2021  001534  EC4B  F00C         	call	_lcdInst
  2022                           
  2023                           ;lcd.c: 21: lcdInst(0b00000110);
  2024  001538  0E06               	movlw	6
  2025  00153A  EC4B  F00C         	call	_lcdInst
  2026                           
  2027                           ;lcd.c: 22: lcdInst(0b00000001);
  2028  00153E  0E01               	movlw	1
  2029  001540  EC4B  F00C         	call	_lcdInst
  2030                           
  2031                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2032  001544  0E31               	movlw	49
  2033  001546  6E13               	movwf	??_initLCD& (0+255),c
  2034  001548  0EB2               	movlw	178
  2035  00154A                     u3407:
  2036  00154A  2EE8               	decfsz	wreg,f,c
  2037  00154C  D7FE               	bra	u3407
  2038  00154E  2E13               	decfsz	??_initLCD& (0+255),f,c
  2039  001550  D7FC               	bra	u3407
  2040  001552  D000               	nop2	
  2041  001554  0012               	return		;funcret
  2042  001556                     __end_of_initLCD:
  2043                           	opt stack 0
  2044                           tblptru	equ	0xFF8
  2045                           tblptrh	equ	0xFF7
  2046                           tblptrl	equ	0xFF6
  2047                           tablat	equ	0xFF5
  2048                           prodh	equ	0xFF4
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           intcon3	equ	0xFF0
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           indf2	equ	0xFDF
  2055                           postinc2	equ	0xFDE
  2056                           postdec2	equ	0xFDD
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _I2C_Master_Init *****************
  2062 ;; Defined at:
  2063 ;;		line 13 in file "I2C.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  c               4   28[COMRAM] const unsigned long 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;		None
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2, status,0, cstack
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;Total ram usage:        8 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    2
  2084 ;; This function calls:
  2085 ;;		___lldiv
  2086 ;; This function is called by:
  2087 ;;		_fixLCD
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text6
  2093  0012E4                     __ptext6:
  2094                           	opt stack 0
  2095  0012E4                     _I2C_Master_Init:
  2096                           	opt stack 27
  2097                           
  2098                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  2099                           
  2100                           ;incstack = 0
  2101  0012E4  0E00               	movlw	0
  2102  0012E6  6EC7               	movwf	4039,c	;volatile
  2103                           
  2104                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  2105  0012E8  0E28               	movlw	40
  2106  0012EA  6EC6               	movwf	4038,c	;volatile
  2107                           
  2108                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  2109  0012EC  0E00               	movlw	0
  2110  0012EE  6EC5               	movwf	4037,c	;volatile
  2111                           
  2112                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  2113  0012F0  0E80               	movlw	128
  2114  0012F2  6E10               	movwf	___lldiv@dividend,c
  2115  0012F4  0E96               	movlw	150
  2116  0012F6  6E11               	movwf	___lldiv@dividend+1,c
  2117  0012F8  0E98               	movlw	152
  2118  0012FA  6E12               	movwf	___lldiv@dividend+2,c
  2119  0012FC  0E00               	movlw	0
  2120  0012FE  6E13               	movwf	___lldiv@dividend+3,c
  2121  001300  C01D  F021         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2122  001304  C01E  F022         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2123  001308  C01F  F023         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2124  00130C  C020  F024         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2125  001310  0E02               	movlw	2
  2126  001312                     u1685:
  2127  001312  90D8               	bcf	status,0,c
  2128  001314  3621               	rlcf	??_I2C_Master_Init,f,c
  2129  001316  3622               	rlcf	??_I2C_Master_Init+1,f,c
  2130  001318  3623               	rlcf	??_I2C_Master_Init+2,f,c
  2131  00131A  3624               	rlcf	??_I2C_Master_Init+3,f,c
  2132  00131C  2EE8               	decfsz	wreg,f,c
  2133  00131E  D7F9               	goto	u1685
  2134  001320  C021  F014         	movff	??_I2C_Master_Init,___lldiv@divisor
  2135  001324  C022  F015         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2136  001328  C023  F016         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2137  00132C  C024  F017         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2138  001330  EC8F  F008         	call	___lldiv	;wreg free
  2139  001334  0410               	decf	?___lldiv,w,c
  2140  001336  6EC8               	movwf	4040,c	;volatile
  2141                           
  2142                           ;I2C.c: 20: TRISC3 = 1;
  2143  001338  8694               	bsf	3988,3,c	;volatile
  2144                           
  2145                           ;I2C.c: 21: TRISC4 = 1;
  2146  00133A  8894               	bsf	3988,4,c	;volatile
  2147  00133C  0012               	return		;funcret
  2148  00133E                     __end_of_I2C_Master_Init:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           intcon3	equ	0xFF0
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function ___lldiv *****************
  2168 ;; Defined at:
  2169 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  dividend        4   15[COMRAM] unsigned long 
  2172 ;;  divisor         4   19[COMRAM] unsigned long 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  quotient        4   23[COMRAM] unsigned long 
  2175 ;;  counter         1   27[COMRAM] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  4   15[COMRAM] unsigned long 
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2185 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;Total ram usage:       13 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    1
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_I2C_Master_Init
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text7
  2200  00111E                     __ptext7:
  2201                           	opt stack 0
  2202  00111E                     ___lldiv:
  2203                           	opt stack 27
  2204                           
  2205                           ;incstack = 0
  2206  00111E  0E00               	movlw	0
  2207  001120  6E18               	movwf	___lldiv@quotient,c
  2208  001122  0E00               	movlw	0
  2209  001124  6E19               	movwf	___lldiv@quotient+1,c
  2210  001126  0E00               	movlw	0
  2211  001128  6E1A               	movwf	___lldiv@quotient+2,c
  2212  00112A  0E00               	movlw	0
  2213  00112C  6E1B               	movwf	___lldiv@quotient+3,c
  2214  00112E  5014               	movf	___lldiv@divisor,w,c
  2215  001130  1015               	iorwf	___lldiv@divisor+1,w,c
  2216  001132  1016               	iorwf	___lldiv@divisor+2,w,c
  2217  001134  1017               	iorwf	___lldiv@divisor+3,w,c
  2218  001136  B4D8               	btfsc	status,2,c
  2219  001138  D02A               	goto	l967
  2220  00113A  0E01               	movlw	1
  2221  00113C  6E1C               	movwf	___lldiv@counter,c
  2222  00113E  D006               	goto	l2719
  2223  001140                     l2717:
  2224  001140  90D8               	bcf	status,0,c
  2225  001142  3614               	rlcf	___lldiv@divisor,f,c
  2226  001144  3615               	rlcf	___lldiv@divisor+1,f,c
  2227  001146  3616               	rlcf	___lldiv@divisor+2,f,c
  2228  001148  3617               	rlcf	___lldiv@divisor+3,f,c
  2229  00114A  2A1C               	incf	___lldiv@counter,f,c
  2230  00114C                     l2719:
  2231  00114C  AE17               	btfss	___lldiv@divisor+3,7,c
  2232  00114E  D7F8               	goto	l2717
  2233  001150                     l2721:
  2234  001150  90D8               	bcf	status,0,c
  2235  001152  3618               	rlcf	___lldiv@quotient,f,c
  2236  001154  3619               	rlcf	___lldiv@quotient+1,f,c
  2237  001156  361A               	rlcf	___lldiv@quotient+2,f,c
  2238  001158  361B               	rlcf	___lldiv@quotient+3,f,c
  2239  00115A  5014               	movf	___lldiv@divisor,w,c
  2240  00115C  5C10               	subwf	___lldiv@dividend,w,c
  2241  00115E  5015               	movf	___lldiv@divisor+1,w,c
  2242  001160  5811               	subwfb	___lldiv@dividend+1,w,c
  2243  001162  5016               	movf	___lldiv@divisor+2,w,c
  2244  001164  5812               	subwfb	___lldiv@dividend+2,w,c
  2245  001166  5017               	movf	___lldiv@divisor+3,w,c
  2246  001168  5813               	subwfb	___lldiv@dividend+3,w,c
  2247  00116A  A0D8               	btfss	status,0,c
  2248  00116C  D009               	goto	l2729
  2249  00116E  5014               	movf	___lldiv@divisor,w,c
  2250  001170  5E10               	subwf	___lldiv@dividend,f,c
  2251  001172  5015               	movf	___lldiv@divisor+1,w,c
  2252  001174  5A11               	subwfb	___lldiv@dividend+1,f,c
  2253  001176  5016               	movf	___lldiv@divisor+2,w,c
  2254  001178  5A12               	subwfb	___lldiv@dividend+2,f,c
  2255  00117A  5017               	movf	___lldiv@divisor+3,w,c
  2256  00117C  5A13               	subwfb	___lldiv@dividend+3,f,c
  2257  00117E  8018               	bsf	___lldiv@quotient,0,c
  2258  001180                     l2729:
  2259  001180  90D8               	bcf	status,0,c
  2260  001182  3217               	rrcf	___lldiv@divisor+3,f,c
  2261  001184  3216               	rrcf	___lldiv@divisor+2,f,c
  2262  001186  3215               	rrcf	___lldiv@divisor+1,f,c
  2263  001188  3214               	rrcf	___lldiv@divisor,f,c
  2264  00118A  2E1C               	decfsz	___lldiv@counter,f,c
  2265  00118C  D7E1               	goto	l2721
  2266  00118E                     l967:
  2267  00118E  C018  F010         	movff	___lldiv@quotient,?___lldiv
  2268  001192  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  2269  001196  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  2270  00119A  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  2271  00119E  0012               	return		;funcret
  2272  0011A0                     __end_of___lldiv:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           intcon3	equ	0xFF0
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           indf2	equ	0xFDF
  2285                           postinc2	equ	0xFDE
  2286                           postdec2	equ	0xFDD
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _finishState *****************
  2292 ;; Defined at:
  2293 ;;		line 310 in file "main.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  keypress        2   53[COMRAM] int 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;Total ram usage:        4 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    5
  2314 ;; This function calls:
  2315 ;;		_readKey
  2316 ;;		_update_lcd
  2317 ;; This function is called by:
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text8
  2323  001616                     __ptext8:
  2324                           	opt stack 0
  2325  001616                     _finishState:
  2326                           	opt stack 25
  2327                           
  2328                           ;main.c: 312: (INTCONbits.GIE = 0);
  2329                           
  2330                           ;incstack = 0
  2331  001616  9EF2               	bcf	intcon,7,c	;volatile
  2332                           
  2333                           ;main.c: 313: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2334  001618  0E0D               	movlw	13
  2335  00161A  6E35               	movwf	(??_finishState+1)& (0+255),c
  2336  00161C  0EAF               	movlw	175
  2337  00161E  6E34               	movwf	??_finishState& (0+255),c
  2338  001620  0EB6               	movlw	182
  2339  001622                     u3417:
  2340  001622  2EE8               	decfsz	wreg,f,c
  2341  001624  D7FE               	bra	u3417
  2342  001626  2E34               	decfsz	??_finishState& (0+255),f,c
  2343  001628  D7FC               	bra	u3417
  2344  00162A  2E35               	decfsz	(??_finishState+1)& (0+255),f,c
  2345  00162C  D7FA               	bra	u3417
  2346  00162E  D000               	nop2	
  2347                           
  2348                           ;main.c: 314: update_lcd();
  2349  001630  ECE3  F005         	call	_update_lcd	;wreg free
  2350                           
  2351                           ;main.c: 315: LATBbits.LATB0 = 0;
  2352  001634  908A               	bcf	3978,0,c	;volatile
  2353                           
  2354                           ;main.c: 316: LATCbits.LATC6 = 0;
  2355  001636  9C8B               	bcf	3979,6,c	;volatile
  2356  001638                     l4373:
  2357                           
  2358                           ;main.c: 318: int keypress = readKey();
  2359  001638  EC64  F00A         	call	_readKey	;wreg free
  2360  00163C  C010  F036         	movff	?_readKey,finishState@keypress
  2361  001640  C011  F037         	movff	?_readKey+1,finishState@keypress+1
  2362                           
  2363                           ;main.c: 319: if(keypress == 0b1101){
  2364  001644  0E0D               	movlw	13
  2365  001646  1836               	xorwf	finishState@keypress,w,c
  2366  001648  1037               	iorwf	finishState@keypress+1,w,c
  2367  00164A  A4D8               	btfss	status,2,c
  2368  00164C  D7F5               	goto	l4373
  2369                           
  2370                           ;main.c: 320: state = MAIN;
  2371  00164E  0E00               	movlw	0
  2372  001650  6E4B               	movwf	_state,c
  2373                           
  2374                           ;main.c: 321: return;
  2375  001652  0012               	return	
  2376  001654                     __end_of_finishState:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodh	equ	0xFF4
  2383                           prodl	equ	0xFF3
  2384                           intcon	equ	0xFF2
  2385                           intcon3	equ	0xFF0
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           indf2	equ	0xFDF
  2389                           postinc2	equ	0xFDE
  2390                           postdec2	equ	0xFDD
  2391                           fsr2h	equ	0xFDA
  2392                           fsr2l	equ	0xFD9
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function _readKey *****************
  2396 ;; Defined at:
  2397 ;;		line 90 in file "main.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  keypress        1   17[COMRAM] unsigned char 
  2402 ;;  i               2   18[COMRAM] int 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2   15[COMRAM] int 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;Total ram usage:        5 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    1
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_mainState
  2423 ;;		_finishState
  2424 ;;		_logState
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text9
  2429  0014C8                     __ptext9:
  2430                           	opt stack 0
  2431  0014C8                     _readKey:
  2432                           	opt stack 28
  2433                           
  2434                           ;main.c: 92: for (int i = 0; i < 200; i++)
  2435                           
  2436                           ;incstack = 0
  2437  0014C8  0E00               	movlw	0
  2438  0014CA  6E14               	movwf	readKey@i+1,c
  2439  0014CC  0E00               	movlw	0
  2440  0014CE  6E13               	movwf	readKey@i,c
  2441  0014D0  BE14               	btfsc	readKey@i+1,7,c
  2442  0014D2  D006               	goto	l217
  2443  0014D4  5014               	movf	readKey@i+1,w,c
  2444  0014D6  E119               	bnz	l218
  2445  0014D8  0EC8               	movlw	200
  2446  0014DA  5C13               	subwf	readKey@i,w,c
  2447  0014DC  B0D8               	btfsc	status,0,c
  2448  0014DE  D015               	goto	l218
  2449  0014E0                     l217:
  2450                           
  2451                           ;main.c: 93: {
  2452                           ;main.c: 94: if (PORTBbits.RB1 != 0)
  2453  0014E0  A281               	btfss	3969,1,c	;volatile
  2454  0014E2  D00C               	goto	l2801
  2455                           
  2456                           ;main.c: 95: {
  2457                           ;main.c: 96: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2458  0014E4  3881               	swapf	3969,w,c	;volatile
  2459  0014E6  0B0F               	andlw	15
  2460  0014E8  0B0F               	andlw	15
  2461  0014EA  6E12               	movwf	readKey@keypress,c
  2462  0014EC                     l220:
  2463  0014EC  B281               	btfsc	3969,1,c	;volatile
  2464  0014EE  D7FE               	goto	l220
  2465                           
  2466                           ;main.c: 99: }
  2467                           ;main.c: 100: __nop();
  2468  0014F0  F000               	nop	
  2469                           
  2470                           ;main.c: 101: __nop();
  2471  0014F2  F000               	nop	
  2472                           
  2473                           ;main.c: 102: return keypress;
  2474  0014F4  C012  F010         	movff	readKey@keypress,?_readKey
  2475  0014F8  6A11               	clrf	?_readKey+1,c
  2476  0014FA  0012               	return	
  2477  0014FC                     l2801:
  2478  0014FC  4A13               	infsnz	readKey@i,f,c
  2479  0014FE  2A14               	incf	readKey@i+1,f,c
  2480  001500  BE14               	btfsc	readKey@i+1,7,c
  2481  001502  D7EE               	goto	l217
  2482  001504  5014               	movf	readKey@i+1,w,c
  2483  001506  E101               	bnz	u1730
  2484  001508  D7E7               	goto	L2
  2485  00150A                     u1730:
  2486  00150A                     l218:
  2487                           
  2488                           ;main.c: 103: }
  2489                           ;main.c: 104: }
  2490                           ;main.c: 105: return -1;
  2491  00150A  6810               	setf	?_readKey,c
  2492  00150C  6811               	setf	?_readKey+1,c
  2493  00150E  0012               	return		;funcret
  2494  001510                     __end_of_readKey:
  2495                           	opt stack 0
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           prodh	equ	0xFF4
  2501                           prodl	equ	0xFF3
  2502                           intcon	equ	0xFF2
  2503                           intcon3	equ	0xFF0
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           indf2	equ	0xFDF
  2507                           postinc2	equ	0xFDE
  2508                           postdec2	equ	0xFDD
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _executingState *****************
  2514 ;; Defined at:
  2515 ;;		line 150 in file "main.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  hasTab          2   30[BANK0 ] int 
  2520 ;;  hasLabel        2   34[BANK0 ] int 
  2521 ;;  res             8   20[BANK0 ] int [4]
  2522 ;;  emptyCount      2   44[BANK0 ] int 
  2523 ;;  alInSensor      2   42[BANK0 ] int 
  2524 ;;  snInSensor      2   40[BANK0 ] int 
  2525 ;;  alLoaded        2   38[BANK0 ] int 
  2526 ;;  snLoaded        2   36[BANK0 ] int 
  2527 ;;  timedif         2   32[BANK0 ] int 
  2528 ;;  start_s         2   28[BANK0 ] int 
  2529 ;;  s_one           2   14[BANK0 ] int 
  2530 ;;  s_ten           2   12[BANK0 ] int 
  2531 ;;  m_one           2   10[BANK0 ] int 
  2532 ;;  m_ten           2    8[BANK0 ] int 
  2533 ;;  h_one           2    6[BANK0 ] int 
  2534 ;;  h_ten           2    4[BANK0 ] int 
  2535 ;;  runCanAl        2    2[BANK0 ] int 
  2536 ;;  runCanSn        2    0[BANK0 ] int 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Locals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Totals:         3      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;Total ram usage:       49 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    5
  2553 ;; This function calls:
  2554 ;;		___wmul
  2555 ;;		_dispenseAlCan
  2556 ;;		_dispenseSnCan
  2557 ;;		_eeprom_LogResult
  2558 ;;		_get_time
  2559 ;;		_get_timeDif
  2560 ;;		_lcdInst
  2561 ;;		_printf
  2562 ;;		_readAlBot
  2563 ;;		_readAlTop
  2564 ;;		_readSnBot
  2565 ;;		_readSnSensor
  2566 ;;		_readSnTop
  2567 ;;		_servoRotate0
  2568 ;;		_servoRotate1
  2569 ;;		_servoRotate2
  2570 ;;		_servoRotate4
  2571 ;;		_servoRotate90
  2572 ;;		_servoRotate90n
  2573 ;;		_servoRotateArm
  2574 ;;		_update_lcd
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text10
  2581  000012                     __ptext10:
  2582                           	opt stack 0
  2583  000012                     _executingState:
  2584                           	opt stack 25
  2585                           
  2586                           ;main.c: 156: int runCanSn, runCanAl;
  2587                           ;main.c: 157: runCanSn = 0;
  2588                           
  2589                           ;incstack = 0
  2590  000012  0E00               	movlw	0
  2591  000014  0100               	movlb	0	; () banked
  2592  000016  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  2593  000018  0E00               	movlw	0
  2594  00001A  6F80               	movwf	executingState@runCanSn& (0+255),b
  2595                           
  2596                           ;main.c: 158: runCanAl = 0;
  2597  00001C  0E00               	movlw	0
  2598  00001E  0100               	movlb	0	; () banked
  2599  000020  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  2600  000022  0E00               	movlw	0
  2601  000024  6F82               	movwf	executingState@runCanAl& (0+255),b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;main.c: 160: get_time(starttime);
  2605  000026  0EAE               	movlw	low _starttime
  2606  000028  6E13               	movwf	get_time@time,c
  2607  00002A  0E00               	movlw	high _starttime
  2608  00002C  6E14               	movwf	get_time@time+1,c
  2609  00002E  EC4C  F008         	call	_get_time	;wreg free
  2610                           
  2611                           ;main.c: 161: int h_ten = (starttime[2] & 0b11110000)>>4;
  2612  000032  EE20  F0B2         	lfsr	2,_starttime+4
  2613  000036  CFDE F034          	movff	postinc2,??_executingState
  2614  00003A  CFDD F035          	movff	postdec2,??_executingState+1
  2615  00003E  0E04               	movlw	4
  2616  000040  6E36               	movwf	(??_executingState+2)& (0+255),c
  2617  000042                     u2985:
  2618  000042  3435               	rlcf	??_executingState+1,w,c
  2619  000044  3235               	rrcf	??_executingState+1,f,c
  2620  000046  3234               	rrcf	??_executingState,f,c
  2621  000048  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2622  00004A  D7FB               	goto	u2985
  2623  00004C  0E0F               	movlw	15
  2624  00004E  1434               	andwf	??_executingState,w,c
  2625  000050  0100               	movlb	0	; () banked
  2626  000052  6F84               	movwf	executingState@h_ten& (0+255),b
  2627  000054  0100               	movlb	0	; () banked
  2628  000056  6B85               	clrf	(executingState@h_ten+1)& (0+255),b
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;main.c: 162: int h_one = (starttime[2] & 0b00001111);
  2632  000058  0E0F               	movlw	15
  2633  00005A  0100               	movlb	0	; () banked
  2634  00005C  15B2               	andwf	(_starttime+4)& (0+255),w,b
  2635  00005E  0100               	movlb	0	; () banked
  2636  000060  6F86               	movwf	executingState@h_one& (0+255),b
  2637  000062  0100               	movlb	0	; () banked
  2638  000064  6B87               	clrf	(executingState@h_one+1)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 163: int m_ten = (starttime[1] & 0b11110000)>>4;
  2642  000066  EE20  F0B0         	lfsr	2,_starttime+2
  2643  00006A  CFDE F034          	movff	postinc2,??_executingState
  2644  00006E  CFDD F035          	movff	postdec2,??_executingState+1
  2645  000072  0E04               	movlw	4
  2646  000074  6E36               	movwf	(??_executingState+2)& (0+255),c
  2647  000076                     u2995:
  2648  000076  3435               	rlcf	??_executingState+1,w,c
  2649  000078  3235               	rrcf	??_executingState+1,f,c
  2650  00007A  3234               	rrcf	??_executingState,f,c
  2651  00007C  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2652  00007E  D7FB               	goto	u2995
  2653  000080  0E0F               	movlw	15
  2654  000082  1434               	andwf	??_executingState,w,c
  2655  000084  0100               	movlb	0	; () banked
  2656  000086  6F88               	movwf	executingState@m_ten& (0+255),b
  2657  000088  0100               	movlb	0	; () banked
  2658  00008A  6B89               	clrf	(executingState@m_ten+1)& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 164: int m_one = (starttime[1] & 0b00001111);
  2662  00008C  0E0F               	movlw	15
  2663  00008E  0100               	movlb	0	; () banked
  2664  000090  15B0               	andwf	(_starttime+2)& (0+255),w,b
  2665  000092  0100               	movlb	0	; () banked
  2666  000094  6F8A               	movwf	executingState@m_one& (0+255),b
  2667  000096  0100               	movlb	0	; () banked
  2668  000098  6B8B               	clrf	(executingState@m_one+1)& (0+255),b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 165: int s_ten = (starttime[0] & 0b11110000)>>4;
  2672  00009A  C0AE  F034         	movff	_starttime,??_executingState
  2673  00009E  C0AF  F035         	movff	_starttime+1,??_executingState+1
  2674  0000A2  0E04               	movlw	4
  2675  0000A4  6E36               	movwf	(??_executingState+2)& (0+255),c
  2676  0000A6                     u3005:
  2677  0000A6  3435               	rlcf	??_executingState+1,w,c
  2678  0000A8  3235               	rrcf	??_executingState+1,f,c
  2679  0000AA  3234               	rrcf	??_executingState,f,c
  2680  0000AC  2E36               	decfsz	(??_executingState+2)& (0+255),f,c
  2681  0000AE  D7FB               	goto	u3005
  2682  0000B0  0E0F               	movlw	15
  2683  0000B2  1434               	andwf	??_executingState,w,c
  2684  0000B4  0100               	movlb	0	; () banked
  2685  0000B6  6F8C               	movwf	executingState@s_ten& (0+255),b
  2686  0000B8  0100               	movlb	0	; () banked
  2687  0000BA  6B8D               	clrf	(executingState@s_ten+1)& (0+255),b
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 166: int s_one = (starttime[0] & 0b00001111);
  2691  0000BC  0E0F               	movlw	15
  2692  0000BE  0100               	movlb	0	; () banked
  2693  0000C0  15AE               	andwf	_starttime& (0+255),w,b
  2694  0000C2  0100               	movlb	0	; () banked
  2695  0000C4  6F8E               	movwf	executingState@s_one& (0+255),b
  2696  0000C6  0100               	movlb	0	; () banked
  2697  0000C8  6B8F               	clrf	(executingState@s_one+1)& (0+255),b
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2701  0000CA  C088  F010         	movff	executingState@m_ten,___wmul@multiplier
  2702  0000CE  C089  F011         	movff	executingState@m_ten+1,___wmul@multiplier+1
  2703  0000D2  0E00               	movlw	0
  2704  0000D4  6E13               	movwf	___wmul@multiplicand+1,c
  2705  0000D6  0E0A               	movlw	10
  2706  0000D8  6E12               	movwf	___wmul@multiplicand,c
  2707  0000DA  ECBE  F00B         	call	___wmul	;wreg free
  2708  0000DE  0100               	movlb	0	; () banked
  2709  0000E0  518A               	movf	executingState@m_one& (0+255),w,b
  2710  0000E2  2410               	addwf	?___wmul,w,c
  2711  0000E4  0100               	movlb	0	; () banked
  2712  0000E6  6F90               	movwf	_executingState$1735& (0+255),b
  2713  0000E8  0100               	movlb	0	; () banked
  2714  0000EA  518B               	movf	(executingState@m_one+1)& (0+255),w,b
  2715  0000EC  2011               	addwfc	?___wmul+1,w,c
  2716  0000EE  0100               	movlb	0	; () banked
  2717  0000F0  6F91               	movwf	(_executingState$1735+1)& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2721  0000F2  C084  F010         	movff	executingState@h_ten,___wmul@multiplier
  2722  0000F6  C085  F011         	movff	executingState@h_ten+1,___wmul@multiplier+1
  2723  0000FA  0E00               	movlw	0
  2724  0000FC  6E13               	movwf	___wmul@multiplicand+1,c
  2725  0000FE  0E0A               	movlw	10
  2726  000100  6E12               	movwf	___wmul@multiplicand,c
  2727  000102  ECBE  F00B         	call	___wmul	;wreg free
  2728  000106  0100               	movlb	0	; () banked
  2729  000108  5186               	movf	executingState@h_one& (0+255),w,b
  2730  00010A  2410               	addwf	?___wmul,w,c
  2731  00010C  0100               	movlb	0	; () banked
  2732  00010E  6F92               	movwf	_executingState$1736& (0+255),b
  2733  000110  0100               	movlb	0	; () banked
  2734  000112  5187               	movf	(executingState@h_one+1)& (0+255),w,b
  2735  000114  2011               	addwfc	?___wmul+1,w,c
  2736  000116  0100               	movlb	0	; () banked
  2737  000118  6F93               	movwf	(_executingState$1736+1)& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 167: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  2741  00011A  C08C  F010         	movff	executingState@s_ten,___wmul@multiplier
  2742  00011E  C08D  F011         	movff	executingState@s_ten+1,___wmul@multiplier+1
  2743  000122  0E00               	movlw	0
  2744  000124  6E13               	movwf	___wmul@multiplicand+1,c
  2745  000126  0E0A               	movlw	10
  2746  000128  6E12               	movwf	___wmul@multiplicand,c
  2747  00012A  ECBE  F00B         	call	___wmul	;wreg free
  2748  00012E  C010  F034         	movff	?___wmul,??_executingState
  2749  000132  C011  F035         	movff	?___wmul+1,??_executingState+1
  2750  000136  C092  F010         	movff	_executingState$1736,___wmul@multiplier
  2751  00013A  C093  F011         	movff	_executingState$1736+1,___wmul@multiplier+1
  2752  00013E  0E0E               	movlw	14
  2753  000140  6E13               	movwf	___wmul@multiplicand+1,c
  2754  000142  0E10               	movlw	16
  2755  000144  6E12               	movwf	___wmul@multiplicand,c
  2756  000146  ECBE  F00B         	call	___wmul	;wreg free
  2757  00014A  5010               	movf	?___wmul,w,c
  2758  00014C  2634               	addwf	??_executingState,f,c
  2759  00014E  5011               	movf	?___wmul+1,w,c
  2760  000150  2235               	addwfc	??_executingState+1,f,c
  2761  000152  C090  F010         	movff	_executingState$1735,___wmul@multiplier
  2762  000156  C091  F011         	movff	_executingState$1735+1,___wmul@multiplier+1
  2763  00015A  0E00               	movlw	0
  2764  00015C  6E13               	movwf	___wmul@multiplicand+1,c
  2765  00015E  0E3C               	movlw	60
  2766  000160  6E12               	movwf	___wmul@multiplicand,c
  2767  000162  ECBE  F00B         	call	___wmul	;wreg free
  2768  000166  5010               	movf	?___wmul,w,c
  2769  000168  2634               	addwf	??_executingState,f,c
  2770  00016A  5011               	movf	?___wmul+1,w,c
  2771  00016C  2235               	addwfc	??_executingState+1,f,c
  2772  00016E  0100               	movlb	0	; () banked
  2773  000170  518E               	movf	executingState@s_one& (0+255),w,b
  2774  000172  2434               	addwf	??_executingState,w,c
  2775  000174  0100               	movlb	0	; () banked
  2776  000176  6F9C               	movwf	executingState@start_s& (0+255),b
  2777  000178  0100               	movlb	0	; () banked
  2778  00017A  518F               	movf	(executingState@s_one+1)& (0+255),w,b
  2779  00017C  2035               	addwfc	??_executingState+1,w,c
  2780  00017E  0100               	movlb	0	; () banked
  2781  000180  6F9D               	movwf	(executingState@start_s+1)& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 169: lcdInst(0b10000000);;
  2785  000182  0E80               	movlw	128
  2786  000184  EC4B  F00C         	call	_lcdInst
  2787                           
  2788                           ;main.c: 170: printf("initializing    ");
  2789  000188  0E8C               	movlw	low STR_12
  2790  00018A  6E1C               	movwf	printf@f,c
  2791  00018C  0EFF               	movlw	high STR_12
  2792  00018E  6E1D               	movwf	printf@f+1,c
  2793  000190  ECDF  F002         	call	_printf	;wreg free
  2794                           
  2795                           ;main.c: 171: lcdInst(0b11000000);;
  2796  000194  0EC0               	movlw	192
  2797  000196  EC4B  F00C         	call	_lcdInst
  2798                           
  2799                           ;main.c: 172: printf("                ");
  2800  00019A  0E37               	movlw	low STR_13
  2801  00019C  6E1C               	movwf	printf@f,c
  2802  00019E  0EFF               	movlw	high STR_13
  2803  0001A0  6E1D               	movwf	printf@f+1,c
  2804  0001A2  ECDF  F002         	call	_printf	;wreg free
  2805                           
  2806                           ;main.c: 176: LATBbits.LATB0 = 1;
  2807  0001A6  808A               	bsf	3978,0,c	;volatile
  2808                           
  2809                           ;main.c: 177: _delay((unsigned long)((300)*(10000000/4000.0)));
  2810  0001A8  0E04               	movlw	4
  2811  0001AA  6E35               	movwf	(??_executingState+1)& (0+255),c
  2812  0001AC  0ECF               	movlw	207
  2813  0001AE  6E34               	movwf	??_executingState& (0+255),c
  2814  0001B0  0E02               	movlw	2
  2815  0001B2                     u3427:
  2816  0001B2  2EE8               	decfsz	wreg,f,c
  2817  0001B4  D7FE               	bra	u3427
  2818  0001B6  2E34               	decfsz	??_executingState& (0+255),f,c
  2819  0001B8  D7FC               	bra	u3427
  2820  0001BA  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  2821  0001BC  D7FA               	bra	u3427
  2822                           
  2823                           ;main.c: 178: LATCbits.LATC6 = 1;
  2824  0001BE  8C8B               	bsf	3979,6,c	;volatile
  2825                           
  2826                           ;main.c: 180: servoRotate90n(4);
  2827  0001C0  0E00               	movlw	0
  2828  0001C2  6E11               	movwf	servoRotate90n@servo+1,c
  2829  0001C4  0E04               	movlw	4
  2830  0001C6  6E10               	movwf	servoRotate90n@servo,c
  2831  0001C8  EC43  F007         	call	_servoRotate90n	;wreg free
  2832                           
  2833                           ;main.c: 181: servoRotate2(1);
  2834  0001CC  0E00               	movlw	0
  2835  0001CE  6E11               	movwf	servoRotate2@angle+1,c
  2836  0001D0  0E01               	movlw	1
  2837  0001D2  6E10               	movwf	servoRotate2@angle,c
  2838  0001D4  ECCC  F00A         	call	_servoRotate2	;wreg free
  2839                           
  2840                           ;main.c: 182: servoRotate0(2);
  2841  0001D8  0E00               	movlw	0
  2842  0001DA  6E11               	movwf	servoRotate0@servo+1,c
  2843  0001DC  0E02               	movlw	2
  2844  0001DE  6E10               	movwf	servoRotate0@servo,c
  2845  0001E0  EC7F  F006         	call	_servoRotate0	;wreg free
  2846                           
  2847                           ;main.c: 183: servoRotate1(0);
  2848  0001E4  0E00               	movlw	0
  2849  0001E6  6E11               	movwf	servoRotate1@angle+1,c
  2850  0001E8  0E00               	movlw	0
  2851  0001EA  6E10               	movwf	servoRotate1@angle,c
  2852  0001EC  EC2A  F00B         	call	_servoRotate1	;wreg free
  2853                           
  2854                           ;main.c: 184: servoRotate4(3);
  2855  0001F0  0E00               	movlw	0
  2856  0001F2  6E11               	movwf	servoRotate4@angle+1,c
  2857  0001F4  0E03               	movlw	3
  2858  0001F6  6E10               	movwf	servoRotate4@angle,c
  2859  0001F8  EC49  F00B         	call	_servoRotate4	;wreg free
  2860                           
  2861                           ;main.c: 185: (INTCONbits.GIE = 0);
  2862  0001FC  9EF2               	bcf	intcon,7,c	;volatile
  2863                           
  2864                           ;main.c: 186: update_lcd();
  2865  0001FE  ECE3  F005         	call	_update_lcd	;wreg free
  2866                           
  2867                           ;main.c: 187: int timedif = get_timeDif(start_s);
  2868  000202  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  2869  000206  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  2870  00020A  EC3E  F005         	call	_get_timeDif	;wreg free
  2871  00020E  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  2872  000212  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  2873                           
  2874                           ;main.c: 190: int emptyCount;
  2875                           ;main.c: 192: int snLoaded, alLoaded, snInSensor, alInSensor;
  2876                           ;main.c: 193: snLoaded = 1;
  2877  000216  0E00               	movlw	0
  2878  000218  0100               	movlb	0	; () banked
  2879  00021A  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2880  00021C  0E01               	movlw	1
  2881  00021E  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 194: alLoaded = 1;
  2885  000220  0E00               	movlw	0
  2886  000222  0100               	movlb	0	; () banked
  2887  000224  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2888  000226  0E01               	movlw	1
  2889  000228  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 195: snInSensor = 1;
  2893  00022A  0E00               	movlw	0
  2894  00022C  0100               	movlb	0	; () banked
  2895  00022E  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2896  000230  0E01               	movlw	1
  2897  000232  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 196: alInSensor = 1;
  2901  000234  0E00               	movlw	0
  2902  000236  0100               	movlb	0	; () banked
  2903  000238  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2904  00023A  0E01               	movlw	1
  2905  00023C  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 197: emptyCount = 0;
  2909  00023E  0E00               	movlw	0
  2910  000240  0100               	movlb	0	; () banked
  2911  000242  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  2912  000244  0E00               	movlw	0
  2913  000246  6FAC               	movwf	executingState@emptyCount& (0+255),b
  2914                           
  2915                           ;main.c: 201: while(timedif < 180 && PORTBbits.RB0 == 1){
  2916  000248  D193               	goto	l4355
  2917  00024A                     l4221:
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;main.c: 202: update_lcd();
  2921  00024A  ECE3  F005         	call	_update_lcd	;wreg free
  2922                           
  2923                           ;main.c: 203: lcdInst(0b10000000);;
  2924  00024E  0E80               	movlw	128
  2925  000250  EC4B  F00C         	call	_lcdInst
  2926                           
  2927                           ;main.c: 204: printf("Executing    %03d", emptyCount);
  2928  000254  0E14               	movlw	low STR_14
  2929  000256  6E1C               	movwf	printf@f,c
  2930  000258  0EFF               	movlw	high STR_14
  2931  00025A  6E1D               	movwf	printf@f+1,c
  2932  00025C  C0AC  F01E         	movff	executingState@emptyCount,?_printf+2
  2933  000260  C0AD  F01F         	movff	executingState@emptyCount+1,?_printf+3
  2934  000264  ECDF  F002         	call	_printf	;wreg free
  2935                           
  2936                           ;main.c: 207: if(readSnTop() == 0){
  2937  000268  ECEE  F00B         	call	_readSnTop	;wreg free
  2938  00026C  5010               	movf	?_readSnTop,w,c
  2939  00026E  1011               	iorwf	?_readSnTop+1,w,c
  2940  000270  A4D8               	btfss	status,2,c
  2941  000272  D005               	goto	l4229
  2942                           
  2943                           ;main.c: 208: snLoaded = 0;
  2944  000274  0E00               	movlw	0
  2945  000276  0100               	movlb	0	; () banked
  2946  000278  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  2947  00027A  0E00               	movlw	0
  2948  00027C  6FA4               	movwf	executingState@snLoaded& (0+255),b
  2949  00027E                     l4229:
  2950                           
  2951                           ;main.c: 209: }
  2952                           ;main.c: 210: if(readAlTop() == 0){
  2953  00027E  EC12  F00C         	call	_readAlTop	;wreg free
  2954  000282  5010               	movf	?_readAlTop,w,c
  2955  000284  1011               	iorwf	?_readAlTop+1,w,c
  2956  000286  A4D8               	btfss	status,2,c
  2957  000288  D005               	goto	l4233
  2958                           
  2959                           ;main.c: 211: alLoaded = 0;
  2960  00028A  0E00               	movlw	0
  2961  00028C  0100               	movlb	0	; () banked
  2962  00028E  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  2963  000290  0E00               	movlw	0
  2964  000292  6FA6               	movwf	executingState@alLoaded& (0+255),b
  2965  000294                     l4233:
  2966                           
  2967                           ;main.c: 212: }
  2968                           ;main.c: 213: if(readSnBot() == 0){
  2969  000294  EC06  F00C         	call	_readSnBot	;wreg free
  2970  000298  5010               	movf	?_readSnBot,w,c
  2971  00029A  1011               	iorwf	?_readSnBot+1,w,c
  2972  00029C  A4D8               	btfss	status,2,c
  2973  00029E  D005               	goto	l4237
  2974                           
  2975                           ;main.c: 214: snInSensor = 0;
  2976  0002A0  0E00               	movlw	0
  2977  0002A2  0100               	movlb	0	; () banked
  2978  0002A4  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  2979  0002A6  0E00               	movlw	0
  2980  0002A8  6FA8               	movwf	executingState@snInSensor& (0+255),b
  2981  0002AA                     l4237:
  2982                           
  2983                           ;main.c: 215: }
  2984                           ;main.c: 216: if(readAlBot() == 0){
  2985  0002AA  EC1E  F00C         	call	_readAlBot	;wreg free
  2986  0002AE  5010               	movf	?_readAlBot,w,c
  2987  0002B0  1011               	iorwf	?_readAlBot+1,w,c
  2988  0002B2  A4D8               	btfss	status,2,c
  2989  0002B4  D005               	goto	l4241
  2990                           
  2991                           ;main.c: 217: alInSensor = 0;
  2992  0002B6  0E00               	movlw	0
  2993  0002B8  0100               	movlb	0	; () banked
  2994  0002BA  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  2995  0002BC  0E00               	movlw	0
  2996  0002BE  6FAA               	movwf	executingState@alInSensor& (0+255),b
  2997  0002C0                     l4241:
  2998                           
  2999                           ;main.c: 218: }
  3000                           ;main.c: 220: if(snLoaded == 0){
  3001  0002C0  0100               	movlb	0	; () banked
  3002  0002C2  51A4               	movf	executingState@snLoaded& (0+255),w,b
  3003  0002C4  0100               	movlb	0	; () banked
  3004  0002C6  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  3005  0002C8  A4D8               	btfss	status,2,c
  3006  0002CA  D023               	goto	l4255
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;main.c: 221: emptyCount = 0;
  3010  0002CC  0E00               	movlw	0
  3011  0002CE  0100               	movlb	0	; () banked
  3012  0002D0  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3013  0002D2  0E00               	movlw	0
  3014  0002D4  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 222: if(snInSensor == 1){
  3018  0002D6  0100               	movlb	0	; () banked
  3019  0002D8  05A8               	decf	executingState@snInSensor& (0+255),w,b
  3020  0002DA  0100               	movlb	0	; () banked
  3021  0002DC  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  3022  0002DE  A4D8               	btfss	status,2,c
  3023  0002E0  D018               	goto	l4255
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;main.c: 223: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3027  0002E2  0E0D               	movlw	13
  3028  0002E4  6E35               	movwf	(??_executingState+1)& (0+255),c
  3029  0002E6  0EAF               	movlw	175
  3030  0002E8  6E34               	movwf	??_executingState& (0+255),c
  3031  0002EA  0EB6               	movlw	182
  3032  0002EC                     u3437:
  3033  0002EC  2EE8               	decfsz	wreg,f,c
  3034  0002EE  D7FE               	bra	u3437
  3035  0002F0  2E34               	decfsz	??_executingState& (0+255),f,c
  3036  0002F2  D7FC               	bra	u3437
  3037  0002F4  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3038  0002F6  D7FA               	bra	u3437
  3039  0002F8  D000               	nop2	
  3040                           
  3041                           ;main.c: 224: dispenseSnCan();
  3042  0002FA  EC68  F00B         	call	_dispenseSnCan	;wreg free
  3043                           
  3044                           ;main.c: 225: runCanSn = 1;
  3045  0002FE  0E00               	movlw	0
  3046  000300  0100               	movlb	0	; () banked
  3047  000302  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3048  000304  0E01               	movlw	1
  3049  000306  6F80               	movwf	executingState@runCanSn& (0+255),b
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;main.c: 226: snLoaded = 1;
  3053  000308  0E00               	movlw	0
  3054  00030A  0100               	movlb	0	; () banked
  3055  00030C  6FA5               	movwf	(executingState@snLoaded+1)& (0+255),b
  3056  00030E  0E01               	movlw	1
  3057  000310  6FA4               	movwf	executingState@snLoaded& (0+255),b
  3058  000312                     l4255:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;main.c: 227: }
  3062                           ;main.c: 228: }
  3063                           ;main.c: 229: if(alLoaded == 0){
  3064  000312  0100               	movlb	0	; () banked
  3065  000314  51A6               	movf	executingState@alLoaded& (0+255),w,b
  3066  000316  0100               	movlb	0	; () banked
  3067  000318  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  3068  00031A  A4D8               	btfss	status,2,c
  3069  00031C  D023               	goto	l4269
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 230: emptyCount = 0;
  3073  00031E  0E00               	movlw	0
  3074  000320  0100               	movlb	0	; () banked
  3075  000322  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3076  000324  0E00               	movlw	0
  3077  000326  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;main.c: 231: if(alInSensor == 1){
  3081  000328  0100               	movlb	0	; () banked
  3082  00032A  05AA               	decf	executingState@alInSensor& (0+255),w,b
  3083  00032C  0100               	movlb	0	; () banked
  3084  00032E  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3085  000330  A4D8               	btfss	status,2,c
  3086  000332  D018               	goto	l4269
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;main.c: 232: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3090  000334  0E0D               	movlw	13
  3091  000336  6E35               	movwf	(??_executingState+1)& (0+255),c
  3092  000338  0EAF               	movlw	175
  3093  00033A  6E34               	movwf	??_executingState& (0+255),c
  3094  00033C  0EB6               	movlw	182
  3095  00033E                     u3447:
  3096  00033E  2EE8               	decfsz	wreg,f,c
  3097  000340  D7FE               	bra	u3447
  3098  000342  2E34               	decfsz	??_executingState& (0+255),f,c
  3099  000344  D7FC               	bra	u3447
  3100  000346  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3101  000348  D7FA               	bra	u3447
  3102  00034A  D000               	nop2	
  3103                           
  3104                           ;main.c: 233: dispenseAlCan();
  3105  00034C  EC80  F00B         	call	_dispenseAlCan	;wreg free
  3106                           
  3107                           ;main.c: 234: runCanAl = 1;
  3108  000350  0E00               	movlw	0
  3109  000352  0100               	movlb	0	; () banked
  3110  000354  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3111  000356  0E01               	movlw	1
  3112  000358  6F82               	movwf	executingState@runCanAl& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 235: alLoaded = 1;
  3116  00035A  0E00               	movlw	0
  3117  00035C  0100               	movlb	0	; () banked
  3118  00035E  6FA7               	movwf	(executingState@alLoaded+1)& (0+255),b
  3119  000360  0E01               	movlw	1
  3120  000362  6FA6               	movwf	executingState@alLoaded& (0+255),b
  3121  000364                     l4269:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 236: }
  3125                           ;main.c: 237: }
  3126                           ;main.c: 239: if(snLoaded == 1 && alLoaded ==1){
  3127  000364  0100               	movlb	0	; () banked
  3128  000366  05A4               	decf	executingState@snLoaded& (0+255),w,b
  3129  000368  0100               	movlb	0	; () banked
  3130  00036A  11A5               	iorwf	(executingState@snLoaded+1)& (0+255),w,b
  3131  00036C  A4D8               	btfss	status,2,c
  3132  00036E  D009               	goto	l4275
  3133                           
  3134                           ; BSR set to: 0
  3135  000370  0100               	movlb	0	; () banked
  3136  000372  05A6               	decf	executingState@alLoaded& (0+255),w,b
  3137  000374  0100               	movlb	0	; () banked
  3138  000376  11A7               	iorwf	(executingState@alLoaded+1)& (0+255),w,b
  3139  000378  A4D8               	btfss	status,2,c
  3140  00037A  D003               	goto	l4275
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;main.c: 240: emptyCount++;
  3144  00037C  0100               	movlb	0	; () banked
  3145  00037E  4BAC               	infsnz	executingState@emptyCount& (0+255),f,b
  3146  000380  2BAD               	incf	(executingState@emptyCount+1)& (0+255),f,b
  3147  000382                     l4275:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 241: }
  3151                           ;main.c: 244: if(snInSensor == 0){
  3152  000382  0100               	movlb	0	; () banked
  3153  000384  51A8               	movf	executingState@snInSensor& (0+255),w,b
  3154  000386  0100               	movlb	0	; () banked
  3155  000388  11A9               	iorwf	(executingState@snInSensor+1)& (0+255),w,b
  3156  00038A  A4D8               	btfss	status,2,c
  3157  00038C  D059               	goto	l4305
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;main.c: 245: int hasLabel;
  3161                           ;main.c: 246: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3162  00038E  0E0D               	movlw	13
  3163  000390  6E35               	movwf	(??_executingState+1)& (0+255),c
  3164  000392  0EAF               	movlw	175
  3165  000394  6E34               	movwf	??_executingState& (0+255),c
  3166  000396  0EB6               	movlw	182
  3167  000398                     u3457:
  3168  000398  2EE8               	decfsz	wreg,f,c
  3169  00039A  D7FE               	bra	u3457
  3170  00039C  2E34               	decfsz	??_executingState& (0+255),f,c
  3171  00039E  D7FC               	bra	u3457
  3172  0003A0  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3173  0003A2  D7FA               	bra	u3457
  3174  0003A4  D000               	nop2	
  3175                           
  3176                           ;main.c: 247: emptyCount = 0;
  3177  0003A6  0E00               	movlw	0
  3178  0003A8  0100               	movlb	0	; () banked
  3179  0003AA  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3180  0003AC  0E00               	movlw	0
  3181  0003AE  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;main.c: 248: if(readSnSensor() == 1){
  3185  0003B0  ECFA  F00B         	call	_readSnSensor	;wreg free
  3186  0003B4  0410               	decf	?_readSnSensor,w,c
  3187  0003B6  1011               	iorwf	?_readSnSensor+1,w,c
  3188  0003B8  A4D8               	btfss	status,2,c
  3189  0003BA  D005               	goto	l4285
  3190                           
  3191                           ;main.c: 249: hasLabel = 0;
  3192  0003BC  0E00               	movlw	0
  3193  0003BE  0100               	movlb	0	; () banked
  3194  0003C0  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3195  0003C2  0E00               	movlw	0
  3196  0003C4  D004               	goto	L3
  3197  0003C6                     l4285:
  3198                           
  3199                           ;main.c: 251: hasLabel = 1;
  3200  0003C6  0E00               	movlw	0
  3201  0003C8  0100               	movlb	0	; () banked
  3202  0003CA  6FA3               	movwf	(executingState@hasLabel+1)& (0+255),b
  3203  0003CC  0E01               	movlw	1
  3204  0003CE                     L3:
  3205  0003CE  6FA2               	movwf	executingState@hasLabel& (0+255),b
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;main.c: 252: }
  3209                           ;main.c: 253: if(hasLabel == 0){
  3210                           
  3211                           ; BSR set to: 0
  3212  0003D0  0100               	movlb	0	; () banked
  3213  0003D2  51A2               	movf	executingState@hasLabel& (0+255),w,b
  3214  0003D4  0100               	movlb	0	; () banked
  3215  0003D6  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3216  0003D8  A4D8               	btfss	status,2,c
  3217  0003DA  D014               	goto	l4295
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;main.c: 254: servoRotate90n(2);
  3221  0003DC  0E00               	movlw	0
  3222  0003DE  6E11               	movwf	servoRotate90n@servo+1,c
  3223  0003E0  0E02               	movlw	2
  3224  0003E2  6E10               	movwf	servoRotate90n@servo,c
  3225  0003E4  EC43  F007         	call	_servoRotate90n	;wreg free
  3226                           
  3227                           ;main.c: 255: servoRotate0(2);
  3228  0003E8  0E00               	movlw	0
  3229  0003EA  6E11               	movwf	servoRotate0@servo+1,c
  3230  0003EC  0E02               	movlw	2
  3231  0003EE  6E10               	movwf	servoRotate0@servo,c
  3232  0003F0  EC7F  F006         	call	_servoRotate0	;wreg free
  3233                           
  3234                           ;main.c: 256: runCanSn = 0;
  3235  0003F4  0E00               	movlw	0
  3236  0003F6  0100               	movlb	0	; () banked
  3237  0003F8  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3238  0003FA  0E00               	movlw	0
  3239  0003FC  6F80               	movwf	executingState@runCanSn& (0+255),b
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 257: snNoLabel++;
  3243  0003FE  4A49               	infsnz	_snNoLabel,f,c
  3244  000400  2A4A               	incf	_snNoLabel+1,f,c
  3245                           
  3246                           ;main.c: 258: }else if(hasLabel == 1){
  3247  000402  D019               	goto	l4303
  3248  000404                     l4295:
  3249                           
  3250                           ; BSR set to: 0
  3251  000404  0100               	movlb	0	; () banked
  3252  000406  05A2               	decf	executingState@hasLabel& (0+255),w,b
  3253  000408  0100               	movlb	0	; () banked
  3254  00040A  11A3               	iorwf	(executingState@hasLabel+1)& (0+255),w,b
  3255  00040C  A4D8               	btfss	status,2,c
  3256  00040E  D013               	goto	l4303
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 259: servoRotate90(2);
  3260  000410  0E00               	movlw	0
  3261  000412  6E11               	movwf	servoRotate90@servo+1,c
  3262  000414  0E02               	movlw	2
  3263  000416  6E10               	movwf	servoRotate90@servo,c
  3264  000418  ECE1  F006         	call	_servoRotate90	;wreg free
  3265                           
  3266                           ;main.c: 260: servoRotate0(2);
  3267  00041C  0E00               	movlw	0
  3268  00041E  6E11               	movwf	servoRotate0@servo+1,c
  3269  000420  0E02               	movlw	2
  3270  000422  6E10               	movwf	servoRotate0@servo,c
  3271  000424  EC7F  F006         	call	_servoRotate0	;wreg free
  3272                           
  3273                           ;main.c: 261: runCanSn = 0;
  3274  000428  0E00               	movlw	0
  3275  00042A  0100               	movlb	0	; () banked
  3276  00042C  6F81               	movwf	(executingState@runCanSn+1)& (0+255),b
  3277  00042E  0E00               	movlw	0
  3278  000430  6F80               	movwf	executingState@runCanSn& (0+255),b
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;main.c: 262: snLabel++;
  3282  000432  4A47               	infsnz	_snLabel,f,c
  3283  000434  2A48               	incf	_snLabel+1,f,c
  3284  000436                     l4303:
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 263: }
  3288                           ;main.c: 264: snInSensor = 1;
  3289  000436  0E00               	movlw	0
  3290  000438  0100               	movlb	0	; () banked
  3291  00043A  6FA9               	movwf	(executingState@snInSensor+1)& (0+255),b
  3292  00043C  0E01               	movlw	1
  3293  00043E  6FA8               	movwf	executingState@snInSensor& (0+255),b
  3294  000440                     l4305:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 265: }
  3298                           ;main.c: 267: if(alInSensor == 0){
  3299  000440  0100               	movlb	0	; () banked
  3300  000442  51AA               	movf	executingState@alInSensor& (0+255),w,b
  3301  000444  0100               	movlb	0	; () banked
  3302  000446  11AB               	iorwf	(executingState@alInSensor+1)& (0+255),w,b
  3303  000448  A4D8               	btfss	status,2,c
  3304  00044A  D05A               	goto	l4337
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;main.c: 268: emptyCount = 0;
  3308  00044C  0E00               	movlw	0
  3309  00044E  0100               	movlb	0	; () banked
  3310  000450  6FAD               	movwf	(executingState@emptyCount+1)& (0+255),b
  3311  000452  0E00               	movlw	0
  3312  000454  6FAC               	movwf	executingState@emptyCount& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;main.c: 269: int hasTab;
  3316                           ;main.c: 270: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3317  000456  0E0D               	movlw	13
  3318  000458  6E35               	movwf	(??_executingState+1)& (0+255),c
  3319  00045A  0EAF               	movlw	175
  3320  00045C  6E34               	movwf	??_executingState& (0+255),c
  3321  00045E  0EB6               	movlw	182
  3322  000460                     u3467:
  3323  000460  2EE8               	decfsz	wreg,f,c
  3324  000462  D7FE               	bra	u3467
  3325  000464  2E34               	decfsz	??_executingState& (0+255),f,c
  3326  000466  D7FC               	bra	u3467
  3327  000468  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3328  00046A  D7FA               	bra	u3467
  3329  00046C  D000               	nop2	
  3330                           
  3331                           ;main.c: 271: hasTab = servoRotateArm();
  3332  00046E  EC09  F009         	call	_servoRotateArm	;wreg free
  3333  000472  C010  F09E         	movff	?_servoRotateArm,executingState@hasTab
  3334  000476  C011  F09F         	movff	?_servoRotateArm+1,executingState@hasTab+1
  3335                           
  3336                           ;main.c: 272: servoRotate90n(4);
  3337  00047A  0E00               	movlw	0
  3338  00047C  6E11               	movwf	servoRotate90n@servo+1,c
  3339  00047E  0E04               	movlw	4
  3340  000480  6E10               	movwf	servoRotate90n@servo,c
  3341  000482  EC43  F007         	call	_servoRotate90n	;wreg free
  3342                           
  3343                           ;main.c: 273: if(hasTab){
  3344  000486  0100               	movlb	0	; () banked
  3345  000488  519E               	movf	executingState@hasTab& (0+255),w,b
  3346  00048A  0100               	movlb	0	; () banked
  3347  00048C  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3348  00048E  B4D8               	btfsc	status,2,c
  3349  000490  D00E               	goto	l4323
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 274: servoRotate90n(3);
  3353  000492  0E00               	movlw	0
  3354  000494  6E11               	movwf	servoRotate90n@servo+1,c
  3355  000496  0E03               	movlw	3
  3356  000498  6E10               	movwf	servoRotate90n@servo,c
  3357  00049A  EC43  F007         	call	_servoRotate90n	;wreg free
  3358                           
  3359                           ;main.c: 275: runCanAl = 0;
  3360  00049E  0E00               	movlw	0
  3361  0004A0  0100               	movlb	0	; () banked
  3362  0004A2  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3363  0004A4  0E00               	movlw	0
  3364  0004A6  6F82               	movwf	executingState@runCanAl& (0+255),b
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;main.c: 276: alTab++;
  3368  0004A8  4A43               	infsnz	_alTab,f,c
  3369  0004AA  2A44               	incf	_alTab+1,f,c
  3370                           
  3371                           ;main.c: 277: }else if (hasTab == 0){
  3372  0004AC  D013               	goto	l4331
  3373  0004AE                     l4323:
  3374                           
  3375                           ; BSR set to: 0
  3376  0004AE  0100               	movlb	0	; () banked
  3377  0004B0  519E               	movf	executingState@hasTab& (0+255),w,b
  3378  0004B2  0100               	movlb	0	; () banked
  3379  0004B4  119F               	iorwf	(executingState@hasTab+1)& (0+255),w,b
  3380  0004B6  A4D8               	btfss	status,2,c
  3381  0004B8  D00D               	goto	l4331
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 278: servoRotate90(3);
  3385  0004BA  0E00               	movlw	0
  3386  0004BC  6E11               	movwf	servoRotate90@servo+1,c
  3387  0004BE  0E03               	movlw	3
  3388  0004C0  6E10               	movwf	servoRotate90@servo,c
  3389  0004C2  ECE1  F006         	call	_servoRotate90	;wreg free
  3390                           
  3391                           ;main.c: 279: runCanAl = 0;
  3392  0004C6  0E00               	movlw	0
  3393  0004C8  0100               	movlb	0	; () banked
  3394  0004CA  6F83               	movwf	(executingState@runCanAl+1)& (0+255),b
  3395  0004CC  0E00               	movlw	0
  3396  0004CE  6F82               	movwf	executingState@runCanAl& (0+255),b
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;main.c: 280: alNoTab++;
  3400  0004D0  4A41               	infsnz	_alNoTab,f,c
  3401  0004D2  2A42               	incf	_alNoTab+1,f,c
  3402  0004D4                     l4331:
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 281: }
  3406                           ;main.c: 282: _delay((unsigned long)((800)*(10000000/4000.0)));
  3407  0004D4  0E0B               	movlw	11
  3408  0004D6  6E35               	movwf	(??_executingState+1)& (0+255),c
  3409  0004D8  0E26               	movlw	38
  3410  0004DA  6E34               	movwf	??_executingState& (0+255),c
  3411  0004DC  0E5E               	movlw	94
  3412  0004DE                     u3477:
  3413  0004DE  2EE8               	decfsz	wreg,f,c
  3414  0004E0  D7FE               	bra	u3477
  3415  0004E2  2E34               	decfsz	??_executingState& (0+255),f,c
  3416  0004E4  D7FC               	bra	u3477
  3417  0004E6  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3418  0004E8  D7FA               	bra	u3477
  3419                           
  3420                           ;main.c: 283: servoRotate4(3);
  3421  0004EA  0E00               	movlw	0
  3422  0004EC  6E11               	movwf	servoRotate4@angle+1,c
  3423  0004EE  0E03               	movlw	3
  3424  0004F0  6E10               	movwf	servoRotate4@angle,c
  3425  0004F2  EC49  F00B         	call	_servoRotate4	;wreg free
  3426                           
  3427                           ;main.c: 284: alInSensor = 1;
  3428  0004F6  0E00               	movlw	0
  3429  0004F8  0100               	movlb	0	; () banked
  3430  0004FA  6FAB               	movwf	(executingState@alInSensor+1)& (0+255),b
  3431  0004FC  0E01               	movlw	1
  3432  0004FE  6FAA               	movwf	executingState@alInSensor& (0+255),b
  3433  000500                     l4337:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;main.c: 285: }
  3437                           ;main.c: 287: timedif = get_timeDif(start_s);
  3438  000500  C09C  F018         	movff	executingState@start_s,get_timeDif@start
  3439  000504  C09D  F019         	movff	executingState@start_s+1,get_timeDif@start+1
  3440  000508  EC3E  F005         	call	_get_timeDif	;wreg free
  3441  00050C  C018  F0A0         	movff	?_get_timeDif,executingState@timedif
  3442  000510  C019  F0A1         	movff	?_get_timeDif+1,executingState@timedif+1
  3443                           
  3444                           ;main.c: 288: if(emptyCount > 50){
  3445  000514  0100               	movlb	0	; () banked
  3446  000516  BFAD               	btfsc	(executingState@emptyCount+1)& (0+255),7,b
  3447  000518  D00F               	goto	l4347
  3448  00051A  0100               	movlb	0	; () banked
  3449  00051C  51AD               	movf	(executingState@emptyCount+1)& (0+255),w,b
  3450  00051E  E105               	bnz	u3180
  3451  000520  0E33               	movlw	51
  3452  000522  0100               	movlb	0	; () banked
  3453  000524  5DAC               	subwf	executingState@emptyCount& (0+255),w,b
  3454  000526  A0D8               	btfss	status,0,c
  3455  000528  D007               	goto	l4347
  3456  00052A                     u3180:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 289: state = FINISH;
  3460  00052A  0E02               	movlw	2
  3461  00052C  6E4B               	movwf	_state,c
  3462                           
  3463                           ;main.c: 290: runResult = 1;
  3464  00052E  0E00               	movlw	0
  3465  000530  6E46               	movwf	_runResult+1,c
  3466  000532  0E01               	movlw	1
  3467  000534  6E45               	movwf	_runResult,c
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;main.c: 291: return;
  3471  000536  0012               	return	
  3472  000538                     l4347:
  3473                           
  3474                           ; BSR set to: 0
  3475  000538  0100               	movlb	0	; () banked
  3476  00053A  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3477  00053C  D00E               	goto	l4353
  3478  00053E  0100               	movlb	0	; () banked
  3479  000540  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3480  000542  E105               	bnz	u3190
  3481  000544  0EB5               	movlw	181
  3482  000546  0100               	movlb	0	; () banked
  3483  000548  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3484  00054A  A0D8               	btfss	status,0,c
  3485  00054C  D006               	goto	l4353
  3486  00054E                     u3190:
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;main.c: 293: state = FINISH;
  3490  00054E  0E02               	movlw	2
  3491  000550  6E4B               	movwf	_state,c
  3492                           
  3493                           ;main.c: 294: runResult = 0;
  3494  000552  0E00               	movlw	0
  3495  000554  6E46               	movwf	_runResult+1,c
  3496  000556  0E00               	movlw	0
  3497  000558  D7ED               	goto	L4
  3498  00055A                     l4353:
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;main.c: 296: }
  3502                           ;main.c: 297: _delay((unsigned long)((500)*(10000000/4000.0)));
  3503  00055A  0E07               	movlw	7
  3504  00055C  6E35               	movwf	(??_executingState+1)& (0+255),c
  3505  00055E  0E58               	movlw	88
  3506  000560  6E34               	movwf	??_executingState& (0+255),c
  3507  000562  0E5A               	movlw	90
  3508  000564                     u3487:
  3509  000564  2EE8               	decfsz	wreg,f,c
  3510  000566  D7FE               	bra	u3487
  3511  000568  2E34               	decfsz	??_executingState& (0+255),f,c
  3512  00056A  D7FC               	bra	u3487
  3513  00056C  2E35               	decfsz	(??_executingState+1)& (0+255),f,c
  3514  00056E  D7FA               	bra	u3487
  3515  000570                     l4355:
  3516  000570  0100               	movlb	0	; () banked
  3517  000572  BFA1               	btfsc	(executingState@timedif+1)& (0+255),7,b
  3518  000574  D008               	goto	l4357
  3519  000576  0100               	movlb	0	; () banked
  3520  000578  51A1               	movf	(executingState@timedif+1)& (0+255),w,b
  3521  00057A  E107               	bnz	l267
  3522  00057C  0EB4               	movlw	180
  3523  00057E  0100               	movlb	0	; () banked
  3524  000580  5DA0               	subwf	executingState@timedif& (0+255),w,b
  3525  000582  B0D8               	btfsc	status,0,c
  3526  000584  D002               	goto	l267
  3527  000586                     l4357:
  3528                           
  3529                           ; BSR set to: 0
  3530  000586  B081               	btfsc	3969,0,c	;volatile
  3531  000588  D660               	goto	l4221
  3532  00058A                     l267:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;main.c: 298: }
  3536                           ;main.c: 300: LATCbits.LATC6 = 0;
  3537  00058A  9C8B               	bcf	3979,6,c	;volatile
  3538                           
  3539                           ;main.c: 301: int res[4];
  3540                           ;main.c: 302: res[0] = alTab;
  3541  00058C  C043  F094         	movff	_alTab,executingState@res
  3542  000590  C044  F095         	movff	_alTab+1,executingState@res+1
  3543                           
  3544                           ;main.c: 303: res[1] = alNoTab;
  3545  000594  C041  F096         	movff	_alNoTab,executingState@res+2
  3546  000598  C042  F097         	movff	_alNoTab+1,executingState@res+3
  3547                           
  3548                           ;main.c: 304: res[2] = snLabel;
  3549  00059C  C047  F098         	movff	_snLabel,executingState@res+4
  3550  0005A0  C048  F099         	movff	_snLabel+1,executingState@res+5
  3551                           
  3552                           ;main.c: 305: res[3] = snNoLabel;
  3553  0005A4  C049  F09A         	movff	_snNoLabel,executingState@res+6
  3554  0005A8  C04A  F09B         	movff	_snNoLabel+1,executingState@res+7
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;main.c: 306: eeprom_LogResult(res);
  3558  0005AC  0E94               	movlw	low executingState@res
  3559  0005AE  6E13               	movwf	eeprom_LogResult@data,c
  3560  0005B0  0E00               	movlw	high executingState@res
  3561  0005B2  6E14               	movwf	eeprom_LogResult@data+1,c
  3562  0005B4  EC1A  F00A         	call	_eeprom_LogResult	;wreg free
  3563                           
  3564                           ;main.c: 307: state = FINISH;
  3565  0005B8  0E02               	movlw	2
  3566  0005BA  6E4B               	movwf	_state,c
  3567  0005BC  0012               	return		;funcret
  3568  0005BE                     __end_of_executingState:
  3569                           	opt stack 0
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           intcon	equ	0xFF2
  3577                           intcon3	equ	0xFF0
  3578                           postinc0	equ	0xFEE
  3579                           wreg	equ	0xFE8
  3580                           indf2	equ	0xFDF
  3581                           postinc2	equ	0xFDE
  3582                           postdec2	equ	0xFDD
  3583                           fsr2h	equ	0xFDA
  3584                           fsr2l	equ	0xFD9
  3585                           status	equ	0xFD8
  3586                           
  3587 ;; *************** function _update_lcd *****************
  3588 ;; Defined at:
  3589 ;;		line 44 in file "main.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;Total ram usage:        0 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    4
  3610 ;; This function calls:
  3611 ;;		_lcdInst
  3612 ;;		_printf
  3613 ;; This function is called by:
  3614 ;;		_mainState
  3615 ;;		_executingState
  3616 ;;		_finishState
  3617 ;;		_logState
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text11
  3622  000BC6                     __ptext11:
  3623                           	opt stack 0
  3624  000BC6                     _update_lcd:
  3625                           	opt stack 25
  3626                           
  3627                           ;main.c: 46: lcdInst(0b10000000);;
  3628                           
  3629                           ;incstack = 0
  3630  000BC6  0E80               	movlw	128
  3631  000BC8  EC4B  F00C         	call	_lcdInst
  3632                           
  3633                           ;main.c: 48: switch (state)
  3634  000BCC  D083               	goto	l3935
  3635  000BCE                     l3903:
  3636                           
  3637                           ;main.c: 51: printf("%02x/%01x/%02x ", time[6], time[5], time[4]);
  3638  000BCE  0EBF               	movlw	low STR_1
  3639  000BD0  6E1C               	movwf	printf@f,c
  3640  000BD2  0EFF               	movlw	high STR_1
  3641  000BD4  6E1D               	movwf	printf@f+1,c
  3642  000BD6  C0C8  F01E         	movff	_time+12,?_printf+2
  3643  000BDA  C0C9  F01F         	movff	_time+13,?_printf+3
  3644  000BDE  C0C6  F020         	movff	_time+10,?_printf+4
  3645  000BE2  C0C7  F021         	movff	_time+11,?_printf+5
  3646  000BE6  C0C4  F022         	movff	_time+8,?_printf+6
  3647  000BEA  C0C5  F023         	movff	_time+9,?_printf+7
  3648  000BEE  ECDF  F002         	call	_printf	;wreg free
  3649                           
  3650                           ;main.c: 52: printf("%02x:%02x:%02x", time[2], time[1], time[0]);
  3651  000BF2  0EDE               	movlw	low STR_2
  3652  000BF4  6E1C               	movwf	printf@f,c
  3653  000BF6  0EFF               	movlw	high STR_2
  3654  000BF8  6E1D               	movwf	printf@f+1,c
  3655  000BFA  C0C0  F01E         	movff	_time+4,?_printf+2
  3656  000BFE  C0C1  F01F         	movff	_time+5,?_printf+3
  3657  000C02  C0BE  F020         	movff	_time+2,?_printf+4
  3658  000C06  C0BF  F021         	movff	_time+3,?_printf+5
  3659  000C0A  C0BC  F022         	movff	_time,?_printf+6
  3660  000C0E  C0BD  F023         	movff	_time+1,?_printf+7
  3661  000C12  ECDF  F002         	call	_printf	;wreg free
  3662                           
  3663                           ;main.c: 54: lcdInst(0b11000000);;
  3664  000C16  0EC0               	movlw	192
  3665  000C18  EC4B  F00C         	call	_lcdInst
  3666                           
  3667                           ;main.c: 55: printf("1:Start 2:Logs  ");
  3668  000C1C  0EAE               	movlw	low STR_3
  3669  000C1E  6E1C               	movwf	printf@f,c
  3670  000C20  0EFF               	movlw	high STR_3
  3671  000C22  6E1D               	movwf	printf@f+1,c
  3672  000C24  ECDF  F002         	call	_printf	;wreg free
  3673                           
  3674                           ;main.c: 56: break;
  3675  000C28  D063               	goto	l3937
  3676  000C2A                     l3909:
  3677                           
  3678                           ;main.c: 59: printf("%03d              ", logdata);
  3679  000C2A  0EEF               	movlw	low STR_4
  3680  000C2C  6E1C               	movwf	printf@f,c
  3681  000C2E  0EFE               	movlw	high STR_4
  3682  000C30  6E1D               	movwf	printf@f+1,c
  3683  000C32  C04C  F01E         	movff	_logdata,?_printf+2
  3684  000C36  6A1F               	clrf	?_printf+3,c
  3685  000C38  ECDF  F002         	call	_printf	;wreg free
  3686                           
  3687                           ;main.c: 60: lcdInst(0b11000000);
  3688  000C3C  0EC0               	movlw	192
  3689  000C3E  EC4B  F00C         	call	_lcdInst
  3690                           
  3691                           ;main.c: 61: printf("1:Prev 0:Exit   ");
  3692  000C42  0E9D               	movlw	low STR_5
  3693  000C44  6E1C               	movwf	printf@f,c
  3694  000C46  0EFF               	movlw	high STR_5
  3695  000C48  6E1D               	movwf	printf@f+1,c
  3696  000C4A  ECDF  F002         	call	_printf	;wreg free
  3697                           
  3698                           ;main.c: 62: break;
  3699  000C4E  D050               	goto	l3937
  3700  000C50                     l3915:
  3701                           
  3702                           ;main.c: 64: printf("Executing...    ");
  3703  000C50  0E7B               	movlw	low STR_6
  3704  000C52  6E1C               	movwf	printf@f,c
  3705  000C54  0EFF               	movlw	high STR_6
  3706  000C56  6E1D               	movwf	printf@f+1,c
  3707  000C58  ECDF  F002         	call	_printf	;wreg free
  3708                           
  3709                           ;main.c: 65: lcdInst(0b11000000);;
  3710  000C5C  0EC0               	movlw	192
  3711  000C5E  EC4B  F00C         	call	_lcdInst
  3712                           
  3713                           ;main.c: 66: printf("aN%d/a%d/sN%d/S%d",alNoTab, alTab, snNoLabel, snLabel);
  3714  000C62  0E02               	movlw	low STR_7
  3715  000C64  6E1C               	movwf	printf@f,c
  3716  000C66  0EFF               	movlw	high STR_7
  3717  000C68  6E1D               	movwf	printf@f+1,c
  3718  000C6A  C041  F01E         	movff	_alNoTab,?_printf+2
  3719  000C6E  C042  F01F         	movff	_alNoTab+1,?_printf+3
  3720  000C72  C043  F020         	movff	_alTab,?_printf+4
  3721  000C76  C044  F021         	movff	_alTab+1,?_printf+5
  3722  000C7A  C049  F022         	movff	_snNoLabel,?_printf+6
  3723  000C7E  C04A  F023         	movff	_snNoLabel+1,?_printf+7
  3724  000C82  C047  F024         	movff	_snLabel,?_printf+8
  3725  000C86  C048  F025         	movff	_snLabel+1,?_printf+9
  3726  000C8A  ECDF  F002         	call	_printf	;wreg free
  3727                           
  3728                           ;main.c: 68: break;
  3729  000C8E  D030               	goto	l3937
  3730  000C90                     l3921:
  3731                           
  3732                           ;main.c: 71: if(runResult == 1){
  3733  000C90  0445               	decf	_runResult,w,c
  3734  000C92  1046               	iorwf	_runResult+1,w,c
  3735  000C94  A4D8               	btfss	status,2,c
  3736  000C96  D007               	goto	l3925
  3737                           
  3738                           ;main.c: 72: printf("Finished        ");
  3739  000C98  0E59               	movlw	low STR_8
  3740  000C9A  6E1C               	movwf	printf@f,c
  3741  000C9C  0EFF               	movlw	high STR_8
  3742  000C9E  6E1D               	movwf	printf@f+1,c
  3743  000CA0  ECDF  F002         	call	_printf	;wreg free
  3744                           
  3745                           ;main.c: 73: }
  3746  000CA4  D006               	goto	l3927
  3747  000CA6                     l3925:
  3748                           
  3749                           ;main.c: 74: else
  3750                           ;main.c: 75: {
  3751                           ;main.c: 76: printf("Terminated      ");
  3752  000CA6  0E6A               	movlw	low STR_9
  3753  000CA8  6E1C               	movwf	printf@f,c
  3754  000CAA  0EFF               	movlw	high STR_9
  3755  000CAC  6E1D               	movwf	printf@f+1,c
  3756  000CAE  ECDF  F002         	call	_printf	;wreg free
  3757  000CB2                     l3927:
  3758                           
  3759                           ;main.c: 77: }
  3760                           ;main.c: 78: lcdInst(0b11000000);;
  3761  000CB2  0EC0               	movlw	192
  3762  000CB4  EC4B  F00C         	call	_lcdInst
  3763                           
  3764                           ;main.c: 79: printf("0:Menu          ");
  3765  000CB8  0E48               	movlw	low STR_10
  3766  000CBA  6E1C               	movwf	printf@f,c
  3767  000CBC  0EFF               	movlw	high STR_10
  3768  000CBE  6E1D               	movwf	printf@f+1,c
  3769  000CC0  ECDF  F002         	call	_printf	;wreg free
  3770                           
  3771                           ;main.c: 80: break;
  3772  000CC4  D015               	goto	l3937
  3773  000CC6                     l3931:
  3774                           
  3775                           ;main.c: 82: printf("error");
  3776  000CC6  0EF9               	movlw	low STR_11
  3777  000CC8  6E1C               	movwf	printf@f,c
  3778  000CCA  0EFF               	movlw	high STR_11
  3779  000CCC  6E1D               	movwf	printf@f+1,c
  3780  000CCE  ECDF  F002         	call	_printf	;wreg free
  3781                           
  3782                           ;main.c: 84: }
  3783                           
  3784                           ;main.c: 83: break;
  3785  000CD2  D00E               	goto	l3937
  3786  000CD4                     l3935:
  3787  000CD4  504B               	movf	_state,w,c
  3788                           
  3789                           ; Switch size 1, requested type "space"
  3790                           ; Number of cases is 4, Range of values is 0 to 3
  3791                           ; switch strategies available:
  3792                           ; Name         Instructions Cycles
  3793                           ; simple_byte           13     7 (average)
  3794                           ;	Chosen strategy is simple_byte
  3795  000CD6  0A00               	xorlw	0	; case 0
  3796  000CD8  B4D8               	btfsc	status,2,c
  3797  000CDA  D779               	goto	l3903
  3798  000CDC  0A01               	xorlw	1	; case 1
  3799  000CDE  B4D8               	btfsc	status,2,c
  3800  000CE0  D7B7               	goto	l3915
  3801  000CE2  0A03               	xorlw	3	; case 2
  3802  000CE4  B4D8               	btfsc	status,2,c
  3803  000CE6  D7D4               	goto	l3921
  3804  000CE8  0A01               	xorlw	1	; case 3
  3805  000CEA  B4D8               	btfsc	status,2,c
  3806  000CEC  D79E               	goto	l3909
  3807  000CEE  D7EB               	goto	l3931
  3808  000CF0                     l3937:
  3809                           
  3810                           ;main.c: 86: lcdInst(0b10000000);;
  3811  000CF0  0E80               	movlw	128
  3812  000CF2  EC4B  F00C         	call	_lcdInst
  3813                           
  3814                           ;main.c: 87: lcdInst(0b11000000);;
  3815  000CF6  0EC0               	movlw	192
  3816  000CF8  EC4B  F00C         	call	_lcdInst
  3817  000CFC  0012               	return		;funcret
  3818  000CFE                     __end_of_update_lcd:
  3819                           	opt stack 0
  3820                           tblptru	equ	0xFF8
  3821                           tblptrh	equ	0xFF7
  3822                           tblptrl	equ	0xFF6
  3823                           tablat	equ	0xFF5
  3824                           prodh	equ	0xFF4
  3825                           prodl	equ	0xFF3
  3826                           intcon	equ	0xFF2
  3827                           intcon3	equ	0xFF0
  3828                           postinc0	equ	0xFEE
  3829                           wreg	equ	0xFE8
  3830                           indf2	equ	0xFDF
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8
  3836                           
  3837 ;; *************** function _servoRotate0 *****************
  3838 ;; Defined at:
  3839 ;;		line 79 in file "servos.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  servo           2   15[COMRAM] int 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  i               2   19[COMRAM] unsigned int 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;Total ram usage:        6 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    1
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_executingState
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text12
  3868  000CFE                     __ptext12:
  3869                           	opt stack 0
  3870  000CFE                     _servoRotate0:
  3871                           	opt stack 28
  3872                           
  3873                           ;servos.c: 81: unsigned int i;
  3874                           ;servos.c: 82: for (i = 0; i < loopcount; i++) {
  3875                           
  3876                           ;incstack = 0
  3877  000CFE  0E00               	movlw	0
  3878  000D00  6E15               	movwf	servoRotate0@i+1,c
  3879  000D02  0E00               	movlw	0
  3880  000D04  6E14               	movwf	servoRotate0@i,c
  3881  000D06  D056               	goto	l456
  3882  000D08                     l459:
  3883                           
  3884                           ;servos.c: 85: LATAbits.LATA4 = 1;
  3885  000D08  8889               	bsf	3977,4,c	;volatile
  3886                           
  3887                           ;servos.c: 86: break;
  3888  000D0A  D020               	goto	l3993
  3889  000D0C                     l461:
  3890                           
  3891                           ;servos.c: 88: LATAbits.LATA5 = 1;
  3892  000D0C  8A89               	bsf	3977,5,c	;volatile
  3893                           
  3894                           ;servos.c: 89: break;
  3895  000D0E  D01E               	goto	l3993
  3896  000D10                     l462:
  3897                           
  3898                           ;servos.c: 91: LATEbits.LATE0 = 1;
  3899  000D10  808D               	bsf	3981,0,c	;volatile
  3900                           
  3901                           ;servos.c: 92: break;
  3902  000D12  D01C               	goto	l3993
  3903  000D14                     l463:
  3904                           
  3905                           ;servos.c: 94: LATEbits.LATE1 = 1;
  3906  000D14  828D               	bsf	3981,1,c	;volatile
  3907                           
  3908                           ;servos.c: 95: break;
  3909  000D16  D01A               	goto	l3993
  3910  000D18                     l464:
  3911                           
  3912                           ;servos.c: 97: LATBbits.LATB2 = 1;
  3913  000D18  848A               	bsf	3978,2,c	;volatile
  3914                           
  3915                           ;servos.c: 99: }
  3916                           
  3917                           ;servos.c: 98: break;
  3918  000D1A  D018               	goto	l3993
  3919  000D1C                     l3991:
  3920  000D1C  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  3921  000D20  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  3922                           
  3923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3924                           ; Switch size 1, requested type "space"
  3925                           ; Number of cases is 1, Range of values is 0 to 0
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; simple_byte            4     3 (average)
  3929                           ;	Chosen strategy is simple_byte
  3930  000D24  5013               	movf	??_servoRotate0+1,w,c
  3931  000D26  0A00               	xorlw	0	; case 0
  3932  000D28  A4D8               	btfss	status,2,c
  3933  000D2A  D010               	goto	l3993
  3934                           
  3935                           ; Switch size 1, requested type "space"
  3936                           ; Number of cases is 5, Range of values is 0 to 4
  3937                           ; switch strategies available:
  3938                           ; Name         Instructions Cycles
  3939                           ; simple_byte           16     9 (average)
  3940                           ;	Chosen strategy is simple_byte
  3941  000D2C  5012               	movf	??_servoRotate0,w,c
  3942  000D2E  0A00               	xorlw	0	; case 0
  3943  000D30  B4D8               	btfsc	status,2,c
  3944  000D32  D7EA               	goto	l459
  3945  000D34  0A01               	xorlw	1	; case 1
  3946  000D36  B4D8               	btfsc	status,2,c
  3947  000D38  D7E9               	goto	l461
  3948  000D3A  0A03               	xorlw	3	; case 2
  3949  000D3C  B4D8               	btfsc	status,2,c
  3950  000D3E  D7E8               	goto	l462
  3951  000D40  0A01               	xorlw	1	; case 3
  3952  000D42  B4D8               	btfsc	status,2,c
  3953  000D44  D7E7               	goto	l463
  3954  000D46  0A07               	xorlw	7	; case 4
  3955  000D48  B4D8               	btfsc	status,2,c
  3956  000D4A  D7E6               	goto	l464
  3957  000D4C                     l3993:
  3958                           
  3959                           ;servos.c: 100: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  3960  000D4C  0E05               	movlw	5
  3961  000D4E  6E12               	movwf	??_servoRotate0& (0+255),c
  3962  000D50  0EDE               	movlw	222
  3963  000D52                     u3497:
  3964  000D52  2EE8               	decfsz	wreg,f,c
  3965  000D54  D7FE               	bra	u3497
  3966  000D56  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  3967  000D58  D7FC               	bra	u3497
  3968                           
  3969                           ;servos.c: 101: switch (servo) {
  3970  000D5A  D00A               	goto	l3997
  3971  000D5C                     l466:
  3972                           
  3973                           ;servos.c: 103: LATAbits.LATA4 = 0;
  3974  000D5C  9889               	bcf	3977,4,c	;volatile
  3975                           
  3976                           ;servos.c: 104: break;
  3977  000D5E  D020               	goto	l3999
  3978  000D60                     l468:
  3979                           
  3980                           ;servos.c: 106: LATAbits.LATA5 = 0;
  3981  000D60  9A89               	bcf	3977,5,c	;volatile
  3982                           
  3983                           ;servos.c: 107: break;
  3984  000D62  D01E               	goto	l3999
  3985  000D64                     l469:
  3986                           
  3987                           ;servos.c: 109: LATEbits.LATE0 = 0;
  3988  000D64  908D               	bcf	3981,0,c	;volatile
  3989                           
  3990                           ;servos.c: 110: break;
  3991  000D66  D01C               	goto	l3999
  3992  000D68                     l470:
  3993                           
  3994                           ;servos.c: 112: LATEbits.LATE1 = 0;
  3995  000D68  928D               	bcf	3981,1,c	;volatile
  3996                           
  3997                           ;servos.c: 113: break;
  3998  000D6A  D01A               	goto	l3999
  3999  000D6C                     l471:
  4000                           
  4001                           ;servos.c: 115: LATBbits.LATB2 = 0;
  4002  000D6C  948A               	bcf	3978,2,c	;volatile
  4003                           
  4004                           ;servos.c: 117: }
  4005                           
  4006                           ;servos.c: 116: break;
  4007  000D6E  D018               	goto	l3999
  4008  000D70                     l3997:
  4009  000D70  C010  F012         	movff	servoRotate0@servo,??_servoRotate0
  4010  000D74  C011  F013         	movff	servoRotate0@servo+1,??_servoRotate0+1
  4011                           
  4012                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4013                           ; Switch size 1, requested type "space"
  4014                           ; Number of cases is 1, Range of values is 0 to 0
  4015                           ; switch strategies available:
  4016                           ; Name         Instructions Cycles
  4017                           ; simple_byte            4     3 (average)
  4018                           ;	Chosen strategy is simple_byte
  4019  000D78  5013               	movf	??_servoRotate0+1,w,c
  4020  000D7A  0A00               	xorlw	0	; case 0
  4021  000D7C  A4D8               	btfss	status,2,c
  4022  000D7E  D010               	goto	l3999
  4023                           
  4024                           ; Switch size 1, requested type "space"
  4025                           ; Number of cases is 5, Range of values is 0 to 4
  4026                           ; switch strategies available:
  4027                           ; Name         Instructions Cycles
  4028                           ; simple_byte           16     9 (average)
  4029                           ;	Chosen strategy is simple_byte
  4030  000D80  5012               	movf	??_servoRotate0,w,c
  4031  000D82  0A00               	xorlw	0	; case 0
  4032  000D84  B4D8               	btfsc	status,2,c
  4033  000D86  D7EA               	goto	l466
  4034  000D88  0A01               	xorlw	1	; case 1
  4035  000D8A  B4D8               	btfsc	status,2,c
  4036  000D8C  D7E9               	goto	l468
  4037  000D8E  0A03               	xorlw	3	; case 2
  4038  000D90  B4D8               	btfsc	status,2,c
  4039  000D92  D7E8               	goto	l469
  4040  000D94  0A01               	xorlw	1	; case 3
  4041  000D96  B4D8               	btfsc	status,2,c
  4042  000D98  D7E7               	goto	l470
  4043  000D9A  0A07               	xorlw	7	; case 4
  4044  000D9C  B4D8               	btfsc	status,2,c
  4045  000D9E  D7E6               	goto	l471
  4046  000DA0                     l3999:
  4047                           
  4048                           ;servos.c: 118: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  4049  000DA0  0E3D               	movlw	61
  4050  000DA2  6E12               	movwf	??_servoRotate0& (0+255),c
  4051  000DA4  0E0F               	movlw	15
  4052  000DA6                     u3507:
  4053  000DA6  2EE8               	decfsz	wreg,f,c
  4054  000DA8  D7FE               	bra	u3507
  4055  000DAA  2E12               	decfsz	??_servoRotate0& (0+255),f,c
  4056  000DAC  D7FC               	bra	u3507
  4057  000DAE  F000               	nop	
  4058  000DB0  4A14               	infsnz	servoRotate0@i,f,c
  4059  000DB2  2A15               	incf	servoRotate0@i+1,f,c
  4060  000DB4                     l456:
  4061  000DB4  504D               	movf	_loopcount,w,c
  4062  000DB6  5C14               	subwf	servoRotate0@i,w,c
  4063  000DB8  504E               	movf	_loopcount+1,w,c
  4064  000DBA  5815               	subwfb	servoRotate0@i+1,w,c
  4065  000DBC  B0D8               	btfsc	status,0,c
  4066  000DBE  0012               	return	
  4067  000DC0  D7AD               	goto	l3991
  4068  000DC2                     __end_of_servoRotate0:
  4069                           	opt stack 0
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           intcon3	equ	0xFF0
  4078                           postinc0	equ	0xFEE
  4079                           wreg	equ	0xFE8
  4080                           indf2	equ	0xFDF
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function _readSnTop *****************
  4088 ;; Defined at:
  4089 ;;		line 25 in file "sensors.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  2   15[COMRAM] int 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;Total ram usage:        2 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    1
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_executingState
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text13
  4118  0017DC                     __ptext13:
  4119                           	opt stack 0
  4120  0017DC                     _readSnTop:
  4121                           	opt stack 28
  4122                           
  4123                           ;sensors.c: 26: if(PORTAbits.RA2 == 1){
  4124                           
  4125                           ;incstack = 0
  4126  0017DC  A480               	btfss	3968,2,c	;volatile
  4127  0017DE  D005               	goto	l4025
  4128                           
  4129                           ;sensors.c: 27: return 1;
  4130  0017E0  0E00               	movlw	0
  4131  0017E2  6E11               	movwf	?_readSnTop+1,c
  4132  0017E4  0E01               	movlw	1
  4133  0017E6  6E10               	movwf	?_readSnTop,c
  4134  0017E8  0012               	return	
  4135  0017EA                     l4025:
  4136                           
  4137                           ;sensors.c: 28: }
  4138                           ;sensors.c: 29: return 0;
  4139  0017EA  0E00               	movlw	0
  4140  0017EC  6E11               	movwf	?_readSnTop+1,c
  4141  0017EE  0E00               	movlw	0
  4142  0017F0  6E10               	movwf	?_readSnTop,c
  4143  0017F2  0012               	return	
  4144  0017F4                     __end_of_readSnTop:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           intcon3	equ	0xFF0
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           postdec2	equ	0xFDD
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _readSnSensor *****************
  4164 ;; Defined at:
  4165 ;;		line 39 in file "sensors.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  2   15[COMRAM] int 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;Total ram usage:        2 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    1
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_executingState
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text14
  4194  0017F4                     __ptext14:
  4195                           	opt stack 0
  4196  0017F4                     _readSnSensor:
  4197                           	opt stack 28
  4198                           
  4199                           ;sensors.c: 40: if(PORTCbits.RC0 == 1){
  4200                           
  4201                           ;incstack = 0
  4202  0017F4  A082               	btfss	3970,0,c	;volatile
  4203  0017F6  D005               	goto	l4077
  4204                           
  4205                           ;sensors.c: 41: return 1;
  4206  0017F8  0E00               	movlw	0
  4207  0017FA  6E11               	movwf	?_readSnSensor+1,c
  4208  0017FC  0E01               	movlw	1
  4209  0017FE  6E10               	movwf	?_readSnSensor,c
  4210  001800  0012               	return	
  4211  001802                     l4077:
  4212                           
  4213                           ;sensors.c: 42: }
  4214                           ;sensors.c: 43: return 0;
  4215  001802  0E00               	movlw	0
  4216  001804  6E11               	movwf	?_readSnSensor+1,c
  4217  001806  0E00               	movlw	0
  4218  001808  6E10               	movwf	?_readSnSensor,c
  4219  00180A  0012               	return	
  4220  00180C                     __end_of_readSnSensor:
  4221                           	opt stack 0
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodh	equ	0xFF4
  4227                           prodl	equ	0xFF3
  4228                           intcon	equ	0xFF2
  4229                           intcon3	equ	0xFF0
  4230                           postinc0	equ	0xFEE
  4231                           wreg	equ	0xFE8
  4232                           indf2	equ	0xFDF
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           fsr2h	equ	0xFDA
  4236                           fsr2l	equ	0xFD9
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function _readSnBot *****************
  4240 ;; Defined at:
  4241 ;;		line 11 in file "sensors.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  2   15[COMRAM] int 
  4248 ;; Registers used:
  4249 ;;		wreg, status,2
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;Total ram usage:        2 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    1
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		_executingState
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text15
  4270  00180C                     __ptext15:
  4271                           	opt stack 0
  4272  00180C                     _readSnBot:
  4273                           	opt stack 28
  4274                           
  4275                           ;sensors.c: 12: if(PORTAbits.RA0 == 1){
  4276                           
  4277                           ;incstack = 0
  4278  00180C  A080               	btfss	3968,0,c	;volatile
  4279  00180E  D005               	goto	l4045
  4280                           
  4281                           ;sensors.c: 13: return 1;
  4282  001810  0E00               	movlw	0
  4283  001812  6E11               	movwf	?_readSnBot+1,c
  4284  001814  0E01               	movlw	1
  4285  001816  6E10               	movwf	?_readSnBot,c
  4286  001818  0012               	return	
  4287  00181A                     l4045:
  4288                           
  4289                           ;sensors.c: 14: }
  4290                           ;sensors.c: 15: return 0;
  4291  00181A  0E00               	movlw	0
  4292  00181C  6E11               	movwf	?_readSnBot+1,c
  4293  00181E  0E00               	movlw	0
  4294  001820  6E10               	movwf	?_readSnBot,c
  4295  001822  0012               	return	
  4296  001824                     __end_of_readSnBot:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           intcon3	equ	0xFF0
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _readAlTop *****************
  4316 ;; Defined at:
  4317 ;;		line 32 in file "sensors.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  2   15[COMRAM] int 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4331 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;Total ram usage:        2 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_executingState
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text16
  4346  001824                     __ptext16:
  4347                           	opt stack 0
  4348  001824                     _readAlTop:
  4349                           	opt stack 28
  4350                           
  4351                           ;sensors.c: 33: if(PORTAbits.RA3 == 1){
  4352                           
  4353                           ;incstack = 0
  4354  001824  A680               	btfss	3968,3,c	;volatile
  4355  001826  D005               	goto	l4035
  4356                           
  4357                           ;sensors.c: 34: return 1;
  4358  001828  0E00               	movlw	0
  4359  00182A  6E11               	movwf	?_readAlTop+1,c
  4360  00182C  0E01               	movlw	1
  4361  00182E  6E10               	movwf	?_readAlTop,c
  4362  001830  0012               	return	
  4363  001832                     l4035:
  4364                           
  4365                           ;sensors.c: 35: }
  4366                           ;sensors.c: 36: return 0;
  4367  001832  0E00               	movlw	0
  4368  001834  6E11               	movwf	?_readAlTop+1,c
  4369  001836  0E00               	movlw	0
  4370  001838  6E10               	movwf	?_readAlTop,c
  4371  00183A  0012               	return	
  4372  00183C                     __end_of_readAlTop:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           intcon3	equ	0xFF0
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           indf2	equ	0xFDF
  4385                           postinc2	equ	0xFDE
  4386                           postdec2	equ	0xFDD
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _readAlBot *****************
  4392 ;; Defined at:
  4393 ;;		line 18 in file "sensors.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  2   15[COMRAM] int 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;Total ram usage:        2 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    1
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_executingState
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text17
  4422  00183C                     __ptext17:
  4423                           	opt stack 0
  4424  00183C                     _readAlBot:
  4425                           	opt stack 28
  4426                           
  4427                           ;sensors.c: 19: if(PORTAbits.RA1 == 1){
  4428                           
  4429                           ;incstack = 0
  4430  00183C  A280               	btfss	3968,1,c	;volatile
  4431  00183E  D005               	goto	l4055
  4432                           
  4433                           ;sensors.c: 20: return 1;
  4434  001840  0E00               	movlw	0
  4435  001842  6E11               	movwf	?_readAlBot+1,c
  4436  001844  0E01               	movlw	1
  4437  001846  6E10               	movwf	?_readAlBot,c
  4438  001848  0012               	return	
  4439  00184A                     l4055:
  4440                           
  4441                           ;sensors.c: 21: }
  4442                           ;sensors.c: 22: return 0;
  4443  00184A  0E00               	movlw	0
  4444  00184C  6E11               	movwf	?_readAlBot+1,c
  4445  00184E  0E00               	movlw	0
  4446  001850  6E10               	movwf	?_readAlBot,c
  4447  001852  0012               	return	
  4448  001854                     __end_of_readAlBot:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           intcon3	equ	0xFF0
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           indf2	equ	0xFDF
  4461                           postinc2	equ	0xFDE
  4462                           postdec2	equ	0xFDD
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _get_timeDif *****************
  4468 ;; Defined at:
  4469 ;;		line 108 in file "main.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  start           2   23[COMRAM] int 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  start_s         2   40[COMRAM] int 
  4474 ;;  s_one           2   38[COMRAM] int 
  4475 ;;  s_ten           2   36[COMRAM] int 
  4476 ;;  m_one           2   34[COMRAM] int 
  4477 ;;  m_ten           2   32[COMRAM] int 
  4478 ;;  h_one           2   30[COMRAM] int 
  4479 ;;  h_ten           2   28[COMRAM] int 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  2   23[COMRAM] int 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;Total ram usage:       23 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    4
  4496 ;; This function calls:
  4497 ;;		___wmul
  4498 ;;		_get_time
  4499 ;; This function is called by:
  4500 ;;		_executingState
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text18
  4505  000A7C                     __ptext18:
  4506                           	opt stack 0
  4507  000A7C                     _get_timeDif:
  4508                           	opt stack 25
  4509                           
  4510                           ;main.c: 109: get_time(time);
  4511                           
  4512                           ;incstack = 0
  4513  000A7C  0EBC               	movlw	low _time
  4514  000A7E  6E13               	movwf	get_time@time,c
  4515  000A80  0E00               	movlw	high _time
  4516  000A82  6E14               	movwf	get_time@time+1,c
  4517  000A84  EC4C  F008         	call	_get_time	;wreg free
  4518                           
  4519                           ;main.c: 110: int h_ten = (time[2] & 0b11110000)>>4;
  4520  000A88  EE20  F0C0         	lfsr	2,_time+4
  4521  000A8C  CFDE F01A          	movff	postinc2,??_get_timeDif
  4522  000A90  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4523  000A94  0E04               	movlw	4
  4524  000A96  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4525  000A98                     u2785:
  4526  000A98  341B               	rlcf	??_get_timeDif+1,w,c
  4527  000A9A  321B               	rrcf	??_get_timeDif+1,f,c
  4528  000A9C  321A               	rrcf	??_get_timeDif,f,c
  4529  000A9E  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4530  000AA0  D7FB               	goto	u2785
  4531  000AA2  0E0F               	movlw	15
  4532  000AA4  141A               	andwf	??_get_timeDif,w,c
  4533  000AA6  6E1D               	movwf	get_timeDif@h_ten,c
  4534  000AA8  6A1E               	clrf	get_timeDif@h_ten+1,c
  4535                           
  4536                           ;main.c: 111: int h_one = (time[2] & 0b00001111);
  4537  000AAA  0E0F               	movlw	15
  4538  000AAC  0100               	movlb	0	; () banked
  4539  000AAE  15C0               	andwf	(_time+4)& (0+255),w,b
  4540  000AB0  6E1F               	movwf	get_timeDif@h_one,c
  4541  000AB2  6A20               	clrf	get_timeDif@h_one+1,c
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;main.c: 112: int m_ten = (time[1] & 0b11110000)>>4;
  4545  000AB4  EE20  F0BE         	lfsr	2,_time+2
  4546  000AB8  CFDE F01A          	movff	postinc2,??_get_timeDif
  4547  000ABC  CFDD F01B          	movff	postdec2,??_get_timeDif+1
  4548  000AC0  0E04               	movlw	4
  4549  000AC2  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4550  000AC4                     u2795:
  4551  000AC4  341B               	rlcf	??_get_timeDif+1,w,c
  4552  000AC6  321B               	rrcf	??_get_timeDif+1,f,c
  4553  000AC8  321A               	rrcf	??_get_timeDif,f,c
  4554  000ACA  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4555  000ACC  D7FB               	goto	u2795
  4556  000ACE  0E0F               	movlw	15
  4557  000AD0  141A               	andwf	??_get_timeDif,w,c
  4558  000AD2  6E21               	movwf	get_timeDif@m_ten,c
  4559  000AD4  6A22               	clrf	get_timeDif@m_ten+1,c
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;main.c: 113: int m_one = (time[1] & 0b00001111);
  4563  000AD6  0E0F               	movlw	15
  4564  000AD8  0100               	movlb	0	; () banked
  4565  000ADA  15BE               	andwf	(_time+2)& (0+255),w,b
  4566  000ADC  6E23               	movwf	get_timeDif@m_one,c
  4567  000ADE  6A24               	clrf	get_timeDif@m_one+1,c
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;main.c: 114: int s_ten = (time[0] & 0b11110000)>>4;
  4571  000AE0  C0BC  F01A         	movff	_time,??_get_timeDif
  4572  000AE4  C0BD  F01B         	movff	_time+1,??_get_timeDif+1
  4573  000AE8  0E04               	movlw	4
  4574  000AEA  6E1C               	movwf	(??_get_timeDif+2)& (0+255),c
  4575  000AEC                     u2805:
  4576  000AEC  341B               	rlcf	??_get_timeDif+1,w,c
  4577  000AEE  321B               	rrcf	??_get_timeDif+1,f,c
  4578  000AF0  321A               	rrcf	??_get_timeDif,f,c
  4579  000AF2  2E1C               	decfsz	(??_get_timeDif+2)& (0+255),f,c
  4580  000AF4  D7FB               	goto	u2805
  4581  000AF6  0E0F               	movlw	15
  4582  000AF8  141A               	andwf	??_get_timeDif,w,c
  4583  000AFA  6E25               	movwf	get_timeDif@s_ten,c
  4584  000AFC  6A26               	clrf	get_timeDif@s_ten+1,c
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;main.c: 115: int s_one = (time[0] & 0b00001111);
  4588  000AFE  0E0F               	movlw	15
  4589  000B00  0100               	movlb	0	; () banked
  4590  000B02  15BC               	andwf	_time& (0+255),w,b
  4591  000B04  6E27               	movwf	get_timeDif@s_one,c
  4592  000B06  6A28               	clrf	get_timeDif@s_one+1,c
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4596  000B08  C021  F010         	movff	get_timeDif@m_ten,___wmul@multiplier
  4597  000B0C  C022  F011         	movff	get_timeDif@m_ten+1,___wmul@multiplier+1
  4598  000B10  0E00               	movlw	0
  4599  000B12  6E13               	movwf	___wmul@multiplicand+1,c
  4600  000B14  0E0A               	movlw	10
  4601  000B16  6E12               	movwf	___wmul@multiplicand,c
  4602  000B18  ECBE  F00B         	call	___wmul	;wreg free
  4603  000B1C  5023               	movf	get_timeDif@m_one,w,c
  4604  000B1E  2410               	addwf	?___wmul,w,c
  4605  000B20  6E2B               	movwf	_get_timeDif$1733,c
  4606  000B22  5024               	movf	get_timeDif@m_one+1,w,c
  4607  000B24  2011               	addwfc	?___wmul+1,w,c
  4608  000B26  6E2C               	movwf	_get_timeDif$1733+1,c
  4609                           
  4610                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4611  000B28  C01D  F010         	movff	get_timeDif@h_ten,___wmul@multiplier
  4612  000B2C  C01E  F011         	movff	get_timeDif@h_ten+1,___wmul@multiplier+1
  4613  000B30  0E00               	movlw	0
  4614  000B32  6E13               	movwf	___wmul@multiplicand+1,c
  4615  000B34  0E0A               	movlw	10
  4616  000B36  6E12               	movwf	___wmul@multiplicand,c
  4617  000B38  ECBE  F00B         	call	___wmul	;wreg free
  4618  000B3C  501F               	movf	get_timeDif@h_one,w,c
  4619  000B3E  2410               	addwf	?___wmul,w,c
  4620  000B40  6E2D               	movwf	_get_timeDif$1734,c
  4621  000B42  5020               	movf	get_timeDif@h_one+1,w,c
  4622  000B44  2011               	addwfc	?___wmul+1,w,c
  4623  000B46  6E2E               	movwf	_get_timeDif$1734+1,c
  4624                           
  4625                           ;main.c: 116: int start_s = (h_ten*10+h_one)*3600 + (m_ten*10 + m_one) * 60 + (s_ten * 1
      +                          0 + s_one);
  4626  000B48  C025  F010         	movff	get_timeDif@s_ten,___wmul@multiplier
  4627  000B4C  C026  F011         	movff	get_timeDif@s_ten+1,___wmul@multiplier+1
  4628  000B50  0E00               	movlw	0
  4629  000B52  6E13               	movwf	___wmul@multiplicand+1,c
  4630  000B54  0E0A               	movlw	10
  4631  000B56  6E12               	movwf	___wmul@multiplicand,c
  4632  000B58  ECBE  F00B         	call	___wmul	;wreg free
  4633  000B5C  C010  F01A         	movff	?___wmul,??_get_timeDif
  4634  000B60  C011  F01B         	movff	?___wmul+1,??_get_timeDif+1
  4635  000B64  C02D  F010         	movff	_get_timeDif$1734,___wmul@multiplier
  4636  000B68  C02E  F011         	movff	_get_timeDif$1734+1,___wmul@multiplier+1
  4637  000B6C  0E0E               	movlw	14
  4638  000B6E  6E13               	movwf	___wmul@multiplicand+1,c
  4639  000B70  0E10               	movlw	16
  4640  000B72  6E12               	movwf	___wmul@multiplicand,c
  4641  000B74  ECBE  F00B         	call	___wmul	;wreg free
  4642  000B78  5010               	movf	?___wmul,w,c
  4643  000B7A  261A               	addwf	??_get_timeDif,f,c
  4644  000B7C  5011               	movf	?___wmul+1,w,c
  4645  000B7E  221B               	addwfc	??_get_timeDif+1,f,c
  4646  000B80  C02B  F010         	movff	_get_timeDif$1733,___wmul@multiplier
  4647  000B84  C02C  F011         	movff	_get_timeDif$1733+1,___wmul@multiplier+1
  4648  000B88  0E00               	movlw	0
  4649  000B8A  6E13               	movwf	___wmul@multiplicand+1,c
  4650  000B8C  0E3C               	movlw	60
  4651  000B8E  6E12               	movwf	___wmul@multiplicand,c
  4652  000B90  ECBE  F00B         	call	___wmul	;wreg free
  4653  000B94  5010               	movf	?___wmul,w,c
  4654  000B96  261A               	addwf	??_get_timeDif,f,c
  4655  000B98  5011               	movf	?___wmul+1,w,c
  4656  000B9A  221B               	addwfc	??_get_timeDif+1,f,c
  4657  000B9C  5027               	movf	get_timeDif@s_one,w,c
  4658  000B9E  241A               	addwf	??_get_timeDif,w,c
  4659  000BA0  6E29               	movwf	get_timeDif@start_s,c
  4660  000BA2  5028               	movf	get_timeDif@s_one+1,w,c
  4661  000BA4  201B               	addwfc	??_get_timeDif+1,w,c
  4662  000BA6  6E2A               	movwf	get_timeDif@start_s+1,c
  4663                           
  4664                           ;main.c: 118: return start_s - start;
  4665  000BA8  C018  F01A         	movff	get_timeDif@start,??_get_timeDif
  4666  000BAC  C019  F01B         	movff	get_timeDif@start+1,??_get_timeDif+1
  4667  000BB0  1E1A               	comf	??_get_timeDif,f,c
  4668  000BB2  1E1B               	comf	??_get_timeDif+1,f,c
  4669  000BB4  4A1A               	infsnz	??_get_timeDif,f,c
  4670  000BB6  2A1B               	incf	??_get_timeDif+1,f,c
  4671  000BB8  5029               	movf	get_timeDif@start_s,w,c
  4672  000BBA  241A               	addwf	??_get_timeDif,w,c
  4673  000BBC  6E18               	movwf	?_get_timeDif,c
  4674  000BBE  502A               	movf	get_timeDif@start_s+1,w,c
  4675  000BC0  201B               	addwfc	??_get_timeDif+1,w,c
  4676  000BC2  6E19               	movwf	?_get_timeDif+1,c
  4677  000BC4  0012               	return	
  4678  000BC6                     __end_of_get_timeDif:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           intcon3	equ	0xFF0
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           indf2	equ	0xFDF
  4691                           postinc2	equ	0xFDE
  4692                           postdec2	equ	0xFDD
  4693                           fsr2h	equ	0xFDA
  4694                           fsr2l	equ	0xFD9
  4695                           status	equ	0xFD8
  4696                           
  4697 ;; *************** function _get_time *****************
  4698 ;; Defined at:
  4699 ;;		line 23 in file "RTC.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  time            2   18[COMRAM] PTR int 
  4702 ;;		 -> starttime(14), time(14), 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  i               1   22[COMRAM] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;Total ram usage:        5 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    3
  4721 ;; This function calls:
  4722 ;;		_I2C_Master_Read
  4723 ;;		_I2C_Master_Start
  4724 ;;		_I2C_Master_Stop
  4725 ;;		_I2C_Master_Write
  4726 ;; This function is called by:
  4727 ;;		_get_timeDif
  4728 ;;		_mainState
  4729 ;;		_executingState
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text19
  4734  001098                     __ptext19:
  4735                           	opt stack 0
  4736  001098                     _get_time:
  4737                           	opt stack 26
  4738                           
  4739                           ;RTC.c: 25: I2C_Master_Start();
  4740                           
  4741                           ;incstack = 0
  4742  001098  EC5A  F00C         	call	_I2C_Master_Start	;wreg free
  4743                           
  4744                           ;RTC.c: 26: I2C_Master_Write(0b11010000);
  4745  00109C  0E00               	movlw	0
  4746  00109E  6E12               	movwf	I2C_Master_Write@d+1,c
  4747  0010A0  0ED0               	movlw	208
  4748  0010A2  6E11               	movwf	I2C_Master_Write@d,c
  4749  0010A4  EC51  F00C         	call	_I2C_Master_Write	;wreg free
  4750                           
  4751                           ;RTC.c: 27: I2C_Master_Write(0x00);
  4752  0010A8  0E00               	movlw	0
  4753  0010AA  6E12               	movwf	I2C_Master_Write@d+1,c
  4754  0010AC  0E00               	movlw	0
  4755  0010AE  6E11               	movwf	I2C_Master_Write@d,c
  4756  0010B0  EC51  F00C         	call	_I2C_Master_Write	;wreg free
  4757                           
  4758                           ;RTC.c: 28: I2C_Master_Stop();
  4759  0010B4  EC56  F00C         	call	_I2C_Master_Stop	;wreg free
  4760                           
  4761                           ;RTC.c: 31: I2C_Master_Start();
  4762  0010B8  EC5A  F00C         	call	_I2C_Master_Start	;wreg free
  4763                           
  4764                           ;RTC.c: 32: I2C_Master_Write(0b11010001);
  4765  0010BC  0E00               	movlw	0
  4766  0010BE  6E12               	movwf	I2C_Master_Write@d+1,c
  4767  0010C0  0ED1               	movlw	209
  4768  0010C2  6E11               	movwf	I2C_Master_Write@d,c
  4769  0010C4  EC51  F00C         	call	_I2C_Master_Write	;wreg free
  4770                           
  4771                           ;RTC.c: 33: for (unsigned char i = 0; i < 0x06; i++) {
  4772  0010C8  0E00               	movlw	0
  4773  0010CA  6E17               	movwf	get_time@i,c
  4774  0010CC                     l3815:
  4775  0010CC  0E05               	movlw	5
  4776  0010CE  6417               	cpfsgt	get_time@i,c
  4777  0010D0  D001               	goto	l3819
  4778  0010D2  D013               	goto	l3825
  4779  0010D4                     l3819:
  4780                           
  4781                           ;RTC.c: 34: time[i] = I2C_Master_Read(1);
  4782  0010D4  0E01               	movlw	1
  4783  0010D6  EC98  F00B         	call	_I2C_Master_Read
  4784  0010DA  6E15               	movwf	??_get_time& (0+255),c
  4785  0010DC  6A16               	clrf	(??_get_time+1)& (0+255),c
  4786  0010DE  5017               	movf	get_time@i,w,c
  4787  0010E0  0D02               	mullw	2
  4788  0010E2  50F3               	movf	prodl,w,c
  4789  0010E4  2413               	addwf	get_time@time,w,c
  4790  0010E6  6ED9               	movwf	fsr2l,c
  4791  0010E8  50F4               	movf	prodh,w,c
  4792  0010EA  2014               	addwfc	get_time@time+1,w,c
  4793  0010EC  6EDA               	movwf	fsr2h,c
  4794  0010EE  C015  FFDE         	movff	??_get_time,postinc2
  4795  0010F2  C016  FFDD         	movff	??_get_time+1,postdec2
  4796  0010F6  2A17               	incf	get_time@i,f,c
  4797  0010F8  D7E9               	goto	l3815
  4798  0010FA                     l3825:
  4799                           
  4800                           ;RTC.c: 35: }
  4801                           ;RTC.c: 36: time[6] = I2C_Master_Read(0);
  4802  0010FA  0E00               	movlw	0
  4803  0010FC  EC98  F00B         	call	_I2C_Master_Read
  4804  001100  6E15               	movwf	??_get_time& (0+255),c
  4805  001102  6A16               	clrf	(??_get_time+1)& (0+255),c
  4806  001104  EE20 F00C          	lfsr	2,12
  4807  001108  5013               	movf	get_time@time,w,c
  4808  00110A  26D9               	addwf	fsr2l,f,c
  4809  00110C  5014               	movf	get_time@time+1,w,c
  4810  00110E  22DA               	addwfc	fsr2h,f,c
  4811  001110  C015  FFDE         	movff	??_get_time,postinc2
  4812  001114  C016  FFDD         	movff	??_get_time+1,postdec2
  4813                           
  4814                           ;RTC.c: 37: I2C_Master_Stop();
  4815  001118  EC56  F00C         	call	_I2C_Master_Stop	;wreg free
  4816  00111C  0012               	return		;funcret
  4817  00111E                     __end_of_get_time:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon	equ	0xFF2
  4826                           intcon3	equ	0xFF0
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf2	equ	0xFDF
  4830                           postinc2	equ	0xFDE
  4831                           postdec2	equ	0xFDD
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _I2C_Master_Write *****************
  4837 ;; Defined at:
  4838 ;;		line 47 in file "I2C.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  d               2   16[COMRAM] unsigned int 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;Total ram usage:        2 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    2
  4859 ;; This function calls:
  4860 ;;		_I2C_Master_Wait
  4861 ;; This function is called by:
  4862 ;;		_fixLCD
  4863 ;;		_get_time
  4864 ;;		_set_time
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text20
  4869  0018A2                     __ptext20:
  4870                           	opt stack 0
  4871  0018A2                     _I2C_Master_Write:
  4872                           	opt stack 26
  4873                           
  4874                           ;I2C.c: 49: I2C_Master_Wait();
  4875                           
  4876                           ;incstack = 0
  4877  0018A2  EC35  F00C         	call	_I2C_Master_Wait	;wreg free
  4878                           
  4879                           ;I2C.c: 50: SSPBUF = d;
  4880  0018A6  C011  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4881  0018AA  0012               	return		;funcret
  4882  0018AC                     __end_of_I2C_Master_Write:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           prodh	equ	0xFF4
  4889                           prodl	equ	0xFF3
  4890                           intcon	equ	0xFF2
  4891                           intcon3	equ	0xFF0
  4892                           postinc0	equ	0xFEE
  4893                           wreg	equ	0xFE8
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _I2C_Master_Stop *****************
  4902 ;; Defined at:
  4903 ;;		line 41 in file "I2C.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;Total ram usage:        0 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    2
  4924 ;; This function calls:
  4925 ;;		_I2C_Master_Wait
  4926 ;; This function is called by:
  4927 ;;		_fixLCD
  4928 ;;		_get_time
  4929 ;;		_set_time
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text21
  4934  0018AC                     __ptext21:
  4935                           	opt stack 0
  4936  0018AC                     _I2C_Master_Stop:
  4937                           	opt stack 26
  4938                           
  4939                           ;I2C.c: 43: I2C_Master_Wait();
  4940                           
  4941                           ;incstack = 0
  4942  0018AC  EC35  F00C         	call	_I2C_Master_Wait	;wreg free
  4943                           
  4944                           ;I2C.c: 44: PEN = 1;
  4945  0018B0  84C5               	bsf	4037,2,c	;volatile
  4946  0018B2  0012               	return		;funcret
  4947  0018B4                     __end_of_I2C_Master_Stop:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           intcon3	equ	0xFF0
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           postdec2	equ	0xFDD
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _I2C_Master_Start *****************
  4967 ;; Defined at:
  4968 ;;		line 29 in file "I2C.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      void 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    2
  4989 ;; This function calls:
  4990 ;;		_I2C_Master_Wait
  4991 ;; This function is called by:
  4992 ;;		_fixLCD
  4993 ;;		_get_time
  4994 ;;		_set_time
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text22
  4999  0018B4                     __ptext22:
  5000                           	opt stack 0
  5001  0018B4                     _I2C_Master_Start:
  5002                           	opt stack 26
  5003                           
  5004                           ;I2C.c: 31: I2C_Master_Wait();
  5005                           
  5006                           ;incstack = 0
  5007  0018B4  EC35  F00C         	call	_I2C_Master_Wait	;wreg free
  5008                           
  5009                           ;I2C.c: 32: SEN = 1;
  5010  0018B8  80C5               	bsf	4037,0,c	;volatile
  5011  0018BA  0012               	return		;funcret
  5012  0018BC                     __end_of_I2C_Master_Start:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           intcon	equ	0xFF2
  5021                           intcon3	equ	0xFF0
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _I2C_Master_Read *****************
  5032 ;; Defined at:
  5033 ;;		line 53 in file "I2C.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  a               1    wreg     unsigned char 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  a               1   16[COMRAM] unsigned char 
  5038 ;;  temp            1   17[COMRAM] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      unsigned char 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;Total ram usage:        2 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    2
  5055 ;; This function calls:
  5056 ;;		_I2C_Master_Wait
  5057 ;; This function is called by:
  5058 ;;		_fixLCD
  5059 ;;		_get_time
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text23
  5064  001730                     __ptext23:
  5065                           	opt stack 0
  5066  001730                     _I2C_Master_Read:
  5067                           	opt stack 26
  5068                           
  5069                           ;incstack = 0
  5070                           ;I2C_Master_Read@a stored from wreg
  5071  001730  6E11               	movwf	I2C_Master_Read@a,c
  5072                           
  5073                           ;I2C.c: 55: unsigned char temp;
  5074                           ;I2C.c: 56: I2C_Master_Wait();
  5075  001732  EC35  F00C         	call	_I2C_Master_Wait	;wreg free
  5076                           
  5077                           ;I2C.c: 57: RCEN = 1;
  5078  001736  86C5               	bsf	4037,3,c	;volatile
  5079                           
  5080                           ;I2C.c: 58: I2C_Master_Wait();
  5081  001738  EC35  F00C         	call	_I2C_Master_Wait	;wreg free
  5082                           
  5083                           ;I2C.c: 59: temp = SSPBUF;
  5084  00173C  CFC9 F012          	movff	4041,I2C_Master_Read@temp	;volatile
  5085                           
  5086                           ;I2C.c: 60: I2C_Master_Wait();
  5087  001740  EC35  F00C         	call	_I2C_Master_Wait	;wreg free
  5088                           
  5089                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5090  001744  5011               	movf	I2C_Master_Read@a,w,c
  5091  001746  A4D8               	btfss	status,2,c
  5092  001748  D002               	goto	u2370
  5093  00174A  8AC5               	bsf	4037,5,c	;volatile
  5094  00174C  D001               	goto	l3597
  5095  00174E                     u2370:
  5096  00174E  9AC5               	bcf	4037,5,c	;volatile
  5097  001750                     l3597:
  5098                           
  5099                           ;I2C.c: 62: ACKEN = 1;
  5100  001750  88C5               	bsf	4037,4,c	;volatile
  5101                           
  5102                           ;I2C.c: 63: return temp;
  5103  001752  5012               	movf	I2C_Master_Read@temp,w,c
  5104  001754  0012               	return	
  5105  001756                     __end_of_I2C_Master_Read:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           intcon3	equ	0xFF0
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           indf2	equ	0xFDF
  5118                           postinc2	equ	0xFDE
  5119                           postdec2	equ	0xFDD
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _I2C_Master_Wait *****************
  5125 ;; Defined at:
  5126 ;;		line 24 in file "I2C.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      void 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;Total ram usage:        1 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    1
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_I2C_Master_Start
  5151 ;;		_I2C_Master_Stop
  5152 ;;		_I2C_Master_Write
  5153 ;;		_I2C_Master_Read
  5154 ;;		_I2C_Master_RepeatedStart
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text24
  5159  00186A                     __ptext24:
  5160                           	opt stack 0
  5161  00186A                     _I2C_Master_Wait:
  5162                           	opt stack 26
  5163  00186A                     l34:
  5164  00186A  B4C7               	btfsc	4039,2,c	;volatile
  5165  00186C  D7FE               	goto	l34
  5166  00186E  CFC5 F010          	movff	4037,??_I2C_Master_Wait	;volatile
  5167  001872  0E1F               	movlw	31
  5168  001874  1610               	andwf	??_I2C_Master_Wait,f,c
  5169  001876  B4D8               	btfsc	status,2,c
  5170  001878  0012               	return	
  5171  00187A  D7F7               	goto	l34
  5172  00187C                     __end_of_I2C_Master_Wait:
  5173                           	opt stack 0
  5174                           tblptru	equ	0xFF8
  5175                           tblptrh	equ	0xFF7
  5176                           tblptrl	equ	0xFF6
  5177                           tablat	equ	0xFF5
  5178                           prodh	equ	0xFF4
  5179                           prodl	equ	0xFF3
  5180                           intcon	equ	0xFF2
  5181                           intcon3	equ	0xFF0
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           indf2	equ	0xFDF
  5185                           postinc2	equ	0xFDE
  5186                           postdec2	equ	0xFDD
  5187                           fsr2h	equ	0xFDA
  5188                           fsr2l	equ	0xFD9
  5189                           status	equ	0xFD8
  5190                           
  5191 ;; *************** function _eeprom_LogResult *****************
  5192 ;; Defined at:
  5193 ;;		line 82 in file "eeprom.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  data            2   18[COMRAM] PTR unsigned char 
  5196 ;;		 -> executingState@res(8), 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  i               2   21[COMRAM] int 
  5199 ;;  address         1   20[COMRAM] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;Total ram usage:        5 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    3
  5216 ;; This function calls:
  5217 ;;		_eeprom_WriteByte
  5218 ;;		_newestAddress
  5219 ;; This function is called by:
  5220 ;;		_executingState
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text25
  5225  001434                     __ptext25:
  5226                           	opt stack 0
  5227  001434                     _eeprom_LogResult:
  5228                           	opt stack 26
  5229                           
  5230                           ;eeprom.c: 83: uint8_t address = newestAddress() + 5;
  5231                           
  5232                           ;incstack = 0
  5233  001434  EC3E  F00C         	call	_newestAddress	;wreg free
  5234  001438  0F05               	addlw	5
  5235  00143A  6E15               	movwf	eeprom_LogResult@address,c
  5236                           
  5237                           ;eeprom.c: 84: eeprom_WriteByte(0x0000, address);
  5238  00143C  0E00               	movlw	0
  5239  00143E  6E11               	movwf	eeprom_WriteByte@address+1,c
  5240  001440  0E00               	movlw	0
  5241  001442  6E10               	movwf	eeprom_WriteByte@address,c
  5242  001444  C015  F012         	movff	eeprom_LogResult@address,eeprom_WriteByte@data
  5243  001448  ECAB  F00B         	call	_eeprom_WriteByte	;wreg free
  5244                           
  5245                           ;eeprom.c: 85: for(int i = 0; i < 5; i++){
  5246  00144C  0E00               	movlw	0
  5247  00144E  6E17               	movwf	eeprom_LogResult@i+1,c
  5248  001450  0E00               	movlw	0
  5249  001452  6E16               	movwf	eeprom_LogResult@i,c
  5250  001454  BE17               	btfsc	eeprom_LogResult@i+1,7,c
  5251  001456  D006               	goto	l4107
  5252  001458  5017               	movf	eeprom_LogResult@i+1,w,c
  5253  00145A  E111               	bnz	l354
  5254  00145C  0E05               	movlw	5
  5255  00145E  5C16               	subwf	eeprom_LogResult@i,w,c
  5256  001460  B0D8               	btfsc	status,0,c
  5257  001462  0012               	return	
  5258  001464                     l4107:
  5259                           
  5260                           ;eeprom.c: 86: eeprom_WriteByte(address + i, 0xFF);
  5261  001464  5015               	movf	eeprom_LogResult@address,w,c
  5262  001466  2416               	addwf	eeprom_LogResult@i,w,c
  5263  001468  6E10               	movwf	eeprom_WriteByte@address,c
  5264  00146A  0E00               	movlw	0
  5265  00146C  2017               	addwfc	eeprom_LogResult@i+1,w,c
  5266  00146E  6E11               	movwf	eeprom_WriteByte@address+1,c
  5267  001470  0EFF               	movlw	255
  5268  001472  6E12               	movwf	eeprom_WriteByte@data,c
  5269  001474  ECAB  F00B         	call	_eeprom_WriteByte	;wreg free
  5270  001478  4A16               	infsnz	eeprom_LogResult@i,f,c
  5271  00147A  2A17               	incf	eeprom_LogResult@i+1,f,c
  5272  00147C  D7EB               	goto	L5
  5273  00147E                     l354:
  5274  00147E  0012               	return		;funcret
  5275  001480                     __end_of_eeprom_LogResult:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           intcon3	equ	0xFF0
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function _dispenseSnCan *****************
  5295 ;; Defined at:
  5296 ;;		line 231 in file "servos.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  1    wreg      void 
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;Total ram usage:        2 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    2
  5317 ;; This function calls:
  5318 ;;		_servoRotate1
  5319 ;;		_servoRotate90
  5320 ;; This function is called by:
  5321 ;;		_executingState
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text26
  5326  0016D0                     __ptext26:
  5327                           	opt stack 0
  5328  0016D0                     _dispenseSnCan:
  5329                           	opt stack 27
  5330                           
  5331                           ;servos.c: 232: servoRotate90(0);
  5332                           
  5333                           ;incstack = 0
  5334  0016D0  0E00               	movlw	0
  5335  0016D2  6E11               	movwf	servoRotate90@servo+1,c
  5336  0016D4  0E00               	movlw	0
  5337  0016D6  6E10               	movwf	servoRotate90@servo,c
  5338  0016D8  ECE1  F006         	call	_servoRotate90	;wreg free
  5339                           
  5340                           ;servos.c: 233: _delay((unsigned long)((800)*(10000000/4000.0)));
  5341  0016DC  0E0B               	movlw	11
  5342  0016DE  6E17               	movwf	(??_dispenseSnCan+1)& (0+255),c
  5343  0016E0  0E26               	movlw	38
  5344  0016E2  6E16               	movwf	??_dispenseSnCan& (0+255),c
  5345  0016E4  0E5E               	movlw	94
  5346  0016E6                     u3517:
  5347  0016E6  2EE8               	decfsz	wreg,f,c
  5348  0016E8  D7FE               	bra	u3517
  5349  0016EA  2E16               	decfsz	??_dispenseSnCan& (0+255),f,c
  5350  0016EC  D7FC               	bra	u3517
  5351  0016EE  2E17               	decfsz	(??_dispenseSnCan+1)& (0+255),f,c
  5352  0016F0  D7FA               	bra	u3517
  5353                           
  5354                           ;servos.c: 234: servoRotate1(0);
  5355  0016F2  0E00               	movlw	0
  5356  0016F4  6E11               	movwf	servoRotate1@angle+1,c
  5357  0016F6  0E00               	movlw	0
  5358  0016F8  6E10               	movwf	servoRotate1@angle,c
  5359  0016FA  EC2A  F00B         	call	_servoRotate1	;wreg free
  5360  0016FE  0012               	return		;funcret
  5361  001700                     __end_of_dispenseSnCan:
  5362                           	opt stack 0
  5363                           tblptru	equ	0xFF8
  5364                           tblptrh	equ	0xFF7
  5365                           tblptrl	equ	0xFF6
  5366                           tablat	equ	0xFF5
  5367                           prodh	equ	0xFF4
  5368                           prodl	equ	0xFF3
  5369                           intcon	equ	0xFF2
  5370                           intcon3	equ	0xFF0
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           indf2	equ	0xFDF
  5374                           postinc2	equ	0xFDE
  5375                           postdec2	equ	0xFDD
  5376                           fsr2h	equ	0xFDA
  5377                           fsr2l	equ	0xFD9
  5378                           status	equ	0xFD8
  5379                           
  5380 ;; *************** function _servoRotate1 *****************
  5381 ;; Defined at:
  5382 ;;		line 21 in file "servos.c"
  5383 ;; Parameters:    Size  Location     Type
  5384 ;;  angle           2   15[COMRAM] int 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  i               2   18[COMRAM] unsigned int 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  1    wreg      void 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;Total ram usage:        5 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    1
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_executingState
  5407 ;;		_dispenseSnCan
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text27
  5412  001654                     __ptext27:
  5413                           	opt stack 0
  5414  001654                     _servoRotate1:
  5415                           	opt stack 28
  5416                           
  5417                           ;servos.c: 22: unsigned int i;
  5418                           ;servos.c: 23: for (i = 0; i < loopcount; i++) {
  5419                           
  5420                           ;incstack = 0
  5421  001654  0E00               	movlw	0
  5422  001656  6E14               	movwf	servoRotate1@i+1,c
  5423  001658  0E00               	movlw	0
  5424  00165A  6E13               	movwf	servoRotate1@i,c
  5425  00165C  D013               	goto	l427
  5426  00165E                     l428:
  5427                           
  5428                           ;servos.c: 24: LATAbits.LATA4 = 1;
  5429  00165E  8889               	bsf	3977,4,c	;volatile
  5430                           
  5431                           ;servos.c: 25: _delay((unsigned long)((1550)*(10000000/4000000.0)));
  5432  001660  0E06               	movlw	6
  5433  001662  6E12               	movwf	??_servoRotate1& (0+255),c
  5434  001664  0E07               	movlw	7
  5435  001666                     u3527:
  5436  001666  2EE8               	decfsz	wreg,f,c
  5437  001668  D7FE               	bra	u3527
  5438  00166A  2E12               	decfsz	??_servoRotate1& (0+255),f,c
  5439  00166C  D7FC               	bra	u3527
  5440                           
  5441                           ;servos.c: 26: LATAbits.LATA4 = 0;
  5442  00166E  9889               	bcf	3977,4,c	;volatile
  5443                           
  5444                           ;servos.c: 27: _delay((unsigned long)((14450)*(10000000/4000000.0)));
  5445  001670  0E2F               	movlw	47
  5446  001672  6E12               	movwf	??_servoRotate1& (0+255),c
  5447  001674  0EE9               	movlw	233
  5448  001676                     u3537:
  5449  001676  2EE8               	decfsz	wreg,f,c
  5450  001678  D7FE               	bra	u3537
  5451  00167A  2E12               	decfsz	??_servoRotate1& (0+255),f,c
  5452  00167C  D7FC               	bra	u3537
  5453  00167E  D000               	nop2	
  5454  001680  4A13               	infsnz	servoRotate1@i,f,c
  5455  001682  2A14               	incf	servoRotate1@i+1,f,c
  5456  001684                     l427:
  5457  001684  504D               	movf	_loopcount,w,c
  5458  001686  5C13               	subwf	servoRotate1@i,w,c
  5459  001688  504E               	movf	_loopcount+1,w,c
  5460  00168A  5814               	subwfb	servoRotate1@i+1,w,c
  5461  00168C  B0D8               	btfsc	status,0,c
  5462  00168E  0012               	return	
  5463  001690  D7E6               	goto	l428
  5464  001692                     __end_of_servoRotate1:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           intcon3	equ	0xFF0
  5474                           postinc0	equ	0xFEE
  5475                           wreg	equ	0xFE8
  5476                           indf2	equ	0xFDF
  5477                           postinc2	equ	0xFDE
  5478                           postdec2	equ	0xFDD
  5479                           fsr2h	equ	0xFDA
  5480                           fsr2l	equ	0xFD9
  5481                           status	equ	0xFD8
  5482                           
  5483 ;; *************** function _dispenseAlCan *****************
  5484 ;; Defined at:
  5485 ;;		line 225 in file "servos.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;		None
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;		None
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  1    wreg      void 
  5492 ;; Registers used:
  5493 ;;		wreg, status,2, status,0, cstack
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;Total ram usage:        2 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    2
  5506 ;; This function calls:
  5507 ;;		_servoRotate2
  5508 ;;		_servoRotate90
  5509 ;; This function is called by:
  5510 ;;		_executingState
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text28
  5515  001700                     __ptext28:
  5516                           	opt stack 0
  5517  001700                     _dispenseAlCan:
  5518                           	opt stack 27
  5519                           
  5520                           ;servos.c: 226: servoRotate90(1);
  5521                           
  5522                           ;incstack = 0
  5523  001700  0E00               	movlw	0
  5524  001702  6E11               	movwf	servoRotate90@servo+1,c
  5525  001704  0E01               	movlw	1
  5526  001706  6E10               	movwf	servoRotate90@servo,c
  5527  001708  ECE1  F006         	call	_servoRotate90	;wreg free
  5528                           
  5529                           ;servos.c: 227: _delay((unsigned long)((800)*(10000000/4000.0)));
  5530  00170C  0E0B               	movlw	11
  5531  00170E  6E17               	movwf	(??_dispenseAlCan+1)& (0+255),c
  5532  001710  0E26               	movlw	38
  5533  001712  6E16               	movwf	??_dispenseAlCan& (0+255),c
  5534  001714  0E5E               	movlw	94
  5535  001716                     u3547:
  5536  001716  2EE8               	decfsz	wreg,f,c
  5537  001718  D7FE               	bra	u3547
  5538  00171A  2E16               	decfsz	??_dispenseAlCan& (0+255),f,c
  5539  00171C  D7FC               	bra	u3547
  5540  00171E  2E17               	decfsz	(??_dispenseAlCan+1)& (0+255),f,c
  5541  001720  D7FA               	bra	u3547
  5542                           
  5543                           ;servos.c: 228: servoRotate2(1);
  5544  001722  0E00               	movlw	0
  5545  001724  6E11               	movwf	servoRotate2@angle+1,c
  5546  001726  0E01               	movlw	1
  5547  001728  6E10               	movwf	servoRotate2@angle,c
  5548  00172A  ECCC  F00A         	call	_servoRotate2	;wreg free
  5549  00172E  0012               	return		;funcret
  5550  001730                     __end_of_dispenseAlCan:
  5551                           	opt stack 0
  5552                           tblptru	equ	0xFF8
  5553                           tblptrh	equ	0xFF7
  5554                           tblptrl	equ	0xFF6
  5555                           tablat	equ	0xFF5
  5556                           prodh	equ	0xFF4
  5557                           prodl	equ	0xFF3
  5558                           intcon	equ	0xFF2
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _servoRotate90 *****************
  5570 ;; Defined at:
  5571 ;;		line 122 in file "servos.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  servo           2   15[COMRAM] int 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  i               2   19[COMRAM] unsigned int 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;Total ram usage:        6 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    1
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_executingState
  5596 ;;		_dispenseAlCan
  5597 ;;		_dispenseSnCan
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text29
  5602  000DC2                     __ptext29:
  5603                           	opt stack 0
  5604  000DC2                     _servoRotate90:
  5605                           	opt stack 28
  5606                           
  5607                           ;servos.c: 124: unsigned int i;
  5608                           ;servos.c: 125: for (i = 0; i < loopcount; i++) {
  5609                           
  5610                           ;incstack = 0
  5611  000DC2  0E00               	movlw	0
  5612  000DC4  6E15               	movwf	servoRotate90@i+1,c
  5613  000DC6  0E00               	movlw	0
  5614  000DC8  6E14               	movwf	servoRotate90@i,c
  5615  000DCA  D056               	goto	l476
  5616  000DCC                     l479:
  5617                           
  5618                           ;servos.c: 128: LATAbits.LATA4 = 1;
  5619  000DCC  8889               	bsf	3977,4,c	;volatile
  5620                           
  5621                           ;servos.c: 129: break;
  5622  000DCE  D020               	goto	l3851
  5623  000DD0                     l481:
  5624                           
  5625                           ;servos.c: 131: LATAbits.LATA5 = 1;
  5626  000DD0  8A89               	bsf	3977,5,c	;volatile
  5627                           
  5628                           ;servos.c: 132: break;
  5629  000DD2  D01E               	goto	l3851
  5630  000DD4                     l482:
  5631                           
  5632                           ;servos.c: 134: LATEbits.LATE0 = 1;
  5633  000DD4  808D               	bsf	3981,0,c	;volatile
  5634                           
  5635                           ;servos.c: 135: break;
  5636  000DD6  D01C               	goto	l3851
  5637  000DD8                     l483:
  5638                           
  5639                           ;servos.c: 137: LATEbits.LATE1 = 1;
  5640  000DD8  828D               	bsf	3981,1,c	;volatile
  5641                           
  5642                           ;servos.c: 138: break;
  5643  000DDA  D01A               	goto	l3851
  5644  000DDC                     l484:
  5645                           
  5646                           ;servos.c: 140: LATBbits.LATB2 = 1;
  5647  000DDC  848A               	bsf	3978,2,c	;volatile
  5648                           
  5649                           ;servos.c: 142: }
  5650                           
  5651                           ;servos.c: 141: break;
  5652  000DDE  D018               	goto	l3851
  5653  000DE0                     l3849:
  5654  000DE0  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5655  000DE4  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5656                           
  5657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5658                           ; Switch size 1, requested type "space"
  5659                           ; Number of cases is 1, Range of values is 0 to 0
  5660                           ; switch strategies available:
  5661                           ; Name         Instructions Cycles
  5662                           ; simple_byte            4     3 (average)
  5663                           ;	Chosen strategy is simple_byte
  5664  000DE8  5013               	movf	??_servoRotate90+1,w,c
  5665  000DEA  0A00               	xorlw	0	; case 0
  5666  000DEC  A4D8               	btfss	status,2,c
  5667  000DEE  D010               	goto	l3851
  5668                           
  5669                           ; Switch size 1, requested type "space"
  5670                           ; Number of cases is 5, Range of values is 0 to 4
  5671                           ; switch strategies available:
  5672                           ; Name         Instructions Cycles
  5673                           ; simple_byte           16     9 (average)
  5674                           ;	Chosen strategy is simple_byte
  5675  000DF0  5012               	movf	??_servoRotate90,w,c
  5676  000DF2  0A00               	xorlw	0	; case 0
  5677  000DF4  B4D8               	btfsc	status,2,c
  5678  000DF6  D7EA               	goto	l479
  5679  000DF8  0A01               	xorlw	1	; case 1
  5680  000DFA  B4D8               	btfsc	status,2,c
  5681  000DFC  D7E9               	goto	l481
  5682  000DFE  0A03               	xorlw	3	; case 2
  5683  000E00  B4D8               	btfsc	status,2,c
  5684  000E02  D7E8               	goto	l482
  5685  000E04  0A01               	xorlw	1	; case 3
  5686  000E06  B4D8               	btfsc	status,2,c
  5687  000E08  D7E7               	goto	l483
  5688  000E0A  0A07               	xorlw	7	; case 4
  5689  000E0C  B4D8               	btfsc	status,2,c
  5690  000E0E  D7E6               	goto	l484
  5691  000E10                     l3851:
  5692                           
  5693                           ;servos.c: 143: _delay((unsigned long)((2400)*(10000000/4000000.0)));
  5694  000E10  0E08               	movlw	8
  5695  000E12  6E12               	movwf	??_servoRotate90& (0+255),c
  5696  000E14  0ECA               	movlw	202
  5697  000E16                     u3557:
  5698  000E16  2EE8               	decfsz	wreg,f,c
  5699  000E18  D7FE               	bra	u3557
  5700  000E1A  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5701  000E1C  D7FC               	bra	u3557
  5702                           
  5703                           ;servos.c: 144: switch (servo) {
  5704  000E1E  D00A               	goto	l3855
  5705  000E20                     l486:
  5706                           
  5707                           ;servos.c: 146: LATAbits.LATA4 = 0;
  5708  000E20  9889               	bcf	3977,4,c	;volatile
  5709                           
  5710                           ;servos.c: 147: break;
  5711  000E22  D020               	goto	l3857
  5712  000E24                     l488:
  5713                           
  5714                           ;servos.c: 149: LATAbits.LATA5 = 0;
  5715  000E24  9A89               	bcf	3977,5,c	;volatile
  5716                           
  5717                           ;servos.c: 150: break;
  5718  000E26  D01E               	goto	l3857
  5719  000E28                     l489:
  5720                           
  5721                           ;servos.c: 152: LATEbits.LATE0 = 0;
  5722  000E28  908D               	bcf	3981,0,c	;volatile
  5723                           
  5724                           ;servos.c: 153: break;
  5725  000E2A  D01C               	goto	l3857
  5726  000E2C                     l490:
  5727                           
  5728                           ;servos.c: 155: LATEbits.LATE1 = 0;
  5729  000E2C  928D               	bcf	3981,1,c	;volatile
  5730                           
  5731                           ;servos.c: 156: break;
  5732  000E2E  D01A               	goto	l3857
  5733  000E30                     l491:
  5734                           
  5735                           ;servos.c: 158: LATBbits.LATB2 = 0;
  5736  000E30  948A               	bcf	3978,2,c	;volatile
  5737                           
  5738                           ;servos.c: 160: }
  5739                           
  5740                           ;servos.c: 159: break;
  5741  000E32  D018               	goto	l3857
  5742  000E34                     l3855:
  5743  000E34  C010  F012         	movff	servoRotate90@servo,??_servoRotate90
  5744  000E38  C011  F013         	movff	servoRotate90@servo+1,??_servoRotate90+1
  5745                           
  5746                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5747                           ; Switch size 1, requested type "space"
  5748                           ; Number of cases is 1, Range of values is 0 to 0
  5749                           ; switch strategies available:
  5750                           ; Name         Instructions Cycles
  5751                           ; simple_byte            4     3 (average)
  5752                           ;	Chosen strategy is simple_byte
  5753  000E3C  5013               	movf	??_servoRotate90+1,w,c
  5754  000E3E  0A00               	xorlw	0	; case 0
  5755  000E40  A4D8               	btfss	status,2,c
  5756  000E42  D010               	goto	l3857
  5757                           
  5758                           ; Switch size 1, requested type "space"
  5759                           ; Number of cases is 5, Range of values is 0 to 4
  5760                           ; switch strategies available:
  5761                           ; Name         Instructions Cycles
  5762                           ; simple_byte           16     9 (average)
  5763                           ;	Chosen strategy is simple_byte
  5764  000E44  5012               	movf	??_servoRotate90,w,c
  5765  000E46  0A00               	xorlw	0	; case 0
  5766  000E48  B4D8               	btfsc	status,2,c
  5767  000E4A  D7EA               	goto	l486
  5768  000E4C  0A01               	xorlw	1	; case 1
  5769  000E4E  B4D8               	btfsc	status,2,c
  5770  000E50  D7E9               	goto	l488
  5771  000E52  0A03               	xorlw	3	; case 2
  5772  000E54  B4D8               	btfsc	status,2,c
  5773  000E56  D7E8               	goto	l489
  5774  000E58  0A01               	xorlw	1	; case 3
  5775  000E5A  B4D8               	btfsc	status,2,c
  5776  000E5C  D7E7               	goto	l490
  5777  000E5E  0A07               	xorlw	7	; case 4
  5778  000E60  B4D8               	btfsc	status,2,c
  5779  000E62  D7E6               	goto	l491
  5780  000E64                     l3857:
  5781                           
  5782                           ;servos.c: 161: _delay((unsigned long)((17600)*(10000000/4000000.0)));
  5783  000E64  0E3A               	movlw	58
  5784  000E66  6E12               	movwf	??_servoRotate90& (0+255),c
  5785  000E68  0E23               	movlw	35
  5786  000E6A                     u3567:
  5787  000E6A  2EE8               	decfsz	wreg,f,c
  5788  000E6C  D7FE               	bra	u3567
  5789  000E6E  2E12               	decfsz	??_servoRotate90& (0+255),f,c
  5790  000E70  D7FC               	bra	u3567
  5791  000E72  F000               	nop	
  5792  000E74  4A14               	infsnz	servoRotate90@i,f,c
  5793  000E76  2A15               	incf	servoRotate90@i+1,f,c
  5794  000E78                     l476:
  5795  000E78  504D               	movf	_loopcount,w,c
  5796  000E7A  5C14               	subwf	servoRotate90@i,w,c
  5797  000E7C  504E               	movf	_loopcount+1,w,c
  5798  000E7E  5815               	subwfb	servoRotate90@i+1,w,c
  5799  000E80  B0D8               	btfsc	status,0,c
  5800  000E82  0012               	return	
  5801  000E84  D7AD               	goto	l3849
  5802  000E86                     __end_of_servoRotate90:
  5803                           	opt stack 0
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           prodh	equ	0xFF4
  5809                           prodl	equ	0xFF3
  5810                           intcon	equ	0xFF2
  5811                           intcon3	equ	0xFF0
  5812                           postinc0	equ	0xFEE
  5813                           wreg	equ	0xFE8
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _servoRotate2 *****************
  5822 ;; Defined at:
  5823 ;;		line 32 in file "servos.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  angle           2   15[COMRAM] int 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  i               2   18[COMRAM] unsigned int 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        5 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_executingState
  5848 ;;		_dispenseAlCan
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	text30
  5853  001598                     __ptext30:
  5854                           	opt stack 0
  5855  001598                     _servoRotate2:
  5856                           	opt stack 28
  5857                           
  5858                           ;servos.c: 33: unsigned int i;
  5859                           ;servos.c: 34: for (i = 0; i < loopcount; i++) {
  5860                           
  5861                           ;incstack = 0
  5862  001598  0E00               	movlw	0
  5863  00159A  6E14               	movwf	servoRotate2@i+1,c
  5864  00159C  0E00               	movlw	0
  5865  00159E  6E13               	movwf	servoRotate2@i,c
  5866  0015A0  D014               	goto	l433
  5867  0015A2                     l434:
  5868                           
  5869                           ;servos.c: 35: LATAbits.LATA5 = 1;
  5870  0015A2  8A89               	bsf	3977,5,c	;volatile
  5871                           
  5872                           ;servos.c: 36: _delay((unsigned long)((1665)*(10000000/4000000.0)));
  5873  0015A4  0E06               	movlw	6
  5874  0015A6  6E12               	movwf	??_servoRotate2& (0+255),c
  5875  0015A8  0E66               	movlw	102
  5876  0015AA                     u3577:
  5877  0015AA  2EE8               	decfsz	wreg,f,c
  5878  0015AC  D7FE               	bra	u3577
  5879  0015AE  2E12               	decfsz	??_servoRotate2& (0+255),f,c
  5880  0015B0  D7FC               	bra	u3577
  5881  0015B2  D000               	nop2	
  5882                           
  5883                           ;servos.c: 37: LATAbits.LATA5 = 0;
  5884  0015B4  9A89               	bcf	3977,5,c	;volatile
  5885                           
  5886                           ;servos.c: 38: _delay((unsigned long)((18335)*(10000000/4000000.0)));
  5887  0015B6  0E3C               	movlw	60
  5888  0015B8  6E12               	movwf	??_servoRotate2& (0+255),c
  5889  0015BA  0E86               	movlw	134
  5890  0015BC                     u3587:
  5891  0015BC  2EE8               	decfsz	wreg,f,c
  5892  0015BE  D7FE               	bra	u3587
  5893  0015C0  2E12               	decfsz	??_servoRotate2& (0+255),f,c
  5894  0015C2  D7FC               	bra	u3587
  5895  0015C4  F000               	nop	
  5896  0015C6  4A13               	infsnz	servoRotate2@i,f,c
  5897  0015C8  2A14               	incf	servoRotate2@i+1,f,c
  5898  0015CA                     l433:
  5899  0015CA  504D               	movf	_loopcount,w,c
  5900  0015CC  5C13               	subwf	servoRotate2@i,w,c
  5901  0015CE  504E               	movf	_loopcount+1,w,c
  5902  0015D0  5814               	subwfb	servoRotate2@i+1,w,c
  5903  0015D2  B0D8               	btfsc	status,0,c
  5904  0015D4  0012               	return	
  5905  0015D6  D7E5               	goto	l434
  5906  0015D8                     __end_of_servoRotate2:
  5907                           	opt stack 0
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           prodh	equ	0xFF4
  5913                           prodl	equ	0xFF3
  5914                           intcon	equ	0xFF2
  5915                           intcon3	equ	0xFF0
  5916                           postinc0	equ	0xFEE
  5917                           wreg	equ	0xFE8
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function _eeprom_initialize *****************
  5926 ;; Defined at:
  5927 ;;		line 73 in file "eeprom.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg, status,2, cstack
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;Total ram usage:        0 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:    3
  5948 ;; This function calls:
  5949 ;;		_eeprom_WriteByte
  5950 ;;		_newestAddress
  5951 ;; This function is called by:
  5952 ;;		_main
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text31
  5957  0017C0                     __ptext31:
  5958                           	opt stack 0
  5959  0017C0                     _eeprom_initialize:
  5960                           	opt stack 27
  5961                           
  5962                           ;eeprom.c: 74: if(newestAddress() == 0b11111111){
  5963                           
  5964                           ;incstack = 0
  5965  0017C0  EC3E  F00C         	call	_newestAddress	;wreg free
  5966  0017C4  0AFF               	xorlw	255
  5967  0017C6  A4D8               	btfss	status,2,c
  5968  0017C8  0012               	return	
  5969                           
  5970                           ;eeprom.c: 75: eeprom_WriteByte(0x0000, 0x00);
  5971  0017CA  0E00               	movlw	0
  5972  0017CC  6E11               	movwf	eeprom_WriteByte@address+1,c
  5973  0017CE  0E00               	movlw	0
  5974  0017D0  6E10               	movwf	eeprom_WriteByte@address,c
  5975  0017D2  0E00               	movlw	0
  5976  0017D4  6E12               	movwf	eeprom_WriteByte@data,c
  5977  0017D6  ECAB  F00B         	call	_eeprom_WriteByte	;wreg free
  5978  0017DA  0012               	return	
  5979  0017DC                     __end_of_eeprom_initialize:
  5980                           	opt stack 0
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           intcon3	equ	0xFF0
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           indf2	equ	0xFDF
  5992                           postinc2	equ	0xFDE
  5993                           postdec2	equ	0xFDD
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function _newestAddress *****************
  5999 ;; Defined at:
  6000 ;;		line 69 in file "eeprom.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;		None
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;		None
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      unsigned char 
  6007 ;; Registers used:
  6008 ;;		wreg, status,2, cstack
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;Total ram usage:        0 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    2
  6021 ;; This function calls:
  6022 ;;		_eeprom_ReadByte
  6023 ;; This function is called by:
  6024 ;;		_eeprom_initialize
  6025 ;;		_eeprom_LogResult
  6026 ;;		_eeprom_GetLog
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text32
  6031  00187C                     __ptext32:
  6032                           	opt stack 0
  6033  00187C                     _newestAddress:
  6034                           	opt stack 26
  6035                           
  6036                           ;eeprom.c: 70: return eeprom_ReadByte(0x0000);
  6037                           
  6038                           ;incstack = 0
  6039  00187C  0E00               	movlw	0
  6040  00187E  6E11               	movwf	eeprom_ReadByte@address+1,c
  6041  001880  0E00               	movlw	0
  6042  001882  6E10               	movwf	eeprom_ReadByte@address,c
  6043  001884  EC2A  F00C         	call	_eeprom_ReadByte	;wreg free
  6044  001888  0012               	return	
  6045  00188A                     __end_of_newestAddress:
  6046                           	opt stack 0
  6047                           tblptru	equ	0xFF8
  6048                           tblptrh	equ	0xFF7
  6049                           tblptrl	equ	0xFF6
  6050                           tablat	equ	0xFF5
  6051                           prodh	equ	0xFF4
  6052                           prodl	equ	0xFF3
  6053                           intcon	equ	0xFF2
  6054                           intcon3	equ	0xFF0
  6055                           postinc0	equ	0xFEE
  6056                           wreg	equ	0xFE8
  6057                           indf2	equ	0xFDF
  6058                           postinc2	equ	0xFDE
  6059                           postdec2	equ	0xFDD
  6060                           fsr2h	equ	0xFDA
  6061                           fsr2l	equ	0xFD9
  6062                           status	equ	0xFD8
  6063                           
  6064 ;; *************** function _eeprom_ReadByte *****************
  6065 ;; Defined at:
  6066 ;;		line 14 in file "eeprom.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  address         2   15[COMRAM] unsigned int 
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;		None
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      unsigned char 
  6073 ;; Registers used:
  6074 ;;		wreg, status,2
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6080 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;Total ram usage:        2 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    1
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_newestAddress
  6091 ;;		_eeprom_GetLog
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text33
  6096  001854                     __ptext33:
  6097                           	opt stack 0
  6098  001854                     _eeprom_ReadByte:
  6099                           	opt stack 26
  6100                           
  6101                           ;eeprom.c: 18: EEADRH = (uint8_t)(address >> 8);
  6102                           
  6103                           ;incstack = 0
  6104  001854  5011               	movf	eeprom_ReadByte@address+1,w,c
  6105  001856  6EAA               	movwf	4010,c	;volatile
  6106                           
  6107                           ;eeprom.c: 19: EEADR = (uint8_t)address;
  6108  001858  C010  FFA9         	movff	eeprom_ReadByte@address,4009	;volatile
  6109                           
  6110                           ;eeprom.c: 21: EECON1bits.EEPGD = 0;
  6111  00185C  9EA6               	bcf	4006,7,c	;volatile
  6112                           
  6113                           ;eeprom.c: 22: EECON1bits.CFGS = 0;
  6114  00185E  9CA6               	bcf	4006,6,c	;volatile
  6115                           
  6116                           ;eeprom.c: 23: EECON1bits.RD = 1;
  6117  001860  80A6               	bsf	4006,0,c	;volatile
  6118  001862                     l333:
  6119  001862  B0A6               	btfsc	4006,0,c	;volatile
  6120  001864  D7FE               	goto	l333
  6121                           
  6122                           ;eeprom.c: 29: return EEDATA;
  6123  001866  50A8               	movf	4008,w,c	;volatile
  6124  001868  0012               	return	
  6125  00186A                     __end_of_eeprom_ReadByte:
  6126                           	opt stack 0
  6127                           tblptru	equ	0xFF8
  6128                           tblptrh	equ	0xFF7
  6129                           tblptrl	equ	0xFF6
  6130                           tablat	equ	0xFF5
  6131                           prodh	equ	0xFF4
  6132                           prodl	equ	0xFF3
  6133                           intcon	equ	0xFF2
  6134                           intcon3	equ	0xFF0
  6135                           postinc0	equ	0xFEE
  6136                           wreg	equ	0xFE8
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8
  6143                           
  6144 ;; *************** function _eeprom_WriteByte *****************
  6145 ;; Defined at:
  6146 ;;		line 37 in file "eeprom.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  address         2   15[COMRAM] unsigned int 
  6149 ;;  data            1   17[COMRAM] unsigned char 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;		None
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  1    wreg      void 
  6154 ;; Registers used:
  6155 ;;		wreg, status,2
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6161 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;Total ram usage:        3 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    1
  6168 ;; This function calls:
  6169 ;;		Nothing
  6170 ;; This function is called by:
  6171 ;;		_eeprom_initialize
  6172 ;;		_eeprom_LogResult
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176                           	psect	text34
  6177  001756                     __ptext34:
  6178                           	opt stack 0
  6179  001756                     _eeprom_WriteByte:
  6180                           	opt stack 27
  6181                           
  6182                           ;eeprom.c: 40: EEADRH = (uint8_t)(address >> 8);
  6183                           
  6184                           ;incstack = 0
  6185  001756  5011               	movf	eeprom_WriteByte@address+1,w,c
  6186  001758  6EAA               	movwf	4010,c	;volatile
  6187                           
  6188                           ;eeprom.c: 41: EEADR = (uint8_t)address;
  6189  00175A  C010  FFA9         	movff	eeprom_WriteByte@address,4009	;volatile
  6190                           
  6191                           ;eeprom.c: 43: EEDATA = data;
  6192  00175E  C012  FFA8         	movff	eeprom_WriteByte@data,4008	;volatile
  6193                           
  6194                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  6195  001762  9EA6               	bcf	4006,7,c	;volatile
  6196                           
  6197                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  6198  001764  9CA6               	bcf	4006,6,c	;volatile
  6199                           
  6200                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  6201  001766  84A6               	bsf	4006,2,c	;volatile
  6202                           
  6203                           ;eeprom.c: 50: EECON2 = 0x55;
  6204  001768  0E55               	movlw	85
  6205  00176A  6EA7               	movwf	4007,c	;volatile
  6206                           
  6207                           ;eeprom.c: 51: EECON2 = 0xAA;
  6208  00176C  0EAA               	movlw	170
  6209  00176E  6EA7               	movwf	4007,c	;volatile
  6210                           
  6211                           ;eeprom.c: 52: EECON1bits.WR = 1;
  6212  001770  82A6               	bsf	4006,1,c	;volatile
  6213  001772                     l339:
  6214  001772  A8A1               	btfss	4001,4,c	;volatile
  6215  001774  D7FE               	goto	l339
  6216                           
  6217                           ;eeprom.c: 58: }
  6218                           ;eeprom.c: 60: PIR2bits.EEIF = 0;
  6219  001776  98A1               	bcf	4001,4,c	;volatile
  6220                           
  6221                           ;eeprom.c: 61: EECON1bits.WREN = 0;
  6222  001778  94A6               	bcf	4006,2,c	;volatile
  6223  00177A  0012               	return		;funcret
  6224  00177C                     __end_of_eeprom_WriteByte:
  6225                           	opt stack 0
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           intcon	equ	0xFF2
  6233                           intcon3	equ	0xFF0
  6234                           postinc0	equ	0xFEE
  6235                           wreg	equ	0xFE8
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function _debugState *****************
  6244 ;; Defined at:
  6245 ;;		line 344 in file "main.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      void 
  6252 ;; Registers used:
  6253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;Total ram usage:        2 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    4
  6266 ;; This function calls:
  6267 ;;		_lcdInst
  6268 ;;		_printf
  6269 ;;		_servoRotate4
  6270 ;;		_servoRotate90n
  6271 ;;		_servoRotateArm
  6272 ;; This function is called by:
  6273 ;;		_main
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text35
  6278  0011A0                     __ptext35:
  6279                           	opt stack 0
  6280  0011A0                     _debugState:
  6281                           	opt stack 26
  6282                           
  6283                           ;main.c: 345: LATBbits.LATB0 = 1;
  6284                           
  6285                           ;incstack = 0
  6286  0011A0  808A               	bsf	3978,0,c	;volatile
  6287                           
  6288                           ;main.c: 346: _delay((unsigned long)((300)*(10000000/4000.0)));
  6289  0011A2  0E04               	movlw	4
  6290  0011A4  6E35               	movwf	(??_debugState+1)& (0+255),c
  6291  0011A6  0ECF               	movlw	207
  6292  0011A8  6E34               	movwf	??_debugState& (0+255),c
  6293  0011AA  0E02               	movlw	2
  6294  0011AC                     u3597:
  6295  0011AC  2EE8               	decfsz	wreg,f,c
  6296  0011AE  D7FE               	bra	u3597
  6297  0011B0  2E34               	decfsz	??_debugState& (0+255),f,c
  6298  0011B2  D7FC               	bra	u3597
  6299  0011B4  2E35               	decfsz	(??_debugState+1)& (0+255),f,c
  6300  0011B6  D7FA               	bra	u3597
  6301                           
  6302                           ;main.c: 347: LATCbits.LATC6 = 1;
  6303  0011B8  8C8B               	bsf	3979,6,c	;volatile
  6304                           
  6305                           ;main.c: 349: lcdInst(0b10000000);;
  6306  0011BA  0E80               	movlw	128
  6307  0011BC  EC4B  F00C         	call	_lcdInst
  6308                           
  6309                           ;main.c: 350: printf("going debug");
  6310  0011C0  0EED               	movlw	low STR_15
  6311  0011C2  6E1C               	movwf	printf@f,c
  6312  0011C4  0EFF               	movlw	high STR_15
  6313  0011C6  6E1D               	movwf	printf@f+1,c
  6314  0011C8  ECDF  F002         	call	_printf	;wreg free
  6315                           
  6316                           ;main.c: 351: lcdInst(0b11000000);;
  6317  0011CC  0EC0               	movlw	192
  6318  0011CE  EC4B  F00C         	call	_lcdInst
  6319                           
  6320                           ;main.c: 362: servoRotate90n(4);
  6321  0011D2  0E00               	movlw	0
  6322  0011D4  6E11               	movwf	servoRotate90n@servo+1,c
  6323  0011D6  0E04               	movlw	4
  6324  0011D8  6E10               	movwf	servoRotate90n@servo,c
  6325  0011DA  EC43  F007         	call	_servoRotate90n	;wreg free
  6326                           
  6327                           ;main.c: 363: servoRotate4(3);
  6328  0011DE  0E00               	movlw	0
  6329  0011E0  6E11               	movwf	servoRotate4@angle+1,c
  6330  0011E2  0E03               	movlw	3
  6331  0011E4  6E10               	movwf	servoRotate4@angle,c
  6332  0011E6  EC49  F00B         	call	_servoRotate4	;wreg free
  6333  0011EA                     l4421:
  6334                           
  6335                           ;main.c: 365: servoRotateArm();
  6336  0011EA  EC09  F009         	call	_servoRotateArm	;wreg free
  6337                           
  6338                           ;main.c: 366: _delay((unsigned long)((300)*(10000000/4000.0)));
  6339  0011EE  0E04               	movlw	4
  6340  0011F0  6E35               	movwf	(??_debugState+1)& (0+255),c
  6341  0011F2  0ECF               	movlw	207
  6342  0011F4  6E34               	movwf	??_debugState& (0+255),c
  6343  0011F6  0E02               	movlw	2
  6344  0011F8                     u3607:
  6345  0011F8  2EE8               	decfsz	wreg,f,c
  6346  0011FA  D7FE               	bra	u3607
  6347  0011FC  2E34               	decfsz	??_debugState& (0+255),f,c
  6348  0011FE  D7FC               	bra	u3607
  6349  001200  2E35               	decfsz	(??_debugState+1)& (0+255),f,c
  6350  001202  D7FA               	bra	u3607
  6351                           
  6352                           ;main.c: 367: servoRotate90n(4);
  6353  001204  0E00               	movlw	0
  6354  001206  6E11               	movwf	servoRotate90n@servo+1,c
  6355  001208  0E04               	movlw	4
  6356  00120A  6E10               	movwf	servoRotate90n@servo,c
  6357  00120C  EC43  F007         	call	_servoRotate90n	;wreg free
  6358  001210  D7EC               	goto	l4421
  6359  001212                     __end_of_debugState:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           intcon	equ	0xFF2
  6368                           intcon3	equ	0xFF0
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _servoRotateArm *****************
  6379 ;; Defined at:
  6380 ;;		line 208 in file "servos.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  i               2   20[COMRAM] int 
  6385 ;;  res             2   22[COMRAM] int 
  6386 ;;  i               2    0        unsigned int 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  2   15[COMRAM] int 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;Total ram usage:        9 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    1
  6403 ;; This function calls:
  6404 ;;		Nothing
  6405 ;; This function is called by:
  6406 ;;		_executingState
  6407 ;;		_debugState
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text36
  6412  001212                     __ptext36:
  6413                           	opt stack 0
  6414  001212                     _servoRotateArm:
  6415                           	opt stack 28
  6416                           
  6417                           ;servos.c: 209: unsigned int i;
  6418                           ;servos.c: 210: int res = -1;
  6419                           
  6420                           ;incstack = 0
  6421  001212  6817               	setf	servoRotateArm@res,c
  6422  001214  6818               	setf	servoRotateArm@res+1,c
  6423                           
  6424                           ;servos.c: 211: for(int i = 0; i < loopcount+50; i++){
  6425  001216  0E00               	movlw	0
  6426  001218  6E16               	movwf	servoRotateArm@i_1044+1,c
  6427  00121A  0E00               	movlw	0
  6428  00121C  6E15               	movwf	servoRotateArm@i_1044,c
  6429  00121E  D01D               	goto	l4097
  6430  001220                     l517:
  6431                           
  6432                           ;servos.c: 212: LATBbits.LATB2 = 1;
  6433  001220  848A               	bsf	3978,2,c	;volatile
  6434                           
  6435                           ;servos.c: 213: _delay((unsigned long)((1740)*(10000000/4000000.0)));
  6436  001222  0E06               	movlw	6
  6437  001224  6E12               	movwf	??_servoRotateArm& (0+255),c
  6438  001226  0EA5               	movlw	165
  6439  001228                     u3617:
  6440  001228  2EE8               	decfsz	wreg,f,c
  6441  00122A  D7FE               	bra	u3617
  6442  00122C  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  6443  00122E  D7FC               	bra	u3617
  6444  001230  F000               	nop	
  6445                           
  6446                           ;servos.c: 214: LATBbits.LATB2 = 0;
  6447  001232  948A               	bcf	3978,2,c	;volatile
  6448                           
  6449                           ;servos.c: 215: _delay((unsigned long)((18260)*(10000000/4000000.0)));
  6450  001234  0E3C               	movlw	60
  6451  001236  6E12               	movwf	??_servoRotateArm& (0+255),c
  6452  001238  0E48               	movlw	72
  6453  00123A                     u3627:
  6454  00123A  2EE8               	decfsz	wreg,f,c
  6455  00123C  D7FE               	bra	u3627
  6456  00123E  2E12               	decfsz	??_servoRotateArm& (0+255),f,c
  6457  001240  D7FC               	bra	u3627
  6458                           
  6459                           ;servos.c: 216: if(PORTCbits.RC1 == 1){
  6460  001242  A282               	btfss	3970,1,c	;volatile
  6461  001244  D004               	goto	l4093
  6462                           
  6463                           ;servos.c: 217: res = 1;
  6464  001246  0E00               	movlw	0
  6465  001248  6E18               	movwf	servoRotateArm@res+1,c
  6466  00124A  0E01               	movlw	1
  6467  00124C  D003               	goto	L6
  6468  00124E                     l4093:
  6469                           
  6470                           ;servos.c: 219: res = 0;
  6471  00124E  0E00               	movlw	0
  6472  001250  6E18               	movwf	servoRotateArm@res+1,c
  6473  001252  0E00               	movlw	0
  6474  001254                     L6:
  6475  001254  6E17               	movwf	servoRotateArm@res,c
  6476  001256  4A15               	infsnz	servoRotateArm@i_1044,f,c
  6477  001258  2A16               	incf	servoRotateArm@i_1044+1,f,c
  6478  00125A                     l4097:
  6479  00125A  0E32               	movlw	50
  6480  00125C  244D               	addwf	_loopcount,w,c
  6481  00125E  6E12               	movwf	??_servoRotateArm& (0+255),c
  6482  001260  0E00               	movlw	0
  6483  001262  204E               	addwfc	_loopcount+1,w,c
  6484  001264  6E13               	movwf	(??_servoRotateArm+1)& (0+255),c
  6485  001266  5012               	movf	??_servoRotateArm,w,c
  6486  001268  5C15               	subwf	servoRotateArm@i_1044,w,c
  6487  00126A  5016               	movf	servoRotateArm@i_1044+1,w,c
  6488  00126C  0A80               	xorlw	128
  6489  00126E  6E14               	movwf	(??_servoRotateArm+2)& (0+255),c
  6490  001270  5013               	movf	??_servoRotateArm+1,w,c
  6491  001272  0A80               	xorlw	128
  6492  001274  5814               	subwfb	(??_servoRotateArm+2)& (0+255),w,c
  6493  001276  A0D8               	btfss	status,0,c
  6494  001278  D7D3               	goto	l517
  6495                           
  6496                           ;servos.c: 220: }
  6497                           ;servos.c: 221: }
  6498                           ;servos.c: 222: return res;
  6499  00127A  C017  F010         	movff	servoRotateArm@res,?_servoRotateArm
  6500  00127E  C018  F011         	movff	servoRotateArm@res+1,?_servoRotateArm+1
  6501  001282  0012               	return		;funcret
  6502  001284                     __end_of_servoRotateArm:
  6503                           	opt stack 0
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           intcon3	equ	0xFF0
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           indf2	equ	0xFDF
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           fsr2h	equ	0xFDA
  6518                           fsr2l	equ	0xFD9
  6519                           status	equ	0xFD8
  6520                           
  6521 ;; *************** function _servoRotate90n *****************
  6522 ;; Defined at:
  6523 ;;		line 165 in file "servos.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  servo           2   15[COMRAM] int 
  6526 ;; Auto vars:     Size  Location     Type
  6527 ;;  i               2   19[COMRAM] unsigned int 
  6528 ;; Return value:  Size  Location     Type
  6529 ;;                  1    wreg      void 
  6530 ;; Registers used:
  6531 ;;		wreg, status,2, status,0
  6532 ;; Tracked objects:
  6533 ;;		On entry : 0/0
  6534 ;;		On exit  : 0/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;Total ram usage:        6 bytes
  6542 ;; Hardware stack levels used:    1
  6543 ;; Hardware stack levels required when called:    1
  6544 ;; This function calls:
  6545 ;;		Nothing
  6546 ;; This function is called by:
  6547 ;;		_executingState
  6548 ;;		_debugState
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text37
  6553  000E86                     __ptext37:
  6554                           	opt stack 0
  6555  000E86                     _servoRotate90n:
  6556                           	opt stack 28
  6557                           
  6558                           ;servos.c: 167: unsigned int i;
  6559                           ;servos.c: 168: for (i = 0; i < loopcount; i++) {
  6560                           
  6561                           ;incstack = 0
  6562  000E86  0E00               	movlw	0
  6563  000E88  6E15               	movwf	servoRotate90n@i+1,c
  6564  000E8A  0E00               	movlw	0
  6565  000E8C  6E14               	movwf	servoRotate90n@i,c
  6566  000E8E  D054               	goto	l496
  6567  000E90                     l499:
  6568                           
  6569                           ;servos.c: 171: LATAbits.LATA4 = 1;
  6570  000E90  8889               	bsf	3977,4,c	;volatile
  6571                           
  6572                           ;servos.c: 172: break;
  6573  000E92  D020               	goto	l3969
  6574  000E94                     l501:
  6575                           
  6576                           ;servos.c: 174: LATAbits.LATA5 = 1;
  6577  000E94  8A89               	bsf	3977,5,c	;volatile
  6578                           
  6579                           ;servos.c: 175: break;
  6580  000E96  D01E               	goto	l3969
  6581  000E98                     l502:
  6582                           
  6583                           ;servos.c: 177: LATEbits.LATE0 = 1;
  6584  000E98  808D               	bsf	3981,0,c	;volatile
  6585                           
  6586                           ;servos.c: 178: break;
  6587  000E9A  D01C               	goto	l3969
  6588  000E9C                     l503:
  6589                           
  6590                           ;servos.c: 180: LATEbits.LATE1 = 1;
  6591  000E9C  828D               	bsf	3981,1,c	;volatile
  6592                           
  6593                           ;servos.c: 181: break;
  6594  000E9E  D01A               	goto	l3969
  6595  000EA0                     l504:
  6596                           
  6597                           ;servos.c: 183: LATBbits.LATB2 = 1;
  6598  000EA0  848A               	bsf	3978,2,c	;volatile
  6599                           
  6600                           ;servos.c: 185: }
  6601                           
  6602                           ;servos.c: 184: break;
  6603  000EA2  D018               	goto	l3969
  6604  000EA4                     l3967:
  6605  000EA4  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  6606  000EA8  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  6607                           
  6608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6609                           ; Switch size 1, requested type "space"
  6610                           ; Number of cases is 1, Range of values is 0 to 0
  6611                           ; switch strategies available:
  6612                           ; Name         Instructions Cycles
  6613                           ; simple_byte            4     3 (average)
  6614                           ;	Chosen strategy is simple_byte
  6615  000EAC  5013               	movf	??_servoRotate90n+1,w,c
  6616  000EAE  0A00               	xorlw	0	; case 0
  6617  000EB0  A4D8               	btfss	status,2,c
  6618  000EB2  D010               	goto	l3969
  6619                           
  6620                           ; Switch size 1, requested type "space"
  6621                           ; Number of cases is 5, Range of values is 0 to 4
  6622                           ; switch strategies available:
  6623                           ; Name         Instructions Cycles
  6624                           ; simple_byte           16     9 (average)
  6625                           ;	Chosen strategy is simple_byte
  6626  000EB4  5012               	movf	??_servoRotate90n,w,c
  6627  000EB6  0A00               	xorlw	0	; case 0
  6628  000EB8  B4D8               	btfsc	status,2,c
  6629  000EBA  D7EA               	goto	l499
  6630  000EBC  0A01               	xorlw	1	; case 1
  6631  000EBE  B4D8               	btfsc	status,2,c
  6632  000EC0  D7E9               	goto	l501
  6633  000EC2  0A03               	xorlw	3	; case 2
  6634  000EC4  B4D8               	btfsc	status,2,c
  6635  000EC6  D7E8               	goto	l502
  6636  000EC8  0A01               	xorlw	1	; case 3
  6637  000ECA  B4D8               	btfsc	status,2,c
  6638  000ECC  D7E7               	goto	l503
  6639  000ECE  0A07               	xorlw	7	; case 4
  6640  000ED0  B4D8               	btfsc	status,2,c
  6641  000ED2  D7E6               	goto	l504
  6642  000ED4                     l3969:
  6643                           
  6644                           ;servos.c: 186: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6645  000ED4  0ED6               	movlw	214
  6646  000ED6                     u3637:
  6647  000ED6  D000               	nop2	
  6648  000ED8  D000               	nop2	
  6649  000EDA  2EE8               	decfsz	wreg,f,c
  6650  000EDC  D7FC               	bra	u3637
  6651  000EDE  D000               	nop2	
  6652                           
  6653                           ;servos.c: 187: switch (servo) {
  6654  000EE0  D00A               	goto	l3973
  6655  000EE2                     l506:
  6656                           
  6657                           ;servos.c: 189: LATAbits.LATA4 = 0;
  6658  000EE2  9889               	bcf	3977,4,c	;volatile
  6659                           
  6660                           ;servos.c: 190: break;
  6661  000EE4  D020               	goto	l3975
  6662  000EE6                     l508:
  6663                           
  6664                           ;servos.c: 192: LATAbits.LATA5 = 0;
  6665  000EE6  9A89               	bcf	3977,5,c	;volatile
  6666                           
  6667                           ;servos.c: 193: break;
  6668  000EE8  D01E               	goto	l3975
  6669  000EEA                     l509:
  6670                           
  6671                           ;servos.c: 195: LATEbits.LATE0 = 0;
  6672  000EEA  908D               	bcf	3981,0,c	;volatile
  6673                           
  6674                           ;servos.c: 196: break;
  6675  000EEC  D01C               	goto	l3975
  6676  000EEE                     l510:
  6677                           
  6678                           ;servos.c: 198: LATEbits.LATE1 = 0;
  6679  000EEE  928D               	bcf	3981,1,c	;volatile
  6680                           
  6681                           ;servos.c: 199: break;
  6682  000EF0  D01A               	goto	l3975
  6683  000EF2                     l511:
  6684                           
  6685                           ;servos.c: 201: LATBbits.LATB2 = 0;
  6686  000EF2  948A               	bcf	3978,2,c	;volatile
  6687                           
  6688                           ;servos.c: 203: }
  6689                           
  6690                           ;servos.c: 202: break;
  6691  000EF4  D018               	goto	l3975
  6692  000EF6                     l3973:
  6693  000EF6  C010  F012         	movff	servoRotate90n@servo,??_servoRotate90n
  6694  000EFA  C011  F013         	movff	servoRotate90n@servo+1,??_servoRotate90n+1
  6695                           
  6696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6697                           ; Switch size 1, requested type "space"
  6698                           ; Number of cases is 1, Range of values is 0 to 0
  6699                           ; switch strategies available:
  6700                           ; Name         Instructions Cycles
  6701                           ; simple_byte            4     3 (average)
  6702                           ;	Chosen strategy is simple_byte
  6703  000EFE  5013               	movf	??_servoRotate90n+1,w,c
  6704  000F00  0A00               	xorlw	0	; case 0
  6705  000F02  A4D8               	btfss	status,2,c
  6706  000F04  D010               	goto	l3975
  6707                           
  6708                           ; Switch size 1, requested type "space"
  6709                           ; Number of cases is 5, Range of values is 0 to 4
  6710                           ; switch strategies available:
  6711                           ; Name         Instructions Cycles
  6712                           ; simple_byte           16     9 (average)
  6713                           ;	Chosen strategy is simple_byte
  6714  000F06  5012               	movf	??_servoRotate90n,w,c
  6715  000F08  0A00               	xorlw	0	; case 0
  6716  000F0A  B4D8               	btfsc	status,2,c
  6717  000F0C  D7EA               	goto	l506
  6718  000F0E  0A01               	xorlw	1	; case 1
  6719  000F10  B4D8               	btfsc	status,2,c
  6720  000F12  D7E9               	goto	l508
  6721  000F14  0A03               	xorlw	3	; case 2
  6722  000F16  B4D8               	btfsc	status,2,c
  6723  000F18  D7E8               	goto	l509
  6724  000F1A  0A01               	xorlw	1	; case 3
  6725  000F1C  B4D8               	btfsc	status,2,c
  6726  000F1E  D7E7               	goto	l510
  6727  000F20  0A07               	xorlw	7	; case 4
  6728  000F22  B4D8               	btfsc	status,2,c
  6729  000F24  D7E6               	goto	l511
  6730  000F26                     l3975:
  6731                           
  6732                           ;servos.c: 204: _delay((unsigned long)((19400)*(10000000/4000000.0)));
  6733  000F26  0E3F               	movlw	63
  6734  000F28  6E12               	movwf	??_servoRotate90n& (0+255),c
  6735  000F2A  0EFC               	movlw	252
  6736  000F2C                     u3647:
  6737  000F2C  2EE8               	decfsz	wreg,f,c
  6738  000F2E  D7FE               	bra	u3647
  6739  000F30  2E12               	decfsz	??_servoRotate90n& (0+255),f,c
  6740  000F32  D7FC               	bra	u3647
  6741  000F34  4A14               	infsnz	servoRotate90n@i,f,c
  6742  000F36  2A15               	incf	servoRotate90n@i+1,f,c
  6743  000F38                     l496:
  6744  000F38  504D               	movf	_loopcount,w,c
  6745  000F3A  5C14               	subwf	servoRotate90n@i,w,c
  6746  000F3C  504E               	movf	_loopcount+1,w,c
  6747  000F3E  5815               	subwfb	servoRotate90n@i+1,w,c
  6748  000F40  B0D8               	btfsc	status,0,c
  6749  000F42  0012               	return	
  6750  000F44  D7AF               	goto	l3967
  6751  000F46                     __end_of_servoRotate90n:
  6752                           	opt stack 0
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           intcon	equ	0xFF2
  6760                           intcon3	equ	0xFF0
  6761                           postinc0	equ	0xFEE
  6762                           wreg	equ	0xFE8
  6763                           indf2	equ	0xFDF
  6764                           postinc2	equ	0xFDE
  6765                           postdec2	equ	0xFDD
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _servoRotate4 *****************
  6771 ;; Defined at:
  6772 ;;		line 56 in file "servos.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  angle           2   15[COMRAM] int 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  i               2   18[COMRAM] unsigned int 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, status,2, status,0
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:        5 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    1
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_executingState
  6797 ;;		_debugState
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text38
  6802  001692                     __ptext38:
  6803                           	opt stack 0
  6804  001692                     _servoRotate4:
  6805                           	opt stack 28
  6806                           
  6807                           ;servos.c: 57: unsigned int i;
  6808                           ;servos.c: 58: for (i = 0; i < loopcount; i++) {
  6809                           
  6810                           ;incstack = 0
  6811  001692  0E00               	movlw	0
  6812  001694  6E14               	movwf	servoRotate4@i+1,c
  6813  001696  0E00               	movlw	0
  6814  001698  6E13               	movwf	servoRotate4@i,c
  6815  00169A  D013               	goto	l444
  6816  00169C                     l445:
  6817                           
  6818                           ;servos.c: 59: LATEbits.LATE1 = 1;
  6819  00169C  828D               	bsf	3981,1,c	;volatile
  6820                           
  6821                           ;servos.c: 60: _delay((unsigned long)((1550)*(10000000/4000000.0)));
  6822  00169E  0E06               	movlw	6
  6823  0016A0  6E12               	movwf	??_servoRotate4& (0+255),c
  6824  0016A2  0E07               	movlw	7
  6825  0016A4                     u3657:
  6826  0016A4  2EE8               	decfsz	wreg,f,c
  6827  0016A6  D7FE               	bra	u3657
  6828  0016A8  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  6829  0016AA  D7FC               	bra	u3657
  6830                           
  6831                           ;servos.c: 61: LATEbits.LATE1 = 0;
  6832  0016AC  928D               	bcf	3981,1,c	;volatile
  6833                           
  6834                           ;servos.c: 62: _delay((unsigned long)((18450)*(10000000/4000000.0)));
  6835  0016AE  0E3C               	movlw	60
  6836  0016B0  6E12               	movwf	??_servoRotate4& (0+255),c
  6837  0016B2  0EE6               	movlw	230
  6838  0016B4                     u3667:
  6839  0016B4  2EE8               	decfsz	wreg,f,c
  6840  0016B6  D7FE               	bra	u3667
  6841  0016B8  2E12               	decfsz	??_servoRotate4& (0+255),f,c
  6842  0016BA  D7FC               	bra	u3667
  6843  0016BC  F000               	nop	
  6844  0016BE  4A13               	infsnz	servoRotate4@i,f,c
  6845  0016C0  2A14               	incf	servoRotate4@i+1,f,c
  6846  0016C2                     l444:
  6847  0016C2  504D               	movf	_loopcount,w,c
  6848  0016C4  5C13               	subwf	servoRotate4@i,w,c
  6849  0016C6  504E               	movf	_loopcount+1,w,c
  6850  0016C8  5814               	subwfb	servoRotate4@i+1,w,c
  6851  0016CA  B0D8               	btfsc	status,0,c
  6852  0016CC  0012               	return	
  6853  0016CE  D7E6               	goto	l445
  6854  0016D0                     __end_of_servoRotate4:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           intcon3	equ	0xFF0
  6864                           postinc0	equ	0xFEE
  6865                           wreg	equ	0xFE8
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function _printf *****************
  6874 ;; Defined at:
  6875 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  f               2   27[COMRAM] PTR const unsigned char 
  6878 ;;		 -> STR_18(15), STR_17(15), STR_16(15), STR_15(12), 
  6879 ;;		 -> STR_14(18), STR_13(17), STR_12(17), STR_11(6), 
  6880 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(18), 
  6881 ;;		 -> STR_6(17), STR_5(17), STR_4(19), STR_3(17), 
  6882 ;;		 -> STR_2(15), STR_1(16), 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  idx             1   41[COMRAM] unsigned char 
  6885 ;;  tmpval          4    0        struct .
  6886 ;;  cp              3    0        PTR const unsigned char 
  6887 ;;  width           2   48[COMRAM] int 
  6888 ;;  val             2   45[COMRAM] unsigned int 
  6889 ;;  ap              2   42[COMRAM] PTR void [1]
  6890 ;;		 -> ?_printf(2), 
  6891 ;;  len             2    0        unsigned int 
  6892 ;;  c               1   50[COMRAM] char 
  6893 ;;  flag            1   47[COMRAM] unsigned char 
  6894 ;;  prec            1   44[COMRAM] char 
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  2   27[COMRAM] int 
  6897 ;; Registers used:
  6898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6904 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;Total ram usage:       24 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    3
  6911 ;; This function calls:
  6912 ;;		___lwdiv
  6913 ;;		___lwmod
  6914 ;;		___wmul
  6915 ;;		_isdigit
  6916 ;;		_putch
  6917 ;; This function is called by:
  6918 ;;		_update_lcd
  6919 ;;		_executingState
  6920 ;;		_debugState
  6921 ;;		_fixLCD
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text39
  6926  0005BE                     __ptext39:
  6927                           	opt stack 0
  6928  0005BE                     _printf:
  6929                           	opt stack 25
  6930                           
  6931                           ;doprnt.c: 466: va_list ap;
  6932                           ;doprnt.c: 499: signed char c;
  6933                           ;doprnt.c: 501: int width;
  6934                           ;doprnt.c: 506: signed char prec;
  6935                           ;doprnt.c: 508: unsigned char flag;
  6936                           ;doprnt.c: 523: union {
  6937                           ;doprnt.c: 524: unsigned long vd;
  6938                           ;doprnt.c: 525: double integ;
  6939                           ;doprnt.c: 526: } tmpval;
  6940                           ;doprnt.c: 528: unsigned int val;
  6941                           ;doprnt.c: 529: unsigned len;
  6942                           ;doprnt.c: 530: const char * cp;
  6943                           ;doprnt.c: 533: *ap = __va_start();
  6944                           
  6945                           ;incstack = 0
  6946  0005BE  0E1E               	movlw	low (?_printf+2)
  6947  0005C0  6E2B               	movwf	printf@ap,c
  6948  0005C2  0E00               	movlw	high (?_printf+2)
  6949  0005C4  6E2C               	movwf	printf@ap+1,c
  6950                           
  6951                           ;doprnt.c: 536: while(c = *f++) {
  6952  0005C6  D174               	goto	l3809
  6953  0005C8                     l3683:
  6954                           
  6955                           ;doprnt.c: 538: if(c != '%')
  6956  0005C8  0E25               	movlw	37
  6957  0005CA  1833               	xorwf	printf@c,w,c
  6958  0005CC  B4D8               	btfsc	status,2,c
  6959  0005CE  D004               	goto	l3687
  6960                           
  6961                           ;doprnt.c: 540: {
  6962                           ;doprnt.c: 541: (putch(c) );
  6963  0005D0  5033               	movf	printf@c,w,c
  6964  0005D2  EC45  F00C         	call	_putch
  6965                           
  6966                           ;doprnt.c: 542: continue;
  6967  0005D6  D16C               	goto	l3809
  6968  0005D8                     l3687:
  6969                           
  6970                           ;doprnt.c: 543: }
  6971                           ;doprnt.c: 546: width = 0;
  6972  0005D8  0E00               	movlw	0
  6973  0005DA  6E32               	movwf	printf@width+1,c
  6974  0005DC  0E00               	movlw	0
  6975  0005DE  6E31               	movwf	printf@width,c
  6976                           
  6977                           ;doprnt.c: 548: flag = 0;
  6978  0005E0  0E00               	movlw	0
  6979  0005E2  6E30               	movwf	printf@flag,c
  6980                           
  6981                           ;doprnt.c: 551: switch(*f) {
  6982                           
  6983                           ;doprnt.c: 550: for(;;) {
  6984  0005E4  D003               	goto	l3693
  6985  0005E6                     l3689:
  6986                           
  6987                           ;doprnt.c: 580: flag |= 0x04;
  6988  0005E6  8430               	bsf	printf@flag,2,c
  6989                           
  6990                           ;doprnt.c: 581: f++;
  6991  0005E8  4A1C               	infsnz	printf@f,f,c
  6992  0005EA  2A1D               	incf	printf@f+1,f,c
  6993  0005EC                     l3693:
  6994  0005EC  C01C  FFF6         	movff	printf@f,tblptrl
  6995  0005F0  C01D  FFF7         	movff	printf@f+1,tblptrh
  6996  0005F4                     	if	0	;tblptru may be non-zero
  6997  0005F4                     	endif
  6998  0005F4                     	if	0	;tblptru may be non-zero
  6999  0005F4                     	endif
  7000  0005F4  0008               	tblrd		*
  7001  0005F6  50F5               	movf	tablat,w,c
  7002                           
  7003                           ; Switch size 1, requested type "space"
  7004                           ; Number of cases is 1, Range of values is 48 to 48
  7005                           ; switch strategies available:
  7006                           ; Name         Instructions Cycles
  7007                           ; simple_byte            4     3 (average)
  7008                           ;	Chosen strategy is simple_byte
  7009  0005F8  0A30               	xorlw	48	; case 48
  7010  0005FA  B4D8               	btfsc	status,2,c
  7011  0005FC  D7F4               	goto	l3689
  7012                           
  7013                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7014                           
  7015                           ;doprnt.c: 586: }
  7016                           
  7017                           ;doprnt.c: 585: break;
  7018  0005FE  C01C  FFF6         	movff	printf@f,tblptrl
  7019  000602  C01D  FFF7         	movff	printf@f+1,tblptrh
  7020  000606                     	if	0	;tblptru may be non-zero
  7021  000606                     	endif
  7022  000606                     	if	0	;tblptru may be non-zero
  7023  000606                     	endif
  7024  000606  0008               	tblrd		*
  7025  000608  50F5               	movf	tablat,w,c
  7026  00060A  ECD1  F00B         	call	_isdigit
  7027  00060E  A0D8               	btfss	status,0,c
  7028  000610  D035               	goto	l3711
  7029                           
  7030                           ;doprnt.c: 598: width = 0;
  7031  000612  0E00               	movlw	0
  7032  000614  6E32               	movwf	printf@width+1,c
  7033  000616  0E00               	movlw	0
  7034  000618  6E31               	movwf	printf@width,c
  7035  00061A                     l3699:
  7036                           
  7037                           ;doprnt.c: 600: width *= 10;
  7038  00061A  C031  F010         	movff	printf@width,___wmul@multiplier
  7039  00061E  C032  F011         	movff	printf@width+1,___wmul@multiplier+1
  7040  000622  0E00               	movlw	0
  7041  000624  6E13               	movwf	___wmul@multiplicand+1,c
  7042  000626  0E0A               	movlw	10
  7043  000628  6E12               	movwf	___wmul@multiplicand,c
  7044  00062A  ECBE  F00B         	call	___wmul	;wreg free
  7045  00062E  C010  F031         	movff	?___wmul,printf@width
  7046  000632  C011  F032         	movff	?___wmul+1,printf@width+1
  7047                           
  7048                           ;doprnt.c: 601: width += *f++ - '0';
  7049  000636  0ED0               	movlw	208
  7050  000638  6E26               	movwf	??_printf& (0+255),c
  7051  00063A  0EFF               	movlw	255
  7052  00063C  6E27               	movwf	(??_printf+1)& (0+255),c
  7053  00063E  C01C  FFF6         	movff	printf@f,tblptrl
  7054  000642  C01D  FFF7         	movff	printf@f+1,tblptrh
  7055  000646                     	if	0	;tblptru may be non-zero
  7056  000646                     	endif
  7057  000646                     	if	0	;tblptru may be non-zero
  7058  000646                     	endif
  7059  000646  0008               	tblrd		*
  7060  000648  50F5               	movf	tablat,w,c
  7061  00064A  6E28               	movwf	(??_printf+2)& (0+255),c
  7062  00064C  6A29               	clrf	(??_printf+3)& (0+255),c
  7063  00064E  5026               	movf	??_printf,w,c
  7064  000650  2628               	addwf	??_printf+2,f,c
  7065  000652  5027               	movf	??_printf+1,w,c
  7066  000654  2229               	addwfc	??_printf+3,f,c
  7067  000656  5028               	movf	??_printf+2,w,c
  7068  000658  2631               	addwf	printf@width,f,c
  7069  00065A  5029               	movf	??_printf+3,w,c
  7070  00065C  2232               	addwfc	printf@width+1,f,c
  7071  00065E  4A1C               	infsnz	printf@f,f,c
  7072  000660  2A1D               	incf	printf@f+1,f,c
  7073                           
  7074                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7075  000662  C01C  FFF6         	movff	printf@f,tblptrl
  7076  000666  C01D  FFF7         	movff	printf@f+1,tblptrh
  7077  00066A                     	if	0	;tblptru may be non-zero
  7078  00066A                     	endif
  7079  00066A                     	if	0	;tblptru may be non-zero
  7080  00066A                     	endif
  7081  00066A  0008               	tblrd		*
  7082  00066C  50F5               	movf	tablat,w,c
  7083  00066E  ECD1  F00B         	call	_isdigit
  7084  000672  A0D8               	btfss	status,0,c
  7085  000674  D003               	goto	l3711
  7086  000676  D7D1               	goto	l3699
  7087  000678                     l3707:
  7088                           
  7089                           ;doprnt.c: 721: flag |= 0x80;
  7090  000678  8E30               	bsf	printf@flag,7,c
  7091                           
  7092                           ;doprnt.c: 723: break;
  7093  00067A  D017               	goto	l575
  7094  00067C                     l3711:
  7095  00067C  C01C  FFF6         	movff	printf@f,tblptrl
  7096  000680  C01D  FFF7         	movff	printf@f+1,tblptrh
  7097  000684  4A1C               	infsnz	printf@f,f,c
  7098  000686  2A1D               	incf	printf@f+1,f,c
  7099  000688                     	if	0	;tblptru may be non-zero
  7100  000688                     	endif
  7101  000688                     	if	0	;tblptru may be non-zero
  7102  000688                     	endif
  7103  000688  0008               	tblrd		*
  7104  00068A  CFF5 F033          	movff	tablat,printf@c
  7105  00068E  5033               	movf	printf@c,w,c
  7106                           
  7107                           ; Switch size 1, requested type "space"
  7108                           ; Number of cases is 4, Range of values is 0 to 120
  7109                           ; switch strategies available:
  7110                           ; Name         Instructions Cycles
  7111                           ; simple_byte           13     7 (average)
  7112                           ;	Chosen strategy is simple_byte
  7113  000690  0A00               	xorlw	0	; case 0
  7114  000692  B4D8               	btfsc	status,2,c
  7115  000694  0012               	return	
  7116  000696  0A64               	xorlw	100	; case 100
  7117  000698  B4D8               	btfsc	status,2,c
  7118  00069A  D007               	goto	l575
  7119  00069C  0A0D               	xorlw	13	; case 105
  7120  00069E  B4D8               	btfsc	status,2,c
  7121  0006A0  D004               	goto	l575
  7122  0006A2  0A11               	xorlw	17	; case 120
  7123  0006A4  B4D8               	btfsc	status,2,c
  7124  0006A6  D7E8               	goto	l3707
  7125  0006A8  D103               	goto	l3809
  7126  0006AA                     l575:
  7127                           
  7128                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7129  0006AA  BE30               	btfsc	printf@flag,7,c
  7130  0006AC  D015               	goto	l3723
  7131                           
  7132                           ;doprnt.c: 1253: {
  7133                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7134  0006AE  C02B  FFD9         	movff	printf@ap,fsr2l
  7135  0006B2  C02C  FFDA         	movff	printf@ap+1,fsr2h
  7136  0006B6  CFDE F02E          	movff	postinc2,printf@val
  7137  0006BA  CFDD F02F          	movff	postdec2,printf@val+1
  7138  0006BE  0E02               	movlw	2
  7139  0006C0  262B               	addwf	printf@ap,f,c
  7140  0006C2  0E00               	movlw	0
  7141  0006C4  222C               	addwfc	printf@ap+1,f,c
  7142                           
  7143                           ;doprnt.c: 1261: if((int)val < 0) {
  7144  0006C6  AE2F               	btfss	printf@val+1,7,c
  7145  0006C8  D044               	goto	l3757
  7146                           
  7147                           ;doprnt.c: 1262: flag |= 0x03;
  7148  0006CA  0E03               	movlw	3
  7149  0006CC  1230               	iorwf	printf@flag,f,c
  7150                           
  7151                           ;doprnt.c: 1263: val = -val;
  7152  0006CE  6C2E               	negf	printf@val,c
  7153  0006D0  1E2F               	comf	printf@val+1,f,c
  7154  0006D2  B0D8               	btfsc	status,0,c
  7155  0006D4  2A2F               	incf	printf@val+1,f,c
  7156                           
  7157                           ;doprnt.c: 1264: }
  7158                           ;doprnt.c: 1266: }
  7159  0006D6  D03D               	goto	l3757
  7160  0006D8                     l3723:
  7161                           
  7162                           ;doprnt.c: 1268: else
  7163                           ;doprnt.c: 1273: {
  7164                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7165  0006D8  C02B  FFD9         	movff	printf@ap,fsr2l
  7166  0006DC  C02C  FFDA         	movff	printf@ap+1,fsr2h
  7167  0006E0  CFDE F02E          	movff	postinc2,printf@val
  7168  0006E4  CFDD F02F          	movff	postdec2,printf@val+1
  7169  0006E8  0E02               	movlw	2
  7170  0006EA  262B               	addwf	printf@ap,f,c
  7171  0006EC  0E00               	movlw	0
  7172  0006EE  222C               	addwfc	printf@ap+1,f,c
  7173                           
  7174                           ;doprnt.c: 1287: }
  7175                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7176  0006F0  D030               	goto	l3757
  7177  0006F2                     l3727:
  7178                           
  7179                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7180  0006F2  0E01               	movlw	1
  7181  0006F4  6E33               	movwf	printf@c,c
  7182  0006F6                     l3729:
  7183  0006F6  0E05               	movlw	5
  7184  0006F8  1833               	xorwf	printf@c,w,c
  7185  0006FA  B4D8               	btfsc	status,2,c
  7186  0006FC  D032               	goto	l3759
  7187                           
  7188                           ;doprnt.c: 1306: if(val < dpowers[c])
  7189  0006FE  5033               	movf	printf@c,w,c
  7190  000700  0D02               	mullw	2
  7191  000702  0ED6               	movlw	low _dpowers
  7192  000704  24F3               	addwf	prodl,w,c
  7193  000706  6EF6               	movwf	tblptrl,c
  7194  000708  0EFE               	movlw	high _dpowers
  7195  00070A  20F4               	addwfc	prodh,w,c
  7196  00070C  6EF7               	movwf	tblptrh,c
  7197  00070E                     	if	0	;There are less than 3 active tblptr bytes
  7198  00070E                     	endif
  7199  00070E  0009               	tblrd		*+
  7200  000710  50F5               	movf	tablat,w,c
  7201  000712  5C2E               	subwf	printf@val,w,c
  7202  000714  0009               	tblrd		*+
  7203  000716  50F5               	movf	tablat,w,c
  7204  000718  582F               	subwfb	printf@val+1,w,c
  7205  00071A  A0D8               	btfss	status,0,c
  7206  00071C  D022               	goto	l3759
  7207                           
  7208                           ;doprnt.c: 1307: break;
  7209  00071E  2A33               	incf	printf@c,f,c
  7210  000720  D7EA               	goto	l3729
  7211  000722                     l3741:
  7212                           
  7213                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7214  000722  0E01               	movlw	1
  7215  000724  6E33               	movwf	printf@c,c
  7216  000726                     l3743:
  7217  000726  0E04               	movlw	4
  7218  000728  1833               	xorwf	printf@c,w,c
  7219  00072A  B4D8               	btfsc	status,2,c
  7220  00072C  D01A               	goto	l3759
  7221                           
  7222                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7223  00072E  5033               	movf	printf@c,w,c
  7224  000730  0D02               	mullw	2
  7225  000732  0EE0               	movlw	low _hexpowers
  7226  000734  24F3               	addwf	prodl,w,c
  7227  000736  6EF6               	movwf	tblptrl,c
  7228  000738  0EFE               	movlw	high _hexpowers
  7229  00073A  20F4               	addwfc	prodh,w,c
  7230  00073C  6EF7               	movwf	tblptrh,c
  7231  00073E                     	if	0	;There are less than 3 active tblptr bytes
  7232  00073E                     	endif
  7233  00073E  0009               	tblrd		*+
  7234  000740  50F5               	movf	tablat,w,c
  7235  000742  5C2E               	subwf	printf@val,w,c
  7236  000744  0009               	tblrd		*+
  7237  000746  50F5               	movf	tablat,w,c
  7238  000748  582F               	subwfb	printf@val+1,w,c
  7239  00074A  A0D8               	btfss	status,0,c
  7240  00074C  D00A               	goto	l3759
  7241                           
  7242                           ;doprnt.c: 1318: break;
  7243  00074E  2A33               	incf	printf@c,f,c
  7244  000750  D7EA               	goto	l3743
  7245  000752                     l3757:
  7246  000752  5030               	movf	printf@flag,w,c
  7247  000754  0B80               	andlw	128
  7248                           
  7249                           ; Switch size 1, requested type "space"
  7250                           ; Number of cases is 2, Range of values is 0 to 128
  7251                           ; switch strategies available:
  7252                           ; Name         Instructions Cycles
  7253                           ; simple_byte            7     4 (average)
  7254                           ;	Chosen strategy is simple_byte
  7255  000756  0A00               	xorlw	0	; case 0
  7256  000758  B4D8               	btfsc	status,2,c
  7257  00075A  D7CB               	goto	l3727
  7258  00075C  0A80               	xorlw	128	; case 128
  7259  00075E  B4D8               	btfsc	status,2,c
  7260  000760  D7E0               	goto	l3741
  7261  000762                     l3759:
  7262                           
  7263                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7264  000762  5031               	movf	printf@width,w,c
  7265  000764  1032               	iorwf	printf@width+1,w,c
  7266  000766  B4D8               	btfsc	status,2,c
  7267  000768  D009               	goto	l3765
  7268  00076A  C030  F026         	movff	printf@flag,??_printf
  7269  00076E  0E03               	movlw	3
  7270  000770  1626               	andwf	??_printf,f,c
  7271  000772  B4D8               	btfsc	status,2,c
  7272  000774  D003               	goto	l3765
  7273                           
  7274                           ;doprnt.c: 1346: width--;
  7275  000776  0631               	decf	printf@width,f,c
  7276  000778  A0D8               	btfss	status,0,c
  7277  00077A  0632               	decf	printf@width+1,f,c
  7278  00077C                     l3765:
  7279                           
  7280                           ;doprnt.c: 1381: if(width > c)
  7281  00077C  0E80               	movlw	128
  7282  00077E  BE33               	btfsc	printf@c,7,c
  7283  000780  0E7F               	movlw	127
  7284  000782  6E26               	movwf	??_printf& (0+255),c
  7285  000784  5031               	movf	printf@width,w,c
  7286  000786  5C33               	subwf	printf@c,w,c
  7287  000788  5032               	movf	printf@width+1,w,c
  7288  00078A  0A80               	xorlw	128
  7289  00078C  5826               	subwfb	??_printf& (0+255),w,c
  7290  00078E  B0D8               	btfsc	status,0,c
  7291  000790  D007               	goto	l3769
  7292                           
  7293                           ;doprnt.c: 1382: width -= c;
  7294  000792  5033               	movf	printf@c,w,c
  7295  000794  5E31               	subwf	printf@width,f,c
  7296  000796  0E00               	movlw	0
  7297  000798  BE33               	btfsc	printf@c,7,c
  7298  00079A  0EFF               	movlw	255
  7299  00079C  5A32               	subwfb	printf@width+1,f,c
  7300  00079E  D004               	goto	l3771
  7301  0007A0                     l3769:
  7302                           
  7303                           ;doprnt.c: 1383: else
  7304                           ;doprnt.c: 1384: width = 0;
  7305  0007A0  0E00               	movlw	0
  7306  0007A2  6E32               	movwf	printf@width+1,c
  7307  0007A4  0E00               	movlw	0
  7308  0007A6  6E31               	movwf	printf@width,c
  7309  0007A8                     l3771:
  7310                           
  7311                           ;doprnt.c: 1387: if(flag & 0x04) {
  7312  0007A8  A430               	btfss	printf@flag,2,c
  7313  0007AA  D014               	goto	l3783
  7314                           
  7315                           ;doprnt.c: 1392: if(flag & 0x03)
  7316  0007AC  C030  F026         	movff	printf@flag,??_printf
  7317  0007B0  0E03               	movlw	3
  7318  0007B2  1626               	andwf	??_printf,f,c
  7319  0007B4  B4D8               	btfsc	status,2,c
  7320  0007B6  D003               	goto	l3777
  7321                           
  7322                           ;doprnt.c: 1393: (putch('-') );
  7323  0007B8  0E2D               	movlw	45
  7324  0007BA  EC45  F00C         	call	_putch
  7325  0007BE                     l3777:
  7326                           
  7327                           ;doprnt.c: 1415: if(width)
  7328  0007BE  5031               	movf	printf@width,w,c
  7329  0007C0  1032               	iorwf	printf@width+1,w,c
  7330  0007C2  B4D8               	btfsc	status,2,c
  7331  0007C4  D01E               	goto	l3793
  7332                           
  7333                           ;doprnt.c: 1417: (putch('0') );
  7334                           
  7335                           ;doprnt.c: 1416: do
  7336  0007C6  0E30               	movlw	48
  7337  0007C8  EC45  F00C         	call	_putch
  7338                           
  7339                           ;doprnt.c: 1418: while(--width);
  7340  0007CC  0631               	decf	printf@width,f,c
  7341  0007CE  A0D8               	btfss	status,0,c
  7342  0007D0  0632               	decf	printf@width+1,f,c
  7343  0007D2  D7F5               	goto	l3777
  7344  0007D4                     l3783:
  7345                           
  7346                           ;doprnt.c: 1422: {
  7347                           ;doprnt.c: 1424: if(width
  7348                           ;doprnt.c: 1428: )
  7349  0007D4  5031               	movf	printf@width,w,c
  7350  0007D6  1032               	iorwf	printf@width+1,w,c
  7351  0007D8  B4D8               	btfsc	status,2,c
  7352  0007DA  D00A               	goto	l3789
  7353  0007DC                     l3785:
  7354                           
  7355                           ;doprnt.c: 1430: (putch(' ') );
  7356  0007DC  0E20               	movlw	32
  7357  0007DE  EC45  F00C         	call	_putch
  7358                           
  7359                           ;doprnt.c: 1431: while(--width);
  7360  0007E2  0631               	decf	printf@width,f,c
  7361  0007E4  A0D8               	btfss	status,0,c
  7362  0007E6  0632               	decf	printf@width+1,f,c
  7363  0007E8  5031               	movf	printf@width,w,c
  7364  0007EA  1032               	iorwf	printf@width+1,w,c
  7365  0007EC  A4D8               	btfss	status,2,c
  7366  0007EE  D7F6               	goto	l3785
  7367  0007F0                     l3789:
  7368                           
  7369                           ;doprnt.c: 1438: if(flag & 0x03)
  7370  0007F0  C030  F026         	movff	printf@flag,??_printf
  7371  0007F4  0E03               	movlw	3
  7372  0007F6  1626               	andwf	??_printf,f,c
  7373  0007F8  B4D8               	btfsc	status,2,c
  7374  0007FA  D003               	goto	l3793
  7375                           
  7376                           ;doprnt.c: 1439: (putch('-') );
  7377  0007FC  0E2D               	movlw	45
  7378  0007FE  EC45  F00C         	call	_putch
  7379  000802                     l3793:
  7380                           
  7381                           ;doprnt.c: 1469: }
  7382                           ;doprnt.c: 1472: prec = c;
  7383  000802  C033  F02D         	movff	printf@c,printf@prec
  7384                           
  7385                           ;doprnt.c: 1474: while(prec--) {
  7386  000806  D050               	goto	l3807
  7387  000808                     l3795:
  7388                           
  7389                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7390  000808  502D               	movf	printf@prec,w,c
  7391  00080A  0D02               	mullw	2
  7392  00080C  0ED6               	movlw	low _dpowers
  7393  00080E  24F3               	addwf	prodl,w,c
  7394  000810  6EF6               	movwf	tblptrl,c
  7395  000812  0EFE               	movlw	high _dpowers
  7396  000814  20F4               	addwfc	prodh,w,c
  7397  000816  6EF7               	movwf	tblptrh,c
  7398  000818                     	if	0	;There are less than 3 active tblptr bytes
  7399  000818                     	endif
  7400  000818  0009               	tblrd		*+
  7401  00081A  CFF5 F012          	movff	tablat,___lwdiv@divisor
  7402  00081E  000A               	tblrd		*-
  7403  000820  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  7404  000824  C02E  F010         	movff	printf@val,___lwdiv@dividend
  7405  000828  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  7406  00082C  ECCA  F009         	call	___lwdiv	;wreg free
  7407  000830  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  7408  000834  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  7409  000838  0E00               	movlw	0
  7410  00083A  6E1A               	movwf	___lwmod@divisor+1,c
  7411  00083C  0E0A               	movlw	10
  7412  00083E  6E19               	movwf	___lwmod@divisor,c
  7413  000840  ECAB  F00A         	call	___lwmod	;wreg free
  7414  000844  5017               	movf	?___lwmod,w,c
  7415  000846  0F30               	addlw	48
  7416  000848  6E33               	movwf	printf@c,c
  7417                           
  7418                           ;doprnt.c: 1491: break;
  7419  00084A  D02B               	goto	l3805
  7420  00084C                     l3797:
  7421                           
  7422                           ;doprnt.c: 1499: {
  7423                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7424  00084C  C02E  F010         	movff	printf@val,___lwdiv@dividend
  7425  000850  C02F  F011         	movff	printf@val+1,___lwdiv@dividend+1
  7426  000854  502D               	movf	printf@prec,w,c
  7427  000856  0D02               	mullw	2
  7428  000858  0EE0               	movlw	low _hexpowers
  7429  00085A  24F3               	addwf	prodl,w,c
  7430  00085C  6EF6               	movwf	tblptrl,c
  7431  00085E  0EFE               	movlw	high _hexpowers
  7432  000860  20F4               	addwfc	prodh,w,c
  7433  000862  6EF7               	movwf	tblptrh,c
  7434  000864                     	if	0	;There are less than 3 active tblptr bytes
  7435  000864                     	endif
  7436  000864  0009               	tblrd		*+
  7437  000866  CFF5 F012          	movff	tablat,___lwdiv@divisor
  7438  00086A  000A               	tblrd		*-
  7439  00086C  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  7440  000870  ECCA  F009         	call	___lwdiv	;wreg free
  7441  000874  5010               	movf	?___lwdiv,w,c
  7442  000876  0B0F               	andlw	15
  7443  000878  6E2A               	movwf	printf@idx,c
  7444                           
  7445                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7446  00087A  502A               	movf	printf@idx,w,c
  7447  00087C  0D01               	mullw	1
  7448  00087E  0E26               	movlw	low STR_19
  7449  000880  24F3               	addwf	prodl,w,c
  7450  000882  6EF6               	movwf	tblptrl,c
  7451  000884  0EFF               	movlw	high STR_19
  7452  000886  20F4               	addwfc	prodh,w,c
  7453  000888  6EF7               	movwf	tblptrh,c
  7454  00088A                     	if	0	;There are less than 3 active tblptr bytes
  7455  00088A                     	endif
  7456  00088A  0008               	tblrd		*
  7457  00088C  CFF5 F033          	movff	tablat,printf@c
  7458                           
  7459                           ;doprnt.c: 1523: }
  7460                           
  7461                           ;doprnt.c: 1508: }
  7462                           ;doprnt.c: 1510: break;
  7463  000890  D008               	goto	l3805
  7464  000892                     l3803:
  7465  000892  5030               	movf	printf@flag,w,c
  7466  000894  0B80               	andlw	128
  7467                           
  7468                           ; Switch size 1, requested type "space"
  7469                           ; Number of cases is 2, Range of values is 0 to 128
  7470                           ; switch strategies available:
  7471                           ; Name         Instructions Cycles
  7472                           ; simple_byte            7     4 (average)
  7473                           ;	Chosen strategy is simple_byte
  7474  000896  0A00               	xorlw	0	; case 0
  7475  000898  B4D8               	btfsc	status,2,c
  7476  00089A  D7B6               	goto	l3795
  7477  00089C  0A80               	xorlw	128	; case 128
  7478  00089E  B4D8               	btfsc	status,2,c
  7479  0008A0  D7D5               	goto	l3797
  7480  0008A2                     l3805:
  7481                           
  7482                           ;doprnt.c: 1524: (putch(c) );
  7483  0008A2  5033               	movf	printf@c,w,c
  7484  0008A4  EC45  F00C         	call	_putch
  7485  0008A8                     l3807:
  7486  0008A8  062D               	decf	printf@prec,f,c
  7487  0008AA  282D               	incf	printf@prec,w,c
  7488  0008AC  A4D8               	btfss	status,2,c
  7489  0008AE  D7F1               	goto	l3803
  7490  0008B0                     l3809:
  7491  0008B0  C01C  FFF6         	movff	printf@f,tblptrl
  7492  0008B4  C01D  FFF7         	movff	printf@f+1,tblptrh
  7493  0008B8  4A1C               	infsnz	printf@f,f,c
  7494  0008BA  2A1D               	incf	printf@f+1,f,c
  7495  0008BC                     	if	0	;tblptru may be non-zero
  7496  0008BC                     	endif
  7497  0008BC                     	if	0	;tblptru may be non-zero
  7498  0008BC                     	endif
  7499  0008BC  0008               	tblrd		*
  7500  0008BE  CFF5 F033          	movff	tablat,printf@c
  7501  0008C2  5033               	movf	printf@c,w,c
  7502  0008C4  B4D8               	btfsc	status,2,c
  7503  0008C6  0012               	return	
  7504  0008C8  D67F               	goto	l3683
  7505  0008CA                     __end_of_printf:
  7506                           	opt stack 0
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon3	equ	0xFF0
  7515                           postinc0	equ	0xFEE
  7516                           wreg	equ	0xFE8
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _putch *****************
  7525 ;; Defined at:
  7526 ;;		line 31 in file "lcd.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  data            1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  data            1   17[COMRAM] unsigned char 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      void 
  7533 ;; Registers used:
  7534 ;;		wreg, status,2, status,0, cstack
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;Total ram usage:        1 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    2
  7547 ;; This function calls:
  7548 ;;		_lcdNibble
  7549 ;; This function is called by:
  7550 ;;		_printf
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text40
  7555  00188A                     __ptext40:
  7556                           	opt stack 0
  7557  00188A                     _putch:
  7558                           	opt stack 25
  7559                           
  7560                           ;incstack = 0
  7561                           ;putch@data stored from wreg
  7562  00188A  6E12               	movwf	putch@data,c
  7563                           
  7564                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7565  00188C  848C               	bsf	3980,2,c	;volatile
  7566                           
  7567                           ;lcd.c: 33: lcdNibble(data);
  7568  00188E  5012               	movf	putch@data,w,c
  7569  001890  EC9F  F009         	call	_lcdNibble
  7570  001894  0012               	return		;funcret
  7571  001896                     __end_of_putch:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon	equ	0xFF2
  7580                           intcon3	equ	0xFF0
  7581                           postinc0	equ	0xFEE
  7582                           wreg	equ	0xFE8
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _isdigit *****************
  7591 ;; Defined at:
  7592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  c               1    wreg     unsigned char 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  c               1   17[COMRAM] unsigned char 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;		None               void
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;Total ram usage:        3 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    1
  7613 ;; This function calls:
  7614 ;;		Nothing
  7615 ;; This function is called by:
  7616 ;;		_printf
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text41
  7621  0017A2                     __ptext41:
  7622                           	opt stack 0
  7623  0017A2                     _isdigit:
  7624                           	opt stack 26
  7625                           
  7626                           ;incstack = 0
  7627                           ;isdigit@c stored from wreg
  7628  0017A2  6E12               	movwf	isdigit@c,c
  7629  0017A4  0E00               	movlw	0
  7630  0017A6  6E11               	movwf	_isdigit$1348,c
  7631  0017A8  0E3A               	movlw	58
  7632  0017AA  6012               	cpfslt	isdigit@c,c
  7633  0017AC  D005               	goto	l3629
  7634  0017AE  0E2F               	movlw	47
  7635  0017B0  6412               	cpfsgt	isdigit@c,c
  7636  0017B2  D002               	goto	l3629
  7637  0017B4  0E01               	movlw	1
  7638  0017B6  6E11               	movwf	_isdigit$1348,c
  7639  0017B8                     l3629:
  7640  0017B8  C011  F010         	movff	_isdigit$1348,??_isdigit
  7641  0017BC  3010               	rrcf	??_isdigit,w,c
  7642  0017BE  0012               	return	
  7643  0017C0                     __end_of_isdigit:
  7644                           	opt stack 0
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           intcon3	equ	0xFF0
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           fsr2h	equ	0xFDA
  7659                           fsr2l	equ	0xFD9
  7660                           status	equ	0xFD8
  7661                           
  7662 ;; *************** function ___wmul *****************
  7663 ;; Defined at:
  7664 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  multiplier      2   15[COMRAM] unsigned int 
  7667 ;;  multiplicand    2   17[COMRAM] unsigned int 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  product         2   19[COMRAM] unsigned int 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  2   15[COMRAM] unsigned int 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, prodl, prodh
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7679 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;Total ram usage:        6 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    1
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_get_timeDif
  7690 ;;		_executingState
  7691 ;;		_printf
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text42
  7696  00177C                     __ptext42:
  7697                           	opt stack 0
  7698  00177C                     ___wmul:
  7699                           	opt stack 26
  7700                           
  7701                           ;incstack = 0
  7702  00177C  5010               	movf	___wmul@multiplier,w,c
  7703  00177E  0212               	mulwf	___wmul@multiplicand,c
  7704  001780  CFF3 F014          	movff	prodl,___wmul@product
  7705  001784  CFF4 F015          	movff	prodh,___wmul@product+1
  7706  001788  5010               	movf	___wmul@multiplier,w,c
  7707  00178A  0213               	mulwf	___wmul@multiplicand+1,c
  7708  00178C  50F3               	movf	prodl,w,c
  7709  00178E  2615               	addwf	___wmul@product+1,f,c
  7710  001790  5011               	movf	___wmul@multiplier+1,w,c
  7711  001792  0212               	mulwf	___wmul@multiplicand,c
  7712  001794  50F3               	movf	prodl,w,c
  7713  001796  2615               	addwf	___wmul@product+1,f,c
  7714  001798  C014  F010         	movff	___wmul@product,?___wmul
  7715  00179C  C015  F011         	movff	___wmul@product+1,?___wmul+1
  7716  0017A0  0012               	return	
  7717  0017A2                     __end_of___wmul:
  7718                           	opt stack 0
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           prodh	equ	0xFF4
  7724                           prodl	equ	0xFF3
  7725                           intcon	equ	0xFF2
  7726                           intcon3	equ	0xFF0
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           indf2	equ	0xFDF
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function ___lwmod *****************
  7737 ;; Defined at:
  7738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  dividend        2   22[COMRAM] unsigned int 
  7741 ;;  divisor         2   24[COMRAM] unsigned int 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  counter         1   26[COMRAM] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  2   22[COMRAM] unsigned int 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;Total ram usage:        5 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    1
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_printf
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text43
  7768  001556                     __ptext43:
  7769                           	opt stack 0
  7770  001556                     ___lwmod:
  7771                           	opt stack 26
  7772                           
  7773                           ;incstack = 0
  7774  001556  5019               	movf	___lwmod@divisor,w,c
  7775  001558  101A               	iorwf	___lwmod@divisor+1,w,c
  7776  00155A  B4D8               	btfsc	status,2,c
  7777  00155C  D018               	goto	l1030
  7778  00155E  0E01               	movlw	1
  7779  001560  6E1B               	movwf	___lwmod@counter,c
  7780  001562  D004               	goto	l3667
  7781  001564                     l3665:
  7782  001564  90D8               	bcf	status,0,c
  7783  001566  3619               	rlcf	___lwmod@divisor,f,c
  7784  001568  361A               	rlcf	___lwmod@divisor+1,f,c
  7785  00156A  2A1B               	incf	___lwmod@counter,f,c
  7786  00156C                     l3667:
  7787  00156C  AE1A               	btfss	___lwmod@divisor+1,7,c
  7788  00156E  D7FA               	goto	l3665
  7789  001570                     l3669:
  7790  001570  5019               	movf	___lwmod@divisor,w,c
  7791  001572  5C17               	subwf	___lwmod@dividend,w,c
  7792  001574  501A               	movf	___lwmod@divisor+1,w,c
  7793  001576  5818               	subwfb	___lwmod@dividend+1,w,c
  7794  001578  A0D8               	btfss	status,0,c
  7795  00157A  D004               	goto	l3673
  7796  00157C  5019               	movf	___lwmod@divisor,w,c
  7797  00157E  5E17               	subwf	___lwmod@dividend,f,c
  7798  001580  501A               	movf	___lwmod@divisor+1,w,c
  7799  001582  5A18               	subwfb	___lwmod@dividend+1,f,c
  7800  001584                     l3673:
  7801  001584  90D8               	bcf	status,0,c
  7802  001586  321A               	rrcf	___lwmod@divisor+1,f,c
  7803  001588  3219               	rrcf	___lwmod@divisor,f,c
  7804  00158A  2E1B               	decfsz	___lwmod@counter,f,c
  7805  00158C  D7F1               	goto	l3669
  7806  00158E                     l1030:
  7807  00158E  C017  F017         	movff	___lwmod@dividend,?___lwmod
  7808  001592  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  7809  001596  0012               	return		;funcret
  7810  001598                     __end_of___lwmod:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon3	equ	0xFF0
  7820                           postinc0	equ	0xFEE
  7821                           wreg	equ	0xFE8
  7822                           indf2	equ	0xFDF
  7823                           postinc2	equ	0xFDE
  7824                           postdec2	equ	0xFDD
  7825                           fsr2h	equ	0xFDA
  7826                           fsr2l	equ	0xFD9
  7827                           status	equ	0xFD8
  7828                           
  7829 ;; *************** function ___lwdiv *****************
  7830 ;; Defined at:
  7831 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;  dividend        2   15[COMRAM] unsigned int 
  7834 ;;  divisor         2   17[COMRAM] unsigned int 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  quotient        2   20[COMRAM] unsigned int 
  7837 ;;  counter         1   19[COMRAM] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  2   15[COMRAM] unsigned int 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;Total ram usage:        7 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_printf
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text44
  7862  001394                     __ptext44:
  7863                           	opt stack 0
  7864  001394                     ___lwdiv:
  7865                           	opt stack 26
  7866                           
  7867                           ;incstack = 0
  7868  001394  0E00               	movlw	0
  7869  001396  6E16               	movwf	___lwdiv@quotient+1,c
  7870  001398  0E00               	movlw	0
  7871  00139A  6E15               	movwf	___lwdiv@quotient,c
  7872  00139C  5012               	movf	___lwdiv@divisor,w,c
  7873  00139E  1013               	iorwf	___lwdiv@divisor+1,w,c
  7874  0013A0  B4D8               	btfsc	status,2,c
  7875  0013A2  D01C               	goto	l1020
  7876  0013A4  0E01               	movlw	1
  7877  0013A6  6E14               	movwf	___lwdiv@counter,c
  7878  0013A8  D004               	goto	l3647
  7879  0013AA                     l3645:
  7880  0013AA  90D8               	bcf	status,0,c
  7881  0013AC  3612               	rlcf	___lwdiv@divisor,f,c
  7882  0013AE  3613               	rlcf	___lwdiv@divisor+1,f,c
  7883  0013B0  2A14               	incf	___lwdiv@counter,f,c
  7884  0013B2                     l3647:
  7885  0013B2  AE13               	btfss	___lwdiv@divisor+1,7,c
  7886  0013B4  D7FA               	goto	l3645
  7887  0013B6                     l3649:
  7888  0013B6  90D8               	bcf	status,0,c
  7889  0013B8  3615               	rlcf	___lwdiv@quotient,f,c
  7890  0013BA  3616               	rlcf	___lwdiv@quotient+1,f,c
  7891  0013BC  5012               	movf	___lwdiv@divisor,w,c
  7892  0013BE  5C10               	subwf	___lwdiv@dividend,w,c
  7893  0013C0  5013               	movf	___lwdiv@divisor+1,w,c
  7894  0013C2  5811               	subwfb	___lwdiv@dividend+1,w,c
  7895  0013C4  A0D8               	btfss	status,0,c
  7896  0013C6  D005               	goto	l3657
  7897  0013C8  5012               	movf	___lwdiv@divisor,w,c
  7898  0013CA  5E10               	subwf	___lwdiv@dividend,f,c
  7899  0013CC  5013               	movf	___lwdiv@divisor+1,w,c
  7900  0013CE  5A11               	subwfb	___lwdiv@dividend+1,f,c
  7901  0013D0  8015               	bsf	___lwdiv@quotient,0,c
  7902  0013D2                     l3657:
  7903  0013D2  90D8               	bcf	status,0,c
  7904  0013D4  3213               	rrcf	___lwdiv@divisor+1,f,c
  7905  0013D6  3212               	rrcf	___lwdiv@divisor,f,c
  7906  0013D8  2E14               	decfsz	___lwdiv@counter,f,c
  7907  0013DA  D7ED               	goto	l3649
  7908  0013DC                     l1020:
  7909  0013DC  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  7910  0013E0  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7911  0013E4  0012               	return		;funcret
  7912  0013E6                     __end_of___lwdiv:
  7913                           	opt stack 0
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           intcon	equ	0xFF2
  7921                           intcon3	equ	0xFF0
  7922                           postinc0	equ	0xFEE
  7923                           wreg	equ	0xFE8
  7924                           indf2	equ	0xFDF
  7925                           postinc2	equ	0xFDE
  7926                           postdec2	equ	0xFDD
  7927                           fsr2h	equ	0xFDA
  7928                           fsr2l	equ	0xFD9
  7929                           status	equ	0xFD8
  7930                           
  7931 ;; *************** function _lcdInst *****************
  7932 ;; Defined at:
  7933 ;;		line 26 in file "lcd.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;  data            1    wreg     unsigned char 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  data            1   17[COMRAM] unsigned char 
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;Total ram usage:        1 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    2
  7954 ;; This function calls:
  7955 ;;		_lcdNibble
  7956 ;; This function is called by:
  7957 ;;		_initLCD
  7958 ;;		_update_lcd
  7959 ;;		_executingState
  7960 ;;		_debugState
  7961 ;;		_fixLCD
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           	psect	text45
  7966  001896                     __ptext45:
  7967                           	opt stack 0
  7968  001896                     _lcdInst:
  7969                           	opt stack 26
  7970                           
  7971                           ;incstack = 0
  7972                           ;lcdInst@data stored from wreg
  7973  001896  6E12               	movwf	lcdInst@data,c
  7974                           
  7975                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7976  001898  948C               	bcf	3980,2,c	;volatile
  7977                           
  7978                           ;lcd.c: 28: lcdNibble(data);
  7979  00189A  5012               	movf	lcdInst@data,w,c
  7980  00189C  EC9F  F009         	call	_lcdNibble
  7981  0018A0  0012               	return		;funcret
  7982  0018A2                     __end_of_lcdInst:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           intcon	equ	0xFF2
  7991                           intcon3	equ	0xFF0
  7992                           postinc0	equ	0xFEE
  7993                           wreg	equ	0xFE8
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function _lcdNibble *****************
  8002 ;; Defined at:
  8003 ;;		line 36 in file "lcd.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  data            1    wreg     unsigned char 
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;  data            1   16[COMRAM] unsigned char 
  8008 ;;  temp            1   15[COMRAM] unsigned char 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;Total ram usage:        2 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    1
  8025 ;; This function calls:
  8026 ;;		Nothing
  8027 ;; This function is called by:
  8028 ;;		_lcdInst
  8029 ;;		_putch
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text46
  8034  00133E                     __ptext46:
  8035                           	opt stack 0
  8036  00133E                     _lcdNibble:
  8037                           	opt stack 25
  8038                           
  8039                           ;incstack = 0
  8040                           ;lcdNibble@data stored from wreg
  8041  00133E  6E11               	movwf	lcdNibble@data,c
  8042                           
  8043                           ;lcd.c: 38: char temp = data & 0xF0;
  8044  001340  5011               	movf	lcdNibble@data,w,c
  8045  001342  0BF0               	andlw	240
  8046  001344  6E10               	movwf	lcdNibble@temp,c
  8047                           
  8048                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8049  001346  508C               	movf	3980,w,c	;volatile
  8050  001348  0B0F               	andlw	15
  8051  00134A  6E8C               	movwf	3980,c	;volatile
  8052                           
  8053                           ;lcd.c: 40: LATD = temp | LATD;
  8054  00134C  5010               	movf	lcdNibble@temp,w,c
  8055  00134E  108C               	iorwf	3980,w,c	;volatile
  8056  001350  6E8C               	movwf	3980,c	;volatile
  8057                           
  8058                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8059  001352  968C               	bcf	3980,3,c	;volatile
  8060                           
  8061                           ;lcd.c: 43: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8062  001354  0E14               	movlw	20
  8063  001356                     u3677:
  8064  001356  2EE8               	decfsz	wreg,f,c
  8065  001358  D7FE               	bra	u3677
  8066  00135A  D000               	nop2	
  8067                           
  8068                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8069  00135C  868C               	bsf	3980,3,c	;volatile
  8070                           
  8071                           ;lcd.c: 45: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8072  00135E  0E14               	movlw	20
  8073  001360                     u3687:
  8074  001360  2EE8               	decfsz	wreg,f,c
  8075  001362  D7FE               	bra	u3687
  8076  001364  D000               	nop2	
  8077                           
  8078                           ;lcd.c: 47: data = data << 4;
  8079  001366  3811               	swapf	lcdNibble@data,w,c
  8080  001368  0BF0               	andlw	240
  8081  00136A  6E11               	movwf	lcdNibble@data,c
  8082                           
  8083                           ;lcd.c: 49: temp = data & 0xF0;
  8084  00136C  5011               	movf	lcdNibble@data,w,c
  8085  00136E  0BF0               	andlw	240
  8086  001370  6E10               	movwf	lcdNibble@temp,c
  8087                           
  8088                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8089  001372  508C               	movf	3980,w,c	;volatile
  8090  001374  0B0F               	andlw	15
  8091  001376  6E8C               	movwf	3980,c	;volatile
  8092                           
  8093                           ;lcd.c: 51: LATD = temp | LATD;
  8094  001378  5010               	movf	lcdNibble@temp,w,c
  8095  00137A  108C               	iorwf	3980,w,c	;volatile
  8096  00137C  6E8C               	movwf	3980,c	;volatile
  8097                           
  8098                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8099  00137E  968C               	bcf	3980,3,c	;volatile
  8100                           
  8101                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8102  001380  0E14               	movlw	20
  8103  001382                     u3697:
  8104  001382  2EE8               	decfsz	wreg,f,c
  8105  001384  D7FE               	bra	u3697
  8106  001386  D000               	nop2	
  8107                           
  8108                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8109  001388  868C               	bsf	3980,3,c	;volatile
  8110                           
  8111                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8112  00138A  0E14               	movlw	20
  8113  00138C                     u3707:
  8114  00138C  2EE8               	decfsz	wreg,f,c
  8115  00138E  D7FE               	bra	u3707
  8116  001390  D000               	nop2	
  8117  001392  0012               	return		;funcret
  8118  001394                     __end_of_lcdNibble:
  8119                           	opt stack 0
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           intcon	equ	0xFF2
  8127                           intcon3	equ	0xFF0
  8128                           postinc0	equ	0xFEE
  8129                           wreg	equ	0xFE8
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _keypressed *****************
  8138 ;; Defined at:
  8139 ;;		line 516 in file "main.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  keypress        1   14[COMRAM] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;Total ram usage:       15 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		Interrupt level 2
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	intcode
  8167  000008                     __pintcode:
  8168                           	opt stack 0
  8169  000008                     _keypressed:
  8170                           	opt stack 25
  8171                           
  8172                           ;incstack = 0
  8173  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8174  00000A  EDA3  F007         	call	int_func,f	;refresh shadow registers
  8175                           tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           prodh	equ	0xFF4
  8180                           prodl	equ	0xFF3
  8181                           intcon	equ	0xFF2
  8182                           intcon3	equ	0xFF0
  8183                           postinc0	equ	0xFEE
  8184                           wreg	equ	0xFE8
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192                           	psect	intcode_body
  8193  000F46                     __pintcode_body:
  8194                           	opt stack 25
  8195  000F46                     int_func:
  8196                           	opt stack 25
  8197  000F46  0006               	pop		; remove dummy address from shadow register refresh
  8198  000F48  CFFA F001          	movff	pclath,??_keypressed
  8199  000F4C  CFFB F002          	movff	pclatu,??_keypressed+1
  8200  000F50  CFE9 F003          	movff	fsr0l,??_keypressed+2
  8201  000F54  CFEA F004          	movff	fsr0h,??_keypressed+3
  8202  000F58  CFE1 F005          	movff	fsr1l,??_keypressed+4
  8203  000F5C  CFE2 F006          	movff	fsr1h,??_keypressed+5
  8204  000F60  CFD9 F007          	movff	fsr2l,??_keypressed+6
  8205  000F64  CFDA F008          	movff	fsr2h,??_keypressed+7
  8206  000F68  CFF3 F009          	movff	prodl,??_keypressed+8
  8207  000F6C  CFF4 F00A          	movff	prodh,??_keypressed+9
  8208  000F70  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  8209  000F74  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  8210  000F78  CFF8 F00D          	movff	tblptru,??_keypressed+12
  8211  000F7C  CFF5 F00E          	movff	tablat,??_keypressed+13
  8212                           
  8213                           ;main.c: 518: if (INT1IF)
  8214  000F80  A0F0               	btfss	intcon3,0,c	;volatile
  8215  000F82  D01C               	goto	i2l318
  8216  000F84                     i2l2297:
  8217                           
  8218                           ;main.c: 521: {
  8219                           ;main.c: 522: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8220  000F84  3881               	swapf	3969,w,c	;volatile
  8221  000F86  0B0F               	andlw	15
  8222  000F88  0B0F               	andlw	15
  8223  000F8A  6E0F               	movwf	keypressed@keypress,c
  8224                           
  8225                           ;main.c: 523: if (keypress == 0b1101)
  8226  000F8C  0E0D               	movlw	13
  8227  000F8E  180F               	xorwf	keypressed@keypress,w,c
  8228  000F90  A4D8               	btfss	status,2,c
  8229  000F92  D7F8               	goto	i2l2297
  8230                           
  8231                           ;main.c: 524: {
  8232                           ;main.c: 525: LATA = 0x00;
  8233  000F94  0E00               	movlw	0
  8234  000F96  6E89               	movwf	3977,c	;volatile
  8235                           
  8236                           ;main.c: 526: LATB = 0x00;
  8237  000F98  0E00               	movlw	0
  8238  000F9A  6E8A               	movwf	3978,c	;volatile
  8239                           
  8240                           ;main.c: 527: LATC = 0x00;
  8241  000F9C  0E00               	movlw	0
  8242  000F9E  6E8B               	movwf	3979,c	;volatile
  8243                           
  8244                           ;main.c: 528: LATD = 0x00;
  8245  000FA0  0E00               	movlw	0
  8246  000FA2  6E8C               	movwf	3980,c	;volatile
  8247                           
  8248                           ;main.c: 529: LATE = 0x00;
  8249  000FA4  0E00               	movlw	0
  8250  000FA6  6E8D               	movwf	3981,c	;volatile
  8251                           
  8252                           ;main.c: 530: LATCbits.LATC6 = 0;
  8253  000FA8  9C8B               	bcf	3979,6,c	;volatile
  8254                           
  8255                           ;main.c: 531: LATBbits.LATB0 = 0;
  8256  000FAA  908A               	bcf	3978,0,c	;volatile
  8257                           
  8258                           ;main.c: 532: state = FINISH;
  8259  000FAC  0E02               	movlw	2
  8260  000FAE  6E4B               	movwf	_state,c
  8261                           
  8262                           ;main.c: 533: runResult = 0;
  8263  000FB0  0E00               	movlw	0
  8264  000FB2  6E46               	movwf	_runResult+1,c
  8265  000FB4  0E00               	movlw	0
  8266  000FB6  6E45               	movwf	_runResult,c
  8267                           
  8268                           ;main.c: 534: (INTCONbits.GIE = 0);
  8269  000FB8  9EF2               	bcf	intcon,7,c	;volatile
  8270                           
  8271                           ;main.c: 536: }
  8272                           ;main.c: 537: }
  8273                           ;main.c: 538: INT1IF = 0;
  8274                           
  8275                           ;main.c: 535: break;
  8276  000FBA  90F0               	bcf	intcon3,0,c	;volatile
  8277  000FBC                     i2l318:
  8278  000FBC  C00E  FFF5         	movff	??_keypressed+13,tablat
  8279  000FC0  C00D  FFF8         	movff	??_keypressed+12,tblptru
  8280  000FC4  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  8281  000FC8  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  8282  000FCC  C00A  FFF4         	movff	??_keypressed+9,prodh
  8283  000FD0  C009  FFF3         	movff	??_keypressed+8,prodl
  8284  000FD4  C008  FFDA         	movff	??_keypressed+7,fsr2h
  8285  000FD8  C007  FFD9         	movff	??_keypressed+6,fsr2l
  8286  000FDC  C006  FFE2         	movff	??_keypressed+5,fsr1h
  8287  000FE0  C005  FFE1         	movff	??_keypressed+4,fsr1l
  8288  000FE4  C004  FFEA         	movff	??_keypressed+3,fsr0h
  8289  000FE8  C003  FFE9         	movff	??_keypressed+2,fsr0l
  8290  000FEC  C002  FFFB         	movff	??_keypressed+1,pclatu
  8291  000FF0  C001  FFFA         	movff	??_keypressed,pclath
  8292  000FF4  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8293  000FF6  0011               	retfie		f
  8294  000FF8                     __end_of_keypressed:
  8295                           	opt stack 0
  8296                           pclatu	equ	0xFFB
  8297                           pclath	equ	0xFFA
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           intcon	equ	0xFF2
  8305                           intcon3	equ	0xFF0
  8306                           postinc0	equ	0xFEE
  8307                           fsr0h	equ	0xFEA
  8308                           fsr0l	equ	0xFE9
  8309                           wreg	equ	0xFE8
  8310                           fsr1h	equ	0xFE2
  8311                           fsr1l	equ	0xFE1
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           fsr2h	equ	0xFDA
  8316                           fsr2l	equ	0xFD9
  8317                           status	equ	0xFD8
  8318                           pclatu	equ	0xFFB
  8319                           pclath	equ	0xFFA
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           intcon	equ	0xFF2
  8327                           intcon3	equ	0xFF0
  8328                           postinc0	equ	0xFEE
  8329                           fsr0h	equ	0xFEA
  8330                           fsr0l	equ	0xFE9
  8331                           wreg	equ	0xFE8
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341                           	psect	rparam
  8342  0000                     pclatu	equ	0xFFB
  8343                           pclath	equ	0xFFA
  8344                           tblptru	equ	0xFF8
  8345                           tblptrh	equ	0xFF7
  8346                           tblptrl	equ	0xFF6
  8347                           tablat	equ	0xFF5
  8348                           prodh	equ	0xFF4
  8349                           prodl	equ	0xFF3
  8350                           intcon	equ	0xFF2
  8351                           intcon3	equ	0xFF0
  8352                           postinc0	equ	0xFEE
  8353                           fsr0h	equ	0xFEA
  8354                           fsr0l	equ	0xFE9
  8355                           wreg	equ	0xFE8
  8356                           fsr1h	equ	0xFE2
  8357                           fsr1l	equ	0xFE1
  8358                           indf2	equ	0xFDF
  8359                           postinc2	equ	0xFDE
  8360                           postdec2	equ	0xFDD
  8361                           fsr2h	equ	0xFDA
  8362                           fsr2l	equ	0xFD9
  8363                           status	equ	0xFD8
  8364                           
  8365                           	psect	temp
  8366  00004F                     btemp:
  8367                           	opt stack 0
  8368  00004F                     	ds	1
  8369  0000                     int$flags	set	btemp
  8370                           pclatu	equ	0xFFB
  8371                           pclath	equ	0xFFA
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           intcon3	equ	0xFF0
  8380                           postinc0	equ	0xFEE
  8381                           fsr0h	equ	0xFEA
  8382                           fsr0l	equ	0xFE9
  8383                           wreg	equ	0xFE8
  8384                           fsr1h	equ	0xFE2
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8


Data Sizes:
    Strings     272
    Constant    42
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      78
    BANK0           128     46      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eeprom_LogResult@data	PTR unsigned char  size(2) Largest target is 8
		 -> executingState@res(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[15]), STR_17(CODE[15]), STR_16(CODE[15]), STR_15(CODE[12]), 
		 -> STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[6]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[19]), STR_3(CODE[17]), 
		 -> STR_2(CODE[15]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@time	PTR int  size(2) Largest target is 14
		 -> starttime(BANK0[14]), time(BANK0[14]), 

    eeprom_GetLog@res	PTR int  size(2) Largest target is 1
		 -> logdata(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_fixLCD
    _eeprom_GetLog->_eeprom_ReadByte
    _fixLCD->_printf
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _executingState->_printf
    _update_lcd->_printf
    _get_timeDif->_get_time
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _eeprom_LogResult->_eeprom_WriteByte
    _dispenseSnCan->_servoRotate90
    _dispenseAlCan->_servoRotate90
    _eeprom_initialize->_eeprom_WriteByte
    _newestAddress->_eeprom_ReadByte
    _debugState->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executingState

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   61934
                    _I2C_Master_Init
                         _debugState
                  _eeprom_initialize
                     _executingState
                        _finishState
                             _fixLCD
                            _initLCD
                           _logState
                          _mainState
 ---------------------------------------------------------------------------------
 (1) _mainState                                            2     2      0    7533
                                             51 COMRAM     2     2      0
                           _get_time
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (1) _logState                                             4     4      0    7204
                                             51 COMRAM     4     4      0
                      _eeprom_GetLog
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _eeprom_GetLog                                        9     5      4     846
                                             17 COMRAM     9     5      4
                    _eeprom_ReadByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (1) _fixLCD                                              13    13      0    8025
                                             51 COMRAM    13    13      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             28 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _finishState                                          4     4      0    6290
                                             51 COMRAM     4     4      0
                            _readKey
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _readKey                                              5     3      2      69
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _executingState                                      49    49      0   24383
                                             51 COMRAM     3     3      0
                                              0 BANK0     46    46      0
                             ___wmul
                      _dispenseAlCan
                      _dispenseSnCan
                   _eeprom_LogResult
                           _get_time
                        _get_timeDif
                            _lcdInst
                             _printf
                          _readAlBot
                          _readAlTop
                          _readSnBot
                       _readSnSensor
                          _readSnTop
                       _servoRotate0
                       _servoRotate1
                       _servoRotate2
                       _servoRotate4
                      _servoRotate90
                     _servoRotate90n
                     _servoRotateArm
                         _update_lcd
 ---------------------------------------------------------------------------------
 (2) _update_lcd                                           0     0      0    6187
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         6     4      2     330
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _readSnTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnSensor                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readSnBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlTop                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAlBot                                            2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_timeDif                                         23    21      2    3598
                                             23 COMRAM    23    21      2
                             ___wmul
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1181
                                             18 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                             16 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             16 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_LogResult                                     5     3      2    1012
                                             18 COMRAM     5     3      2
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (2) _dispenseSnCan                                        2     2      0     598
                                             21 COMRAM     2     2      0
                       _servoRotate1
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate1                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _dispenseAlCan                                        2     2      0     598
                                             21 COMRAM     2     2      0
                       _servoRotate2
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        6     4      2     407
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate2                                         5     3      2     191
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _eeprom_initialize                                    0     0      0     771
                   _eeprom_WriteByte
                      _newestAddress
 ---------------------------------------------------------------------------------
 (3) _newestAddress                                        0     0      0     216
                    _eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (4) _eeprom_ReadByte                                      2     0      2     216
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_WriteByte                                     3     0      3     555
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _debugState                                           2     2      0    7093
                                             51 COMRAM     2     2      0
                            _lcdInst
                             _printf
                       _servoRotate4
                     _servoRotate90n
                     _servoRotateArm
 ---------------------------------------------------------------------------------
 (2) _servoRotateArm                                      11     9      2      77
                                             15 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate90n                                       6     4      2     561
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate4                                         5     3      2     268
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    5992
                                             27 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1926
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _debugState
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _servoRotate4
     _servoRotate90n
     _servoRotateArm
   _eeprom_initialize
     _eeprom_WriteByte
     _newestAddress
       _eeprom_ReadByte
   _executingState
     ___wmul
     _dispenseAlCan
       _servoRotate2
       _servoRotate90
     _dispenseSnCan
       _servoRotate1
       _servoRotate90
     _eeprom_LogResult
       _eeprom_WriteByte
       _newestAddress
         _eeprom_ReadByte
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _get_timeDif
       ___wmul
       _get_time
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readAlBot
     _readAlTop
     _readSnBot
     _readSnSensor
     _readSnTop
     _servoRotate0
     _servoRotate1
     _servoRotate2
     _servoRotate4
     _servoRotate90
     _servoRotate90n
     _servoRotateArm
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _finishState
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _fixLCD
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _logState
     _eeprom_GetLog
       _eeprom_ReadByte
       _newestAddress
         _eeprom_ReadByte
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
   _mainState
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _readKey
     _update_lcd
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2E      4A       5       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      34        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 04:09:47 2017

              ?_get_timeDif 0018                          l34 186A                ?_finishState 0001  
           readKey@keypress 0012         ___wmul@multiplicand 0012                 __CFG_BORV$3 000000  
             servoRotate0@i 0014               servoRotate1@i 0013               servoRotate2@i 0013  
             servoRotate4@i 0013                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000  
                       l220 14EC                         l217 14E0                         l218 150A  
                       l501 0E94                         l333 1862                         l510 0EEE  
                       l502 0E98                         l511 0EF2                         l503 0E9C  
                       l504 0EA0                         l433 15CA                         l506 0EE2  
                       l434 15A2                         l354 147E                         l339 1772  
                       l427 1684                         l267 058A                         l444 16C2  
                       l508 0EE6                         l428 165E                         l445 169C  
                       l509 0EEA                         l517 1220                         l461 0D0C  
                       l470 0D68                         l462 0D10                         l471 0D6C  
                       l463 0D14                         l359 12E2                         l464 0D18  
                       l456 0DB4                         l481 0DD0                         l297 0A7A  
                       l490 0E2C                         l482 0DD4                         l466 0D5C  
                       l491 0E30                         l483 0DD8                         l459 0D08  
                       l484 0DDC                         l476 0E78                         l468 0D60  
                       l469 0D64                         l486 0E20                         l575 06AA  
                       l479 0DCC                         l496 0F38                         l488 0E24  
                       l489 0E28                         l499 0E90                         l967 118E  
              __CFG_CPB$OFF 000000                         _PEN 007E2A                __CFG_CPD$OFF 000000  
                       _SEN 007E28              ?_dispenseAlCan 0001                         prod 000FF3  
                       wreg 000FE8              ?_dispenseSnCan 0001              servoRotate90@i 0014  
              __CFG_LVP$OFF 000000       __end_of_newestAddress 188A                __CFG_WDT$OFF 000000  
                      l1020 13DC                        l1030 158E                        l4025 17EA  
                      l4107 1464                        l4035 1832                        l4123 12AE  
                      l4131 1484                        l4045 181A                        l4221 024A  
                      l4055 184A                        l4303 0436                        l4119 129E  
                      l4305 0440                        l4241 02C0                        l4233 0294  
                      l2801 14FC                        l2721 1150                        l4153 14BA  
                      l4145 14AE                        l4331 04D4                        l4323 04AE  
                      l4093 124E                        l4421 11EA                        l4077 1802  
                      l4237 02AA                        l4229 027E                        l2717 1140  
                      l3711 067C                        l4255 0312                        l2719 114C  
                      l4097 125A                        l4353 055A                        l4337 0500  
                      l2729 1180                        l3803 0892                        l3723 06D8  
                      l3707 0678                        l4347 0538                        l4275 0382  
                      l4355 0570                        l3645 13AA                        l3629 17B8  
                      l3805 08A2                        l3741 0722                        l4357 0586  
                      l4285 03C6                        l4269 0364                        l4373 1638  
                      l4453 097A                        l4445 093E                        l4541 1060  
                      l3647 13B2                        l3807 08A8                        l3743 0726  
                      l3727 06F2                        l3815 10CC                        l3903 0BCE  
                      l4295 0404                        l4543 1066                        l4551 1076  
                      l3657 13D2                        l3649 13B6                        l3673 1584  
                      l3665 1564                        l3729 06F6                        l3809 08B0  
                      l3825 10FA                        l3921 0C90                        l4449 0972  
                      l4385 13F2                        l4545 106C                        l3667 156C  
                      l3771 07A8                        l3683 05C8                        l3851 0E10  
                      l3819 10D4                        l3931 0CC6                        l3915 0C50  
                      l4459 0996                        l4547 1072                        l4539 105A  
                      l3669 1570                        l3765 077C                        l3757 0752  
                      l3693 05EC                        l3597 1750                        l3925 0CA6  
                      l3909 0C2A                        l3783 07D4                        l3759 0762  
                      l3687 05D8                        l3855 0E34                        l3927 0CB2  
                      l3935 0CD4                        l4487 0A68                        l4399 1424  
                      l3785 07DC                        l3793 0802                        l3777 07BE  
                      l3769 07A0                        l3689 05E6                        l3857 0E64  
                      l3849 0DE0                        l3937 0CF0                        l3795 0808  
                      l3699 061A                        l3797 084C                        l3789 07F0  
                      l3973 0EF6            _eeprom_LogResult 1434                        l3975 0F26  
                      l3967 0EA4                        l3991 0D1C                        l3969 0ED4  
                      l3993 0D4C                        l3997 0D70                        l3999 0DA0  
                      STR_1 FFBF                        STR_2 FFDE                        STR_3 FFAE  
                      STR_4 FEEF                        STR_5 FF9D                        STR_6 FF7B  
                      STR_7 FF02                        STR_8 FF59                        STR_9 FF6A  
            eeprom_GetLog@i 0019                        u3005 00A6                        _LATA 000F89  
                      _LATB 000F8A                        _LATC 000F8B                        _LATD 000F8C  
                      _LATE 000F8D                        u3310 0A40                        u2370 174E  
                      u1730 150A                        u3330 0A56                        u3180 052A  
                      u3308 0A2A                        u3190 054E                        u3270 0A12  
                      u3407 154A                        u3328 0A42                        u3417 1622  
                      u3290 0A28                        u3507 0DA6                        u3427 01B2  
                      u3348 0A58                        u3517 16E6                        u2805 0AEC  
                      u3437 02EC                        u1685 1312                        u3607 11F8  
                      u3527 1666                        u3447 033E                        u3288 0A14  
                      u3617 1228                        u3537 1676                        u3457 0398  
                      u3707 138C                        u3627 123A                        u3547 1716  
                      u3467 0460                        u3637 0ED6                        u3557 0E16  
                      u3477 04DE                        u3397 1516                        u3647 0F2C  
                      u3567 0E6A                        u3487 0564                        u3657 16A4  
                      u3577 15AA                        u2785 0A98                        u3497 0D52  
                      u3667 16B4                        u3587 15BC                        u2795 0AC4  
                      _RCEN 007E2B                        u3677 1356                        u3597 11AC  
                      u3687 1360                        u3697 1382                        u2985 0042  
                      u2995 0076                        _RSEN 007E29                        _main 0FF8  
                      _keys FEC5                        _time 00BC                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 004F                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000             ??_servoRotate90 0012  
           ??_eeprom_GetLog 0016               __CFG_MCLRE$ON 000000             servoRotate90n@i 0014  
              ___param_bank 000000            ?_I2C_Master_Init 001D            ?_I2C_Master_Read 0001  
          ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001                       ?_main 0001  
                     _ACKEN 007E2C                       _ACKDT 007E2D                       _EEADR 000FA9  
                     STR_10 FF48        eeprom_WriteByte@data 0012                       STR_11 FFF9  
                     STR_12 FF8C                       STR_13 FF37                       STR_14 FF14  
                     STR_15 FFED                       STR_16 FFCF                       STR_17 FFDE  
                     STR_18 FF39                       STR_19 FF26                       _CMCON 000FB4  
           __end_of___lldiv 11A0                get_time@time 0013             __end_of___lwdiv 13E6  
           __end_of___lwmod 1598                       i2l318 0FBC                       _PORTB 000F81  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96         servoRotate90n@servo 0010  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000             __end_of_lcdInst 18A2  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000                       _alTab 0043  
           __end_of_initLCD 1556              __CFG_EBTRB$OFF 000000             __end_of_dpowers FEE0  
           __end_of_readKey 1510             __end_of_isdigit 17C0                       _state 004B  
                     _putch 188A            _eeprom_WriteByte 1756                       pclath 000FFA  
                     tablat 000FF5                       status 000FD8            ??_servoRotate90n 0012  
  __size_of_eeprom_ReadByte 0016              __CFG_PBADEN$ON 000000            ??_servoRotateArm 0012  
           __initialization 15D8                __end_of_main 1098                __end_of_keys FED6  
           ??_dispenseAlCan 0016                      ??_main 0041               __activetblptr 000002  
           ??_dispenseSnCan 0016           ?_I2C_Master_Start 0001           ?_I2C_Master_Write 0011  
         executingState@res 0094               ?_readSnSensor 0010          ??_I2C_Master_Start 0011  
                    _ADCON0 000FC2                      _ADCON1 000FC1          ??_I2C_Master_Write 0013  
                    _EEADRH 000FAA                      _EEDATA 000FA8                      _EECON2 000FA7  
                    ?_putch 0001            eeprom_GetLog@res 0014                      _INT1IE 007F83  
                    _INT1IF 007F80                      i2l2297 0F84                      _OSCCON 000FD3  
                    _SSPADD 000FC8                      _TRISC3 007CA3                      _TRISC4 007CA4  
                    _SSPBUF 000FC9              __CFG_XINST$OFF 000000            __end_of_get_time 111E  
                    ___wmul 177C              __CFG_STVREN$ON 000000                      _fixLCD 08CA  
                 ??___lldiv 0018      executingState@alLoaded 00A6                   ??___lwdiv 0014  
                 ??___lwmod 001B        __size_of_get_timeDif 014A            __end_of_logState 1434  
                    clear_0 15F6                      clear_1 1602                 logState@log 0034  
                 ??_lcdInst 0012                      _printf 05BE        __size_of_finishState 003E  
                 ??_initLCD 0013      executingState@hasLabel 00A2                   ??_readKey 0012  
              __pdataCOMRAM 004D                   ??_isdigit 0010                __mediumconst FEC4  
            ??_readSnSensor 0012                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8      executingState@snLoaded 00A4                  __accesstop 0080  
   __end_of__initialization 1608               ___rparam_used 000001      executingState@runCanAl 0082  
    executingState@runCanSn 0080              __pcstackCOMRAM 0001           servoRotate1@angle 0010  
         servoRotate2@angle 0010           ??_eeprom_ReadByte 0012    __end_of_eeprom_LogResult 1480  
         servoRotate4@angle 0010           servoRotate0@servo 0010               __end_of_putch 1896  
        __size_of_lcdNibble 0056        executingState@hasTab 009E          __size_of_mainState 0048  
                   ??_putch 0012                  __pbssBANK0 00AE           servoRotateArm@res 0017  
        __size_of_readAlBot 0018                  _debugState 11A0          __size_of_readAlTop 0018  
        __size_of_readSnBot 0018          __size_of_readSnTop 0018                     ?___wmul 0010  
                   ?_fixLCD 0001    __end_of_eeprom_WriteByte 177C                     ?_printf 001C  
   __size_of_executingState 05AC           eeprom_GetLog@back 0012           _eeprom_initialize 17C0  
        ?_eeprom_initialize 0001                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                   ?_get_time 0013                   ?_logState 0001  
       ??_eeprom_initialize 0013           __end_of_lcdNibble 1394            get_timeDif@h_one 001F  
          get_timeDif@h_ten 001D            get_timeDif@m_one 0023            get_timeDif@m_ten 0021  
                   __Hparam 0000            get_timeDif@s_one 0027            get_timeDif@s_ten 0025  
                   __Lparam 0000            get_timeDif@start 0018        __end_of_readSnSensor 180C  
     __end_of_servoRotate90 0E86       __end_of_eeprom_GetLog 12E4                     _alNoTab 0041  
                   ___lldiv 111E             __size_of___wmul 0026                     ___lwdiv 1394  
                   ___lwmod 1556             __size_of_fixLCD 01B2           __end_of_mainState 14C8  
    __size_of_newestAddress 000E                     __pcinit 15D8                     __ramtop 1000  
                   _lcdInst 1896                     __ptext0 0FF8                     __ptext1 1480  
                   __ptext2 13E6                     __ptext3 1284                     __ptext4 08CA  
                   __ptext5 1510                     __ptext6 12E4                     __ptext7 111E  
                   __ptext8 1616                     __ptext9 14C8           __end_of_readAlBot 1854  
         __end_of_readAlTop 183C             __size_of_printf 030C   __end_of_eeprom_initialize 17DC  
                   _initLCD 1510           __end_of_hexpowers FEE8           __end_of_readSnBot 1824  
                   _dpowers FED6           __end_of_readSnTop 17F4                     _readKey 14C8  
                   _snLabel 0047                     _isdigit 17A2                     _logdata 004C  
                   fixLCD@i 0035                     fixLCD@j 003E                  _keypressed 0008  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Read 0026    __size_of_I2C_Master_Wait 0012  
  __size_of_I2C_Master_Stop 0008                  fixLCD@time 0037                  ??_get_time 0015  
            __pintcode_body 0F46        end_of_initialization 1608                 ?_debugState 0001  
             __Lmediumconst FEC4                  ??_logState 0034                     int_func 0F46  
 __size_of_I2C_Master_Start 0008   __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0014  
           ___lldiv@counter 001C               ?_servoRotate0 0010               ?_servoRotate1 0010  
             ?_servoRotate2 0010               ?_servoRotate4 0010                     printf@c 0033  
                   printf@f 001C            I2C_Master_Init@c 001D            I2C_Master_Read@a 0011  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTAbits 000F80                   _PORTBbits 000F81                   _PORTCbits 000F82  
     __end_of_dispenseAlCan 1730           eeprom_LogResult@i 0016       __end_of_dispenseSnCan 1700  
                _update_lcd 0BC6               _newestAddress 187C                  _statictime FEE8  
      servoRotateArm@i_1044 0015         finishState@keypress 0036             _eeprom_ReadByte 1854  
               printf@width 0031              ??_servoRotate0 0012              ??_servoRotate1 0012  
            ??_servoRotate2 0012              ??_servoRotate4 0012               ??_get_timeDif 001A  
        servoRotate90@servo 0010               ??_finishState 0034              __end_of___wmul 17A2  
         ?_eeprom_LogResult 0013              __end_of_fixLCD 0A7C               __pidataCOMRAM 18BC  
   __size_of_servoRotate90n 00C0      eeprom_ReadByte@address 0010     __size_of_servoRotateArm 0072  
            _executingState 0012          ??_eeprom_LogResult 0015  __size_of_eeprom_initialize 001C  
       __size_of_debugState 0072              __end_of_printf 08CA         start_initialization 15D8  
               ?_keypressed 0001              ?_newestAddress 0001           ??_I2C_Master_Init 0021  
         ??_I2C_Master_Read 0011           ??_I2C_Master_Wait 0010           ??_I2C_Master_Stop 0011  
     __size_of_readSnSensor 0018     eeprom_LogResult@address 0015            _get_timeDif$1733 002B  
          _get_timeDif$1734 002D          get_timeDif@start_s 0029                    ??___wmul 0014  
                  ??_fixLCD 0034      __end_of_executingState 05BE            __CFG_LPT1OSC$OFF 000000  
         ?_eeprom_WriteByte 0010                    ??_printf 0026         __end_of_get_timeDif 0BC6  
        ??_eeprom_WriteByte 0013                 __pbssCOMRAM 0041         __end_of_finishState 1654  
     executingState@timedif 00A0               __pcstackBANK0 0080                 ?_update_lcd 0001  
     executingState@start_s 009C                _readSnSensor 17F4     __end_of_eeprom_ReadByte 186A  
              _isdigit$1348 0011           __size_of_get_time 0086         executingState@h_one 0086  
       executingState@h_ten 0084         executingState@m_one 008A         executingState@m_ten 0088  
       executingState@s_one 008E         executingState@s_ten 008C            _I2C_Master_Start 18B4  
          _I2C_Master_Write 18A2           __size_of_logState 004E         _executingState$1735 0090  
       _executingState$1736 0092            ___lwdiv@dividend 0010           __CFG_CCP2MX$PORTC 000000  
       __size_of_keypressed 0FF0                   __pintcode 0008               __pmediumconst FEC4  
                 _lcdNibble 133E                    ?___lldiv 0010                    ?___lwdiv 0010  
                  ?___lwmod 0017             ?_executingState 0001                    ?_lcdInst 0001  
                  ?_initLCD 0001                   _mainState 1480                    ?_readKey 0010  
                  ?_isdigit 0001     eeprom_WriteByte@address 0010                   _readAlBot 183C  
                 _readAlTop 1824             ??_newestAddress 0012        __end_of_servoRotate0 0DC2  
      __end_of_servoRotate1 1692        __end_of_servoRotate2 15D8        __end_of_servoRotate4 16D0  
                 _hexpowers FEE0                   _readSnBot 180C            ___lwdiv@quotient 0015  
                 _readSnTop 17DC              __size_of_putch 000C                   _snNoLabel 0049  
              ??_debugState 0034              ___wmul@product 0014                    _LATAbits 000F89  
                  _LATBbits 000F8A                    _LATCbits 000F8B                    _LATDbits 000F8C  
                  _LATEbits 000F8D                   _loopcount 004D                    _PIR2bits 000FA1  
          __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001                 _get_timeDif 0A7C  
       __size_of_update_lcd 0138                 _finishState 1616              _servoRotate90n 0E86  
            _servoRotateArm 1212                   _runResult 0045           ___wmul@multiplier 0010  
             lcdNibble@data 0011                  ?_mainState 0001                  printf@flag 0030  
                 _starttime 00AE               lcdNibble@temp 0010          __end_of_debugState 1212  
                printf@prec 002D                   get_time@i 0017                  ?_readAlBot 0010  
                ?_readAlTop 0010                  ?_readSnBot 0010                  ?_readSnTop 0010  
          ?_eeprom_ReadByte 0010         I2C_Master_Read@temp 0012      __size_of_servoRotate90 00C4  
    __size_of_eeprom_GetLog 0060                  _EECON1bits 000FA6          keypressed@keypress 000F  
                  __Hrparam 0000                    __Lrparam 0000          __CFG_BOREN$SBORDIS 000000  
    __end_of_servoRotate90n 0F46      __end_of_servoRotateArm 1284            __size_of___lldiv 0082  
          __size_of___lwdiv 0052            __size_of___lwmod 0042            __size_of_lcdInst 000C  
  executingState@alInSensor 00AA             _I2C_Master_Init 12E4             _I2C_Master_Read 1730  
          __size_of_initLCD 0046             _I2C_Master_Wait 186A             _I2C_Master_Stop 18AC  
          __size_of_readKey 0048                ??_keypressed 0001            __size_of_isdigit 001E  
           ___lwdiv@divisor 0012             ___lwdiv@counter 0014                    __ptext10 0012  
                  __ptext11 0BC6                    __ptext20 18A2                    __ptext12 0CFE  
                  __ptext21 18AC                    __ptext13 17DC                    __ptext30 1598  
                  __ptext22 18B4                    __ptext14 17F4                    __ptext31 17C0  
                  __ptext23 1730                    __ptext15 180C                    __ptext40 188A  
                  __ptext32 187C                    __ptext24 186A                    __ptext16 1824  
                  __ptext41 17A2                    __ptext33 1854                    __ptext25 1434  
                  __ptext17 183C                    __ptext42 177C                    __ptext34 1756  
                  __ptext26 16D0                    __ptext18 0A7C                    __ptext43 1556  
                  __ptext35 11A0                    __ptext27 1654                    __ptext19 1098  
                  __ptext44 1394                    __ptext36 1212                    __ptext28 1700  
                  __ptext45 1896                    __ptext37 0E86                    __ptext29 0DC2  
                  __ptext46 133E                    __ptext38 1692                    __ptext39 05BE  
                  _get_time 1098   __size_of_eeprom_LogResult 004C        eeprom_GetLog@address 0018  
         mainState@keypress 0034                    _logState 13E6               __size_of_main 00A0  
               fixLCD@i_596 0040      __size_of_dispenseAlCan 0030      __size_of_dispenseSnCan 0030  
               ??_lcdNibble 0010             ?_servoRotate90n 0010          __end_of_keypressed 0FF8  
                  int$flags 004F               _servoRotate90 0DC2             ?_servoRotateArm 0010  
             _eeprom_GetLog 1284                   printf@idx 002A                   printf@val 002E  
     __size_of_servoRotate0 00C4       __size_of_servoRotate1 003E       __size_of_servoRotate2 0040  
     __size_of_servoRotate4 003E                 ??_mainState 0034                   putch@data 0012  
  __end_of_I2C_Master_Start 18BC    __end_of_I2C_Master_Write 18AC                  _INTCONbits 000FF2  
               ??_readAlBot 0012                    readKey@i 0013                 ??_readAlTop 0012  
              ??_update_lcd 0034                 ??_readSnBot 0012                    isdigit@c 0012  
               ??_readSnTop 0012   __size_of_eeprom_WriteByte 0026                    intlevel2 0000  
          ___lwmod@dividend 0017            ___lldiv@dividend 0010            ??_executingState 0034  
            ?_servoRotate90 0010                _servoRotate0 0CFE                _servoRotate1 1654  
              _servoRotate2 1598                _servoRotate4 1692              ?_eeprom_GetLog 0012  
                  printf@ap 002B          __end_of_update_lcd 0CFE     __end_of_I2C_Master_Init 133E  
   __end_of_I2C_Master_Read 1756     __end_of_I2C_Master_Wait 187C     __end_of_I2C_Master_Stop 18B4  
               lcdInst@data 0012        eeprom_LogResult@data 0013            logState@keypress 0036  
        __end_of_statictime FEEF            ___lldiv@quotient 0018           I2C_Master_Write@d 0011  
           ___lwmod@divisor 0019             ___lwmod@counter 001B               _dispenseAlCan 1700  
  executingState@emptyCount 00AC               _dispenseSnCan 16D0    executingState@snInSensor 00A8  
